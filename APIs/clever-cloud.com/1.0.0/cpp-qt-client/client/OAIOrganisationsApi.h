/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganisationsApi_H
#define OAI_OAIOrganisationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon.h"
#include "OAIAddonMigration.h"
#include "OAIAddonProviderSso.h"
#include "OAIAppInstance.h"
#include "OAIApplication.h"
#include "OAIBody.h"
#include "OAIConso.h"
#include "OAIConsumer.h"
#include "OAICredits.h"
#include "OAIDeployment.h"
#include "OAIDeploymentSummary.h"
#include "OAIEnv.h"
#include "OAIError.h"
#include "OAIFeature.h"
#include "OAILinkedAppEnv.h"
#include "OAIListEnv.h"
#include "OAIObject.h"
#include "OAIOrganisation.h"
#include "OAIPaymentData.h"
#include "OAIPlan.h"
#include "OAIProvider.h"
#include "OAISchema1.h"
#include "OAISchema2.h"
#include "OAISecret.h"
#include "OAISso.h"
#include "OAISupernovaInstanceView.h"
#include "OAIVhost.h"
#include "OAIWannabeAddon.h"
#include "OAIWannabeAddonProvider.h"
#include "OAIWannabeApplication.h"
#include "OAIWannabeConsumer.h"
#include "OAIWannabeEnv.h"
#include "OAIWannabeFeature.h"
#include "OAIWannabeOrganisation.h"
#include "OAIWannabePlan.h"
#include "OAIWannabePlanFeature.h"
#include "OAI_organisations__id__addons__addonId__migrations_post_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganisationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganisationsApi(const int timeOut = 0);
    ~OAIOrganisationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  oai_schema2 OAISchema2 [optional]
    */
    virtual void createNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<OAISchema2> &oai_schema2 = ::OpenAPI::OptionalParam<OAISchema2>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroup(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(const QString &id, const QString &feature_id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(const QString &id, const QString &feature_name, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdAddonsAddonId(const QString &id, const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(const QString &id, const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void deleteOrganisationsIdConsumersKey(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void deleteOrganisationsIdMembersUserId(const QString &id, const QString &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsRecurring(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsId(const QString &id);

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupStream(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfigurationStream(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfiguration(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdFeatures(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdPlans(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdTags(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderId(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddonproviders(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdApplications(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdEnv(const QString &id, const QString &addon_id);

    /**
    * @param[in]  provider_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdSso(const QString &provider_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdTags(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddons(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddonsEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependencies(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependents(const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void getOrganisationsIdApplicationsAppIdDeployments(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdTags(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhosts(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplications(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getOrganisationsIdConsumersKeySecret(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getOrganisationsIdConsumersKey(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdConsumers(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void getOrganisationsIdConsumptions(const QString &id, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdCredits(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdDeployments(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdInstances(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdMembers(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdPaymentInfo(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void getOrganisationsIdPaymentsBillingsBidPdf(const QString &id, const QString &bid, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillings(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  price QString [required]
    */
    virtual void getOrganisationsIdPaymentsFullPricePrice(const QString &id, const QString &price);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsId(const QString &id);

    /**
    * @param[in]  user QString [optional]
    */
    virtual void getOrganisations(const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupMembers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupPeers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroups(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void organisationsIdAddonprovidersProviderIdDelete(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  deployment_id QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void organisationsIdAddonsAddonIdInstancesGet(const QString &id, const QString &addon_id, const ::OpenAPI::OptionalParam<QString> &deployment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdInstancesInstanceIdGet(const QString &instance_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  migration_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsMigrationIdGet(const QString &migration_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_organisations__id__addons__addon_id__migrations_post_request OAI_organisations__id__addons__addonId__migrations_post_request [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsPost(const QString &id, const QString &addon_id, const OAI_organisations__id__addons__addonId__migrations_post_request &oai_organisations__id__addons__addon_id__migrations_post_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdSsoGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void organisationsIdAddonsPreordersPost(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchesGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBuildflavorPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDependenciesEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(const QString &app_id, const QString &deployment_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdInstancesInstanceIdGet(const QString &instance_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsBillingsUnpaidGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_payment_data OAIPaymentData [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultPut(const QString &id, const OAIPaymentData &oai_payment_data);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsGet(const QString &id);

    /**
    * @param[in]  m_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsMIdDelete(const QString &m_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void organisationsIdPaymentsMethodsPost(const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsRecurringGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_feature OAIWannabeFeature [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdFeatures(const QString &id, const QString &provider_id, const OAIWannabeFeature &oai_wannabe_feature);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdPlans(const QString &id, const QString &provider_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdTesters(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon_provider OAIWannabeAddonProvider [required]
    */
    virtual void postOrganisationsIdAddonproviders(const QString &id, const OAIWannabeAddonProvider &oai_wannabe_addon_provider);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void postOrganisationsIdAddons(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  commit QString [optional]
    */
    virtual void postOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &commit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void postOrganisationsIdApplications(const QString &id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void postOrganisationsIdConsumers(const QString &id, const OAIWannabeConsumer &oai_wannabe_consumer);

    /**
    * @param[in]  id QString [required]
    * @param[in]  body OAISchema2 [required]
    * @param[in]  invitation_key QString [optional]
    */
    virtual void postOrganisationsIdMembers(const QString &id, const OAISchema2 &body, const ::OpenAPI::OptionalParam<QString> &invitation_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void postOrganisationsIdPaymentsBillings(const QString &id);

    /**
    * @param[in]  oai_wannabe_organisation OAIWannabeOrganisation [required]
    */
    virtual void postOrganisations(const OAIWannabeOrganisation &oai_wannabe_organisation);

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  oai_wannabe_plan_feature OAIWannabePlanFeature [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(const QString &id, const QString &feature_name, const QString &provider_id, const QString &plan_id, const OAIWannabePlanFeature &oai_wannabe_plan_feature);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_addon_provider OAIWannabeAddonProvider [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderId(const QString &id, const QString &provider_id, const OAIWannabeAddonProvider &oai_wannabe_addon_provider);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void putOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void putOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  id QString [required]
    */
    virtual void putOrganisationsIdAvatar(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void putOrganisationsIdConsumersKey(const QString &id, const QString &key, const OAIWannabeConsumer &oai_wannabe_consumer);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  body OAISchema2 [required]
    */
    virtual void putOrganisationsIdMembersUserId(const QString &id, const QString &user_id, const OAISchema2 &body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void putOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_organisation OAIWannabeOrganisation [required]
    */
    virtual void putOrganisationsId(const QString &id, const OAIWannabeOrganisation &oai_wannabe_organisation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupStreamCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationStreamCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdPlansCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdSsoCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependenciesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersKeySecretCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumptionsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdCreditsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdMembersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupMembersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupPeersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupsCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonprovidersProviderIdDeleteCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdSsoGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsPreordersPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdPlansCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdTestersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdConsumersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdMembersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAvatarCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createNetworkGroupExternalPeerSignal(QJsonValue summary);
    void createNetworkGroupMemberSignal();
    void createNetworkGroupSignal(QJsonValue summary);
    void deleteNetworkGroupExternalPeerSignal();
    void deleteNetworkGroupMemberSignal();
    void deleteNetworkGroupPeerSignal();
    void deleteNetworkGroupSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal();
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignal();
    void deleteOrganisationsIdAddonsAddonIdSignal();
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignal();
    void deleteOrganisationsIdApplicationsAppIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void deleteOrganisationsIdApplicationsAppIdSignal();
    void deleteOrganisationsIdConsumersKeySignal();
    void deleteOrganisationsIdMembersUserIdSignal();
    void deleteOrganisationsIdPaymentsBillingsBidSignal();
    void deleteOrganisationsIdPaymentsRecurringSignal();
    void deleteOrganisationsIdSignal();
    void getNetworkGroupMemberSignal(OAISchema1 summary);
    void getNetworkGroupPeerSignal(QJsonValue summary);
    void getNetworkGroupStreamSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignal(QJsonValue summary);
    void getNetworkGroupSignal(QJsonValue summary);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignal(QList<OAIFeature> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal(OAIPlan summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignal(QList<OAIPlan> summary);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdAddonprovidersProviderIdSignal(OAIProvider summary);
    void getOrganisationsIdAddonprovidersSignal(QList<OAIProvider> summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdSsoSignal(OAIAddonProviderSso summary);
    void getOrganisationsIdAddonsAddonIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void getOrganisationsIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignal(QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignal(QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignal(OAIVhost summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignal(QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void getOrganisationsIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdConsumersKeySecretSignal(OAISecret summary);
    void getOrganisationsIdConsumersKeySignal(OAIConsumer summary);
    void getOrganisationsIdConsumersSignal(QList<OAIConsumer> summary);
    void getOrganisationsIdConsumptionsSignal(OAIConso summary);
    void getOrganisationsIdCreditsSignal(OAICredits summary);
    void getOrganisationsIdDeploymentsSignal(OAIDeploymentSummary summary);
    void getOrganisationsIdInstancesSignal(OAIObject summary);
    void getOrganisationsIdMembersSignal(QList<OAISchema1> summary);
    void getOrganisationsIdPaymentInfoSignal();
    void getOrganisationsIdPaymentsBillingsBidPdfSignal();
    void getOrganisationsIdPaymentsBillingsBidSignal();
    void getOrganisationsIdPaymentsBillingsSignal();
    void getOrganisationsIdPaymentsFullPricePriceSignal();
    void getOrganisationsIdSignal(OAIOrganisation summary);
    void getOrganisationsSignal(QList<OAIOrganisation> summary);
    void listNetworkGroupMembersSignal(QList<OAISchema1> summary);
    void listNetworkGroupPeersSignal(QList<QJsonValue> summary);
    void listNetworkGroupsSignal(QList<QJsonValue> summary);
    void organisationsIdAddonprovidersProviderIdDeleteSignal();
    void organisationsIdAddonsAddonIdInstancesGetSignal(QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignal(OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignal(QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignal(OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignal(OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignal(OAISso summary);
    void organisationsIdAddonsPreordersPostSignal();
    void organisationsIdApplicationsAppIdBranchPutSignal();
    void organisationsIdApplicationsAppIdBranchesGetSignal();
    void organisationsIdApplicationsAppIdBuildflavorPutSignal();
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignal(QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvPutSignal();
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignal();
    void organisationsIdPaymentsBillingsUnpaidGetSignal();
    void organisationsIdPaymentsMethodsDefaultGetSignal();
    void organisationsIdPaymentsMethodsDefaultPutSignal();
    void organisationsIdPaymentsMethodsGetSignal();
    void organisationsIdPaymentsMethodsMIdDeleteSignal();
    void organisationsIdPaymentsMethodsPostSignal();
    void organisationsIdPaymentsMonthlyinvoiceGetSignal();
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignal();
    void organisationsIdPaymentsRecurringGetSignal();
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignal(OAIFeature summary);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignal(OAIPlan summary);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignal();
    void postOrganisationsIdAddonprovidersSignal(OAIProvider summary);
    void postOrganisationsIdAddonsSignal(OAIAddon summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignal();
    void postOrganisationsIdApplicationsAppIdInstancesSignal();
    void postOrganisationsIdApplicationsSignal(OAIApplication summary);
    void postOrganisationsIdConsumersSignal();
    void postOrganisationsIdMembersSignal();
    void postOrganisationsIdPaymentsBillingsSignal();
    void postOrganisationsSignal(OAIOrganisation summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignal();
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal(OAIPlan summary);
    void putOrganisationsIdAddonprovidersProviderIdSignal(OAIProvider summary);
    void putOrganisationsIdAddonsAddonIdTagsTagSignal();
    void putOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignal();
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void putOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void putOrganisationsIdAvatarSignal();
    void putOrganisationsIdConsumersKeySignal();
    void putOrganisationsIdMembersUserIdSignal();
    void putOrganisationsIdPaymentsBillingsBidSignal();
    void putOrganisationsIdSignal(OAIOrganisation summary);


    void createNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void createNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdSignalFull(OAIHttpRequestWorker *worker);
    void getNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker, OAISchema1 summary);
    void getNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeature> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlan> summary);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdAddonprovidersProviderIdSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void getOrganisationsIdAddonprovidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIProvider> summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdSsoSignalFull(OAIHttpRequestWorker *worker, OAIAddonProviderSso summary);
    void getOrganisationsIdAddonsAddonIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void getOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIVhost summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdConsumersKeySecretSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void getOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker, OAIConsumer summary);
    void getOrganisationsIdConsumersSignalFull(OAIHttpRequestWorker *worker, QList<OAIConsumer> summary);
    void getOrganisationsIdConsumptionsSignalFull(OAIHttpRequestWorker *worker, OAIConso summary);
    void getOrganisationsIdCreditsSignalFull(OAIHttpRequestWorker *worker, OAICredits summary);
    void getOrganisationsIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentSummary summary);
    void getOrganisationsIdInstancesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganisationsIdMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISchema1> summary);
    void getOrganisationsIdPaymentInfoSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void getOrganisationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganisation> summary);
    void listNetworkGroupMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISchema1> summary);
    void listNetworkGroupPeersSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void listNetworkGroupsSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void organisationsIdAddonprovidersProviderIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker, OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignalFull(OAIHttpRequestWorker *worker, OAISso summary);
    void organisationsIdAddonsPreordersPostSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIFeature summary);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void postOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void postOrganisationsIdConsumersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdMembersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void putOrganisationsIdAddonprovidersProviderIdSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void putOrganisationsIdAvatarSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);

    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalError() instead")
    void createNetworkGroupExternalPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalError() instead")
    void createNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalError() instead")
    void createNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalError() instead")
    void deleteNetworkGroupExternalPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalError() instead")
    void deleteNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalError() instead")
    void deleteNetworkGroupPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalError() instead")
    void deleteNetworkGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdConsumersKeySignalError() instead")
    void deleteOrganisationsIdConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdMembersUserIdSignalError() instead")
    void deleteOrganisationsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalError() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdSignalError() instead")
    void deleteOrganisationsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalError() instead")
    void getNetworkGroupMemberSignalE(OAISchema1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalError(OAISchema1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalError() instead")
    void getNetworkGroupPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalError() instead")
    void getNetworkGroupStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalError() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalError() instead")
    void getNetworkGroupWireGuardConfigurationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalError() instead")
    void getNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdFeaturesSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalE(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalError(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalE(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalError(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdTagsSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersSignalError() instead")
    void getOrganisationsIdAddonprovidersSignalE(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersSignalError(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalError() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSsoSignalError() instead")
    void getOrganisationsIdAddonsAddonIdSsoSignalE(OAIAddonProviderSso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSsoSignalError(OAIAddonProviderSso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalError() instead")
    void getOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalError() instead")
    void getOrganisationsIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalE(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalError(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(OAIVhost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(OAIVhost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalE(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalError(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalError() instead")
    void getOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalError() instead")
    void getOrganisationsIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySecretSignalError() instead")
    void getOrganisationsIdConsumersKeySecretSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySecretSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySignalError() instead")
    void getOrganisationsIdConsumersKeySignalE(OAIConsumer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySignalError(OAIConsumer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersSignalError() instead")
    void getOrganisationsIdConsumersSignalE(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersSignalError(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumptionsSignalError() instead")
    void getOrganisationsIdConsumptionsSignalE(OAIConso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumptionsSignalError(OAIConso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdCreditsSignalError() instead")
    void getOrganisationsIdCreditsSignalE(OAICredits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdCreditsSignalError(OAICredits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdDeploymentsSignalError() instead")
    void getOrganisationsIdDeploymentsSignalE(OAIDeploymentSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdDeploymentsSignalError(OAIDeploymentSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdInstancesSignalError() instead")
    void getOrganisationsIdInstancesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdInstancesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdMembersSignalError() instead")
    void getOrganisationsIdMembersSignalE(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdMembersSignalError(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentInfoSignalError() instead")
    void getOrganisationsIdPaymentInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalError() instead")
    void getOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalError() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdSignalError() instead")
    void getOrganisationsIdSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalError() instead")
    void getOrganisationsSignalE(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalError(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalError() instead")
    void listNetworkGroupMembersSignalE(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalError(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalError() instead")
    void listNetworkGroupPeersSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalError() instead")
    void listNetworkGroupsSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonprovidersProviderIdDeleteSignalError() instead")
    void organisationsIdAddonprovidersProviderIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonprovidersProviderIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalE(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalError(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalE(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalE(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalError(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalE(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalError() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalE(OAISso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalError(OAISso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalError() instead")
    void organisationsIdAddonsPreordersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalError() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalError() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalError() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalE(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalError(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalError() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalError() instead")
    void organisationsIdPaymentsMethodsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalError() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalError() instead")
    void organisationsIdPaymentsMethodsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalError() instead")
    void organisationsIdPaymentsRecurringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdFeaturesSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalE(OAIFeature summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalError(OAIFeature summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdPlansSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdTestersSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersSignalError() instead")
    void postOrganisationsIdAddonprovidersSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalError() instead")
    void postOrganisationsIdAddonsSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalError() instead")
    void postOrganisationsIdApplicationsSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdConsumersSignalError() instead")
    void postOrganisationsIdConsumersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdConsumersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdMembersSignalError() instead")
    void postOrganisationsIdMembersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdMembersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalError() instead")
    void postOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsSignalError() instead")
    void postOrganisationsSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalError() instead")
    void putOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAvatarSignalError() instead")
    void putOrganisationsIdAvatarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAvatarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdConsumersKeySignalError() instead")
    void putOrganisationsIdConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdMembersUserIdSignalError() instead")
    void putOrganisationsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdSignalError() instead")
    void putOrganisationsIdSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalErrorFull() instead")
    void createNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalErrorFull() instead")
    void createNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalErrorFull() instead")
    void createNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalErrorFull() instead")
    void deleteNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalErrorFull() instead")
    void deleteNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalErrorFull() instead")
    void deleteNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalErrorFull() instead")
    void deleteNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdConsumersKeySignalErrorFull() instead")
    void deleteOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdMembersUserIdSignalErrorFull() instead")
    void deleteOrganisationsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdSignalErrorFull() instead")
    void deleteOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalErrorFull() instead")
    void getNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalErrorFull() instead")
    void getNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalErrorFull() instead")
    void getNetworkGroupStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalErrorFull() instead")
    void getNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdTagsSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSsoSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdSsoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSsoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySecretSignalErrorFull() instead")
    void getOrganisationsIdConsumersKeySecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySignalErrorFull() instead")
    void getOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersSignalErrorFull() instead")
    void getOrganisationsIdConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumptionsSignalErrorFull() instead")
    void getOrganisationsIdConsumptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdCreditsSignalErrorFull() instead")
    void getOrganisationsIdCreditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdCreditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdDeploymentsSignalErrorFull() instead")
    void getOrganisationsIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdInstancesSignalErrorFull() instead")
    void getOrganisationsIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdMembersSignalErrorFull() instead")
    void getOrganisationsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentInfoSignalErrorFull() instead")
    void getOrganisationsIdPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalErrorFull() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdSignalErrorFull() instead")
    void getOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalErrorFull() instead")
    void getOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalErrorFull() instead")
    void listNetworkGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalErrorFull() instead")
    void listNetworkGroupPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalErrorFull() instead")
    void listNetworkGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonprovidersProviderIdDeleteSignalErrorFull() instead")
    void organisationsIdAddonprovidersProviderIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonprovidersProviderIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalErrorFull() instead")
    void organisationsIdAddonsPreordersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalErrorFull() instead")
    void organisationsIdPaymentsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdTestersSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdConsumersSignalErrorFull() instead")
    void postOrganisationsIdConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdMembersSignalErrorFull() instead")
    void postOrganisationsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void postOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsSignalErrorFull() instead")
    void postOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAvatarSignalErrorFull() instead")
    void putOrganisationsIdAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdConsumersKeySignalErrorFull() instead")
    void putOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdMembersUserIdSignalErrorFull() instead")
    void putOrganisationsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdSignalErrorFull() instead")
    void putOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
