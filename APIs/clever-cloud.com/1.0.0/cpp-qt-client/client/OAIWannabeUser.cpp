/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWannabeUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWannabeUser::OAIWannabeUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWannabeUser::OAIWannabeUser() {
    this->initializeModel();
}

OAIWannabeUser::~OAIWannabeUser() {}

void OAIWannabeUser::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_lang_isSet = false;
    m_lang_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIWannabeUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWannabeUser::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_lang_isValid = ::OpenAPI::fromJsonValue(m_lang, json[QString("lang")]);
    m_lang_isSet = !json[QString("lang")].isNull() && m_lang_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIWannabeUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWannabeUser::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_lang_isSet) {
        obj.insert(QString("lang"), ::OpenAPI::toJsonValue(m_lang));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_terms_isSet) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAIWannabeUser::getAddress() const {
    return m_address;
}
void OAIWannabeUser::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWannabeUser::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWannabeUser::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIWannabeUser::getCity() const {
    return m_city;
}
void OAIWannabeUser::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIWannabeUser::is_city_Set() const{
    return m_city_isSet;
}

bool OAIWannabeUser::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIWannabeUser::getCountry() const {
    return m_country;
}
void OAIWannabeUser::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIWannabeUser::is_country_Set() const{
    return m_country_isSet;
}

bool OAIWannabeUser::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIWannabeUser::getEmail() const {
    return m_email;
}
void OAIWannabeUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIWannabeUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIWannabeUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIWannabeUser::getLang() const {
    return m_lang;
}
void OAIWannabeUser::setLang(const QString &lang) {
    m_lang = lang;
    m_lang_isSet = true;
}

bool OAIWannabeUser::is_lang_Set() const{
    return m_lang_isSet;
}

bool OAIWannabeUser::is_lang_Valid() const{
    return m_lang_isValid;
}

QString OAIWannabeUser::getName() const {
    return m_name;
}
void OAIWannabeUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWannabeUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWannabeUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWannabeUser::getPassword() const {
    return m_password;
}
void OAIWannabeUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIWannabeUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIWannabeUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIWannabeUser::getPhone() const {
    return m_phone;
}
void OAIWannabeUser::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIWannabeUser::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIWannabeUser::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAIWannabeUser::isTerms() const {
    return m_terms;
}
void OAIWannabeUser::setTerms(const bool &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIWannabeUser::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIWannabeUser::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIWannabeUser::getZipcode() const {
    return m_zipcode;
}
void OAIWannabeUser::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIWannabeUser::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIWannabeUser::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIWannabeUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWannabeUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_password_isValid && m_terms_isValid && true;
}

} // namespace OpenAPI
