/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnv.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnv::OAIEnv(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnv::OAIEnv() {
    this->initializeModel();
}

OAIEnv::~OAIEnv() {}

void OAIEnv::initializeModel() {

    m_addon_id_isSet = false;
    m_addon_id_isValid = false;

    m_addon_name_isSet = false;
    m_addon_name_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAIEnv::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnv::fromJsonObject(QJsonObject json) {

    m_addon_id_isValid = ::OpenAPI::fromJsonValue(m_addon_id, json[QString("addon_id")]);
    m_addon_id_isSet = !json[QString("addon_id")].isNull() && m_addon_id_isValid;

    m_addon_name_isValid = ::OpenAPI::fromJsonValue(m_addon_name, json[QString("addon_name")]);
    m_addon_name_isSet = !json[QString("addon_name")].isNull() && m_addon_name_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("provider_id")]);
    m_provider_id_isSet = !json[QString("provider_id")].isNull() && m_provider_id_isValid;
}

QString OAIEnv::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnv::asJsonObject() const {
    QJsonObject obj;
    if (m_addon_id_isSet) {
        obj.insert(QString("addon_id"), ::OpenAPI::toJsonValue(m_addon_id));
    }
    if (m_addon_name_isSet) {
        obj.insert(QString("addon_name"), ::OpenAPI::toJsonValue(m_addon_name));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("provider_id"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

QString OAIEnv::getAddonId() const {
    return m_addon_id;
}
void OAIEnv::setAddonId(const QString &addon_id) {
    m_addon_id = addon_id;
    m_addon_id_isSet = true;
}

bool OAIEnv::is_addon_id_Set() const{
    return m_addon_id_isSet;
}

bool OAIEnv::is_addon_id_Valid() const{
    return m_addon_id_isValid;
}

QString OAIEnv::getAddonName() const {
    return m_addon_name;
}
void OAIEnv::setAddonName(const QString &addon_name) {
    m_addon_name = addon_name;
    m_addon_name_isSet = true;
}

bool OAIEnv::is_addon_name_Set() const{
    return m_addon_name_isSet;
}

bool OAIEnv::is_addon_name_Valid() const{
    return m_addon_name_isValid;
}

QList<OAIWannabeEnv> OAIEnv::getEnv() const {
    return m_env;
}
void OAIEnv::setEnv(const QList<OAIWannabeEnv> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIEnv::is_env_Set() const{
    return m_env_isSet;
}

bool OAIEnv::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIEnv::getProviderId() const {
    return m_provider_id;
}
void OAIEnv::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIEnv::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIEnv::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIEnv::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnv::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_addon_id_isValid && m_addon_name_isValid && m_env_isValid && m_provider_id_isValid && true;
}

} // namespace OpenAPI
