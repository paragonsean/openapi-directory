/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary_organisations_inner_applications_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary_organisations_inner_applications_inner::OAISummary_organisations_inner_applications_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary_organisations_inner_applications_inner::OAISummary_organisations_inner_applications_inner() {
    this->initializeModel();
}

OAISummary_organisations_inner_applications_inner::~OAISummary_organisations_inner_applications_inner() {}

void OAISummary_organisations_inner_applications_inner::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_instance_variant_isSet = false;
    m_instance_variant_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_variant_slug_isSet = false;
    m_variant_slug_isValid = false;
}

void OAISummary_organisations_inner_applications_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary_organisations_inner_applications_inner::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_instance_variant_isValid = ::OpenAPI::fromJsonValue(m_instance_variant, json[QString("instanceVariant")]);
    m_instance_variant_isSet = !json[QString("instanceVariant")].isNull() && m_instance_variant_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_variant_slug_isValid = ::OpenAPI::fromJsonValue(m_variant_slug, json[QString("variantSlug")]);
    m_variant_slug_isSet = !json[QString("variantSlug")].isNull() && m_variant_slug_isValid;
}

QString OAISummary_organisations_inner_applications_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary_organisations_inner_applications_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_instance_variant_isSet) {
        obj.insert(QString("instanceVariant"), ::OpenAPI::toJsonValue(m_instance_variant));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_variant_slug_isSet) {
        obj.insert(QString("variantSlug"), ::OpenAPI::toJsonValue(m_variant_slug));
    }
    return obj;
}

bool OAISummary_organisations_inner_applications_inner::isArchived() const {
    return m_archived;
}
void OAISummary_organisations_inner_applications_inner::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getCommit() const {
    return m_commit;
}
void OAISummary_organisations_inner_applications_inner::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getId() const {
    return m_id;
}
void OAISummary_organisations_inner_applications_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getInstanceType() const {
    return m_instance_type;
}
void OAISummary_organisations_inner_applications_inner::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getInstanceVariant() const {
    return m_instance_variant;
}
void OAISummary_organisations_inner_applications_inner::setInstanceVariant(const QString &instance_variant) {
    m_instance_variant = instance_variant;
    m_instance_variant_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_instance_variant_Set() const{
    return m_instance_variant_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_instance_variant_Valid() const{
    return m_instance_variant_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getName() const {
    return m_name;
}
void OAISummary_organisations_inner_applications_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getState() const {
    return m_state;
}
void OAISummary_organisations_inner_applications_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISummary_organisations_inner_applications_inner::getVariantSlug() const {
    return m_variant_slug;
}
void OAISummary_organisations_inner_applications_inner::setVariantSlug(const QString &variant_slug) {
    m_variant_slug = variant_slug;
    m_variant_slug_isSet = true;
}

bool OAISummary_organisations_inner_applications_inner::is_variant_slug_Set() const{
    return m_variant_slug_isSet;
}

bool OAISummary_organisations_inner_applications_inner::is_variant_slug_Valid() const{
    return m_variant_slug_isValid;
}

bool OAISummary_organisations_inner_applications_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary_organisations_inner_applications_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
