/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationsApi_H
#define OAI_OAIApplicationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon.h"
#include "OAIAppInstance.h"
#include "OAIApplication.h"
#include "OAIBody.h"
#include "OAIDeployment.h"
#include "OAIEnv.h"
#include "OAIInstance.h"
#include "OAILinkedAppEnv.h"
#include "OAIListEnv.h"
#include "OAIVhost.h"
#include "OAIWannabeApplication.h"
#include "OAIWannabeEnv.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationsApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationsApi(const int timeOut = 0);
    ~OAIApplicationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdAddonsAddonId(const QString &id, const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(const QString &id, const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdAddonsAddonId(const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    */
    virtual void deleteSelfApplicationsAppIdEnvEnvName(const QString &app_id, const QString &env_name);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdInstances(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void deleteSelfApplicationsAppIdTagsTag(const QString &app_id, const QString &tag);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void deleteSelfApplicationsAppIdVhostsDomain(const QString &app_id, const QString &domain);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdVhostsFavourite(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppId(const QString &app_id);


    virtual void getGithubApplications();

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdApplications(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddonsEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependencies(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependents(const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void getOrganisationsIdApplicationsAppIdDeployments(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdTags(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhosts(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplications(const QString &id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdApplications(const QString &addon_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddonsEnv(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddons(const QString &app_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void getSelfApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdDependencies(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdDependents(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void getSelfApplicationsAppIdDeployments(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdEnv(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdInstances(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdTags(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdVhostsFavourite(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdVhosts(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppId(const QString &app_id);


    virtual void getSelfApplications();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUsersIdApplications(const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchesGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBuildflavorPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDependenciesEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(const QString &app_id, const QString &deployment_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdInstancesInstanceIdGet(const QString &instance_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  commit QString [optional]
    */
    virtual void postOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &commit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void postOrganisationsIdApplications(const QString &id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postSelfApplicationsAppIdAddons(const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  commit QString [optional]
    */
    virtual void postSelfApplicationsAppIdInstances(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &commit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void postSelfApplications(const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void putOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putSelfApplicationsAppIdEnvEnvName(const QString &app_id, const QString &env_name, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putSelfApplicationsAppIdEnv(const QString &app_id, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfApplicationsAppIdTagsTag(const QString &app_id, const QString &tag, const OAIBody &oai_body);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putSelfApplicationsAppIdVhostsDomain(const QString &app_id, const QString &domain, const OAIVhost &oai_vhost);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putSelfApplicationsAppIdVhostsFavourite(const QString &app_id, const OAIVhost &oai_vhost);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void putSelfApplicationsAppId(const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBranchPut(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBranchesGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBuildflavorPut(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdDependenciesEnvGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void selfApplicationsAppIdDeploymentsDeploymentIdGet(const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdExposedEnvGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdExposedEnvPut(const QString &app_id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdInstancesInstanceIdGet(const QString &instance_id, const QString &app_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getGithubApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependenciesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependenciesCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependentsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdTagsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdVhostsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsCallback(OAIHttpRequestWorker *worker);
    void getUsersIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchesGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBuildflavorPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDependenciesEnvGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignal();
    void deleteOrganisationsIdApplicationsAppIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void deleteOrganisationsIdApplicationsAppIdSignal();
    void deleteSelfApplicationsAppIdAddonsAddonIdSignal();
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignal();
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignal();
    void deleteSelfApplicationsAppIdEnvEnvNameSignal();
    void deleteSelfApplicationsAppIdInstancesSignal();
    void deleteSelfApplicationsAppIdTagsTagSignal();
    void deleteSelfApplicationsAppIdVhostsDomainSignal();
    void deleteSelfApplicationsAppIdVhostsFavouriteSignal();
    void deleteSelfApplicationsAppIdSignal();
    void getGithubApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignal(QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignal(QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignal(OAIVhost summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignal(QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void getOrganisationsIdApplicationsSignal(QList<OAIApplication> summary);
    void getSelfAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getSelfApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignal();
    void getSelfApplicationsAppIdDependenciesSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDependentsSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDeploymentsSignal(QList<OAIDeployment> summary);
    void getSelfApplicationsAppIdEnvSignal(QList<OAIListEnv> summary);
    void getSelfApplicationsAppIdInstancesSignal(QList<OAIInstance> summary);
    void getSelfApplicationsAppIdTagsSignal(QList<QString> summary);
    void getSelfApplicationsAppIdVhostsFavouriteSignal(OAIVhost summary);
    void getSelfApplicationsAppIdVhostsSignal(QList<OAIVhost> summary);
    void getSelfApplicationsAppIdSignal(OAIApplication summary);
    void getSelfApplicationsSignal(QList<OAIApplication> summary);
    void getUsersIdApplicationsSignal(QList<OAIApplication> summary);
    void organisationsIdApplicationsAppIdBranchPutSignal();
    void organisationsIdApplicationsAppIdBranchesGetSignal();
    void organisationsIdApplicationsAppIdBuildflavorPutSignal();
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignal(QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvPutSignal();
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignal();
    void postOrganisationsIdApplicationsAppIdAddonsSignal();
    void postOrganisationsIdApplicationsAppIdInstancesSignal();
    void postOrganisationsIdApplicationsSignal(OAIApplication summary);
    void postSelfApplicationsAppIdAddonsSignal();
    void postSelfApplicationsAppIdInstancesSignal();
    void postSelfApplicationsSignal();
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignal();
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void putOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void putSelfApplicationsAppIdEnvEnvNameSignal();
    void putSelfApplicationsAppIdEnvSignal();
    void putSelfApplicationsAppIdTagsTagSignal();
    void putSelfApplicationsAppIdVhostsDomainSignal();
    void putSelfApplicationsAppIdVhostsFavouriteSignal();
    void putSelfApplicationsAppIdSignal();
    void selfApplicationsAppIdBranchPutSignal();
    void selfApplicationsAppIdBranchesGetSignal();
    void selfApplicationsAppIdBuildflavorPutSignal();
    void selfApplicationsAppIdDependenciesEnvGetSignal(QList<OAILinkedAppEnv> summary);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignal();
    void selfApplicationsAppIdExposedEnvGetSignal();
    void selfApplicationsAppIdExposedEnvPutSignal();
    void selfApplicationsAppIdInstancesInstanceIdGetSignal();


    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void getGithubApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIVhost summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDependentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void getSelfApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstance> summary);
    void getSelfApplicationsAppIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIVhost summary);
    void getSelfApplicationsAppIdVhostsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVhost> summary);
    void getSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getSelfApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getUsersIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void organisationsIdApplicationsAppIdBranchPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void postSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void putSelfApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchesGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBuildflavorPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDependenciesEnvGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedAppEnv> summary);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError() instead")
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdEnvEnvNameSignalError() instead")
    void deleteSelfApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdInstancesSignalError() instead")
    void deleteSelfApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdTagsTagSignalError() instead")
    void deleteSelfApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsDomainSignalError() instead")
    void deleteSelfApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdSignalError() instead")
    void deleteSelfApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalError() instead")
    void getGithubApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalE(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalError(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(OAIVhost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(OAIVhost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalE(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalError(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalError() instead")
    void getOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalError() instead")
    void getOrganisationsIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalError() instead")
    void getSelfAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalError() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalError() instead")
    void getSelfApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesSignalError() instead")
    void getSelfApplicationsAppIdDependenciesSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependentsSignalError() instead")
    void getSelfApplicationsAppIdDependentsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependentsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDeploymentsSignalError() instead")
    void getSelfApplicationsAppIdDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdEnvSignalError() instead")
    void getSelfApplicationsAppIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdInstancesSignalError() instead")
    void getSelfApplicationsAppIdInstancesSignalE(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdInstancesSignalError(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdTagsSignalError() instead")
    void getSelfApplicationsAppIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void getSelfApplicationsAppIdVhostsFavouriteSignalE(OAIVhost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsFavouriteSignalError(OAIVhost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsSignalError() instead")
    void getSelfApplicationsAppIdVhostsSignalE(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsSignalError(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdSignalError() instead")
    void getSelfApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsSignalError() instead")
    void getSelfApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdApplicationsSignalError() instead")
    void getUsersIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalError() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalError() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalError() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalE(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalError(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalError() instead")
    void postOrganisationsIdApplicationsSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalError() instead")
    void postSelfApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdInstancesSignalError() instead")
    void postSelfApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsSignalError() instead")
    void postSelfApplicationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvEnvNameSignalError() instead")
    void putSelfApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvSignalError() instead")
    void putSelfApplicationsAppIdEnvSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdTagsTagSignalError() instead")
    void putSelfApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsDomainSignalError() instead")
    void putSelfApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void putSelfApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdSignalError() instead")
    void putSelfApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchPutSignalError() instead")
    void selfApplicationsAppIdBranchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchesGetSignalError() instead")
    void selfApplicationsAppIdBranchesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBuildflavorPutSignalError() instead")
    void selfApplicationsAppIdBuildflavorPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBuildflavorPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDependenciesEnvGetSignalError() instead")
    void selfApplicationsAppIdDependenciesEnvGetSignalE(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDependenciesEnvGetSignalError(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDeploymentsDeploymentIdGetSignalError() instead")
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvGetSignalError() instead")
    void selfApplicationsAppIdExposedEnvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvPutSignalError() instead")
    void selfApplicationsAppIdExposedEnvPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdInstancesInstanceIdGetSignalError() instead")
    void selfApplicationsAppIdInstancesInstanceIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdTagsTagSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalErrorFull() instead")
    void getGithubApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getSelfAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependentsSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDeploymentsSignalErrorFull() instead")
    void getSelfApplicationsAppIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdEnvSignalErrorFull() instead")
    void getSelfApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void getSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdTagsSignalErrorFull() instead")
    void getSelfApplicationsAppIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void getSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsSignalErrorFull() instead")
    void getSelfApplicationsAppIdVhostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdSignalErrorFull() instead")
    void getSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsSignalErrorFull() instead")
    void getSelfApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdApplicationsSignalErrorFull() instead")
    void getUsersIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void postSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void postSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsSignalErrorFull() instead")
    void postSelfApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void putSelfApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvSignalErrorFull() instead")
    void putSelfApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdTagsTagSignalErrorFull() instead")
    void putSelfApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void putSelfApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void putSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdSignalErrorFull() instead")
    void putSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchPutSignalErrorFull() instead")
    void selfApplicationsAppIdBranchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchesGetSignalErrorFull() instead")
    void selfApplicationsAppIdBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBuildflavorPutSignalErrorFull() instead")
    void selfApplicationsAppIdBuildflavorPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBuildflavorPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDependenciesEnvGetSignalErrorFull() instead")
    void selfApplicationsAppIdDependenciesEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDependenciesEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull() instead")
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvGetSignalErrorFull() instead")
    void selfApplicationsAppIdExposedEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvPutSignalErrorFull() instead")
    void selfApplicationsAppIdExposedEnvPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdInstancesInstanceIdGetSignalErrorFull() instead")
    void selfApplicationsAppIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
