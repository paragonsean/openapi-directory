/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupernovaInstanceView_flavor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupernovaInstanceView_flavor::OAISupernovaInstanceView_flavor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupernovaInstanceView_flavor::OAISupernovaInstanceView_flavor() {
    this->initializeModel();
}

OAISupernovaInstanceView_flavor::~OAISupernovaInstanceView_flavor() {}

void OAISupernovaInstanceView_flavor::initializeModel() {

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_mem_isSet = false;
    m_mem_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAISupernovaInstanceView_flavor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupernovaInstanceView_flavor::fromJsonObject(QJsonObject json) {

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_mem_isValid = ::OpenAPI::fromJsonValue(m_mem, json[QString("mem")]);
    m_mem_isSet = !json[QString("mem")].isNull() && m_mem_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAISupernovaInstanceView_flavor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupernovaInstanceView_flavor::asJsonObject() const {
    QJsonObject obj;
    if (m_cpus_isSet) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_mem_isSet) {
        obj.insert(QString("mem"), ::OpenAPI::toJsonValue(m_mem));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

double OAISupernovaInstanceView_flavor::getCpus() const {
    return m_cpus;
}
void OAISupernovaInstanceView_flavor::setCpus(const double &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAISupernovaInstanceView_flavor::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAISupernovaInstanceView_flavor::is_cpus_Valid() const{
    return m_cpus_isValid;
}

double OAISupernovaInstanceView_flavor::getMem() const {
    return m_mem;
}
void OAISupernovaInstanceView_flavor::setMem(const double &mem) {
    m_mem = mem;
    m_mem_isSet = true;
}

bool OAISupernovaInstanceView_flavor::is_mem_Set() const{
    return m_mem_isSet;
}

bool OAISupernovaInstanceView_flavor::is_mem_Valid() const{
    return m_mem_isValid;
}

QString OAISupernovaInstanceView_flavor::getName() const {
    return m_name;
}
void OAISupernovaInstanceView_flavor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISupernovaInstanceView_flavor::is_name_Set() const{
    return m_name_isSet;
}

bool OAISupernovaInstanceView_flavor::is_name_Valid() const{
    return m_name_isValid;
}

double OAISupernovaInstanceView_flavor::getPrice() const {
    return m_price;
}
void OAISupernovaInstanceView_flavor::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISupernovaInstanceView_flavor::is_price_Set() const{
    return m_price_isSet;
}

bool OAISupernovaInstanceView_flavor::is_price_Valid() const{
    return m_price_isValid;
}

bool OAISupernovaInstanceView_flavor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupernovaInstanceView_flavor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
