/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary_organisations_inner_addons_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary_organisations_inner_addons_inner::OAISummary_organisations_inner_addons_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary_organisations_inner_addons_inner::OAISummary_organisations_inner_addons_inner() {
    this->initializeModel();
}

OAISummary_organisations_inner_addons_inner::~OAISummary_organisations_inner_addons_inner() {}

void OAISummary_organisations_inner_addons_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAISummary_organisations_inner_addons_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary_organisations_inner_addons_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoUrl")]);
    m_logo_url_isSet = !json[QString("logoUrl")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;
}

QString OAISummary_organisations_inner_addons_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary_organisations_inner_addons_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

QString OAISummary_organisations_inner_addons_inner::getId() const {
    return m_id;
}
void OAISummary_organisations_inner_addons_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISummary_organisations_inner_addons_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISummary_organisations_inner_addons_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISummary_organisations_inner_addons_inner::getLogoUrl() const {
    return m_logo_url;
}
void OAISummary_organisations_inner_addons_inner::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAISummary_organisations_inner_addons_inner::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAISummary_organisations_inner_addons_inner::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAISummary_organisations_inner_addons_inner::getName() const {
    return m_name;
}
void OAISummary_organisations_inner_addons_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISummary_organisations_inner_addons_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISummary_organisations_inner_addons_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISummary_organisations_inner_addons_inner::getProviderId() const {
    return m_provider_id;
}
void OAISummary_organisations_inner_addons_inner::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAISummary_organisations_inner_addons_inner::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAISummary_organisations_inner_addons_inner::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAISummary_organisations_inner_addons_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary_organisations_inner_addons_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
