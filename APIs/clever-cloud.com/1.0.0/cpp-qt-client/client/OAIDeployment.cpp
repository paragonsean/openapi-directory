/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_http_url_isSet = false;
    m_http_url_isValid = false;

    m_repo_state_isSet = false;
    m_repo_state_isValid = false;

    m_shutdownable_isSet = false;
    m_shutdownable_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_http_url_isValid = ::OpenAPI::fromJsonValue(m_http_url, json[QString("httpUrl")]);
    m_http_url_isSet = !json[QString("httpUrl")].isNull() && m_http_url_isValid;

    m_repo_state_isValid = ::OpenAPI::fromJsonValue(m_repo_state, json[QString("repoState")]);
    m_repo_state_isSet = !json[QString("repoState")].isNull() && m_repo_state_isValid;

    m_shutdownable_isValid = ::OpenAPI::fromJsonValue(m_shutdownable, json[QString("shutdownable")]);
    m_shutdownable_isSet = !json[QString("shutdownable")].isNull() && m_shutdownable_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_http_url_isSet) {
        obj.insert(QString("httpUrl"), ::OpenAPI::toJsonValue(m_http_url));
    }
    if (m_repo_state_isSet) {
        obj.insert(QString("repoState"), ::OpenAPI::toJsonValue(m_repo_state));
    }
    if (m_shutdownable_isSet) {
        obj.insert(QString("shutdownable"), ::OpenAPI::toJsonValue(m_shutdownable));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDeployment::getHttpUrl() const {
    return m_http_url;
}
void OAIDeployment::setHttpUrl(const QString &http_url) {
    m_http_url = http_url;
    m_http_url_isSet = true;
}

bool OAIDeployment::is_http_url_Set() const{
    return m_http_url_isSet;
}

bool OAIDeployment::is_http_url_Valid() const{
    return m_http_url_isValid;
}

QString OAIDeployment::getRepoState() const {
    return m_repo_state;
}
void OAIDeployment::setRepoState(const QString &repo_state) {
    m_repo_state = repo_state;
    m_repo_state_isSet = true;
}

bool OAIDeployment::is_repo_state_Set() const{
    return m_repo_state_isSet;
}

bool OAIDeployment::is_repo_state_Valid() const{
    return m_repo_state_isValid;
}

bool OAIDeployment::isShutdownable() const {
    return m_shutdownable;
}
void OAIDeployment::setShutdownable(const bool &shutdownable) {
    m_shutdownable = shutdownable;
    m_shutdownable_isSet = true;
}

bool OAIDeployment::is_shutdownable_Set() const{
    return m_shutdownable_isSet;
}

bool OAIDeployment::is_shutdownable_Valid() const{
    return m_shutdownable_isValid;
}

QString OAIDeployment::getType() const {
    return m_type;
}
void OAIDeployment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeployment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeployment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDeployment::getUrl() const {
    return m_url;
}
void OAIDeployment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeployment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeployment::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shutdownable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repo_state_isValid && m_shutdownable_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
