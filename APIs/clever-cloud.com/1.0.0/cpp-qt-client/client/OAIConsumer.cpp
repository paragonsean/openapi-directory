/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumer::OAIConsumer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumer::OAIConsumer() {
    this->initializeModel();
}

OAIConsumer::~OAIConsumer() {}

void OAIConsumer::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_picture_isSet = false;
    m_picture_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIConsumer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumer::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_picture_isValid = ::OpenAPI::fromJsonValue(m_picture, json[QString("picture")]);
    m_picture_isSet = !json[QString("picture")].isNull() && m_picture_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIConsumer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumer::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_picture_isSet) {
        obj.insert(QString("picture"), ::OpenAPI::toJsonValue(m_picture));
    }
    if (m_rights.isSet()) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIConsumer::getBaseUrl() const {
    return m_base_url;
}
void OAIConsumer::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIConsumer::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIConsumer::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIConsumer::getDescription() const {
    return m_description;
}
void OAIConsumer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConsumer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConsumer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConsumer::getKey() const {
    return m_key;
}
void OAIConsumer::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIConsumer::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConsumer::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIConsumer::getName() const {
    return m_name;
}
void OAIConsumer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConsumer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConsumer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConsumer::getPicture() const {
    return m_picture;
}
void OAIConsumer::setPicture(const QString &picture) {
    m_picture = picture;
    m_picture_isSet = true;
}

bool OAIConsumer::is_picture_Set() const{
    return m_picture_isSet;
}

bool OAIConsumer::is_picture_Valid() const{
    return m_picture_isValid;
}

OAIConsumerRights OAIConsumer::getRights() const {
    return m_rights;
}
void OAIConsumer::setRights(const OAIConsumerRights &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAIConsumer::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAIConsumer::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAIConsumer::getUrl() const {
    return m_url;
}
void OAIConsumer::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIConsumer::is_url_Set() const{
    return m_url_isSet;
}

bool OAIConsumer::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIConsumer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_url_isValid && m_description_isValid && m_name_isValid && m_rights_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
