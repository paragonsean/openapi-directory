/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary::OAISummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary::OAISummary() {
    this->initializeModel();
}

OAISummary::~OAISummary() {}

void OAISummary::initializeModel() {

    m_organisations_isSet = false;
    m_organisations_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary::fromJsonObject(QJsonObject json) {

    m_organisations_isValid = ::OpenAPI::fromJsonValue(m_organisations, json[QString("organisations")]);
    m_organisations_isSet = !json[QString("organisations")].isNull() && m_organisations_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary::asJsonObject() const {
    QJsonObject obj;
    if (m_organisations.size() > 0) {
        obj.insert(QString("organisations"), ::OpenAPI::toJsonValue(m_organisations));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAISummary_organisations_inner> OAISummary::getOrganisations() const {
    return m_organisations;
}
void OAISummary::setOrganisations(const QList<OAISummary_organisations_inner> &organisations) {
    m_organisations = organisations;
    m_organisations_isSet = true;
}

bool OAISummary::is_organisations_Set() const{
    return m_organisations_isSet;
}

bool OAISummary::is_organisations_Valid() const{
    return m_organisations_isValid;
}

OAISummary_user OAISummary::getUser() const {
    return m_user;
}
void OAISummary::setUser(const OAISummary_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISummary::is_user_Set() const{
    return m_user_isSet;
}

bool OAISummary::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organisations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organisations_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
