/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWannabeOrganisation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWannabeOrganisation::OAIWannabeOrganisation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWannabeOrganisation::OAIWannabeOrganisation() {
    this->initializeModel();
}

OAIWannabeOrganisation::~OAIWannabeOrganisation() {}

void OAIWannabeOrganisation::initializeModel() {

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_zipcode_isSet = false;
    m_zipcode_isValid = false;
}

void OAIWannabeOrganisation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWannabeOrganisation::fromJsonObject(QJsonObject json) {

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("VAT")]);
    m_vat_isSet = !json[QString("VAT")].isNull() && m_vat_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_zipcode_isValid = ::OpenAPI::fromJsonValue(m_zipcode, json[QString("zipcode")]);
    m_zipcode_isSet = !json[QString("zipcode")].isNull() && m_zipcode_isValid;
}

QString OAIWannabeOrganisation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWannabeOrganisation::asJsonObject() const {
    QJsonObject obj;
    if (m_vat_isSet) {
        obj.insert(QString("VAT"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_zipcode_isSet) {
        obj.insert(QString("zipcode"), ::OpenAPI::toJsonValue(m_zipcode));
    }
    return obj;
}

QString OAIWannabeOrganisation::getVat() const {
    return m_vat;
}
void OAIWannabeOrganisation::setVat(const QString &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIWannabeOrganisation::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIWannabeOrganisation::is_vat_Valid() const{
    return m_vat_isValid;
}

QString OAIWannabeOrganisation::getAddress() const {
    return m_address;
}
void OAIWannabeOrganisation::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWannabeOrganisation::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWannabeOrganisation::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIWannabeOrganisation::getCity() const {
    return m_city;
}
void OAIWannabeOrganisation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIWannabeOrganisation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIWannabeOrganisation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIWannabeOrganisation::getCompany() const {
    return m_company;
}
void OAIWannabeOrganisation::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIWannabeOrganisation::is_company_Set() const{
    return m_company_isSet;
}

bool OAIWannabeOrganisation::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIWannabeOrganisation::getCountry() const {
    return m_country;
}
void OAIWannabeOrganisation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIWannabeOrganisation::is_country_Set() const{
    return m_country_isSet;
}

bool OAIWannabeOrganisation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIWannabeOrganisation::getDescription() const {
    return m_description;
}
void OAIWannabeOrganisation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWannabeOrganisation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWannabeOrganisation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWannabeOrganisation::getName() const {
    return m_name;
}
void OAIWannabeOrganisation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWannabeOrganisation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWannabeOrganisation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWannabeOrganisation::getZipcode() const {
    return m_zipcode;
}
void OAIWannabeOrganisation::setZipcode(const QString &zipcode) {
    m_zipcode = zipcode;
    m_zipcode_isSet = true;
}

bool OAIWannabeOrganisation::is_zipcode_Set() const{
    return m_zipcode_isSet;
}

bool OAIWannabeOrganisation::is_zipcode_Valid() const{
    return m_zipcode_isValid;
}

bool OAIWannabeOrganisation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWannabeOrganisation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
