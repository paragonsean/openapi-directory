/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstance.h
 *
 * 
 */

#ifndef OAIInstance_H
#define OAIInstance_H

#include <QJsonObject>

#include "OAIFlavor.h"
#include "OAIObject.h"
#include "OAIVariant.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFlavor;
class OAIVariant;

class OAIInstance : public OAIObject {
public:
    OAIInstance();
    OAIInstance(QString json);
    ~OAIInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFlavor getBuildFlavor() const;
    void setBuildFlavor(const OAIFlavor &build_flavor);
    bool is_build_flavor_Set() const;
    bool is_build_flavor_Valid() const;

    bool isComingSoon() const;
    void setComingSoon(const bool &coming_soon);
    bool is_coming_soon_Set() const;
    bool is_coming_soon_Valid() const;

    OAIObject getDefaultEnv() const;
    void setDefaultEnv(const OAIObject &default_env);
    bool is_default_env_Set() const;
    bool is_default_env_Valid() const;

    OAIFlavor getDefaultFlavor() const;
    void setDefaultFlavor(const OAIFlavor &default_flavor);
    bool is_default_flavor_Set() const;
    bool is_default_flavor_Valid() const;

    QList<QString> getDeployments() const;
    void setDeployments(const QList<QString> &deployments);
    bool is_deployments_Set() const;
    bool is_deployments_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<OAIFlavor> getFlavors() const;
    void setFlavors(const QList<OAIFlavor> &flavors);
    bool is_flavors_Set() const;
    bool is_flavors_Valid() const;

    QString getInstanceAndVersion() const;
    void setInstanceAndVersion(const QString &instance_and_version);
    bool is_instance_and_version_Set() const;
    bool is_instance_and_version_Valid() const;

    qint32 getMaxAllowedInstances() const;
    void setMaxAllowedInstances(const qint32 &max_allowed_instances);
    bool is_max_allowed_instances_Set() const;
    bool is_max_allowed_instances_Valid() const;

    OAIFlavor getMaxFlavor() const;
    void setMaxFlavor(const OAIFlavor &max_flavor);
    bool is_max_flavor_Set() const;
    bool is_max_flavor_Valid() const;

    qint32 getMaxInstances() const;
    void setMaxInstances(const qint32 &max_instances);
    bool is_max_instances_Set() const;
    bool is_max_instances_Valid() const;

    OAIFlavor getMinFlavor() const;
    void setMinFlavor(const OAIFlavor &min_flavor);
    bool is_min_flavor_Set() const;
    bool is_min_flavor_Valid() const;

    qint32 getMinInstances() const;
    void setMinInstances(const qint32 &min_instances);
    bool is_min_instances_Set() const;
    bool is_min_instances_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIVariant getVariant() const;
    void setVariant(const OAIVariant &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFlavor m_build_flavor;
    bool m_build_flavor_isSet;
    bool m_build_flavor_isValid;

    bool m_coming_soon;
    bool m_coming_soon_isSet;
    bool m_coming_soon_isValid;

    OAIObject m_default_env;
    bool m_default_env_isSet;
    bool m_default_env_isValid;

    OAIFlavor m_default_flavor;
    bool m_default_flavor_isSet;
    bool m_default_flavor_isValid;

    QList<QString> m_deployments;
    bool m_deployments_isSet;
    bool m_deployments_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<OAIFlavor> m_flavors;
    bool m_flavors_isSet;
    bool m_flavors_isValid;

    QString m_instance_and_version;
    bool m_instance_and_version_isSet;
    bool m_instance_and_version_isValid;

    qint32 m_max_allowed_instances;
    bool m_max_allowed_instances_isSet;
    bool m_max_allowed_instances_isValid;

    OAIFlavor m_max_flavor;
    bool m_max_flavor_isSet;
    bool m_max_flavor_isValid;

    qint32 m_max_instances;
    bool m_max_instances_isSet;
    bool m_max_instances_isValid;

    OAIFlavor m_min_flavor;
    bool m_min_flavor_isSet;
    bool m_min_flavor_isValid;

    qint32 m_min_instances;
    bool m_min_instances_isSet;
    bool m_min_instances_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIVariant m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstance)

#endif // OAIInstance_H
