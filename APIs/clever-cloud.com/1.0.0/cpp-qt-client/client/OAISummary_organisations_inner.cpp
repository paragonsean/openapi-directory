/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISummary_organisations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISummary_organisations_inner::OAISummary_organisations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISummary_organisations_inner::OAISummary_organisations_inner() {
    this->initializeModel();
}

OAISummary_organisations_inner::~OAISummary_organisations_inner() {}

void OAISummary_organisations_inner::initializeModel() {

    m_addons_isSet = false;
    m_addons_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_consumers_isSet = false;
    m_consumers_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAISummary_organisations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISummary_organisations_inner::fromJsonObject(QJsonObject json) {

    m_addons_isValid = ::OpenAPI::fromJsonValue(m_addons, json[QString("addons")]);
    m_addons_isSet = !json[QString("addons")].isNull() && m_addons_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("applications")]);
    m_applications_isSet = !json[QString("applications")].isNull() && m_applications_isValid;

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_consumers_isValid = ::OpenAPI::fromJsonValue(m_consumers, json[QString("consumers")]);
    m_consumers_isSet = !json[QString("consumers")].isNull() && m_consumers_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAISummary_organisations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISummary_organisations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_addons.size() > 0) {
        obj.insert(QString("addons"), ::OpenAPI::toJsonValue(m_addons));
    }
    if (m_applications.size() > 0) {
        obj.insert(QString("applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_consumers.size() > 0) {
        obj.insert(QString("consumers"), ::OpenAPI::toJsonValue(m_consumers));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QList<OAISummary_organisations_inner_addons_inner> OAISummary_organisations_inner::getAddons() const {
    return m_addons;
}
void OAISummary_organisations_inner::setAddons(const QList<OAISummary_organisations_inner_addons_inner> &addons) {
    m_addons = addons;
    m_addons_isSet = true;
}

bool OAISummary_organisations_inner::is_addons_Set() const{
    return m_addons_isSet;
}

bool OAISummary_organisations_inner::is_addons_Valid() const{
    return m_addons_isValid;
}

QList<OAISummary_organisations_inner_applications_inner> OAISummary_organisations_inner::getApplications() const {
    return m_applications;
}
void OAISummary_organisations_inner::setApplications(const QList<OAISummary_organisations_inner_applications_inner> &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAISummary_organisations_inner::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAISummary_organisations_inner::is_applications_Valid() const{
    return m_applications_isValid;
}

QString OAISummary_organisations_inner::getAvatar() const {
    return m_avatar;
}
void OAISummary_organisations_inner::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAISummary_organisations_inner::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAISummary_organisations_inner::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QList<OAISummary_organisations_inner_consumers_inner> OAISummary_organisations_inner::getConsumers() const {
    return m_consumers;
}
void OAISummary_organisations_inner::setConsumers(const QList<OAISummary_organisations_inner_consumers_inner> &consumers) {
    m_consumers = consumers;
    m_consumers_isSet = true;
}

bool OAISummary_organisations_inner::is_consumers_Set() const{
    return m_consumers_isSet;
}

bool OAISummary_organisations_inner::is_consumers_Valid() const{
    return m_consumers_isValid;
}

QString OAISummary_organisations_inner::getId() const {
    return m_id;
}
void OAISummary_organisations_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISummary_organisations_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISummary_organisations_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISummary_organisations_inner::getName() const {
    return m_name;
}
void OAISummary_organisations_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISummary_organisations_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISummary_organisations_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAISummary_organisations_inner::getProviders() const {
    return m_providers;
}
void OAISummary_organisations_inner::setProviders(const QList<QString> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAISummary_organisations_inner::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAISummary_organisations_inner::is_providers_Valid() const{
    return m_providers_isValid;
}

QString OAISummary_organisations_inner::getRole() const {
    return m_role;
}
void OAISummary_organisations_inner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAISummary_organisations_inner::is_role_Set() const{
    return m_role_isSet;
}

bool OAISummary_organisations_inner::is_role_Valid() const{
    return m_role_isValid;
}

bool OAISummary_organisations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISummary_organisations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
