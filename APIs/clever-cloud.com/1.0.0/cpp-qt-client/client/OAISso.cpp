/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISso.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISso::OAISso(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISso::OAISso() {
    this->initializeModel();
}

OAISso::~OAISso() {}

void OAISso::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_nav_data_isSet = false;
    m_nav_data_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISso::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISso::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_nav_data_isValid = ::OpenAPI::fromJsonValue(m_nav_data, json[QString("nav-data")]);
    m_nav_data_isSet = !json[QString("nav-data")].isNull() && m_nav_data_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISso::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISso::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_nav_data_isSet) {
        obj.insert(QString("nav-data"), ::OpenAPI::toJsonValue(m_nav_data));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAISso::getEmail() const {
    return m_email;
}
void OAISso::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISso::is_email_Set() const{
    return m_email_isSet;
}

bool OAISso::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISso::getId() const {
    return m_id;
}
void OAISso::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISso::is_id_Set() const{
    return m_id_isSet;
}

bool OAISso::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISso::getNavData() const {
    return m_nav_data;
}
void OAISso::setNavData(const QString &nav_data) {
    m_nav_data = nav_data;
    m_nav_data_isSet = true;
}

bool OAISso::is_nav_data_Set() const{
    return m_nav_data_isSet;
}

bool OAISso::is_nav_data_Valid() const{
    return m_nav_data_isValid;
}

QDate OAISso::getTimestamp() const {
    return m_timestamp;
}
void OAISso::setTimestamp(const QDate &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISso::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISso::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISso::getToken() const {
    return m_token;
}
void OAISso::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAISso::is_token_Set() const{
    return m_token_isSet;
}

bool OAISso::is_token_Valid() const{
    return m_token_isValid;
}

QString OAISso::getUrl() const {
    return m_url;
}
void OAISso::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISso::is_url_Set() const{
    return m_url_isSet;
}

bool OAISso::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISso::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nav_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISso::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_id_isValid && m_nav_data_isValid && m_timestamp_isValid && m_token_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
