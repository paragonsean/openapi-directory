/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddon::OAIAddon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddon::OAIAddon() {
    this->initializeModel();
}

OAIAddon::~OAIAddon() {}

void OAIAddon::initializeModel() {

    m_config_keys_isSet = false;
    m_config_keys_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_real_id_isSet = false;
    m_real_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIAddon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddon::fromJsonObject(QJsonObject json) {

    m_config_keys_isValid = ::OpenAPI::fromJsonValue(m_config_keys, json[QString("configKeys")]);
    m_config_keys_isSet = !json[QString("configKeys")].isNull() && m_config_keys_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_real_id_isValid = ::OpenAPI::fromJsonValue(m_real_id, json[QString("realId")]);
    m_real_id_isSet = !json[QString("realId")].isNull() && m_real_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIAddon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddon::asJsonObject() const {
    QJsonObject obj;
    if (m_config_keys.size() > 0) {
        obj.insert(QString("configKeys"), ::OpenAPI::toJsonValue(m_config_keys));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_real_id_isSet) {
        obj.insert(QString("realId"), ::OpenAPI::toJsonValue(m_real_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QList<QString> OAIAddon::getConfigKeys() const {
    return m_config_keys;
}
void OAIAddon::setConfigKeys(const QList<QString> &config_keys) {
    m_config_keys = config_keys;
    m_config_keys_isSet = true;
}

bool OAIAddon::is_config_keys_Set() const{
    return m_config_keys_isSet;
}

bool OAIAddon::is_config_keys_Valid() const{
    return m_config_keys_isValid;
}

QDate OAIAddon::getCreationDate() const {
    return m_creation_date;
}
void OAIAddon::setCreationDate(const QDate &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAddon::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAddon::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAddon::getId() const {
    return m_id;
}
void OAIAddon::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAddon::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAddon::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAddon::getName() const {
    return m_name;
}
void OAIAddon::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddon::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddon::is_name_Valid() const{
    return m_name_isValid;
}

OAIPlan OAIAddon::getPlan() const {
    return m_plan;
}
void OAIAddon::setPlan(const OAIPlan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIAddon::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIAddon::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIProvider OAIAddon::getProvider() const {
    return m_provider;
}
void OAIAddon::setProvider(const OAIProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIAddon::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIAddon::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIAddon::getRealId() const {
    return m_real_id;
}
void OAIAddon::setRealId(const QString &real_id) {
    m_real_id = real_id;
    m_real_id_isSet = true;
}

bool OAIAddon::is_real_id_Set() const{
    return m_real_id_isSet;
}

bool OAIAddon::is_real_id_Valid() const{
    return m_real_id_isValid;
}

QString OAIAddon::getRegion() const {
    return m_region;
}
void OAIAddon::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAddon::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAddon::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIAddon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddon::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_keys_isValid && m_creation_date_isValid && m_id_isValid && m_name_isValid && m_plan_isValid && m_provider_isValid && m_real_id_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
