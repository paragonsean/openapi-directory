/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_flavor_isSet = false;
    m_build_flavor_isValid = false;

    m_cancel_on_push_isSet = false;
    m_cancel_on_push_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_deploy_url_isSet = false;
    m_deploy_url_isValid = false;

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_favourite_isSet = false;
    m_favourite_isValid = false;

    m_homogeneous_isSet = false;
    m_homogeneous_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_last_deploy_isSet = false;
    m_last_deploy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_separate_build_isSet = false;
    m_separate_build_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_sticky_sessions_isSet = false;
    m_sticky_sessions_isValid = false;

    m_vhosts_isSet = false;
    m_vhosts_isValid = false;

    m_webhook_secret_isSet = false;
    m_webhook_secret_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_flavor_isValid = ::OpenAPI::fromJsonValue(m_build_flavor, json[QString("buildFlavor")]);
    m_build_flavor_isSet = !json[QString("buildFlavor")].isNull() && m_build_flavor_isValid;

    m_cancel_on_push_isValid = ::OpenAPI::fromJsonValue(m_cancel_on_push, json[QString("cancelOnPush")]);
    m_cancel_on_push_isSet = !json[QString("cancelOnPush")].isNull() && m_cancel_on_push_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_deploy_url_isValid = ::OpenAPI::fromJsonValue(m_deploy_url, json[QString("deployUrl")]);
    m_deploy_url_isSet = !json[QString("deployUrl")].isNull() && m_deploy_url_isValid;

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_favourite_isValid = ::OpenAPI::fromJsonValue(m_favourite, json[QString("favourite")]);
    m_favourite_isSet = !json[QString("favourite")].isNull() && m_favourite_isValid;

    m_homogeneous_isValid = ::OpenAPI::fromJsonValue(m_homogeneous, json[QString("homogeneous")]);
    m_homogeneous_isSet = !json[QString("homogeneous")].isNull() && m_homogeneous_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_last_deploy_isValid = ::OpenAPI::fromJsonValue(m_last_deploy, json[QString("last_deploy")]);
    m_last_deploy_isSet = !json[QString("last_deploy")].isNull() && m_last_deploy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_separate_build_isValid = ::OpenAPI::fromJsonValue(m_separate_build, json[QString("separateBuild")]);
    m_separate_build_isSet = !json[QString("separateBuild")].isNull() && m_separate_build_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_sticky_sessions_isValid = ::OpenAPI::fromJsonValue(m_sticky_sessions, json[QString("stickySessions")]);
    m_sticky_sessions_isSet = !json[QString("stickySessions")].isNull() && m_sticky_sessions_isValid;

    m_vhosts_isValid = ::OpenAPI::fromJsonValue(m_vhosts, json[QString("vhosts")]);
    m_vhosts_isSet = !json[QString("vhosts")].isNull() && m_vhosts_isValid;

    m_webhook_secret_isValid = ::OpenAPI::fromJsonValue(m_webhook_secret, json[QString("webhookSecret")]);
    m_webhook_secret_isSet = !json[QString("webhookSecret")].isNull() && m_webhook_secret_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhookUrl")]);
    m_webhook_url_isSet = !json[QString("webhookUrl")].isNull() && m_webhook_url_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_flavor.isSet()) {
        obj.insert(QString("buildFlavor"), ::OpenAPI::toJsonValue(m_build_flavor));
    }
    if (m_cancel_on_push_isSet) {
        obj.insert(QString("cancelOnPush"), ::OpenAPI::toJsonValue(m_cancel_on_push));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_deploy_url_isSet) {
        obj.insert(QString("deployUrl"), ::OpenAPI::toJsonValue(m_deploy_url));
    }
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_favourite_isSet) {
        obj.insert(QString("favourite"), ::OpenAPI::toJsonValue(m_favourite));
    }
    if (m_homogeneous_isSet) {
        obj.insert(QString("homogeneous"), ::OpenAPI::toJsonValue(m_homogeneous));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_last_deploy_isSet) {
        obj.insert(QString("last_deploy"), ::OpenAPI::toJsonValue(m_last_deploy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_separate_build_isSet) {
        obj.insert(QString("separateBuild"), ::OpenAPI::toJsonValue(m_separate_build));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_sticky_sessions_isSet) {
        obj.insert(QString("stickySessions"), ::OpenAPI::toJsonValue(m_sticky_sessions));
    }
    if (m_vhosts.size() > 0) {
        obj.insert(QString("vhosts"), ::OpenAPI::toJsonValue(m_vhosts));
    }
    if (m_webhook_secret_isSet) {
        obj.insert(QString("webhookSecret"), ::OpenAPI::toJsonValue(m_webhook_secret));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhookUrl"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

bool OAIApplication::isArchived() const {
    return m_archived;
}
void OAIApplication::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIApplication::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIApplication::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIApplication::getBranch() const {
    return m_branch;
}
void OAIApplication::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIApplication::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIApplication::is_branch_Valid() const{
    return m_branch_isValid;
}

OAIFlavor OAIApplication::getBuildFlavor() const {
    return m_build_flavor;
}
void OAIApplication::setBuildFlavor(const OAIFlavor &build_flavor) {
    m_build_flavor = build_flavor;
    m_build_flavor_isSet = true;
}

bool OAIApplication::is_build_flavor_Set() const{
    return m_build_flavor_isSet;
}

bool OAIApplication::is_build_flavor_Valid() const{
    return m_build_flavor_isValid;
}

bool OAIApplication::isCancelOnPush() const {
    return m_cancel_on_push;
}
void OAIApplication::setCancelOnPush(const bool &cancel_on_push) {
    m_cancel_on_push = cancel_on_push;
    m_cancel_on_push_isSet = true;
}

bool OAIApplication::is_cancel_on_push_Set() const{
    return m_cancel_on_push_isSet;
}

bool OAIApplication::is_cancel_on_push_Valid() const{
    return m_cancel_on_push_isValid;
}

QString OAIApplication::getCommitId() const {
    return m_commit_id;
}
void OAIApplication::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIApplication::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIApplication::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QDate OAIApplication::getCreationDate() const {
    return m_creation_date;
}
void OAIApplication::setCreationDate(const QDate &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIApplication::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIApplication::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIApplication::getDeployUrl() const {
    return m_deploy_url;
}
void OAIApplication::setDeployUrl(const QString &deploy_url) {
    m_deploy_url = deploy_url;
    m_deploy_url_isSet = true;
}

bool OAIApplication::is_deploy_url_Set() const{
    return m_deploy_url_isSet;
}

bool OAIApplication::is_deploy_url_Valid() const{
    return m_deploy_url_isValid;
}

OAIDeployment OAIApplication::getDeployment() const {
    return m_deployment;
}
void OAIApplication::setDeployment(const OAIDeployment &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIApplication::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIApplication::is_deployment_Valid() const{
    return m_deployment_isValid;
}

QString OAIApplication::getDescription() const {
    return m_description;
}
void OAIApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplication::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIApplication::isFavourite() const {
    return m_favourite;
}
void OAIApplication::setFavourite(const bool &favourite) {
    m_favourite = favourite;
    m_favourite_isSet = true;
}

bool OAIApplication::is_favourite_Set() const{
    return m_favourite_isSet;
}

bool OAIApplication::is_favourite_Valid() const{
    return m_favourite_isValid;
}

bool OAIApplication::isHomogeneous() const {
    return m_homogeneous;
}
void OAIApplication::setHomogeneous(const bool &homogeneous) {
    m_homogeneous = homogeneous;
    m_homogeneous_isSet = true;
}

bool OAIApplication::is_homogeneous_Set() const{
    return m_homogeneous_isSet;
}

bool OAIApplication::is_homogeneous_Valid() const{
    return m_homogeneous_isValid;
}

QString OAIApplication::getId() const {
    return m_id;
}
void OAIApplication::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplication::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplication::is_id_Valid() const{
    return m_id_isValid;
}

OAIInstance OAIApplication::getInstance() const {
    return m_instance;
}
void OAIApplication::setInstance(const OAIInstance &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIApplication::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIApplication::is_instance_Valid() const{
    return m_instance_isValid;
}

qint32 OAIApplication::getLastDeploy() const {
    return m_last_deploy;
}
void OAIApplication::setLastDeploy(const qint32 &last_deploy) {
    m_last_deploy = last_deploy;
    m_last_deploy_isSet = true;
}

bool OAIApplication::is_last_deploy_Set() const{
    return m_last_deploy_isSet;
}

bool OAIApplication::is_last_deploy_Valid() const{
    return m_last_deploy_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplication::getOwnerId() const {
    return m_owner_id;
}
void OAIApplication::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIApplication::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIApplication::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

bool OAIApplication::isSeparateBuild() const {
    return m_separate_build;
}
void OAIApplication::setSeparateBuild(const bool &separate_build) {
    m_separate_build = separate_build;
    m_separate_build_isSet = true;
}

bool OAIApplication::is_separate_build_Set() const{
    return m_separate_build_isSet;
}

bool OAIApplication::is_separate_build_Valid() const{
    return m_separate_build_isValid;
}

QString OAIApplication::getState() const {
    return m_state;
}
void OAIApplication::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIApplication::is_state_Set() const{
    return m_state_isSet;
}

bool OAIApplication::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIApplication::isStickySessions() const {
    return m_sticky_sessions;
}
void OAIApplication::setStickySessions(const bool &sticky_sessions) {
    m_sticky_sessions = sticky_sessions;
    m_sticky_sessions_isSet = true;
}

bool OAIApplication::is_sticky_sessions_Set() const{
    return m_sticky_sessions_isSet;
}

bool OAIApplication::is_sticky_sessions_Valid() const{
    return m_sticky_sessions_isValid;
}

QList<OAIVhost> OAIApplication::getVhosts() const {
    return m_vhosts;
}
void OAIApplication::setVhosts(const QList<OAIVhost> &vhosts) {
    m_vhosts = vhosts;
    m_vhosts_isSet = true;
}

bool OAIApplication::is_vhosts_Set() const{
    return m_vhosts_isSet;
}

bool OAIApplication::is_vhosts_Valid() const{
    return m_vhosts_isValid;
}

QString OAIApplication::getWebhookSecret() const {
    return m_webhook_secret;
}
void OAIApplication::setWebhookSecret(const QString &webhook_secret) {
    m_webhook_secret = webhook_secret;
    m_webhook_secret_isSet = true;
}

bool OAIApplication::is_webhook_secret_Set() const{
    return m_webhook_secret_isSet;
}

bool OAIApplication::is_webhook_secret_Valid() const{
    return m_webhook_secret_isValid;
}

QString OAIApplication::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIApplication::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIApplication::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIApplication::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

QString OAIApplication::getZone() const {
    return m_zone;
}
void OAIApplication::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIApplication::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIApplication::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_flavor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_on_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homogeneous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_deploy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separate_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_archived_isValid && m_branch_isValid && m_build_flavor_isValid && m_cancel_on_push_isValid && m_commit_id_isValid && m_creation_date_isValid && m_deploy_url_isValid && m_deployment_isValid && m_description_isValid && m_favourite_isValid && m_homogeneous_isValid && m_id_isValid && m_instance_isValid && m_last_deploy_isValid && m_name_isValid && m_owner_id_isValid && m_separate_build_isValid && m_state_isValid && m_sticky_sessions_isValid && m_vhosts_isValid && m_webhook_secret_isValid && m_webhook_url_isValid && m_zone_isValid && true;
}

} // namespace OpenAPI
