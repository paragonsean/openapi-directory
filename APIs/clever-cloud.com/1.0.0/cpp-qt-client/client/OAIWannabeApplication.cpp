/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWannabeApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWannabeApplication::OAIWannabeApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWannabeApplication::OAIWannabeApplication() {
    this->initializeModel();
}

OAIWannabeApplication::~OAIWannabeApplication() {}

void OAIWannabeApplication::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_cancel_on_push_isSet = false;
    m_cancel_on_push_isValid = false;

    m_deploy_isSet = false;
    m_deploy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_favourite_isSet = false;
    m_favourite_isValid = false;

    m_homogeneous_isSet = false;
    m_homogeneous_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_instance_variant_isSet = false;
    m_instance_variant_isValid = false;

    m_instance_version_isSet = false;
    m_instance_version_isValid = false;

    m_max_flavor_isSet = false;
    m_max_flavor_isValid = false;

    m_max_instances_isSet = false;
    m_max_instances_isValid = false;

    m_min_flavor_isSet = false;
    m_min_flavor_isValid = false;

    m_min_instances_isSet = false;
    m_min_instances_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oauth_app_isSet = false;
    m_oauth_app_isValid = false;

    m_oauth_app_id_isSet = false;
    m_oauth_app_id_isValid = false;

    m_oauth_service_isSet = false;
    m_oauth_service_isValid = false;

    m_separate_build_isSet = false;
    m_separate_build_isValid = false;

    m_shutdownable_isSet = false;
    m_shutdownable_isValid = false;

    m_sticky_sessions_isSet = false;
    m_sticky_sessions_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIWannabeApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWannabeApplication::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_cancel_on_push_isValid = ::OpenAPI::fromJsonValue(m_cancel_on_push, json[QString("cancelOnPush")]);
    m_cancel_on_push_isSet = !json[QString("cancelOnPush")].isNull() && m_cancel_on_push_isValid;

    m_deploy_isValid = ::OpenAPI::fromJsonValue(m_deploy, json[QString("deploy")]);
    m_deploy_isSet = !json[QString("deploy")].isNull() && m_deploy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_favourite_isValid = ::OpenAPI::fromJsonValue(m_favourite, json[QString("favourite")]);
    m_favourite_isSet = !json[QString("favourite")].isNull() && m_favourite_isValid;

    m_homogeneous_isValid = ::OpenAPI::fromJsonValue(m_homogeneous, json[QString("homogeneous")]);
    m_homogeneous_isSet = !json[QString("homogeneous")].isNull() && m_homogeneous_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_instance_variant_isValid = ::OpenAPI::fromJsonValue(m_instance_variant, json[QString("instanceVariant")]);
    m_instance_variant_isSet = !json[QString("instanceVariant")].isNull() && m_instance_variant_isValid;

    m_instance_version_isValid = ::OpenAPI::fromJsonValue(m_instance_version, json[QString("instanceVersion")]);
    m_instance_version_isSet = !json[QString("instanceVersion")].isNull() && m_instance_version_isValid;

    m_max_flavor_isValid = ::OpenAPI::fromJsonValue(m_max_flavor, json[QString("maxFlavor")]);
    m_max_flavor_isSet = !json[QString("maxFlavor")].isNull() && m_max_flavor_isValid;

    m_max_instances_isValid = ::OpenAPI::fromJsonValue(m_max_instances, json[QString("maxInstances")]);
    m_max_instances_isSet = !json[QString("maxInstances")].isNull() && m_max_instances_isValid;

    m_min_flavor_isValid = ::OpenAPI::fromJsonValue(m_min_flavor, json[QString("minFlavor")]);
    m_min_flavor_isSet = !json[QString("minFlavor")].isNull() && m_min_flavor_isValid;

    m_min_instances_isValid = ::OpenAPI::fromJsonValue(m_min_instances, json[QString("minInstances")]);
    m_min_instances_isSet = !json[QString("minInstances")].isNull() && m_min_instances_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oauth_app_isValid = ::OpenAPI::fromJsonValue(m_oauth_app, json[QString("oauthApp")]);
    m_oauth_app_isSet = !json[QString("oauthApp")].isNull() && m_oauth_app_isValid;

    m_oauth_app_id_isValid = ::OpenAPI::fromJsonValue(m_oauth_app_id, json[QString("oauthAppId")]);
    m_oauth_app_id_isSet = !json[QString("oauthAppId")].isNull() && m_oauth_app_id_isValid;

    m_oauth_service_isValid = ::OpenAPI::fromJsonValue(m_oauth_service, json[QString("oauthService")]);
    m_oauth_service_isSet = !json[QString("oauthService")].isNull() && m_oauth_service_isValid;

    m_separate_build_isValid = ::OpenAPI::fromJsonValue(m_separate_build, json[QString("separateBuild")]);
    m_separate_build_isSet = !json[QString("separateBuild")].isNull() && m_separate_build_isValid;

    m_shutdownable_isValid = ::OpenAPI::fromJsonValue(m_shutdownable, json[QString("shutdownable")]);
    m_shutdownable_isSet = !json[QString("shutdownable")].isNull() && m_shutdownable_isValid;

    m_sticky_sessions_isValid = ::OpenAPI::fromJsonValue(m_sticky_sessions, json[QString("stickySessions")]);
    m_sticky_sessions_isSet = !json[QString("stickySessions")].isNull() && m_sticky_sessions_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIWannabeApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWannabeApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_cancel_on_push_isSet) {
        obj.insert(QString("cancelOnPush"), ::OpenAPI::toJsonValue(m_cancel_on_push));
    }
    if (m_deploy_isSet) {
        obj.insert(QString("deploy"), ::OpenAPI::toJsonValue(m_deploy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_favourite_isSet) {
        obj.insert(QString("favourite"), ::OpenAPI::toJsonValue(m_favourite));
    }
    if (m_homogeneous_isSet) {
        obj.insert(QString("homogeneous"), ::OpenAPI::toJsonValue(m_homogeneous));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_instance_variant_isSet) {
        obj.insert(QString("instanceVariant"), ::OpenAPI::toJsonValue(m_instance_variant));
    }
    if (m_instance_version_isSet) {
        obj.insert(QString("instanceVersion"), ::OpenAPI::toJsonValue(m_instance_version));
    }
    if (m_max_flavor_isSet) {
        obj.insert(QString("maxFlavor"), ::OpenAPI::toJsonValue(m_max_flavor));
    }
    if (m_max_instances_isSet) {
        obj.insert(QString("maxInstances"), ::OpenAPI::toJsonValue(m_max_instances));
    }
    if (m_min_flavor_isSet) {
        obj.insert(QString("minFlavor"), ::OpenAPI::toJsonValue(m_min_flavor));
    }
    if (m_min_instances_isSet) {
        obj.insert(QString("minInstances"), ::OpenAPI::toJsonValue(m_min_instances));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oauth_app.isSet()) {
        obj.insert(QString("oauthApp"), ::OpenAPI::toJsonValue(m_oauth_app));
    }
    if (m_oauth_app_id_isSet) {
        obj.insert(QString("oauthAppId"), ::OpenAPI::toJsonValue(m_oauth_app_id));
    }
    if (m_oauth_service_isSet) {
        obj.insert(QString("oauthService"), ::OpenAPI::toJsonValue(m_oauth_service));
    }
    if (m_separate_build_isSet) {
        obj.insert(QString("separateBuild"), ::OpenAPI::toJsonValue(m_separate_build));
    }
    if (m_shutdownable_isSet) {
        obj.insert(QString("shutdownable"), ::OpenAPI::toJsonValue(m_shutdownable));
    }
    if (m_sticky_sessions_isSet) {
        obj.insert(QString("stickySessions"), ::OpenAPI::toJsonValue(m_sticky_sessions));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

bool OAIWannabeApplication::isArchived() const {
    return m_archived;
}
void OAIWannabeApplication::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIWannabeApplication::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIWannabeApplication::is_archived_Valid() const{
    return m_archived_isValid;
}

bool OAIWannabeApplication::isCancelOnPush() const {
    return m_cancel_on_push;
}
void OAIWannabeApplication::setCancelOnPush(const bool &cancel_on_push) {
    m_cancel_on_push = cancel_on_push;
    m_cancel_on_push_isSet = true;
}

bool OAIWannabeApplication::is_cancel_on_push_Set() const{
    return m_cancel_on_push_isSet;
}

bool OAIWannabeApplication::is_cancel_on_push_Valid() const{
    return m_cancel_on_push_isValid;
}

QString OAIWannabeApplication::getDeploy() const {
    return m_deploy;
}
void OAIWannabeApplication::setDeploy(const QString &deploy) {
    m_deploy = deploy;
    m_deploy_isSet = true;
}

bool OAIWannabeApplication::is_deploy_Set() const{
    return m_deploy_isSet;
}

bool OAIWannabeApplication::is_deploy_Valid() const{
    return m_deploy_isValid;
}

QString OAIWannabeApplication::getDescription() const {
    return m_description;
}
void OAIWannabeApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWannabeApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWannabeApplication::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWannabeApplication::isEnabled() const {
    return m_enabled;
}
void OAIWannabeApplication::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWannabeApplication::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWannabeApplication::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIWannabeApplication::isFavourite() const {
    return m_favourite;
}
void OAIWannabeApplication::setFavourite(const bool &favourite) {
    m_favourite = favourite;
    m_favourite_isSet = true;
}

bool OAIWannabeApplication::is_favourite_Set() const{
    return m_favourite_isSet;
}

bool OAIWannabeApplication::is_favourite_Valid() const{
    return m_favourite_isValid;
}

bool OAIWannabeApplication::isHomogeneous() const {
    return m_homogeneous;
}
void OAIWannabeApplication::setHomogeneous(const bool &homogeneous) {
    m_homogeneous = homogeneous;
    m_homogeneous_isSet = true;
}

bool OAIWannabeApplication::is_homogeneous_Set() const{
    return m_homogeneous_isSet;
}

bool OAIWannabeApplication::is_homogeneous_Valid() const{
    return m_homogeneous_isValid;
}

QString OAIWannabeApplication::getInstanceType() const {
    return m_instance_type;
}
void OAIWannabeApplication::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIWannabeApplication::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIWannabeApplication::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIWannabeApplication::getInstanceVariant() const {
    return m_instance_variant;
}
void OAIWannabeApplication::setInstanceVariant(const QString &instance_variant) {
    m_instance_variant = instance_variant;
    m_instance_variant_isSet = true;
}

bool OAIWannabeApplication::is_instance_variant_Set() const{
    return m_instance_variant_isSet;
}

bool OAIWannabeApplication::is_instance_variant_Valid() const{
    return m_instance_variant_isValid;
}

QString OAIWannabeApplication::getInstanceVersion() const {
    return m_instance_version;
}
void OAIWannabeApplication::setInstanceVersion(const QString &instance_version) {
    m_instance_version = instance_version;
    m_instance_version_isSet = true;
}

bool OAIWannabeApplication::is_instance_version_Set() const{
    return m_instance_version_isSet;
}

bool OAIWannabeApplication::is_instance_version_Valid() const{
    return m_instance_version_isValid;
}

QString OAIWannabeApplication::getMaxFlavor() const {
    return m_max_flavor;
}
void OAIWannabeApplication::setMaxFlavor(const QString &max_flavor) {
    m_max_flavor = max_flavor;
    m_max_flavor_isSet = true;
}

bool OAIWannabeApplication::is_max_flavor_Set() const{
    return m_max_flavor_isSet;
}

bool OAIWannabeApplication::is_max_flavor_Valid() const{
    return m_max_flavor_isValid;
}

qint32 OAIWannabeApplication::getMaxInstances() const {
    return m_max_instances;
}
void OAIWannabeApplication::setMaxInstances(const qint32 &max_instances) {
    m_max_instances = max_instances;
    m_max_instances_isSet = true;
}

bool OAIWannabeApplication::is_max_instances_Set() const{
    return m_max_instances_isSet;
}

bool OAIWannabeApplication::is_max_instances_Valid() const{
    return m_max_instances_isValid;
}

QString OAIWannabeApplication::getMinFlavor() const {
    return m_min_flavor;
}
void OAIWannabeApplication::setMinFlavor(const QString &min_flavor) {
    m_min_flavor = min_flavor;
    m_min_flavor_isSet = true;
}

bool OAIWannabeApplication::is_min_flavor_Set() const{
    return m_min_flavor_isSet;
}

bool OAIWannabeApplication::is_min_flavor_Valid() const{
    return m_min_flavor_isValid;
}

qint32 OAIWannabeApplication::getMinInstances() const {
    return m_min_instances;
}
void OAIWannabeApplication::setMinInstances(const qint32 &min_instances) {
    m_min_instances = min_instances;
    m_min_instances_isSet = true;
}

bool OAIWannabeApplication::is_min_instances_Set() const{
    return m_min_instances_isSet;
}

bool OAIWannabeApplication::is_min_instances_Valid() const{
    return m_min_instances_isValid;
}

QString OAIWannabeApplication::getName() const {
    return m_name;
}
void OAIWannabeApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWannabeApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWannabeApplication::is_name_Valid() const{
    return m_name_isValid;
}

OAIWannabeOauthApp OAIWannabeApplication::getOauthApp() const {
    return m_oauth_app;
}
void OAIWannabeApplication::setOauthApp(const OAIWannabeOauthApp &oauth_app) {
    m_oauth_app = oauth_app;
    m_oauth_app_isSet = true;
}

bool OAIWannabeApplication::is_oauth_app_Set() const{
    return m_oauth_app_isSet;
}

bool OAIWannabeApplication::is_oauth_app_Valid() const{
    return m_oauth_app_isValid;
}

QString OAIWannabeApplication::getOauthAppId() const {
    return m_oauth_app_id;
}
void OAIWannabeApplication::setOauthAppId(const QString &oauth_app_id) {
    m_oauth_app_id = oauth_app_id;
    m_oauth_app_id_isSet = true;
}

bool OAIWannabeApplication::is_oauth_app_id_Set() const{
    return m_oauth_app_id_isSet;
}

bool OAIWannabeApplication::is_oauth_app_id_Valid() const{
    return m_oauth_app_id_isValid;
}

QString OAIWannabeApplication::getOauthService() const {
    return m_oauth_service;
}
void OAIWannabeApplication::setOauthService(const QString &oauth_service) {
    m_oauth_service = oauth_service;
    m_oauth_service_isSet = true;
}

bool OAIWannabeApplication::is_oauth_service_Set() const{
    return m_oauth_service_isSet;
}

bool OAIWannabeApplication::is_oauth_service_Valid() const{
    return m_oauth_service_isValid;
}

bool OAIWannabeApplication::isSeparateBuild() const {
    return m_separate_build;
}
void OAIWannabeApplication::setSeparateBuild(const bool &separate_build) {
    m_separate_build = separate_build;
    m_separate_build_isSet = true;
}

bool OAIWannabeApplication::is_separate_build_Set() const{
    return m_separate_build_isSet;
}

bool OAIWannabeApplication::is_separate_build_Valid() const{
    return m_separate_build_isValid;
}

bool OAIWannabeApplication::isShutdownable() const {
    return m_shutdownable;
}
void OAIWannabeApplication::setShutdownable(const bool &shutdownable) {
    m_shutdownable = shutdownable;
    m_shutdownable_isSet = true;
}

bool OAIWannabeApplication::is_shutdownable_Set() const{
    return m_shutdownable_isSet;
}

bool OAIWannabeApplication::is_shutdownable_Valid() const{
    return m_shutdownable_isValid;
}

bool OAIWannabeApplication::isStickySessions() const {
    return m_sticky_sessions;
}
void OAIWannabeApplication::setStickySessions(const bool &sticky_sessions) {
    m_sticky_sessions = sticky_sessions;
    m_sticky_sessions_isSet = true;
}

bool OAIWannabeApplication::is_sticky_sessions_Set() const{
    return m_sticky_sessions_isSet;
}

bool OAIWannabeApplication::is_sticky_sessions_Valid() const{
    return m_sticky_sessions_isValid;
}

QList<QString> OAIWannabeApplication::getTags() const {
    return m_tags;
}
void OAIWannabeApplication::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWannabeApplication::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWannabeApplication::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIWannabeApplication::getZone() const {
    return m_zone;
}
void OAIWannabeApplication::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIWannabeApplication::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIWannabeApplication::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIWannabeApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_on_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favourite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_homogeneous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_flavor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_flavor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separate_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shutdownable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sticky_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWannabeApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deploy_isValid && m_enabled_isValid && m_max_instances_isValid && m_min_instances_isValid && m_name_isValid && m_zone_isValid && true;
}

} // namespace OpenAPI
