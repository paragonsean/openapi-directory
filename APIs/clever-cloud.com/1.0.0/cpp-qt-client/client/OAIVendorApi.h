/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVendorApi_H
#define OAI_OAIVendorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication.h"
#include "OAIWannabeAddonBilling.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVendorApi : public QObject {
    Q_OBJECT

public:
    OAIVendorApi(const int timeOut = 0);
    ~OAIVendorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getVendorAppsAddonId(const QString &addon_id);

    /**
    * @param[in]  offset qint32 [optional]
    */
    virtual void getVendorApps(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon_billing OAIWannabeAddonBilling [required]
    */
    virtual void postVendorBillingOwnerId(const QString &addon_id, const OAIWannabeAddonBilling &oai_wannabe_addon_billing);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void putVendorAppsAddonId(const QString &addon_id);


    virtual void vendorAddonsPost();

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void vendorAppsAddonIdLogscollectorGet(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  plan_id QString [optional]
    * @param[in]  region QString [optional]
    */
    virtual void vendorAppsAddonIdMigrationCallbackPut(const QString &addon_id, const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getVendorAppsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getVendorAppsCallback(OAIHttpRequestWorker *worker);
    void postVendorBillingOwnerIdCallback(OAIHttpRequestWorker *worker);
    void putVendorAppsAddonIdCallback(OAIHttpRequestWorker *worker);
    void vendorAddonsPostCallback(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdLogscollectorGetCallback(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdMigrationCallbackPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getVendorAppsAddonIdSignal();
    void getVendorAppsSignal(QList<OAIApplication> summary);
    void postVendorBillingOwnerIdSignal();
    void putVendorAppsAddonIdSignal();
    void vendorAddonsPostSignal();
    void vendorAppsAddonIdLogscollectorGetSignal();
    void vendorAppsAddonIdMigrationCallbackPutSignal();


    void getVendorAppsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void getVendorAppsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void postVendorBillingOwnerIdSignalFull(OAIHttpRequestWorker *worker);
    void putVendorAppsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void vendorAddonsPostSignalFull(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdLogscollectorGetSignalFull(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdMigrationCallbackPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getVendorAppsAddonIdSignalError() instead")
    void getVendorAppsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsSignalError() instead")
    void getVendorAppsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVendorBillingOwnerIdSignalError() instead")
    void postVendorBillingOwnerIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postVendorBillingOwnerIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVendorAppsAddonIdSignalError() instead")
    void putVendorAppsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putVendorAppsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalError() instead")
    void vendorAddonsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdLogscollectorGetSignalError() instead")
    void vendorAppsAddonIdLogscollectorGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdLogscollectorGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdMigrationCallbackPutSignalError() instead")
    void vendorAppsAddonIdMigrationCallbackPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdMigrationCallbackPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getVendorAppsAddonIdSignalErrorFull() instead")
    void getVendorAppsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsSignalErrorFull() instead")
    void getVendorAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVendorBillingOwnerIdSignalErrorFull() instead")
    void postVendorBillingOwnerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVendorBillingOwnerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVendorAppsAddonIdSignalErrorFull() instead")
    void putVendorAppsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVendorAppsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalErrorFull() instead")
    void vendorAddonsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdLogscollectorGetSignalErrorFull() instead")
    void vendorAppsAddonIdLogscollectorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdLogscollectorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdMigrationCallbackPutSignalErrorFull() instead")
    void vendorAppsAddonIdMigrationCallbackPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdMigrationCallbackPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
