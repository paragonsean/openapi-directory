/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAllApi_H
#define OAI_OAIAllApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddon.h"
#include "OAIAddonMigration.h"
#include "OAIAddonProviderSso.h"
#include "OAIAppInstance.h"
#include "OAIApplication.h"
#include "OAIAvatar.h"
#include "OAIBody.h"
#include "OAIChange_Password.h"
#include "OAIConso.h"
#include "OAIConsumer.h"
#include "OAICountry.h"
#include "OAICredits.h"
#include "OAIDeployment.h"
#include "OAIDeploymentSummary.h"
#include "OAIEnv.h"
#include "OAIError.h"
#include "OAIFeature.h"
#include "OAIInstance.h"
#include "OAIKey.h"
#include "OAILinkedAppEnv.h"
#include "OAIListEnv.h"
#include "OAIObject.h"
#include "OAIOrganisation.h"
#include "OAIPaymentData.h"
#include "OAIPayment_Provider.h"
#include "OAIPlan.h"
#include "OAIProvider.h"
#include "OAIRights.h"
#include "OAISchema1.h"
#include "OAISchema2.h"
#include "OAISecret.h"
#include "OAISso.h"
#include "OAISummary.h"
#include "OAISupernovaInstanceView.h"
#include "OAIToken.h"
#include "OAITransaction_Id.h"
#include "OAIUser.h"
#include "OAIVhost.h"
#include "OAIWannabeAddon.h"
#include "OAIWannabeAddonBilling.h"
#include "OAIWannabeAddonProvider.h"
#include "OAIWannabeApplication.h"
#include "OAIWannabeConsumer.h"
#include "OAIWannabeEnv.h"
#include "OAIWannabeFeature.h"
#include "OAIWannabeOrganisation.h"
#include "OAIWannabePlan.h"
#include "OAIWannabePlanFeature.h"
#include "OAIWannabeUser.h"
#include "OAIZone.h"
#include "OAI_organisations__id__addons__addonId__migrations_post_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAllApi : public QObject {
    Q_OBJECT

public:
    OAIAllApi(const int timeOut = 0);
    ~OAIAllApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void applicationAppIdEnvironmentGet(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void applicationAppIdEnvironmentPut(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createMatomo(const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroup(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  oai_schema2 OAISchema2 [optional]
    */
    virtual void createNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<OAISchema2> &oai_schema2 = ::OpenAPI::OptionalParam<OAISchema2>());


    virtual void deleteGithubLink();

    /**
    * @param[in]  matomo_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void deleteMatomo(const QString &matomo_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupExternalPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void deleteNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(const QString &id, const QString &feature_id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(const QString &id, const QString &feature_name, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdAddonsAddonId(const QString &id, const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(const QString &id, const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void deleteOrganisationsIdConsumersKey(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void deleteOrganisationsIdMembersUserId(const QString &id, const QString &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteOrganisationsIdPaymentsRecurring(const QString &id);


    virtual void deleteSelf();

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfAddonsAddonId(const QString &addon_id);

    /**
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfAddonsAddonIdTagsTag(const QString &tag, const QString &addon_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppId(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdAddonsAddonId(const QString &app_id, const QString &addon_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    */
    virtual void deleteSelfApplicationsAppIdEnvEnvName(const QString &app_id, const QString &env_name);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdInstances(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    */
    virtual void deleteSelfApplicationsAppIdTagsTag(const QString &app_id, const QString &tag);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void deleteSelfApplicationsAppIdVhostsDomain(const QString &app_id, const QString &domain);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void deleteSelfApplicationsAppIdVhostsFavourite(const QString &app_id);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteSelfConsumersKey(const QString &key);

    /**
    * @param[in]  email QString [required]
    */
    virtual void deleteSelfEmailsEmail(const QString &email);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteSelfKeysKey(const QString &key);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void deleteSelfPaymentsBillingsBid(const QString &bid);

    /**
    * @param[in]  m_id QString [required]
    */
    virtual void deleteSelfPaymentsMethodsMId(const QString &m_id);


    virtual void deleteSelfPaymentsRecurring();


    virtual void deleteSelfTokens();

    /**
    * @param[in]  token QString [required]
    */
    virtual void deleteSelfTokensToken(const QString &token);


    virtual void eventsEventSocketGet();

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getConfigProvider(const QString &configuration_provider_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getConfigProviderEnv(const QString &configuration_provider_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());


    virtual void getGithub();


    virtual void getGithubApplications();

    /**
    * @param[in]  code QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  error QString [optional]
    * @param[in]  error_description QString [optional]
    * @param[in]  error_uri QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void getGithubCallback(const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());


    virtual void getGithubEmails();


    virtual void getGithubKeys();

    /**
    * @param[in]  transaction_id QString [optional]
    * @param[in]  redirect_url QString [optional]
    */
    virtual void getGithubLink(const ::OpenAPI::OptionalParam<QString> &transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  redirect_url QString [optional]
    * @param[in]  from_authorize QString [optional]
    */
    virtual void getGithubLogin(const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_authorize = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  redirect_url QString [optional]
    * @param[in]  from_authorize QString [optional]
    */
    virtual void getGithubSignup(const ::OpenAPI::OptionalParam<QString> &redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_authorize = ::OpenAPI::OptionalParam<QString>());


    virtual void getGithubUsername();

    /**
    * @param[in]  matomo_id QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void getMatomo(const QString &matomo_id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  keycloak_token QString [optional]
    * @param[in]  body QString [optional]
    */
    virtual void getMatomoKTokenValidation(const ::OpenAPI::OptionalParam<QString> &keycloak_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroup(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupMember(const QString &owner_id, const QString &network_group_id, const QString &member_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupPeer(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupStream(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfiguration(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  peer_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void getNetworkGroupWireGuardConfigurationStream(const QString &owner_id, const QString &network_group_id, const QString &peer_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());


    virtual void getNewsfeedEngineering();


    virtual void getNewsfeedsBlog();

    /**
    * @param[in]  oauth_token QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void getOauthAuthorize(const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());


    virtual void getOauthRights();

    /**
    * @param[in]  user QString [optional]
    */
    virtual void getOrganisations(const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddonproviders(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderId(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdFeatures(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdPlans(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void getOrganisationsIdAddonprovidersProviderIdTags(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddons(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdApplications(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdEnv(const QString &id, const QString &addon_id);

    /**
    * @param[in]  provider_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdSso(const QString &provider_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void getOrganisationsIdAddonsAddonIdTags(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplications(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdAddonsEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependencies(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdDependents(const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void getOrganisationsIdApplicationsAppIdDeployments(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdTags(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhosts(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void getOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdConsumers(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getOrganisationsIdConsumersKey(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getOrganisationsIdConsumersKeySecret(const QString &id, const QString &key);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void getOrganisationsIdConsumptions(const QString &id, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdCredits(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdDeployments(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdInstances(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdMembers(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdPaymentInfo(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillings(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void getOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void getOrganisationsIdPaymentsBillingsBidPdf(const QString &id, const QString &bid, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  price QString [required]
    */
    virtual void getOrganisationsIdPaymentsFullPricePrice(const QString &id, const QString &price);


    virtual void getPasswordForgotten();

    /**
    * @param[in]  key QString [required]
    */
    virtual void getPasswordForgottenKey(const QString &key);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getPaymentsCouponsName(const QString &name);


    virtual void getPaymentsProviders();


    virtual void getPaymentsTokensStripe();


    virtual void getProductsAddonProviders();

    /**
    * @param[in]  provider_id QString [required]
    */
    virtual void getProductsAddonProvidersProviderId(const QString &provider_id);


    virtual void getProductsCountries();


    virtual void getProductsCountrycodes();

    /**
    * @param[in]  r_for QString [optional]
    */
    virtual void getProductsInstances(const ::OpenAPI::OptionalParam<QString> &r_for = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  version QString [required]
    * @param[in]  r_for QString [optional]
    * @param[in]  app QString [optional]
    */
    virtual void getProductsInstancesTypeVersion(const QString &type, const QString &version, const ::OpenAPI::OptionalParam<QString> &r_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  coupon QString [optional]
    * @param[in]  orga_id QString [optional]
    * @param[in]  currency QString [optional]
    */
    virtual void getProductsPackages(const ::OpenAPI::OptionalParam<QString> &coupon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orga_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>());


    virtual void getProductsPrices();


    virtual void getProductsZones();


    virtual void getSelf();


    virtual void getSelfAddons();

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonId(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdApplications(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdEnv(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdSso(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getSelfAddonsAddonIdTags(const QString &addon_id);


    virtual void getSelfApplications();

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppId(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddons(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdAddonsEnv(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdDependencies(const QString &app_id);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void getSelfApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdDependents(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void getSelfApplicationsAppIdDeployments(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdEnv(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdInstances(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdTags(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdVhosts(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getSelfApplicationsAppIdVhostsFavourite(const QString &app_id);


    virtual void getSelfConfirmationEmail();


    virtual void getSelfConsumers();

    /**
    * @param[in]  key QString [required]
    */
    virtual void getSelfConsumersKey(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void getSelfConsumersKeySecret(const QString &key);

    /**
    * @param[in]  app_id QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void getSelfConsumptions(const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());


    virtual void getSelfCredits();


    virtual void getSelfEmails();


    virtual void getSelfId();


    virtual void getSelfInstances();


    virtual void getSelfKeys();


    virtual void getSelfPaymentInfo();


    virtual void getSelfPaymentsBillings();

    /**
    * @param[in]  bid QString [required]
    */
    virtual void getSelfPaymentsBillingsBid(const QString &bid);

    /**
    * @param[in]  bid QString [required]
    * @param[in]  token QString [optional]
    */
    virtual void getSelfPaymentsBillingsBidPdf(const QString &bid, const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  price QString [required]
    */
    virtual void getSelfPaymentsFullpricePrice(const QString &price);


    virtual void getSelfPaymentsMethods();


    virtual void getSelfTokens();

    /**
    * @param[in]  validation_key QString [optional]
    */
    virtual void getSelfValidateEmail(const ::OpenAPI::OptionalParam<QString> &validation_key = ::OpenAPI::OptionalParam<QString>());


    virtual void getSummary();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUsersId(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUsersIdApplications(const QString &id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getUsersUserIdGitInfo(const QString &user_id);

    /**
    * @param[in]  offset qint32 [optional]
    */
    virtual void getVendorApps(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void getVendorAppsAddonId(const QString &addon_id);

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupMembers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  network_group_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroupPeers(const QString &owner_id, const QString &network_group_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  owner_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void listNetworkGroups(const QString &owner_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsAppIdDrainsGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsAppIdDrainsIdOrUrlDelete(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsAppIdDrainsIdOrUrlGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsAppIdDrainsPost(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  after QDateTime [optional]
    * @param[in]  before QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  deployment_id QString [optional]
    */
    virtual void logsAppIdGet(const QString &app_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deployment_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsAppIdSseGet(const QString &app_id);

    /**
    * @param[in]  drain_id QString [required]
    */
    virtual void logsDrainsDrainIdPut(const QString &drain_id);


    virtual void logsDrainsGet();

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  download bool [optional]
    */
    virtual void logsLogsChunkedAppIdGet(const QString &app_id, const ::OpenAPI::OptionalParam<bool> &download = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  since QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  deployment_id QString [optional]
    */
    virtual void logsLogsSocketAppIdGet(const QString &app_id, const ::OpenAPI::OptionalParam<QDateTime> &since = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deployment_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void logsSocketAppIdGet(const QString &app_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsEmailhooksOwnerIdGet(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsEmailhooksOwnerIdIdDelete(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsEmailhooksOwnerIdIdPut(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsEmailhooksOwnerIdPost(const QString &owner_id);


    virtual void notificationsInfoEventsGet();


    virtual void notificationsInfoWebhookformatsGet();

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsWebhooksOwnerIdGet(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsWebhooksOwnerIdIdDelete(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsWebhooksOwnerIdIdPut(const QString &owner_id);

    /**
    * @param[in]  owner_id QString [required]
    */
    virtual void notificationsWebhooksOwnerIdPost(const QString &owner_id);

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void oauthAccessTokenQueryPost(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void oauthRequestTokenQueryPost(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());


    virtual void openapiGet();

    /**
    * @param[in]  type QString [required]
    */
    virtual void openapiTypeGet(const QString &type);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void organisationsIdAddonprovidersProviderIdDelete(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  deployment_id QString [optional]
    * @param[in]  with_deleted QString [optional]
    */
    virtual void organisationsIdAddonsAddonIdInstancesGet(const QString &id, const QString &addon_id, const ::OpenAPI::OptionalParam<QString> &deployment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &with_deleted = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdInstancesInstanceIdGet(const QString &instance_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  migration_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsMigrationIdGet(const QString &migration_id, const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_organisations__id__addons__addon_id__migrations_post_request OAI_organisations__id__addons__addonId__migrations_post_request [required]
    */
    virtual void organisationsIdAddonsAddonIdMigrationsPost(const QString &id, const QString &addon_id, const OAI_organisations__id__addons__addonId__migrations_post_request &oai_organisations__id__addons__addon_id__migrations_post_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    */
    virtual void organisationsIdAddonsAddonIdSsoGet(const QString &id, const QString &addon_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void organisationsIdAddonsPreordersPost(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBranchesGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdBuildflavorPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDependenciesEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(const QString &app_id, const QString &deployment_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvGet(const QString &app_id, const QString &id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdExposedEnvPut(const QString &app_id, const QString &id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdApplicationsAppIdInstancesInstanceIdGet(const QString &instance_id, const QString &app_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsBillingsUnpaidGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_payment_data OAIPaymentData [required]
    */
    virtual void organisationsIdPaymentsMethodsDefaultPut(const QString &id, const OAIPaymentData &oai_payment_data);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsGet(const QString &id);

    /**
    * @param[in]  m_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMethodsMIdDelete(const QString &m_id, const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void organisationsIdPaymentsMethodsPost(const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void organisationsIdPaymentsRecurringGet(const QString &id);

    /**
    * @param[in]  token QString [required]
    */
    virtual void paymentsAssetsPayButtonTokenButtonPngGet(const QString &token);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void paymentsBidEndStripePost(const QString &bid);


    virtual void postAuthorize();

    /**
    * @param[in]  user_agent QString [optional]
    * @param[in]  x_github_event QString [optional]
    * @param[in]  x_hub_signature QString [optional]
    */
    virtual void postGithubRedeploy(const ::OpenAPI::OptionalParam<QString> &user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_github_event = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_hub_signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  transaction_id QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  other_id QString [optional]
    * @param[in]  other_email QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  auto_link QString [optional]
    * @param[in]  terms QString [optional]
    */
    virtual void postGithubSignup(const ::OpenAPI::OptionalParam<QString> &transaction_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &other_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &other_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &auto_link = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &terms = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void postOauthAccessToken(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  almighty QString [optional]
    * @param[in]  access_organisations QString [optional]
    * @param[in]  manage_organisations QString [optional]
    * @param[in]  manage_organisations_services QString [optional]
    * @param[in]  manage_organisations_applications QString [optional]
    * @param[in]  manage_organisations_members QString [optional]
    * @param[in]  access_organisations_bills QString [optional]
    * @param[in]  access_organisations_credit_count QString [optional]
    * @param[in]  access_organisations_consumption_statistics QString [optional]
    * @param[in]  access_personal_information QString [optional]
    * @param[in]  manage_personal_information QString [optional]
    * @param[in]  manage_ssh_keys QString [optional]
    * @param[in]  manage_services QString [optional]
    * @param[in]  manage_applications QString [optional]
    * @param[in]  access_bills QString [optional]
    * @param[in]  access_credit_count QString [optional]
    * @param[in]  access_consumption_statistics QString [optional]
    * @param[in]  cookie QString [optional]
    */
    virtual void postOauthAuthorize(const ::OpenAPI::OptionalParam<QString> &almighty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_services = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_applications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_organisations_members = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_bills = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_credit_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_organisations_consumption_statistics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_personal_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_personal_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_ssh_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_services = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &manage_applications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_bills = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_credit_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_consumption_statistics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cookie = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oauth_consumer_key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  oauth_signature_method QString [optional]
    * @param[in]  oauth_signature QString [optional]
    * @param[in]  oauth_timestamp QString [optional]
    * @param[in]  oauth_nonce QString [optional]
    * @param[in]  oauth_version QString [optional]
    * @param[in]  oauth_verifier QString [optional]
    * @param[in]  oauth_callback QString [optional]
    * @param[in]  oauth_token_secret QString [optional]
    * @param[in]  oauth_callback_confirmed QString [optional]
    */
    virtual void postOauthRequestToken(const ::OpenAPI::OptionalParam<QString> &oauth_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_timestamp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_nonce = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_verifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_callback_confirmed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_wannabe_organisation OAIWannabeOrganisation [required]
    */
    virtual void postOrganisations(const OAIWannabeOrganisation &oai_wannabe_organisation);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon_provider OAIWannabeAddonProvider [required]
    */
    virtual void postOrganisationsIdAddonproviders(const QString &id, const OAIWannabeAddonProvider &oai_wannabe_addon_provider);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_feature OAIWannabeFeature [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdFeatures(const QString &id, const QString &provider_id, const OAIWannabeFeature &oai_wannabe_feature);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdPlans(const QString &id, const QString &provider_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    */
    virtual void postOrganisationsIdAddonprovidersProviderIdTesters(const QString &id, const QString &provider_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void postOrganisationsIdAddons(const QString &id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void postOrganisationsIdApplications(const QString &id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postOrganisationsIdApplicationsAppIdAddons(const QString &id, const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  commit QString [optional]
    */
    virtual void postOrganisationsIdApplicationsAppIdInstances(const QString &id, const QString &app_id, const ::OpenAPI::OptionalParam<QString> &commit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void postOrganisationsIdConsumers(const QString &id, const OAIWannabeConsumer &oai_wannabe_consumer);

    /**
    * @param[in]  id QString [required]
    * @param[in]  body OAISchema2 [required]
    * @param[in]  invitation_key QString [optional]
    */
    virtual void postOrganisationsIdMembers(const QString &id, const OAISchema2 &body, const ::OpenAPI::OptionalParam<QString> &invitation_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void postOrganisationsIdPaymentsBillings(const QString &id);

    /**
    * @param[in]  login QString [optional]
    * @param[in]  drop_tokens QString [optional]
    * @param[in]  tester_pass QString [optional]
    */
    virtual void postPasswordForgotten(const ::OpenAPI::OptionalParam<QString> &login = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drop_tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tester_pass = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  pass QString [optional]
    * @param[in]  pass2 QString [optional]
    */
    virtual void postPasswordForgottenKey(const QString &key, const ::OpenAPI::OptionalParam<QString> &pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pass2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void postSelfAddons(const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void postSelfApplications(const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void postSelfApplicationsAppIdAddons(const QString &app_id, const OAIBody &oai_body);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  commit QString [optional]
    */
    virtual void postSelfApplicationsAppIdInstances(const QString &app_id, const ::OpenAPI::OptionalParam<QString> &commit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void postSelfConsumers(const OAIWannabeConsumer &oai_wannabe_consumer);


    virtual void postSelfPaymentsBillings();


    virtual void postSelfPaymentsMethods();

    /**
    * @param[in]  oai_wannabe_user OAIWannabeUser [required]
    * @param[in]  invitation_key QString [optional]
    * @param[in]  addon_beta_invitation_key QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  pass QString [optional]
    * @param[in]  url_next QString [optional]
    * @param[in]  terms QString [optional]
    */
    virtual void postUsers(const OAIWannabeUser &oai_wannabe_user, const ::OpenAPI::OptionalParam<QString> &invitation_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &addon_beta_invitation_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url_next = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &terms = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon_billing OAIWannabeAddonBilling [required]
    */
    virtual void postVendorBillingOwnerId(const QString &addon_id, const OAIWannabeAddonBilling &oai_wannabe_addon_billing);

    /**
    * @param[in]  provider_id QString [required]
    */
    virtual void productsAddonprovidersProviderIdVersionsGet(const QString &provider_id);


    virtual void productsMfaKindsGet();

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_wannabe_organisation OAIWannabeOrganisation [required]
    */
    virtual void putOrganisationsId(const QString &id, const OAIWannabeOrganisation &oai_wannabe_organisation);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  oai_wannabe_addon_provider OAIWannabeAddonProvider [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderId(const QString &id, const QString &provider_id, const OAIWannabeAddonProvider &oai_wannabe_addon_provider);

    /**
    * @param[in]  id QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderIdPlansPlanId(const QString &id, const QString &provider_id, const QString &plan_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  id QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  provider_id QString [required]
    * @param[in]  plan_id QString [required]
    * @param[in]  oai_wannabe_plan_feature OAIWannabePlanFeature [required]
    */
    virtual void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(const QString &id, const QString &feature_name, const QString &provider_id, const QString &plan_id, const OAIWannabePlanFeature &oai_wannabe_plan_feature);

    /**
    * @param[in]  id QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void putOrganisationsIdAddonsAddonId(const QString &id, const QString &addon_id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdAddonsAddonIdTagsTag(const QString &id, const QString &tag, const QString &addon_id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void putOrganisationsIdApplicationsAppId(const QString &id, const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  dependency_id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdDependenciesDependencyId(const QString &dependency_id, const QString &app_id, const QString &id, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnv(const QString &id, const QString &app_id, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdEnvEnvName(const QString &id, const QString &app_id, const QString &env_name, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdTagsTag(const QString &id, const QString &app_id, const QString &tag, const OAIBody &oai_body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsDomain(const QString &id, const QString &app_id, const QString &domain, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    * @param[in]  app_id QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putOrganisationsIdApplicationsAppIdVhostsFavourite(const QString &id, const QString &app_id, const OAIVhost &oai_vhost);

    /**
    * @param[in]  id QString [required]
    */
    virtual void putOrganisationsIdAvatar(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void putOrganisationsIdConsumersKey(const QString &id, const QString &key, const OAIWannabeConsumer &oai_wannabe_consumer);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  body OAISchema2 [required]
    */
    virtual void putOrganisationsIdMembersUserId(const QString &id, const QString &user_id, const OAISchema2 &body);

    /**
    * @param[in]  id QString [required]
    * @param[in]  bid QString [required]
    */
    virtual void putOrganisationsIdPaymentsBillingsBid(const QString &id, const QString &bid);

    /**
    * @param[in]  oai_wannabe_user OAIWannabeUser [required]
    */
    virtual void putSelf(const OAIWannabeUser &oai_wannabe_user);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void putSelfAddonsAddonId(const QString &addon_id, const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_wannabe_plan OAIWannabePlan [required]
    */
    virtual void putSelfAddonsAddonIdPlan(const QString &addon_id, const OAIWannabePlan &oai_wannabe_plan);

    /**
    * @param[in]  tag QString [required]
    * @param[in]  addon_id QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfAddonsAddonIdTagsTag(const QString &tag, const QString &addon_id, const OAIBody &oai_body);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_application OAIWannabeApplication [required]
    */
    virtual void putSelfApplicationsAppId(const QString &app_id, const OAIWannabeApplication &oai_wannabe_application);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putSelfApplicationsAppIdEnv(const QString &app_id, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  env_name QString [required]
    * @param[in]  oai_wannabe_env OAIWannabeEnv [required]
    */
    virtual void putSelfApplicationsAppIdEnvEnvName(const QString &app_id, const QString &env_name, const OAIWannabeEnv &oai_wannabe_env);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  tag QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfApplicationsAppIdTagsTag(const QString &app_id, const QString &tag, const OAIBody &oai_body);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putSelfApplicationsAppIdVhostsDomain(const QString &app_id, const QString &domain, const OAIVhost &oai_vhost);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  oai_vhost OAIVhost [required]
    */
    virtual void putSelfApplicationsAppIdVhostsFavourite(const QString &app_id, const OAIVhost &oai_vhost);

    /**
    * @param[in]  oai_avatar OAIAvatar [required]
    */
    virtual void putSelfAvatar(const OAIAvatar &oai_avatar);


    virtual void putSelfChangePassword();

    /**
    * @param[in]  key QString [required]
    * @param[in]  oai_wannabe_consumer OAIWannabeConsumer [required]
    */
    virtual void putSelfConsumersKey(const QString &key, const OAIWannabeConsumer &oai_wannabe_consumer);

    /**
    * @param[in]  email QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfEmailsEmail(const QString &email, const OAIBody &oai_body);

    /**
    * @param[in]  key QString [required]
    * @param[in]  oai_body OAIBody [required]
    */
    virtual void putSelfKeysKey(const QString &key, const OAIBody &oai_body);

    /**
    * @param[in]  bid QString [required]
    */
    virtual void putSelfPaymentsBillingsBid(const QString &bid);

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void putVendorAppsAddonId(const QString &addon_id);

    /**
    * @param[in]  oai_wannabe_addon OAIWannabeAddon [required]
    */
    virtual void selfAddonsPreordersPost(const OAIWannabeAddon &oai_wannabe_addon);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBranchPut(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBranchesGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdBuildflavorPut(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdDependenciesEnvGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  deployment_id QString [required]
    */
    virtual void selfApplicationsAppIdDeploymentsDeploymentIdGet(const QString &app_id, const QString &deployment_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdExposedEnvGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdExposedEnvPut(const QString &app_id);

    /**
    * @param[in]  instance_id QString [required]
    * @param[in]  app_id QString [required]
    */
    virtual void selfApplicationsAppIdInstancesInstanceIdGet(const QString &instance_id, const QString &app_id);

    /**
    * @param[in]  cli_token QString [optional]
    */
    virtual void selfCliTokensGet(const ::OpenAPI::OptionalParam<QString> &cli_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  kind QString [required]
    */
    virtual void selfMfaKindBackupcodesGet(const QString &kind);

    /**
    * @param[in]  kind QString [required]
    */
    virtual void selfMfaKindConfirmationPost(const QString &kind);

    /**
    * @param[in]  kind QString [required]
    */
    virtual void selfMfaKindDelete(const QString &kind);

    /**
    * @param[in]  kind QString [required]
    */
    virtual void selfMfaKindPost(const QString &kind);

    /**
    * @param[in]  kind QString [required]
    */
    virtual void selfMfaKindPut(const QString &kind);


    virtual void selfPaymentsMethodsDefaultGet();


    virtual void selfPaymentsMethodsDefaultPut();


    virtual void selfPaymentsMonthlyinvoiceGet();


    virtual void selfPaymentsMonthlyinvoiceMaxcreditPut();


    virtual void selfPaymentsRecurringGet();


    virtual void selfPaymentsTokensStripeGet();

    /**
    * @param[in]  configuration_provider_id QString [required]
    * @param[in]  request_body QList<QJsonValue> [required]
    */
    virtual void updateConfigProviderEnv(const QString &configuration_provider_id, const QList<QJsonValue> &request_body);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdDrainsGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdDrainsIdOrUrlDelete(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdDrainsIdOrUrlGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdDrainsPost(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdLogsChunkedGet(const QString &app_id);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void v3LogsAppIdLogsSocketGet(const QString &app_id);


    virtual void vendorAddonsPost();

    /**
    * @param[in]  addon_id QString [required]
    */
    virtual void vendorAppsAddonIdLogscollectorGet(const QString &addon_id);

    /**
    * @param[in]  addon_id QString [required]
    * @param[in]  plan_id QString [optional]
    * @param[in]  region QString [optional]
    */
    virtual void vendorAppsAddonIdMigrationCallbackPut(const QString &addon_id, const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &region = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationAppIdEnvironmentGetCallback(OAIHttpRequestWorker *worker);
    void applicationAppIdEnvironmentPutCallback(OAIHttpRequestWorker *worker);
    void createMatomoCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void createNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void deleteGithubLinkCallback(OAIHttpRequestWorker *worker);
    void deleteMatomoCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupExternalPeerCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringCallback(OAIHttpRequestWorker *worker);
    void deleteSelfCallback(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void deleteSelfConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void deleteSelfEmailsEmailCallback(OAIHttpRequestWorker *worker);
    void deleteSelfKeysKeyCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsMethodsMIdCallback(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsRecurringCallback(OAIHttpRequestWorker *worker);
    void deleteSelfTokensCallback(OAIHttpRequestWorker *worker);
    void deleteSelfTokensTokenCallback(OAIHttpRequestWorker *worker);
    void eventsEventSocketGetCallback(OAIHttpRequestWorker *worker);
    void getConfigProviderCallback(OAIHttpRequestWorker *worker);
    void getConfigProviderEnvCallback(OAIHttpRequestWorker *worker);
    void getGithubCallback(OAIHttpRequestWorker *worker);
    void getGithubApplicationsCallback(OAIHttpRequestWorker *worker);
    void getGithubCallbackCallback(OAIHttpRequestWorker *worker);
    void getGithubEmailsCallback(OAIHttpRequestWorker *worker);
    void getGithubKeysCallback(OAIHttpRequestWorker *worker);
    void getGithubLinkCallback(OAIHttpRequestWorker *worker);
    void getGithubLoginCallback(OAIHttpRequestWorker *worker);
    void getGithubSignupCallback(OAIHttpRequestWorker *worker);
    void getGithubUsernameCallback(OAIHttpRequestWorker *worker);
    void getMatomoCallback(OAIHttpRequestWorker *worker);
    void getMatomoKTokenValidationCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupMemberCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupPeerCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupStreamCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationCallback(OAIHttpRequestWorker *worker);
    void getNetworkGroupWireGuardConfigurationStreamCallback(OAIHttpRequestWorker *worker);
    void getNewsfeedEngineeringCallback(OAIHttpRequestWorker *worker);
    void getNewsfeedsBlogCallback(OAIHttpRequestWorker *worker);
    void getOauthAuthorizeCallback(OAIHttpRequestWorker *worker);
    void getOauthRightsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdPlansCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonprovidersProviderIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdSsoCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdAddonsAddonIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependenciesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDependentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdTagsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumersKeySecretCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdConsumptionsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdCreditsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdMembersCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceCallback(OAIHttpRequestWorker *worker);
    void getPasswordForgottenCallback(OAIHttpRequestWorker *worker);
    void getPasswordForgottenKeyCallback(OAIHttpRequestWorker *worker);
    void getPaymentsCouponsNameCallback(OAIHttpRequestWorker *worker);
    void getPaymentsProvidersCallback(OAIHttpRequestWorker *worker);
    void getPaymentsTokensStripeCallback(OAIHttpRequestWorker *worker);
    void getProductsAddonProvidersCallback(OAIHttpRequestWorker *worker);
    void getProductsAddonProvidersProviderIdCallback(OAIHttpRequestWorker *worker);
    void getProductsCountriesCallback(OAIHttpRequestWorker *worker);
    void getProductsCountrycodesCallback(OAIHttpRequestWorker *worker);
    void getProductsInstancesCallback(OAIHttpRequestWorker *worker);
    void getProductsInstancesTypeVersionCallback(OAIHttpRequestWorker *worker);
    void getProductsPackagesCallback(OAIHttpRequestWorker *worker);
    void getProductsPricesCallback(OAIHttpRequestWorker *worker);
    void getProductsZonesCallback(OAIHttpRequestWorker *worker);
    void getSelfCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdSsoCallback(OAIHttpRequestWorker *worker);
    void getSelfAddonsAddonIdTagsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdAddonsEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependenciesCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependentsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDeploymentsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdTagsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdVhostsCallback(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void getSelfConfirmationEmailCallback(OAIHttpRequestWorker *worker);
    void getSelfConsumersCallback(OAIHttpRequestWorker *worker);
    void getSelfConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void getSelfConsumersKeySecretCallback(OAIHttpRequestWorker *worker);
    void getSelfConsumptionsCallback(OAIHttpRequestWorker *worker);
    void getSelfCreditsCallback(OAIHttpRequestWorker *worker);
    void getSelfEmailsCallback(OAIHttpRequestWorker *worker);
    void getSelfIdCallback(OAIHttpRequestWorker *worker);
    void getSelfInstancesCallback(OAIHttpRequestWorker *worker);
    void getSelfKeysCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentInfoCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidPdfCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsFullpricePriceCallback(OAIHttpRequestWorker *worker);
    void getSelfPaymentsMethodsCallback(OAIHttpRequestWorker *worker);
    void getSelfTokensCallback(OAIHttpRequestWorker *worker);
    void getSelfValidateEmailCallback(OAIHttpRequestWorker *worker);
    void getSummaryCallback(OAIHttpRequestWorker *worker);
    void getUsersIdCallback(OAIHttpRequestWorker *worker);
    void getUsersIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdGitInfoCallback(OAIHttpRequestWorker *worker);
    void getVendorAppsCallback(OAIHttpRequestWorker *worker);
    void getVendorAppsAddonIdCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupMembersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupPeersCallback(OAIHttpRequestWorker *worker);
    void listNetworkGroupsCallback(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsGetCallback(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsIdOrUrlDeleteCallback(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsIdOrUrlGetCallback(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsPostCallback(OAIHttpRequestWorker *worker);
    void logsAppIdGetCallback(OAIHttpRequestWorker *worker);
    void logsAppIdSseGetCallback(OAIHttpRequestWorker *worker);
    void logsDrainsDrainIdPutCallback(OAIHttpRequestWorker *worker);
    void logsDrainsGetCallback(OAIHttpRequestWorker *worker);
    void logsLogsChunkedAppIdGetCallback(OAIHttpRequestWorker *worker);
    void logsLogsSocketAppIdGetCallback(OAIHttpRequestWorker *worker);
    void logsSocketAppIdGetCallback(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdGetCallback(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdIdDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdIdPutCallback(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdPostCallback(OAIHttpRequestWorker *worker);
    void notificationsInfoEventsGetCallback(OAIHttpRequestWorker *worker);
    void notificationsInfoWebhookformatsGetCallback(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdGetCallback(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdIdDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdIdPutCallback(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdPostCallback(OAIHttpRequestWorker *worker);
    void oauthAccessTokenQueryPostCallback(OAIHttpRequestWorker *worker);
    void oauthRequestTokenQueryPostCallback(OAIHttpRequestWorker *worker);
    void openapiGetCallback(OAIHttpRequestWorker *worker);
    void openapiTypeGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonprovidersProviderIdDeleteCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdMigrationsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdSsoGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsPreordersPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCallback(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void paymentsAssetsPayButtonTokenButtonPngGetCallback(OAIHttpRequestWorker *worker);
    void paymentsBidEndStripePostCallback(OAIHttpRequestWorker *worker);
    void postAuthorizeCallback(OAIHttpRequestWorker *worker);
    void postGithubRedeployCallback(OAIHttpRequestWorker *worker);
    void postGithubSignupCallback(OAIHttpRequestWorker *worker);
    void postOauthAccessTokenCallback(OAIHttpRequestWorker *worker);
    void postOauthAuthorizeCallback(OAIHttpRequestWorker *worker);
    void postOauthRequestTokenCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdPlansCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonprovidersProviderIdTestersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdConsumersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdMembersCallback(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void postPasswordForgottenCallback(OAIHttpRequestWorker *worker);
    void postPasswordForgottenKeyCallback(OAIHttpRequestWorker *worker);
    void postSelfAddonsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdAddonsCallback(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdInstancesCallback(OAIHttpRequestWorker *worker);
    void postSelfConsumersCallback(OAIHttpRequestWorker *worker);
    void postSelfPaymentsBillingsCallback(OAIHttpRequestWorker *worker);
    void postSelfPaymentsMethodsCallback(OAIHttpRequestWorker *worker);
    void postUsersCallback(OAIHttpRequestWorker *worker);
    void postVendorBillingOwnerIdCallback(OAIHttpRequestWorker *worker);
    void productsAddonprovidersProviderIdVersionsGetCallback(OAIHttpRequestWorker *worker);
    void productsMfaKindsGetCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAvatarCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdMembersUserIdCallback(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void putSelfCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdPlanCallback(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvEnvNameCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdTagsTagCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsDomainCallback(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsFavouriteCallback(OAIHttpRequestWorker *worker);
    void putSelfAvatarCallback(OAIHttpRequestWorker *worker);
    void putSelfChangePasswordCallback(OAIHttpRequestWorker *worker);
    void putSelfConsumersKeyCallback(OAIHttpRequestWorker *worker);
    void putSelfEmailsEmailCallback(OAIHttpRequestWorker *worker);
    void putSelfKeysKeyCallback(OAIHttpRequestWorker *worker);
    void putSelfPaymentsBillingsBidCallback(OAIHttpRequestWorker *worker);
    void putVendorAppsAddonIdCallback(OAIHttpRequestWorker *worker);
    void selfAddonsPreordersPostCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchesGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBuildflavorPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDependenciesEnvGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvGetCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvPutCallback(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdInstancesInstanceIdGetCallback(OAIHttpRequestWorker *worker);
    void selfCliTokensGetCallback(OAIHttpRequestWorker *worker);
    void selfMfaKindBackupcodesGetCallback(OAIHttpRequestWorker *worker);
    void selfMfaKindConfirmationPostCallback(OAIHttpRequestWorker *worker);
    void selfMfaKindDeleteCallback(OAIHttpRequestWorker *worker);
    void selfMfaKindPostCallback(OAIHttpRequestWorker *worker);
    void selfMfaKindPutCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultPutCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceMaxcreditPutCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void selfPaymentsTokensStripeGetCallback(OAIHttpRequestWorker *worker);
    void updateConfigProviderEnvCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsGetCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsIdOrUrlDeleteCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsIdOrUrlGetCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsPostCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdGetCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdLogsChunkedGetCallback(OAIHttpRequestWorker *worker);
    void v3LogsAppIdLogsSocketGetCallback(OAIHttpRequestWorker *worker);
    void vendorAddonsPostCallback(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdLogscollectorGetCallback(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdMigrationCallbackPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationAppIdEnvironmentGetSignal();
    void applicationAppIdEnvironmentPutSignal();
    void createMatomoSignal(QJsonValue summary);
    void createNetworkGroupSignal(QJsonValue summary);
    void createNetworkGroupExternalPeerSignal(QJsonValue summary);
    void createNetworkGroupMemberSignal();
    void deleteGithubLinkSignal();
    void deleteMatomoSignal(QJsonValue summary);
    void deleteNetworkGroupSignal();
    void deleteNetworkGroupExternalPeerSignal();
    void deleteNetworkGroupMemberSignal();
    void deleteNetworkGroupPeerSignal();
    void deleteOrganisationsIdSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal();
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignal();
    void deleteOrganisationsIdAddonsAddonIdSignal();
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignal();
    void deleteOrganisationsIdApplicationsAppIdSignal();
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignal();
    void deleteOrganisationsIdApplicationsAppIdInstancesSignal();
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void deleteOrganisationsIdConsumersKeySignal();
    void deleteOrganisationsIdMembersUserIdSignal();
    void deleteOrganisationsIdPaymentsBillingsBidSignal();
    void deleteOrganisationsIdPaymentsRecurringSignal();
    void deleteSelfSignal();
    void deleteSelfAddonsAddonIdSignal();
    void deleteSelfAddonsAddonIdTagsTagSignal();
    void deleteSelfApplicationsAppIdSignal();
    void deleteSelfApplicationsAppIdAddonsAddonIdSignal();
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignal();
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignal();
    void deleteSelfApplicationsAppIdEnvEnvNameSignal();
    void deleteSelfApplicationsAppIdInstancesSignal();
    void deleteSelfApplicationsAppIdTagsTagSignal();
    void deleteSelfApplicationsAppIdVhostsDomainSignal();
    void deleteSelfApplicationsAppIdVhostsFavouriteSignal();
    void deleteSelfConsumersKeySignal();
    void deleteSelfEmailsEmailSignal();
    void deleteSelfKeysKeySignal();
    void deleteSelfPaymentsBillingsBidSignal();
    void deleteSelfPaymentsMethodsMIdSignal();
    void deleteSelfPaymentsRecurringSignal();
    void deleteSelfTokensSignal();
    void deleteSelfTokensTokenSignal();
    void eventsEventSocketGetSignal();
    void getConfigProviderSignal(QJsonValue summary);
    void getConfigProviderEnvSignal(QList<QJsonValue> summary);
    void getGithubSignal(OAITransaction_Id summary);
    void getGithubApplicationsSignal(QList<OAIApplication> summary);
    void getGithubCallbackSignal();
    void getGithubEmailsSignal(QList<QString> summary);
    void getGithubKeysSignal(QList<OAIKey> summary);
    void getGithubLinkSignal();
    void getGithubLoginSignal();
    void getGithubSignupSignal();
    void getGithubUsernameSignal(QString summary);
    void getMatomoSignal(QJsonValue summary);
    void getMatomoKTokenValidationSignal(QJsonValue summary);
    void getNetworkGroupSignal(QJsonValue summary);
    void getNetworkGroupMemberSignal(OAISchema1 summary);
    void getNetworkGroupPeerSignal(QJsonValue summary);
    void getNetworkGroupStreamSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignal(QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignal(QJsonValue summary);
    void getNewsfeedEngineeringSignal();
    void getNewsfeedsBlogSignal();
    void getOauthAuthorizeSignal();
    void getOauthRightsSignal(OAIRights summary);
    void getOrganisationsSignal(QList<OAIOrganisation> summary);
    void getOrganisationsIdSignal(OAIOrganisation summary);
    void getOrganisationsIdAddonprovidersSignal(QList<OAIProvider> summary);
    void getOrganisationsIdAddonprovidersProviderIdSignal(OAIProvider summary);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignal(QList<OAIFeature> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignal(QList<OAIPlan> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal(OAIPlan summary);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdSsoSignal(OAIAddonProviderSso summary);
    void getOrganisationsIdAddonsAddonIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdApplicationsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignal(QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignal(QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignal(QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignal(QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignal(QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignal(QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignal(OAIVhost summary);
    void getOrganisationsIdConsumersSignal(QList<OAIConsumer> summary);
    void getOrganisationsIdConsumersKeySignal(OAIConsumer summary);
    void getOrganisationsIdConsumersKeySecretSignal(OAISecret summary);
    void getOrganisationsIdConsumptionsSignal(OAIConso summary);
    void getOrganisationsIdCreditsSignal(OAICredits summary);
    void getOrganisationsIdDeploymentsSignal(OAIDeploymentSummary summary);
    void getOrganisationsIdInstancesSignal(OAIObject summary);
    void getOrganisationsIdMembersSignal(QList<OAISchema1> summary);
    void getOrganisationsIdPaymentInfoSignal();
    void getOrganisationsIdPaymentsBillingsSignal();
    void getOrganisationsIdPaymentsBillingsBidSignal();
    void getOrganisationsIdPaymentsBillingsBidPdfSignal();
    void getOrganisationsIdPaymentsFullPricePriceSignal();
    void getPasswordForgottenSignal();
    void getPasswordForgottenKeySignal();
    void getPaymentsCouponsNameSignal();
    void getPaymentsProvidersSignal(QList<OAIPayment_Provider> summary);
    void getPaymentsTokensStripeSignal();
    void getProductsAddonProvidersSignal(QList<OAIProvider> summary);
    void getProductsAddonProvidersProviderIdSignal(OAIProvider summary);
    void getProductsCountriesSignal(OAICountry summary);
    void getProductsCountrycodesSignal(OAICountry summary);
    void getProductsInstancesSignal(QList<OAIInstance> summary);
    void getProductsInstancesTypeVersionSignal(OAIInstance summary);
    void getProductsPackagesSignal();
    void getProductsPricesSignal();
    void getProductsZonesSignal(QList<OAIZone> summary);
    void getSelfSignal(OAIUser summary);
    void getSelfAddonsSignal(QList<OAIAddon> summary);
    void getSelfAddonsAddonIdSignal(OAIAddon summary);
    void getSelfAddonsAddonIdApplicationsSignal(QList<OAIApplication> summary);
    void getSelfAddonsAddonIdEnvSignal(QList<OAIListEnv> summary);
    void getSelfAddonsAddonIdSsoSignal(OAISso summary);
    void getSelfAddonsAddonIdTagsSignal(QList<QString> summary);
    void getSelfApplicationsSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdSignal(OAIApplication summary);
    void getSelfApplicationsAppIdAddonsSignal(QList<OAIAddon> summary);
    void getSelfApplicationsAppIdAddonsEnvSignal(QList<OAIEnv> summary);
    void getSelfApplicationsAppIdDependenciesSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignal();
    void getSelfApplicationsAppIdDependentsSignal(QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDeploymentsSignal(QList<OAIDeployment> summary);
    void getSelfApplicationsAppIdEnvSignal(QList<OAIListEnv> summary);
    void getSelfApplicationsAppIdInstancesSignal(QList<OAIInstance> summary);
    void getSelfApplicationsAppIdTagsSignal(QList<QString> summary);
    void getSelfApplicationsAppIdVhostsSignal(QList<OAIVhost> summary);
    void getSelfApplicationsAppIdVhostsFavouriteSignal(OAIVhost summary);
    void getSelfConfirmationEmailSignal();
    void getSelfConsumersSignal(QList<OAIConsumer> summary);
    void getSelfConsumersKeySignal(OAIConsumer summary);
    void getSelfConsumersKeySecretSignal(OAISecret summary);
    void getSelfConsumptionsSignal(OAIConso summary);
    void getSelfCreditsSignal(OAICredits summary);
    void getSelfEmailsSignal(QList<QString> summary);
    void getSelfIdSignal(QString summary);
    void getSelfInstancesSignal(QList<OAIInstance> summary);
    void getSelfKeysSignal(QList<OAIKey> summary);
    void getSelfPaymentInfoSignal();
    void getSelfPaymentsBillingsSignal();
    void getSelfPaymentsBillingsBidSignal();
    void getSelfPaymentsBillingsBidPdfSignal();
    void getSelfPaymentsFullpricePriceSignal();
    void getSelfPaymentsMethodsSignal();
    void getSelfTokensSignal(QList<OAIToken> summary);
    void getSelfValidateEmailSignal();
    void getSummarySignal(OAISummary summary);
    void getUsersIdSignal(OAIUser summary);
    void getUsersIdApplicationsSignal(QList<OAIApplication> summary);
    void getUsersUserIdGitInfoSignal();
    void getVendorAppsSignal(QList<OAIApplication> summary);
    void getVendorAppsAddonIdSignal();
    void listNetworkGroupMembersSignal(QList<OAISchema1> summary);
    void listNetworkGroupPeersSignal(QList<QJsonValue> summary);
    void listNetworkGroupsSignal(QList<QJsonValue> summary);
    void logsAppIdDrainsGetSignal();
    void logsAppIdDrainsIdOrUrlDeleteSignal();
    void logsAppIdDrainsIdOrUrlGetSignal();
    void logsAppIdDrainsPostSignal();
    void logsAppIdGetSignal();
    void logsAppIdSseGetSignal();
    void logsDrainsDrainIdPutSignal();
    void logsDrainsGetSignal();
    void logsLogsChunkedAppIdGetSignal();
    void logsLogsSocketAppIdGetSignal();
    void logsSocketAppIdGetSignal();
    void notificationsEmailhooksOwnerIdGetSignal();
    void notificationsEmailhooksOwnerIdIdDeleteSignal();
    void notificationsEmailhooksOwnerIdIdPutSignal();
    void notificationsEmailhooksOwnerIdPostSignal();
    void notificationsInfoEventsGetSignal();
    void notificationsInfoWebhookformatsGetSignal();
    void notificationsWebhooksOwnerIdGetSignal();
    void notificationsWebhooksOwnerIdIdDeleteSignal();
    void notificationsWebhooksOwnerIdIdPutSignal();
    void notificationsWebhooksOwnerIdPostSignal();
    void oauthAccessTokenQueryPostSignal();
    void oauthRequestTokenQueryPostSignal();
    void openapiGetSignal();
    void openapiTypeGetSignal();
    void organisationsIdAddonprovidersProviderIdDeleteSignal();
    void organisationsIdAddonsAddonIdInstancesGetSignal(QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignal(OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignal(QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignal(OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignal(OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignal(OAISso summary);
    void organisationsIdAddonsPreordersPostSignal();
    void organisationsIdApplicationsAppIdBranchPutSignal();
    void organisationsIdApplicationsAppIdBranchesGetSignal();
    void organisationsIdApplicationsAppIdBuildflavorPutSignal();
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignal(QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvGetSignal();
    void organisationsIdApplicationsAppIdExposedEnvPutSignal();
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignal();
    void organisationsIdPaymentsBillingsUnpaidGetSignal();
    void organisationsIdPaymentsMethodsDefaultGetSignal();
    void organisationsIdPaymentsMethodsDefaultPutSignal();
    void organisationsIdPaymentsMethodsGetSignal();
    void organisationsIdPaymentsMethodsMIdDeleteSignal();
    void organisationsIdPaymentsMethodsPostSignal();
    void organisationsIdPaymentsMonthlyinvoiceGetSignal();
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignal();
    void organisationsIdPaymentsRecurringGetSignal();
    void paymentsAssetsPayButtonTokenButtonPngGetSignal();
    void paymentsBidEndStripePostSignal();
    void postAuthorizeSignal();
    void postGithubRedeploySignal();
    void postGithubSignupSignal();
    void postOauthAccessTokenSignal();
    void postOauthAuthorizeSignal();
    void postOauthRequestTokenSignal();
    void postOrganisationsSignal(OAIOrganisation summary);
    void postOrganisationsIdAddonprovidersSignal(OAIProvider summary);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignal(OAIFeature summary);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignal(OAIPlan summary);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignal();
    void postOrganisationsIdAddonsSignal(OAIAddon summary);
    void postOrganisationsIdApplicationsSignal(OAIApplication summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignal();
    void postOrganisationsIdApplicationsAppIdInstancesSignal();
    void postOrganisationsIdConsumersSignal();
    void postOrganisationsIdMembersSignal();
    void postOrganisationsIdPaymentsBillingsSignal();
    void postPasswordForgottenSignal();
    void postPasswordForgottenKeySignal();
    void postSelfAddonsSignal();
    void postSelfApplicationsSignal();
    void postSelfApplicationsAppIdAddonsSignal();
    void postSelfApplicationsAppIdInstancesSignal();
    void postSelfConsumersSignal();
    void postSelfPaymentsBillingsSignal();
    void postSelfPaymentsMethodsSignal();
    void postUsersSignal();
    void postVendorBillingOwnerIdSignal();
    void productsAddonprovidersProviderIdVersionsGetSignal();
    void productsMfaKindsGetSignal();
    void putOrganisationsIdSignal(OAIOrganisation summary);
    void putOrganisationsIdAddonprovidersProviderIdSignal(OAIProvider summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignal(OAIPlan summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignal();
    void putOrganisationsIdAddonsAddonIdSignal(OAIAddon summary);
    void putOrganisationsIdAddonsAddonIdTagsTagSignal();
    void putOrganisationsIdApplicationsAppIdSignal(OAIApplication summary);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignal();
    void putOrganisationsIdApplicationsAppIdEnvSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignal(OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignal();
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignal();
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignal();
    void putOrganisationsIdAvatarSignal();
    void putOrganisationsIdConsumersKeySignal();
    void putOrganisationsIdMembersUserIdSignal();
    void putOrganisationsIdPaymentsBillingsBidSignal();
    void putSelfSignal();
    void putSelfAddonsAddonIdSignal();
    void putSelfAddonsAddonIdPlanSignal();
    void putSelfAddonsAddonIdTagsTagSignal();
    void putSelfApplicationsAppIdSignal();
    void putSelfApplicationsAppIdEnvSignal();
    void putSelfApplicationsAppIdEnvEnvNameSignal();
    void putSelfApplicationsAppIdTagsTagSignal();
    void putSelfApplicationsAppIdVhostsDomainSignal();
    void putSelfApplicationsAppIdVhostsFavouriteSignal();
    void putSelfAvatarSignal();
    void putSelfChangePasswordSignal(OAIChange_Password summary);
    void putSelfConsumersKeySignal();
    void putSelfEmailsEmailSignal();
    void putSelfKeysKeySignal();
    void putSelfPaymentsBillingsBidSignal();
    void putVendorAppsAddonIdSignal();
    void selfAddonsPreordersPostSignal();
    void selfApplicationsAppIdBranchPutSignal();
    void selfApplicationsAppIdBranchesGetSignal();
    void selfApplicationsAppIdBuildflavorPutSignal();
    void selfApplicationsAppIdDependenciesEnvGetSignal(QList<OAILinkedAppEnv> summary);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignal();
    void selfApplicationsAppIdExposedEnvGetSignal();
    void selfApplicationsAppIdExposedEnvPutSignal();
    void selfApplicationsAppIdInstancesInstanceIdGetSignal();
    void selfCliTokensGetSignal();
    void selfMfaKindBackupcodesGetSignal();
    void selfMfaKindConfirmationPostSignal();
    void selfMfaKindDeleteSignal();
    void selfMfaKindPostSignal();
    void selfMfaKindPutSignal();
    void selfPaymentsMethodsDefaultGetSignal();
    void selfPaymentsMethodsDefaultPutSignal();
    void selfPaymentsMonthlyinvoiceGetSignal();
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignal();
    void selfPaymentsRecurringGetSignal();
    void selfPaymentsTokensStripeGetSignal();
    void updateConfigProviderEnvSignal(QList<QJsonValue> summary);
    void v3LogsAppIdDrainsGetSignal();
    void v3LogsAppIdDrainsIdOrUrlDeleteSignal();
    void v3LogsAppIdDrainsIdOrUrlGetSignal();
    void v3LogsAppIdDrainsPostSignal();
    void v3LogsAppIdGetSignal();
    void v3LogsAppIdLogsChunkedGetSignal();
    void v3LogsAppIdLogsSocketGetSignal();
    void vendorAddonsPostSignal();
    void vendorAppsAddonIdLogscollectorGetSignal();
    void vendorAppsAddonIdMigrationCallbackPutSignal();


    void applicationAppIdEnvironmentGetSignalFull(OAIHttpRequestWorker *worker);
    void applicationAppIdEnvironmentPutSignalFull(OAIHttpRequestWorker *worker);
    void createMatomoSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void deleteGithubLinkSignalFull(OAIHttpRequestWorker *worker);
    void deleteMatomoSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void deleteNetworkGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupExternalPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker);
    void deleteNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void deleteOrganisationsIdPaymentsRecurringSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfEmailsEmailSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfKeysKeySignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsMethodsMIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfPaymentsRecurringSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfTokensSignalFull(OAIHttpRequestWorker *worker);
    void deleteSelfTokensTokenSignalFull(OAIHttpRequestWorker *worker);
    void eventsEventSocketGetSignalFull(OAIHttpRequestWorker *worker);
    void getConfigProviderSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getConfigProviderEnvSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getGithubSignalFull(OAIHttpRequestWorker *worker, OAITransaction_Id summary);
    void getGithubApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getGithubCallbackSignalFull(OAIHttpRequestWorker *worker);
    void getGithubEmailsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getGithubKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void getGithubLinkSignalFull(OAIHttpRequestWorker *worker);
    void getGithubLoginSignalFull(OAIHttpRequestWorker *worker);
    void getGithubSignupSignalFull(OAIHttpRequestWorker *worker);
    void getGithubUsernameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getMatomoSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getMatomoKTokenValidationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupMemberSignalFull(OAIHttpRequestWorker *worker, OAISchema1 summary);
    void getNetworkGroupPeerSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNetworkGroupWireGuardConfigurationStreamSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getNewsfeedEngineeringSignalFull(OAIHttpRequestWorker *worker);
    void getNewsfeedsBlogSignalFull(OAIHttpRequestWorker *worker);
    void getOauthAuthorizeSignalFull(OAIHttpRequestWorker *worker);
    void getOauthRightsSignalFull(OAIHttpRequestWorker *worker, OAIRights summary);
    void getOrganisationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganisation> summary);
    void getOrganisationsIdSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void getOrganisationsIdAddonprovidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIProvider> summary);
    void getOrganisationsIdAddonprovidersProviderIdSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeature> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalFull(OAIHttpRequestWorker *worker, QList<OAIPlan> summary);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdAddonsAddonIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdAddonsAddonIdSsoSignalFull(OAIHttpRequestWorker *worker, OAIAddonProviderSso summary);
    void getOrganisationsIdAddonsAddonIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDependentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void getOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppInstance> summary);
    void getOrganisationsIdApplicationsAppIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getOrganisationsIdApplicationsAppIdVhostsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVhost> summary);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIVhost summary);
    void getOrganisationsIdConsumersSignalFull(OAIHttpRequestWorker *worker, QList<OAIConsumer> summary);
    void getOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker, OAIConsumer summary);
    void getOrganisationsIdConsumersKeySecretSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void getOrganisationsIdConsumptionsSignalFull(OAIHttpRequestWorker *worker, OAIConso summary);
    void getOrganisationsIdCreditsSignalFull(OAIHttpRequestWorker *worker, OAICredits summary);
    void getOrganisationsIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentSummary summary);
    void getOrganisationsIdInstancesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getOrganisationsIdMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISchema1> summary);
    void getOrganisationsIdPaymentInfoSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalFull(OAIHttpRequestWorker *worker);
    void getOrganisationsIdPaymentsFullPricePriceSignalFull(OAIHttpRequestWorker *worker);
    void getPasswordForgottenSignalFull(OAIHttpRequestWorker *worker);
    void getPasswordForgottenKeySignalFull(OAIHttpRequestWorker *worker);
    void getPaymentsCouponsNameSignalFull(OAIHttpRequestWorker *worker);
    void getPaymentsProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIPayment_Provider> summary);
    void getPaymentsTokensStripeSignalFull(OAIHttpRequestWorker *worker);
    void getProductsAddonProvidersSignalFull(OAIHttpRequestWorker *worker, QList<OAIProvider> summary);
    void getProductsAddonProvidersProviderIdSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void getProductsCountriesSignalFull(OAIHttpRequestWorker *worker, OAICountry summary);
    void getProductsCountrycodesSignalFull(OAIHttpRequestWorker *worker, OAICountry summary);
    void getProductsInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstance> summary);
    void getProductsInstancesTypeVersionSignalFull(OAIHttpRequestWorker *worker, OAIInstance summary);
    void getProductsPackagesSignalFull(OAIHttpRequestWorker *worker);
    void getProductsPricesSignalFull(OAIHttpRequestWorker *worker);
    void getProductsZonesSignalFull(OAIHttpRequestWorker *worker, QList<OAIZone> summary);
    void getSelfSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getSelfAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void getSelfAddonsAddonIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfAddonsAddonIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getSelfAddonsAddonIdSsoSignalFull(OAIHttpRequestWorker *worker, OAISso summary);
    void getSelfAddonsAddonIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSelfApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddon> summary);
    void getSelfApplicationsAppIdAddonsEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnv> summary);
    void getSelfApplicationsAppIdDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void getSelfApplicationsAppIdDependentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getSelfApplicationsAppIdDeploymentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployment> summary);
    void getSelfApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, QList<OAIListEnv> summary);
    void getSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstance> summary);
    void getSelfApplicationsAppIdTagsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSelfApplicationsAppIdVhostsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVhost> summary);
    void getSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker, OAIVhost summary);
    void getSelfConfirmationEmailSignalFull(OAIHttpRequestWorker *worker);
    void getSelfConsumersSignalFull(OAIHttpRequestWorker *worker, QList<OAIConsumer> summary);
    void getSelfConsumersKeySignalFull(OAIHttpRequestWorker *worker, OAIConsumer summary);
    void getSelfConsumersKeySecretSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void getSelfConsumptionsSignalFull(OAIHttpRequestWorker *worker, OAIConso summary);
    void getSelfCreditsSignalFull(OAIHttpRequestWorker *worker, OAICredits summary);
    void getSelfEmailsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getSelfIdSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getSelfInstancesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstance> summary);
    void getSelfKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIKey> summary);
    void getSelfPaymentInfoSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsBillingsBidPdfSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsFullpricePriceSignalFull(OAIHttpRequestWorker *worker);
    void getSelfPaymentsMethodsSignalFull(OAIHttpRequestWorker *worker);
    void getSelfTokensSignalFull(OAIHttpRequestWorker *worker, QList<OAIToken> summary);
    void getSelfValidateEmailSignalFull(OAIHttpRequestWorker *worker);
    void getSummarySignalFull(OAIHttpRequestWorker *worker, OAISummary summary);
    void getUsersIdSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUsersIdApplicationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getUsersUserIdGitInfoSignalFull(OAIHttpRequestWorker *worker);
    void getVendorAppsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplication> summary);
    void getVendorAppsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void listNetworkGroupMembersSignalFull(OAIHttpRequestWorker *worker, QList<OAISchema1> summary);
    void listNetworkGroupPeersSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void listNetworkGroupsSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void logsAppIdDrainsGetSignalFull(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsIdOrUrlDeleteSignalFull(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsIdOrUrlGetSignalFull(OAIHttpRequestWorker *worker);
    void logsAppIdDrainsPostSignalFull(OAIHttpRequestWorker *worker);
    void logsAppIdGetSignalFull(OAIHttpRequestWorker *worker);
    void logsAppIdSseGetSignalFull(OAIHttpRequestWorker *worker);
    void logsDrainsDrainIdPutSignalFull(OAIHttpRequestWorker *worker);
    void logsDrainsGetSignalFull(OAIHttpRequestWorker *worker);
    void logsLogsChunkedAppIdGetSignalFull(OAIHttpRequestWorker *worker);
    void logsLogsSocketAppIdGetSignalFull(OAIHttpRequestWorker *worker);
    void logsSocketAppIdGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdIdPutSignalFull(OAIHttpRequestWorker *worker);
    void notificationsEmailhooksOwnerIdPostSignalFull(OAIHttpRequestWorker *worker);
    void notificationsInfoEventsGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsInfoWebhookformatsGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdIdPutSignalFull(OAIHttpRequestWorker *worker);
    void notificationsWebhooksOwnerIdPostSignalFull(OAIHttpRequestWorker *worker);
    void oauthAccessTokenQueryPostSignalFull(OAIHttpRequestWorker *worker);
    void oauthRequestTokenQueryPostSignalFull(OAIHttpRequestWorker *worker);
    void openapiGetSignalFull(OAIHttpRequestWorker *worker);
    void openapiTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdAddonprovidersProviderIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdAddonsAddonIdInstancesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISupernovaInstanceView> summary);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker, OAISupernovaInstanceView summary);
    void organisationsIdAddonsAddonIdMigrationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddonMigration> summary);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIAddonMigration summary);
    void organisationsIdAddonsAddonIdMigrationsPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void organisationsIdAddonsAddonIdSsoGetSignalFull(OAIHttpRequestWorker *worker, OAISso summary);
    void organisationsIdAddonsPreordersPostSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBranchesGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedAppEnv> summary);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsBillingsUnpaidGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsDefaultPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsMIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMethodsPostSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalFull(OAIHttpRequestWorker *worker);
    void organisationsIdPaymentsRecurringGetSignalFull(OAIHttpRequestWorker *worker);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalFull(OAIHttpRequestWorker *worker);
    void paymentsBidEndStripePostSignalFull(OAIHttpRequestWorker *worker);
    void postAuthorizeSignalFull(OAIHttpRequestWorker *worker);
    void postGithubRedeploySignalFull(OAIHttpRequestWorker *worker);
    void postGithubSignupSignalFull(OAIHttpRequestWorker *worker);
    void postOauthAccessTokenSignalFull(OAIHttpRequestWorker *worker);
    void postOauthAuthorizeSignalFull(OAIHttpRequestWorker *worker);
    void postOauthRequestTokenSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void postOrganisationsIdAddonprovidersSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalFull(OAIHttpRequestWorker *worker, OAIFeature summary);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdAddonsSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void postOrganisationsIdApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void postOrganisationsIdApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdConsumersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdMembersSignalFull(OAIHttpRequestWorker *worker);
    void postOrganisationsIdPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void postPasswordForgottenSignalFull(OAIHttpRequestWorker *worker);
    void postPasswordForgottenKeySignalFull(OAIHttpRequestWorker *worker);
    void postSelfAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdAddonsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfApplicationsAppIdInstancesSignalFull(OAIHttpRequestWorker *worker);
    void postSelfConsumersSignalFull(OAIHttpRequestWorker *worker);
    void postSelfPaymentsBillingsSignalFull(OAIHttpRequestWorker *worker);
    void postSelfPaymentsMethodsSignalFull(OAIHttpRequestWorker *worker);
    void postUsersSignalFull(OAIHttpRequestWorker *worker);
    void postVendorBillingOwnerIdSignalFull(OAIHttpRequestWorker *worker);
    void productsAddonprovidersProviderIdVersionsGetSignalFull(OAIHttpRequestWorker *worker);
    void productsMfaKindsGetSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void putOrganisationsIdAddonprovidersProviderIdSignalFull(OAIHttpRequestWorker *worker, OAIProvider summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalFull(OAIHttpRequestWorker *worker, OAIPlan summary);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker, OAIAddon summary);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker, OAIListEnv summary);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdAvatarSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdMembersUserIdSignalFull(OAIHttpRequestWorker *worker);
    void putOrganisationsIdPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void putSelfSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdPlanSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAddonsAddonIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdEnvEnvNameSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdTagsTagSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsDomainSignalFull(OAIHttpRequestWorker *worker);
    void putSelfApplicationsAppIdVhostsFavouriteSignalFull(OAIHttpRequestWorker *worker);
    void putSelfAvatarSignalFull(OAIHttpRequestWorker *worker);
    void putSelfChangePasswordSignalFull(OAIHttpRequestWorker *worker, OAIChange_Password summary);
    void putSelfConsumersKeySignalFull(OAIHttpRequestWorker *worker);
    void putSelfEmailsEmailSignalFull(OAIHttpRequestWorker *worker);
    void putSelfKeysKeySignalFull(OAIHttpRequestWorker *worker);
    void putSelfPaymentsBillingsBidSignalFull(OAIHttpRequestWorker *worker);
    void putVendorAppsAddonIdSignalFull(OAIHttpRequestWorker *worker);
    void selfAddonsPreordersPostSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBranchesGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdBuildflavorPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdDependenciesEnvGetSignalFull(OAIHttpRequestWorker *worker, QList<OAILinkedAppEnv> summary);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvGetSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdExposedEnvPutSignalFull(OAIHttpRequestWorker *worker);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalFull(OAIHttpRequestWorker *worker);
    void selfCliTokensGetSignalFull(OAIHttpRequestWorker *worker);
    void selfMfaKindBackupcodesGetSignalFull(OAIHttpRequestWorker *worker);
    void selfMfaKindConfirmationPostSignalFull(OAIHttpRequestWorker *worker);
    void selfMfaKindDeleteSignalFull(OAIHttpRequestWorker *worker);
    void selfMfaKindPostSignalFull(OAIHttpRequestWorker *worker);
    void selfMfaKindPutSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMethodsDefaultPutSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsRecurringGetSignalFull(OAIHttpRequestWorker *worker);
    void selfPaymentsTokensStripeGetSignalFull(OAIHttpRequestWorker *worker);
    void updateConfigProviderEnvSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void v3LogsAppIdDrainsGetSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsIdOrUrlDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsIdOrUrlGetSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdDrainsPostSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdGetSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdLogsChunkedGetSignalFull(OAIHttpRequestWorker *worker);
    void v3LogsAppIdLogsSocketGetSignalFull(OAIHttpRequestWorker *worker);
    void vendorAddonsPostSignalFull(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdLogscollectorGetSignalFull(OAIHttpRequestWorker *worker);
    void vendorAppsAddonIdMigrationCallbackPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use applicationAppIdEnvironmentGetSignalError() instead")
    void applicationAppIdEnvironmentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationAppIdEnvironmentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationAppIdEnvironmentPutSignalError() instead")
    void applicationAppIdEnvironmentPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationAppIdEnvironmentPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMatomoSignalError() instead")
    void createMatomoSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMatomoSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalError() instead")
    void createNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalError() instead")
    void createNetworkGroupExternalPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalError() instead")
    void createNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGithubLinkSignalError() instead")
    void deleteGithubLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGithubLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMatomoSignalError() instead")
    void deleteMatomoSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMatomoSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalError() instead")
    void deleteNetworkGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalError() instead")
    void deleteNetworkGroupExternalPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalError() instead")
    void deleteNetworkGroupMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalError() instead")
    void deleteNetworkGroupPeerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdSignalError() instead")
    void deleteOrganisationsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdConsumersKeySignalError() instead")
    void deleteOrganisationsIdConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdMembersUserIdSignalError() instead")
    void deleteOrganisationsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalError() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfSignalError() instead")
    void deleteSelfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdSignalError() instead")
    void deleteSelfAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdTagsTagSignalError() instead")
    void deleteSelfAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdSignalError() instead")
    void deleteSelfApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalError() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError() instead")
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdEnvEnvNameSignalError() instead")
    void deleteSelfApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdInstancesSignalError() instead")
    void deleteSelfApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdTagsTagSignalError() instead")
    void deleteSelfApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsDomainSignalError() instead")
    void deleteSelfApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfConsumersKeySignalError() instead")
    void deleteSelfConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfEmailsEmailSignalError() instead")
    void deleteSelfEmailsEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfEmailsEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfKeysKeySignalError() instead")
    void deleteSelfKeysKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfKeysKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsBillingsBidSignalError() instead")
    void deleteSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsMethodsMIdSignalError() instead")
    void deleteSelfPaymentsMethodsMIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsMethodsMIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsRecurringSignalError() instead")
    void deleteSelfPaymentsRecurringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsRecurringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfTokensSignalError() instead")
    void deleteSelfTokensSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfTokensSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfTokensTokenSignalError() instead")
    void deleteSelfTokensTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfTokensTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsEventSocketGetSignalError() instead")
    void eventsEventSocketGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventSocketGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderSignalError() instead")
    void getConfigProviderSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderEnvSignalError() instead")
    void getConfigProviderEnvSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderEnvSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignalError() instead")
    void getGithubSignalE(OAITransaction_Id summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignalError(OAITransaction_Id summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalError() instead")
    void getGithubApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubCallbackSignalError() instead")
    void getGithubCallbackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubCallbackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubEmailsSignalError() instead")
    void getGithubEmailsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubEmailsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubKeysSignalError() instead")
    void getGithubKeysSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubKeysSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLinkSignalError() instead")
    void getGithubLinkSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLinkSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLoginSignalError() instead")
    void getGithubLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignupSignalError() instead")
    void getGithubSignupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubUsernameSignalError() instead")
    void getGithubUsernameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubUsernameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoSignalError() instead")
    void getMatomoSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoKTokenValidationSignalError() instead")
    void getMatomoKTokenValidationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoKTokenValidationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalError() instead")
    void getNetworkGroupSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalError() instead")
    void getNetworkGroupMemberSignalE(OAISchema1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalError(OAISchema1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalError() instead")
    void getNetworkGroupPeerSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalError() instead")
    void getNetworkGroupStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalError() instead")
    void getNetworkGroupWireGuardConfigurationSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalError() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewsfeedEngineeringSignalError() instead")
    void getNewsfeedEngineeringSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNewsfeedEngineeringSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewsfeedsBlogSignalError() instead")
    void getNewsfeedsBlogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNewsfeedsBlogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthAuthorizeSignalError() instead")
    void getOauthAuthorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthAuthorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthRightsSignalError() instead")
    void getOauthRightsSignalE(OAIRights summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthRightsSignalError(OAIRights summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalError() instead")
    void getOrganisationsSignalE(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalError(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdSignalError() instead")
    void getOrganisationsIdSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersSignalError() instead")
    void getOrganisationsIdAddonprovidersSignalE(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersSignalError(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdFeaturesSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalE(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalError(QList<OAIFeature> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalE(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalError(QList<OAIPlan> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdTagsSignalError() instead")
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalError() instead")
    void getOrganisationsIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalError() instead")
    void getOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalError() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSsoSignalError() instead")
    void getOrganisationsIdAddonsAddonIdSsoSignalE(OAIAddonProviderSso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSsoSignalError(OAIAddonProviderSso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalError() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalError() instead")
    void getOrganisationsIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalError() instead")
    void getOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalE(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalError(QList<OAIAppInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalE(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalError(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(OAIVhost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(OAIVhost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersSignalError() instead")
    void getOrganisationsIdConsumersSignalE(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersSignalError(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySignalError() instead")
    void getOrganisationsIdConsumersKeySignalE(OAIConsumer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySignalError(OAIConsumer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySecretSignalError() instead")
    void getOrganisationsIdConsumersKeySecretSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySecretSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumptionsSignalError() instead")
    void getOrganisationsIdConsumptionsSignalE(OAIConso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumptionsSignalError(OAIConso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdCreditsSignalError() instead")
    void getOrganisationsIdCreditsSignalE(OAICredits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdCreditsSignalError(OAICredits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdDeploymentsSignalError() instead")
    void getOrganisationsIdDeploymentsSignalE(OAIDeploymentSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdDeploymentsSignalError(OAIDeploymentSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdInstancesSignalError() instead")
    void getOrganisationsIdInstancesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdInstancesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdMembersSignalError() instead")
    void getOrganisationsIdMembersSignalE(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdMembersSignalError(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentInfoSignalError() instead")
    void getOrganisationsIdPaymentInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalError() instead")
    void getOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalError() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalError() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordForgottenSignalError() instead")
    void getPasswordForgottenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordForgottenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordForgottenKeySignalError() instead")
    void getPasswordForgottenKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordForgottenKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsCouponsNameSignalError() instead")
    void getPaymentsCouponsNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsCouponsNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsProvidersSignalError() instead")
    void getPaymentsProvidersSignalE(QList<OAIPayment_Provider> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsProvidersSignalError(QList<OAIPayment_Provider> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsTokensStripeSignalError() instead")
    void getPaymentsTokensStripeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsTokensStripeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsAddonProvidersSignalError() instead")
    void getProductsAddonProvidersSignalE(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsAddonProvidersSignalError(QList<OAIProvider> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsAddonProvidersProviderIdSignalError() instead")
    void getProductsAddonProvidersProviderIdSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsAddonProvidersProviderIdSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCountriesSignalError() instead")
    void getProductsCountriesSignalE(OAICountry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCountriesSignalError(OAICountry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCountrycodesSignalError() instead")
    void getProductsCountrycodesSignalE(OAICountry summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCountrycodesSignalError(OAICountry summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsInstancesSignalError() instead")
    void getProductsInstancesSignalE(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsInstancesSignalError(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsInstancesTypeVersionSignalError() instead")
    void getProductsInstancesTypeVersionSignalE(OAIInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsInstancesTypeVersionSignalError(OAIInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsPackagesSignalError() instead")
    void getProductsPackagesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsPackagesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsPricesSignalError() instead")
    void getProductsPricesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsPricesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsZonesSignalError() instead")
    void getProductsZonesSignalE(QList<OAIZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsZonesSignalError(QList<OAIZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfSignalError() instead")
    void getSelfSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsSignalError() instead")
    void getSelfAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSignalError() instead")
    void getSelfAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalError() instead")
    void getSelfAddonsAddonIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdEnvSignalError() instead")
    void getSelfAddonsAddonIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSsoSignalError() instead")
    void getSelfAddonsAddonIdSsoSignalE(OAISso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSsoSignalError(OAISso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdTagsSignalError() instead")
    void getSelfAddonsAddonIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsSignalError() instead")
    void getSelfApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdSignalError() instead")
    void getSelfApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalError() instead")
    void getSelfApplicationsAppIdAddonsSignalE(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalError(QList<OAIAddon> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalError() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalE(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalError(QList<OAIEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesSignalError() instead")
    void getSelfApplicationsAppIdDependenciesSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependentsSignalError() instead")
    void getSelfApplicationsAppIdDependentsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependentsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDeploymentsSignalError() instead")
    void getSelfApplicationsAppIdDeploymentsSignalE(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDeploymentsSignalError(QList<OAIDeployment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdEnvSignalError() instead")
    void getSelfApplicationsAppIdEnvSignalE(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdEnvSignalError(QList<OAIListEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdInstancesSignalError() instead")
    void getSelfApplicationsAppIdInstancesSignalE(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdInstancesSignalError(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdTagsSignalError() instead")
    void getSelfApplicationsAppIdTagsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdTagsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsSignalError() instead")
    void getSelfApplicationsAppIdVhostsSignalE(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsSignalError(QList<OAIVhost> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void getSelfApplicationsAppIdVhostsFavouriteSignalE(OAIVhost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsFavouriteSignalError(OAIVhost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConfirmationEmailSignalError() instead")
    void getSelfConfirmationEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConfirmationEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersSignalError() instead")
    void getSelfConsumersSignalE(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersSignalError(QList<OAIConsumer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersKeySignalError() instead")
    void getSelfConsumersKeySignalE(OAIConsumer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersKeySignalError(OAIConsumer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersKeySecretSignalError() instead")
    void getSelfConsumersKeySecretSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersKeySecretSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumptionsSignalError() instead")
    void getSelfConsumptionsSignalE(OAIConso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumptionsSignalError(OAIConso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfCreditsSignalError() instead")
    void getSelfCreditsSignalE(OAICredits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfCreditsSignalError(OAICredits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfEmailsSignalError() instead")
    void getSelfEmailsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfEmailsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfIdSignalError() instead")
    void getSelfIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfInstancesSignalError() instead")
    void getSelfInstancesSignalE(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfInstancesSignalError(QList<OAIInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfKeysSignalError() instead")
    void getSelfKeysSignalE(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfKeysSignalError(QList<OAIKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentInfoSignalError() instead")
    void getSelfPaymentInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsSignalError() instead")
    void getSelfPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidSignalError() instead")
    void getSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidPdfSignalError() instead")
    void getSelfPaymentsBillingsBidPdfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidPdfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsFullpricePriceSignalError() instead")
    void getSelfPaymentsFullpricePriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsFullpricePriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsMethodsSignalError() instead")
    void getSelfPaymentsMethodsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsMethodsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfTokensSignalError() instead")
    void getSelfTokensSignalE(QList<OAIToken> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfTokensSignalError(QList<OAIToken> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfValidateEmailSignalError() instead")
    void getSelfValidateEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfValidateEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSummarySignalError() instead")
    void getSummarySignalE(OAISummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSummarySignalError(OAISummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdSignalError() instead")
    void getUsersIdSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdApplicationsSignalError() instead")
    void getUsersIdApplicationsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdApplicationsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdGitInfoSignalError() instead")
    void getUsersUserIdGitInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdGitInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsSignalError() instead")
    void getVendorAppsSignalE(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsSignalError(QList<OAIApplication> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsAddonIdSignalError() instead")
    void getVendorAppsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalError() instead")
    void listNetworkGroupMembersSignalE(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalError(QList<OAISchema1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalError() instead")
    void listNetworkGroupPeersSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalError() instead")
    void listNetworkGroupsSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsGetSignalError() instead")
    void logsAppIdDrainsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsIdOrUrlDeleteSignalError() instead")
    void logsAppIdDrainsIdOrUrlDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsIdOrUrlDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsIdOrUrlGetSignalError() instead")
    void logsAppIdDrainsIdOrUrlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsIdOrUrlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsPostSignalError() instead")
    void logsAppIdDrainsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdGetSignalError() instead")
    void logsAppIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdSseGetSignalError() instead")
    void logsAppIdSseGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdSseGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsDrainsDrainIdPutSignalError() instead")
    void logsDrainsDrainIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsDrainsDrainIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsDrainsGetSignalError() instead")
    void logsDrainsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsDrainsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogsChunkedAppIdGetSignalError() instead")
    void logsLogsChunkedAppIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogsChunkedAppIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogsSocketAppIdGetSignalError() instead")
    void logsLogsSocketAppIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogsSocketAppIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsSocketAppIdGetSignalError() instead")
    void logsSocketAppIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsSocketAppIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdGetSignalError() instead")
    void notificationsEmailhooksOwnerIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdIdDeleteSignalError() instead")
    void notificationsEmailhooksOwnerIdIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdIdPutSignalError() instead")
    void notificationsEmailhooksOwnerIdIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdPostSignalError() instead")
    void notificationsEmailhooksOwnerIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsInfoEventsGetSignalError() instead")
    void notificationsInfoEventsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsInfoEventsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsInfoWebhookformatsGetSignalError() instead")
    void notificationsInfoWebhookformatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsInfoWebhookformatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdGetSignalError() instead")
    void notificationsWebhooksOwnerIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdIdDeleteSignalError() instead")
    void notificationsWebhooksOwnerIdIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdIdPutSignalError() instead")
    void notificationsWebhooksOwnerIdIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdPostSignalError() instead")
    void notificationsWebhooksOwnerIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAccessTokenQueryPostSignalError() instead")
    void oauthAccessTokenQueryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAccessTokenQueryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthRequestTokenQueryPostSignalError() instead")
    void oauthRequestTokenQueryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oauthRequestTokenQueryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openapiGetSignalError() instead")
    void openapiGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void openapiGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openapiTypeGetSignalError() instead")
    void openapiTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void openapiTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonprovidersProviderIdDeleteSignalError() instead")
    void organisationsIdAddonprovidersProviderIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonprovidersProviderIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalE(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalError(QList<OAISupernovaInstanceView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalE(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalError(OAISupernovaInstanceView summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalE(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalError(QList<OAIAddonMigration> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalE(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalError(OAIAddonMigration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalError() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalError() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalE(OAISso summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalError(OAISso summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalError() instead")
    void organisationsIdAddonsPreordersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalError() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalError() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalError() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalE(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalError(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalError() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalError() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalError() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalError() instead")
    void organisationsIdPaymentsMethodsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalError() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalError() instead")
    void organisationsIdPaymentsMethodsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalError() instead")
    void organisationsIdPaymentsRecurringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsAssetsPayButtonTokenButtonPngGetSignalError() instead")
    void paymentsAssetsPayButtonTokenButtonPngGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsBidEndStripePostSignalError() instead")
    void paymentsBidEndStripePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsBidEndStripePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizeSignalError() instead")
    void postAuthorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubRedeploySignalError() instead")
    void postGithubRedeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubRedeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubSignupSignalError() instead")
    void postGithubSignupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubSignupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAccessTokenSignalError() instead")
    void postOauthAccessTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAccessTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAuthorizeSignalError() instead")
    void postOauthAuthorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAuthorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthRequestTokenSignalError() instead")
    void postOauthRequestTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthRequestTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsSignalError() instead")
    void postOrganisationsSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersSignalError() instead")
    void postOrganisationsIdAddonprovidersSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdFeaturesSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalE(OAIFeature summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalError(OAIFeature summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdPlansSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdTestersSignalError() instead")
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalError() instead")
    void postOrganisationsIdAddonsSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalError() instead")
    void postOrganisationsIdApplicationsSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalError() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalError() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdConsumersSignalError() instead")
    void postOrganisationsIdConsumersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdConsumersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdMembersSignalError() instead")
    void postOrganisationsIdMembersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdMembersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalError() instead")
    void postOrganisationsIdPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPasswordForgottenSignalError() instead")
    void postPasswordForgottenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPasswordForgottenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPasswordForgottenKeySignalError() instead")
    void postPasswordForgottenKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPasswordForgottenKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfAddonsSignalError() instead")
    void postSelfAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsSignalError() instead")
    void postSelfApplicationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalError() instead")
    void postSelfApplicationsAppIdAddonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdInstancesSignalError() instead")
    void postSelfApplicationsAppIdInstancesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdInstancesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfConsumersSignalError() instead")
    void postSelfConsumersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfConsumersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsBillingsSignalError() instead")
    void postSelfPaymentsBillingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsBillingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsMethodsSignalError() instead")
    void postSelfPaymentsMethodsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsMethodsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalError() instead")
    void postUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVendorBillingOwnerIdSignalError() instead")
    void postVendorBillingOwnerIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postVendorBillingOwnerIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsAddonprovidersProviderIdVersionsGetSignalError() instead")
    void productsAddonprovidersProviderIdVersionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsAddonprovidersProviderIdVersionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsMfaKindsGetSignalError() instead")
    void productsMfaKindsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsMfaKindsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdSignalError() instead")
    void putOrganisationsIdSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdSignalE(OAIProvider summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdSignalError(OAIProvider summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalE(OAIPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalError(OAIPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalError() instead")
    void putOrganisationsIdAddonsAddonIdSignalE(OAIAddon summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalError(OAIAddon summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalError() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalE(OAIListEnv summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalError(OAIListEnv summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalError() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAvatarSignalError() instead")
    void putOrganisationsIdAvatarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAvatarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdConsumersKeySignalError() instead")
    void putOrganisationsIdConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdMembersUserIdSignalError() instead")
    void putOrganisationsIdMembersUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdMembersUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalError() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfSignalError() instead")
    void putSelfSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdSignalError() instead")
    void putSelfAddonsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdPlanSignalError() instead")
    void putSelfAddonsAddonIdPlanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdPlanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdTagsTagSignalError() instead")
    void putSelfAddonsAddonIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdSignalError() instead")
    void putSelfApplicationsAppIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvSignalError() instead")
    void putSelfApplicationsAppIdEnvSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvEnvNameSignalError() instead")
    void putSelfApplicationsAppIdEnvEnvNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvEnvNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdTagsTagSignalError() instead")
    void putSelfApplicationsAppIdTagsTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdTagsTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsDomainSignalError() instead")
    void putSelfApplicationsAppIdVhostsDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsFavouriteSignalError() instead")
    void putSelfApplicationsAppIdVhostsFavouriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsFavouriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAvatarSignalError() instead")
    void putSelfAvatarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAvatarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfChangePasswordSignalError() instead")
    void putSelfChangePasswordSignalE(OAIChange_Password summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfChangePasswordSignalError(OAIChange_Password summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfConsumersKeySignalError() instead")
    void putSelfConsumersKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfConsumersKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfEmailsEmailSignalError() instead")
    void putSelfEmailsEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfEmailsEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfKeysKeySignalError() instead")
    void putSelfKeysKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfKeysKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfPaymentsBillingsBidSignalError() instead")
    void putSelfPaymentsBillingsBidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfPaymentsBillingsBidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVendorAppsAddonIdSignalError() instead")
    void putVendorAppsAddonIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putVendorAppsAddonIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfAddonsPreordersPostSignalError() instead")
    void selfAddonsPreordersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfAddonsPreordersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchPutSignalError() instead")
    void selfApplicationsAppIdBranchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchesGetSignalError() instead")
    void selfApplicationsAppIdBranchesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBuildflavorPutSignalError() instead")
    void selfApplicationsAppIdBuildflavorPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBuildflavorPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDependenciesEnvGetSignalError() instead")
    void selfApplicationsAppIdDependenciesEnvGetSignalE(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDependenciesEnvGetSignalError(QList<OAILinkedAppEnv> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDeploymentsDeploymentIdGetSignalError() instead")
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvGetSignalError() instead")
    void selfApplicationsAppIdExposedEnvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvPutSignalError() instead")
    void selfApplicationsAppIdExposedEnvPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdInstancesInstanceIdGetSignalError() instead")
    void selfApplicationsAppIdInstancesInstanceIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfCliTokensGetSignalError() instead")
    void selfCliTokensGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfCliTokensGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindBackupcodesGetSignalError() instead")
    void selfMfaKindBackupcodesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindBackupcodesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindConfirmationPostSignalError() instead")
    void selfMfaKindConfirmationPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindConfirmationPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindDeleteSignalError() instead")
    void selfMfaKindDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindPostSignalError() instead")
    void selfMfaKindPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindPutSignalError() instead")
    void selfMfaKindPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultGetSignalError() instead")
    void selfPaymentsMethodsDefaultGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultPutSignalError() instead")
    void selfPaymentsMethodsDefaultPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceGetSignalError() instead")
    void selfPaymentsMonthlyinvoiceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceMaxcreditPutSignalError() instead")
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsRecurringGetSignalError() instead")
    void selfPaymentsRecurringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsRecurringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsTokensStripeGetSignalError() instead")
    void selfPaymentsTokensStripeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsTokensStripeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigProviderEnvSignalError() instead")
    void updateConfigProviderEnvSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigProviderEnvSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsGetSignalError() instead")
    void v3LogsAppIdDrainsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsIdOrUrlDeleteSignalError() instead")
    void v3LogsAppIdDrainsIdOrUrlDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsIdOrUrlDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsIdOrUrlGetSignalError() instead")
    void v3LogsAppIdDrainsIdOrUrlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsIdOrUrlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsPostSignalError() instead")
    void v3LogsAppIdDrainsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdGetSignalError() instead")
    void v3LogsAppIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdLogsChunkedGetSignalError() instead")
    void v3LogsAppIdLogsChunkedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdLogsChunkedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdLogsSocketGetSignalError() instead")
    void v3LogsAppIdLogsSocketGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdLogsSocketGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalError() instead")
    void vendorAddonsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdLogscollectorGetSignalError() instead")
    void vendorAppsAddonIdLogscollectorGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdLogscollectorGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdMigrationCallbackPutSignalError() instead")
    void vendorAppsAddonIdMigrationCallbackPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdMigrationCallbackPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationAppIdEnvironmentGetSignalErrorFull() instead")
    void applicationAppIdEnvironmentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationAppIdEnvironmentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationAppIdEnvironmentPutSignalErrorFull() instead")
    void applicationAppIdEnvironmentPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationAppIdEnvironmentPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMatomoSignalErrorFull() instead")
    void createMatomoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMatomoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupSignalErrorFull() instead")
    void createNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupExternalPeerSignalErrorFull() instead")
    void createNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNetworkGroupMemberSignalErrorFull() instead")
    void createNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGithubLinkSignalErrorFull() instead")
    void deleteGithubLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGithubLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMatomoSignalErrorFull() instead")
    void deleteMatomoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMatomoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupSignalErrorFull() instead")
    void deleteNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupExternalPeerSignalErrorFull() instead")
    void deleteNetworkGroupExternalPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupExternalPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupMemberSignalErrorFull() instead")
    void deleteNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNetworkGroupPeerSignalErrorFull() instead")
    void deleteNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdSignalErrorFull() instead")
    void deleteOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull() instead")
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdConsumersKeySignalErrorFull() instead")
    void deleteOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdMembersUserIdSignalErrorFull() instead")
    void deleteOrganisationsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOrganisationsIdPaymentsRecurringSignalErrorFull() instead")
    void deleteOrganisationsIdPaymentsRecurringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganisationsIdPaymentsRecurringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfSignalErrorFull() instead")
    void deleteSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdSignalErrorFull() instead")
    void deleteSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfAddonsAddonIdTagsTagSignalErrorFull() instead")
    void deleteSelfAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdTagsTagSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfConsumersKeySignalErrorFull() instead")
    void deleteSelfConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfEmailsEmailSignalErrorFull() instead")
    void deleteSelfEmailsEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfEmailsEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfKeysKeySignalErrorFull() instead")
    void deleteSelfKeysKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfKeysKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsBillingsBidSignalErrorFull() instead")
    void deleteSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsMethodsMIdSignalErrorFull() instead")
    void deleteSelfPaymentsMethodsMIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsMethodsMIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfPaymentsRecurringSignalErrorFull() instead")
    void deleteSelfPaymentsRecurringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfPaymentsRecurringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfTokensSignalErrorFull() instead")
    void deleteSelfTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSelfTokensTokenSignalErrorFull() instead")
    void deleteSelfTokensTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSelfTokensTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsEventSocketGetSignalErrorFull() instead")
    void eventsEventSocketGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsEventSocketGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderSignalErrorFull() instead")
    void getConfigProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigProviderEnvSignalErrorFull() instead")
    void getConfigProviderEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigProviderEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignalErrorFull() instead")
    void getGithubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubApplicationsSignalErrorFull() instead")
    void getGithubApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubCallbackSignalErrorFull() instead")
    void getGithubCallbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubCallbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubEmailsSignalErrorFull() instead")
    void getGithubEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubKeysSignalErrorFull() instead")
    void getGithubKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLinkSignalErrorFull() instead")
    void getGithubLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubLoginSignalErrorFull() instead")
    void getGithubLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubSignupSignalErrorFull() instead")
    void getGithubSignupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubSignupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGithubUsernameSignalErrorFull() instead")
    void getGithubUsernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGithubUsernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoSignalErrorFull() instead")
    void getMatomoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMatomoKTokenValidationSignalErrorFull() instead")
    void getMatomoKTokenValidationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMatomoKTokenValidationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupSignalErrorFull() instead")
    void getNetworkGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupMemberSignalErrorFull() instead")
    void getNetworkGroupMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupPeerSignalErrorFull() instead")
    void getNetworkGroupPeerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupPeerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupStreamSignalErrorFull() instead")
    void getNetworkGroupStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetworkGroupWireGuardConfigurationStreamSignalErrorFull() instead")
    void getNetworkGroupWireGuardConfigurationStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetworkGroupWireGuardConfigurationStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewsfeedEngineeringSignalErrorFull() instead")
    void getNewsfeedEngineeringSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNewsfeedEngineeringSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNewsfeedsBlogSignalErrorFull() instead")
    void getNewsfeedsBlogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNewsfeedsBlogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthAuthorizeSignalErrorFull() instead")
    void getOauthAuthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthAuthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOauthRightsSignalErrorFull() instead")
    void getOauthRightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOauthRightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalErrorFull() instead")
    void getOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdSignalErrorFull() instead")
    void getOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonprovidersProviderIdTagsSignalErrorFull() instead")
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonprovidersProviderIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdEnvSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdSsoSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdSsoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdSsoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdAddonsAddonIdTagsSignalErrorFull() instead")
    void getOrganisationsIdAddonsAddonIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdAddonsAddonIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDependentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDependentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdTagsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersSignalErrorFull() instead")
    void getOrganisationsIdConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySignalErrorFull() instead")
    void getOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumersKeySecretSignalErrorFull() instead")
    void getOrganisationsIdConsumersKeySecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumersKeySecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdConsumptionsSignalErrorFull() instead")
    void getOrganisationsIdConsumptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdConsumptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdCreditsSignalErrorFull() instead")
    void getOrganisationsIdCreditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdCreditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdDeploymentsSignalErrorFull() instead")
    void getOrganisationsIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdInstancesSignalErrorFull() instead")
    void getOrganisationsIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdMembersSignalErrorFull() instead")
    void getOrganisationsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentInfoSignalErrorFull() instead")
    void getOrganisationsIdPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull() instead")
    void getOrganisationsIdPaymentsBillingsBidPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsBillingsBidPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsIdPaymentsFullPricePriceSignalErrorFull() instead")
    void getOrganisationsIdPaymentsFullPricePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsIdPaymentsFullPricePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordForgottenSignalErrorFull() instead")
    void getPasswordForgottenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordForgottenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPasswordForgottenKeySignalErrorFull() instead")
    void getPasswordForgottenKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPasswordForgottenKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsCouponsNameSignalErrorFull() instead")
    void getPaymentsCouponsNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsCouponsNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsProvidersSignalErrorFull() instead")
    void getPaymentsProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentsTokensStripeSignalErrorFull() instead")
    void getPaymentsTokensStripeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentsTokensStripeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsAddonProvidersSignalErrorFull() instead")
    void getProductsAddonProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsAddonProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsAddonProvidersProviderIdSignalErrorFull() instead")
    void getProductsAddonProvidersProviderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsAddonProvidersProviderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCountriesSignalErrorFull() instead")
    void getProductsCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsCountrycodesSignalErrorFull() instead")
    void getProductsCountrycodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsCountrycodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsInstancesSignalErrorFull() instead")
    void getProductsInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsInstancesTypeVersionSignalErrorFull() instead")
    void getProductsInstancesTypeVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsInstancesTypeVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsPackagesSignalErrorFull() instead")
    void getProductsPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsPricesSignalErrorFull() instead")
    void getProductsPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsZonesSignalErrorFull() instead")
    void getProductsZonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsZonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfSignalErrorFull() instead")
    void getSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsSignalErrorFull() instead")
    void getSelfAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSignalErrorFull() instead")
    void getSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdApplicationsSignalErrorFull() instead")
    void getSelfAddonsAddonIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdEnvSignalErrorFull() instead")
    void getSelfAddonsAddonIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdSsoSignalErrorFull() instead")
    void getSelfAddonsAddonIdSsoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdSsoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfAddonsAddonIdTagsSignalErrorFull() instead")
    void getSelfAddonsAddonIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfAddonsAddonIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsSignalErrorFull() instead")
    void getSelfApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdSignalErrorFull() instead")
    void getSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdAddonsEnvSignalErrorFull() instead")
    void getSelfApplicationsAppIdAddonsEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdAddonsEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDependentsSignalErrorFull() instead")
    void getSelfApplicationsAppIdDependentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDependentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdDeploymentsSignalErrorFull() instead")
    void getSelfApplicationsAppIdDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdEnvSignalErrorFull() instead")
    void getSelfApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void getSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdTagsSignalErrorFull() instead")
    void getSelfApplicationsAppIdTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsSignalErrorFull() instead")
    void getSelfApplicationsAppIdVhostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void getSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConfirmationEmailSignalErrorFull() instead")
    void getSelfConfirmationEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConfirmationEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersSignalErrorFull() instead")
    void getSelfConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersKeySignalErrorFull() instead")
    void getSelfConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumersKeySecretSignalErrorFull() instead")
    void getSelfConsumersKeySecretSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumersKeySecretSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfConsumptionsSignalErrorFull() instead")
    void getSelfConsumptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfConsumptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfCreditsSignalErrorFull() instead")
    void getSelfCreditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfCreditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfEmailsSignalErrorFull() instead")
    void getSelfEmailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfEmailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfIdSignalErrorFull() instead")
    void getSelfIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfInstancesSignalErrorFull() instead")
    void getSelfInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfKeysSignalErrorFull() instead")
    void getSelfKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentInfoSignalErrorFull() instead")
    void getSelfPaymentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsSignalErrorFull() instead")
    void getSelfPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidSignalErrorFull() instead")
    void getSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsBillingsBidPdfSignalErrorFull() instead")
    void getSelfPaymentsBillingsBidPdfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsBillingsBidPdfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsFullpricePriceSignalErrorFull() instead")
    void getSelfPaymentsFullpricePriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsFullpricePriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfPaymentsMethodsSignalErrorFull() instead")
    void getSelfPaymentsMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfPaymentsMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfTokensSignalErrorFull() instead")
    void getSelfTokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfTokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSelfValidateEmailSignalErrorFull() instead")
    void getSelfValidateEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSelfValidateEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSummarySignalErrorFull() instead")
    void getSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdSignalErrorFull() instead")
    void getUsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdApplicationsSignalErrorFull() instead")
    void getUsersIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdGitInfoSignalErrorFull() instead")
    void getUsersUserIdGitInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdGitInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsSignalErrorFull() instead")
    void getVendorAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVendorAppsAddonIdSignalErrorFull() instead")
    void getVendorAppsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVendorAppsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupMembersSignalErrorFull() instead")
    void listNetworkGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupPeersSignalErrorFull() instead")
    void listNetworkGroupPeersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupPeersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNetworkGroupsSignalErrorFull() instead")
    void listNetworkGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNetworkGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsGetSignalErrorFull() instead")
    void logsAppIdDrainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsIdOrUrlDeleteSignalErrorFull() instead")
    void logsAppIdDrainsIdOrUrlDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsIdOrUrlDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsIdOrUrlGetSignalErrorFull() instead")
    void logsAppIdDrainsIdOrUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsIdOrUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdDrainsPostSignalErrorFull() instead")
    void logsAppIdDrainsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdDrainsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdGetSignalErrorFull() instead")
    void logsAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsAppIdSseGetSignalErrorFull() instead")
    void logsAppIdSseGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsAppIdSseGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsDrainsDrainIdPutSignalErrorFull() instead")
    void logsDrainsDrainIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsDrainsDrainIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsDrainsGetSignalErrorFull() instead")
    void logsDrainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsDrainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogsChunkedAppIdGetSignalErrorFull() instead")
    void logsLogsChunkedAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogsChunkedAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsLogsSocketAppIdGetSignalErrorFull() instead")
    void logsLogsSocketAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsLogsSocketAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsSocketAppIdGetSignalErrorFull() instead")
    void logsSocketAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsSocketAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdGetSignalErrorFull() instead")
    void notificationsEmailhooksOwnerIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdIdDeleteSignalErrorFull() instead")
    void notificationsEmailhooksOwnerIdIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdIdPutSignalErrorFull() instead")
    void notificationsEmailhooksOwnerIdIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsEmailhooksOwnerIdPostSignalErrorFull() instead")
    void notificationsEmailhooksOwnerIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsEmailhooksOwnerIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsInfoEventsGetSignalErrorFull() instead")
    void notificationsInfoEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsInfoEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsInfoWebhookformatsGetSignalErrorFull() instead")
    void notificationsInfoWebhookformatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsInfoWebhookformatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdGetSignalErrorFull() instead")
    void notificationsWebhooksOwnerIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdIdDeleteSignalErrorFull() instead")
    void notificationsWebhooksOwnerIdIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdIdPutSignalErrorFull() instead")
    void notificationsWebhooksOwnerIdIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsWebhooksOwnerIdPostSignalErrorFull() instead")
    void notificationsWebhooksOwnerIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsWebhooksOwnerIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthAccessTokenQueryPostSignalErrorFull() instead")
    void oauthAccessTokenQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthAccessTokenQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oauthRequestTokenQueryPostSignalErrorFull() instead")
    void oauthRequestTokenQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oauthRequestTokenQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openapiGetSignalErrorFull() instead")
    void openapiGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openapiGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use openapiTypeGetSignalErrorFull() instead")
    void openapiTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void openapiTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonprovidersProviderIdDeleteSignalErrorFull() instead")
    void organisationsIdAddonprovidersProviderIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonprovidersProviderIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsMigrationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdMigrationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdMigrationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsAddonIdSsoGetSignalErrorFull() instead")
    void organisationsIdAddonsAddonIdSsoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsAddonIdSsoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdAddonsPreordersPostSignalErrorFull() instead")
    void organisationsIdAddonsPreordersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdAddonsPreordersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBranchesGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdBuildflavorPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdBuildflavorPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDependenciesEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdExposedEnvPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdExposedEnvPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull() instead")
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdApplicationsAppIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull() instead")
    void organisationsIdPaymentsBillingsUnpaidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsBillingsUnpaidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsDefaultPutSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsDefaultPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsDefaultPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsGetSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsMIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsMIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMethodsPostSignalErrorFull() instead")
    void organisationsIdPaymentsMethodsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMethodsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull() instead")
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organisationsIdPaymentsRecurringGetSignalErrorFull() instead")
    void organisationsIdPaymentsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organisationsIdPaymentsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsAssetsPayButtonTokenButtonPngGetSignalErrorFull() instead")
    void paymentsAssetsPayButtonTokenButtonPngGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsAssetsPayButtonTokenButtonPngGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsBidEndStripePostSignalErrorFull() instead")
    void paymentsBidEndStripePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsBidEndStripePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizeSignalErrorFull() instead")
    void postAuthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubRedeploySignalErrorFull() instead")
    void postGithubRedeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubRedeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGithubSignupSignalErrorFull() instead")
    void postGithubSignupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGithubSignupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAccessTokenSignalErrorFull() instead")
    void postOauthAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthAuthorizeSignalErrorFull() instead")
    void postOauthAuthorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthAuthorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOauthRequestTokenSignalErrorFull() instead")
    void postOauthRequestTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOauthRequestTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsSignalErrorFull() instead")
    void postOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonprovidersProviderIdTestersSignalErrorFull() instead")
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonprovidersProviderIdTestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull() instead")
    void postOrganisationsIdApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdConsumersSignalErrorFull() instead")
    void postOrganisationsIdConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdMembersSignalErrorFull() instead")
    void postOrganisationsIdMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrganisationsIdPaymentsBillingsSignalErrorFull() instead")
    void postOrganisationsIdPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrganisationsIdPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPasswordForgottenSignalErrorFull() instead")
    void postPasswordForgottenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPasswordForgottenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPasswordForgottenKeySignalErrorFull() instead")
    void postPasswordForgottenKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPasswordForgottenKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfAddonsSignalErrorFull() instead")
    void postSelfAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsSignalErrorFull() instead")
    void postSelfApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdAddonsSignalErrorFull() instead")
    void postSelfApplicationsAppIdAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfApplicationsAppIdInstancesSignalErrorFull() instead")
    void postSelfApplicationsAppIdInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfApplicationsAppIdInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfConsumersSignalErrorFull() instead")
    void postSelfConsumersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfConsumersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsBillingsSignalErrorFull() instead")
    void postSelfPaymentsBillingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsBillingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSelfPaymentsMethodsSignalErrorFull() instead")
    void postSelfPaymentsMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSelfPaymentsMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalErrorFull() instead")
    void postUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVendorBillingOwnerIdSignalErrorFull() instead")
    void postVendorBillingOwnerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVendorBillingOwnerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsAddonprovidersProviderIdVersionsGetSignalErrorFull() instead")
    void productsAddonprovidersProviderIdVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsAddonprovidersProviderIdVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsMfaKindsGetSignalErrorFull() instead")
    void productsMfaKindsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsMfaKindsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdSignalErrorFull() instead")
    void putOrganisationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull() instead")
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdAvatarSignalErrorFull() instead")
    void putOrganisationsIdAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdConsumersKeySignalErrorFull() instead")
    void putOrganisationsIdConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdMembersUserIdSignalErrorFull() instead")
    void putOrganisationsIdMembersUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdMembersUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putOrganisationsIdPaymentsBillingsBidSignalErrorFull() instead")
    void putOrganisationsIdPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putOrganisationsIdPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfSignalErrorFull() instead")
    void putSelfSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdSignalErrorFull() instead")
    void putSelfAddonsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdPlanSignalErrorFull() instead")
    void putSelfAddonsAddonIdPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAddonsAddonIdTagsTagSignalErrorFull() instead")
    void putSelfAddonsAddonIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAddonsAddonIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdSignalErrorFull() instead")
    void putSelfApplicationsAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvSignalErrorFull() instead")
    void putSelfApplicationsAppIdEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdEnvEnvNameSignalErrorFull() instead")
    void putSelfApplicationsAppIdEnvEnvNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdEnvEnvNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdTagsTagSignalErrorFull() instead")
    void putSelfApplicationsAppIdTagsTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdTagsTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsDomainSignalErrorFull() instead")
    void putSelfApplicationsAppIdVhostsDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfApplicationsAppIdVhostsFavouriteSignalErrorFull() instead")
    void putSelfApplicationsAppIdVhostsFavouriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfApplicationsAppIdVhostsFavouriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfAvatarSignalErrorFull() instead")
    void putSelfAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfChangePasswordSignalErrorFull() instead")
    void putSelfChangePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfChangePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfConsumersKeySignalErrorFull() instead")
    void putSelfConsumersKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfConsumersKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfEmailsEmailSignalErrorFull() instead")
    void putSelfEmailsEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfEmailsEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfKeysKeySignalErrorFull() instead")
    void putSelfKeysKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfKeysKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSelfPaymentsBillingsBidSignalErrorFull() instead")
    void putSelfPaymentsBillingsBidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSelfPaymentsBillingsBidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVendorAppsAddonIdSignalErrorFull() instead")
    void putVendorAppsAddonIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVendorAppsAddonIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfAddonsPreordersPostSignalErrorFull() instead")
    void selfAddonsPreordersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfAddonsPreordersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchPutSignalErrorFull() instead")
    void selfApplicationsAppIdBranchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBranchesGetSignalErrorFull() instead")
    void selfApplicationsAppIdBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdBuildflavorPutSignalErrorFull() instead")
    void selfApplicationsAppIdBuildflavorPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdBuildflavorPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDependenciesEnvGetSignalErrorFull() instead")
    void selfApplicationsAppIdDependenciesEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDependenciesEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull() instead")
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdDeploymentsDeploymentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvGetSignalErrorFull() instead")
    void selfApplicationsAppIdExposedEnvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdExposedEnvPutSignalErrorFull() instead")
    void selfApplicationsAppIdExposedEnvPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdExposedEnvPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfApplicationsAppIdInstancesInstanceIdGetSignalErrorFull() instead")
    void selfApplicationsAppIdInstancesInstanceIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfApplicationsAppIdInstancesInstanceIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfCliTokensGetSignalErrorFull() instead")
    void selfCliTokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfCliTokensGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindBackupcodesGetSignalErrorFull() instead")
    void selfMfaKindBackupcodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindBackupcodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindConfirmationPostSignalErrorFull() instead")
    void selfMfaKindConfirmationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindConfirmationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindDeleteSignalErrorFull() instead")
    void selfMfaKindDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindPostSignalErrorFull() instead")
    void selfMfaKindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfMfaKindPutSignalErrorFull() instead")
    void selfMfaKindPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfMfaKindPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultGetSignalErrorFull() instead")
    void selfPaymentsMethodsDefaultGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMethodsDefaultPutSignalErrorFull() instead")
    void selfPaymentsMethodsDefaultPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMethodsDefaultPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceGetSignalErrorFull() instead")
    void selfPaymentsMonthlyinvoiceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull() instead")
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsMonthlyinvoiceMaxcreditPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsRecurringGetSignalErrorFull() instead")
    void selfPaymentsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use selfPaymentsTokensStripeGetSignalErrorFull() instead")
    void selfPaymentsTokensStripeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void selfPaymentsTokensStripeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConfigProviderEnvSignalErrorFull() instead")
    void updateConfigProviderEnvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConfigProviderEnvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsGetSignalErrorFull() instead")
    void v3LogsAppIdDrainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsIdOrUrlDeleteSignalErrorFull() instead")
    void v3LogsAppIdDrainsIdOrUrlDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsIdOrUrlDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsIdOrUrlGetSignalErrorFull() instead")
    void v3LogsAppIdDrainsIdOrUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsIdOrUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdDrainsPostSignalErrorFull() instead")
    void v3LogsAppIdDrainsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdDrainsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdGetSignalErrorFull() instead")
    void v3LogsAppIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdLogsChunkedGetSignalErrorFull() instead")
    void v3LogsAppIdLogsChunkedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdLogsChunkedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v3LogsAppIdLogsSocketGetSignalErrorFull() instead")
    void v3LogsAppIdLogsSocketGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v3LogsAppIdLogsSocketGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAddonsPostSignalErrorFull() instead")
    void vendorAddonsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAddonsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdLogscollectorGetSignalErrorFull() instead")
    void vendorAppsAddonIdLogscollectorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdLogscollectorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vendorAppsAddonIdMigrationCallbackPutSignalErrorFull() instead")
    void vendorAppsAddonIdMigrationCallbackPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vendorAppsAddonIdMigrationCallbackPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
