/**
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISupernovaInstanceView.h
 *
 * 
 */

#ifndef OAISupernovaInstanceView_H
#define OAISupernovaInstanceView_H

#include <QJsonObject>

#include "OAISupernovaInstanceView_flavor.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISupernovaInstanceView_flavor;

class OAISupernovaInstanceView : public OAIObject {
public:
    OAISupernovaInstanceView();
    OAISupernovaInstanceView(QString json);
    ~OAISupernovaInstanceView() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    double getAppPort() const;
    void setAppPort(const double &app_port);
    bool is_app_port_Set() const;
    bool is_app_port_Valid() const;

    QString getCommitId() const;
    void setCommitId(const QString &commit_id);
    bool is_commit_id_Set() const;
    bool is_commit_id_Valid() const;

    double getCreatedAt() const;
    void setCreatedAt(const double &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeployId() const;
    void setDeployId(const QString &deploy_id);
    bool is_deploy_id_Set() const;
    bool is_deploy_id_Valid() const;

    double getDeployNumber() const;
    void setDeployNumber(const double &deploy_number);
    bool is_deploy_number_Set() const;
    bool is_deploy_number_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAISupernovaInstanceView_flavor getFlavor() const;
    void setFlavor(const OAISupernovaInstanceView_flavor &flavor);
    bool is_flavor_Set() const;
    bool is_flavor_Valid() const;

    QString getHv() const;
    void setHv(const QString &hv);
    bool is_hv_Set() const;
    bool is_hv_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    double getInstanceNumber() const;
    void setInstanceNumber(const double &instance_number);
    bool is_instance_number_Set() const;
    bool is_instance_number_Valid() const;

    QString getInternalIp() const;
    void setInternalIp(const QString &internal_ip);
    bool is_internal_ip_Set() const;
    bool is_internal_ip_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    QString getOwnerId() const;
    void setOwnerId(const QString &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    double getSshPort() const;
    void setSshPort(const double &ssh_port);
    bool is_ssh_port_Set() const;
    bool is_ssh_port_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    double getZabbixPort() const;
    void setZabbixPort(const double &zabbix_port);
    bool is_zabbix_port_Set() const;
    bool is_zabbix_port_Valid() const;

    QString getZone() const;
    void setZone(const QString &zone);
    bool is_zone_Set() const;
    bool is_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    double m_app_port;
    bool m_app_port_isSet;
    bool m_app_port_isValid;

    QString m_commit_id;
    bool m_commit_id_isSet;
    bool m_commit_id_isValid;

    double m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_deploy_id;
    bool m_deploy_id_isSet;
    bool m_deploy_id_isValid;

    double m_deploy_number;
    bool m_deploy_number_isSet;
    bool m_deploy_number_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAISupernovaInstanceView_flavor m_flavor;
    bool m_flavor_isSet;
    bool m_flavor_isValid;

    QString m_hv;
    bool m_hv_isSet;
    bool m_hv_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    double m_instance_number;
    bool m_instance_number_isSet;
    bool m_instance_number_isValid;

    QString m_internal_ip;
    bool m_internal_ip_isSet;
    bool m_internal_ip_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    QString m_owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    double m_ssh_port;
    bool m_ssh_port_isSet;
    bool m_ssh_port_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;

    double m_zabbix_port;
    bool m_zabbix_port_isSet;
    bool m_zabbix_port_isValid;

    QString m_zone;
    bool m_zone_isSet;
    bool m_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISupernovaInstanceView)

#endif // OAISupernovaInstanceView_H
