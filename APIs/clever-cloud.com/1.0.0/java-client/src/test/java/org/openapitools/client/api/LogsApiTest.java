/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LogsApi
 */
@Disabled
public class LogsApiTest {

    private final LogsApi api = new LogsApi();

    /**
     * Fetch the logs drains for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsGet_0Test() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsGet_0(appId);
        // TODO: test validations
    }

    /**
     * Delete the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsIdOrUrlDelete_0Test() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsIdOrUrlDelete_0(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsIdOrUrlGet_0Test() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsIdOrUrlGet_0(appId);
        // TODO: test validations
    }

    /**
     * Add a log drain for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsPost_0Test() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsPost_0(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdGet_0Test() throws ApiException {
        String appId = null;
        Integer limit = null;
        String order = null;
        OffsetDateTime after = null;
        OffsetDateTime before = null;
        String filter = null;
        String deploymentId = null;
        api.logsAppIdGet_0(appId, limit, order, after, before, filter, deploymentId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdSseGet_0Test() throws ApiException {
        String appId = null;
        api.logsAppIdSseGet_0(appId);
        // TODO: test validations
    }

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsDrainsDrainIdPut_0Test() throws ApiException {
        String drainId = null;
        api.logsDrainsDrainIdPut_0(drainId);
        // TODO: test validations
    }

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsDrainsGet_0Test() throws ApiException {
        api.logsDrainsGet_0();
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogsChunkedAppIdGet_0Test() throws ApiException {
        String appId = null;
        Boolean download = null;
        api.logsLogsChunkedAppIdGet_0(appId, download);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogsSocketAppIdGet_0Test() throws ApiException {
        String appId = null;
        OffsetDateTime since = null;
        String filter = null;
        String deploymentId = null;
        api.logsLogsSocketAppIdGet_0(appId, since, filter, deploymentId);
        // TODO: test validations
    }

    /**
     * Fetch the logs drains for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsGet_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsGet_0(appId);
        // TODO: test validations
    }

    /**
     * Delete the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsIdOrUrlDelete_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsIdOrUrlDelete_0(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsIdOrUrlGet_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsIdOrUrlGet_0(appId);
        // TODO: test validations
    }

    /**
     * Add a log drain for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsPost_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsPost_0(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdGet_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdGet_0(appId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdLogsChunkedGet_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdLogsChunkedGet_0(appId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdLogsSocketGet_0Test() throws ApiException {
        String appId = null;
        api.v3LogsAppIdLogsSocketGet_0(appId);
        // TODO: test validations
    }

}
