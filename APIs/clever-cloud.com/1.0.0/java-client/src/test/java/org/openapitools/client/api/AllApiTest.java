/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AddonMigration;
import org.openapitools.client.model.AddonProviderSso;
import org.openapitools.client.model.AppInstance;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Avatar;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.ChangePassword;
import org.openapitools.client.model.Conso;
import org.openapitools.client.model.Consumer;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Credits;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentSummary;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.LinkedAppEnv;
import org.openapitools.client.model.ListEnv;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.OrganisationsIdAddonsAddonIdMigrationsPostRequest;
import org.openapitools.client.model.PaymentData;
import org.openapitools.client.model.PaymentProvider;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.Rights;
import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.Schema2;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Sso;
import org.openapitools.client.model.Summary;
import org.openapitools.client.model.SupernovaInstanceView;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.TransactionId;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Vhost;
import org.openapitools.client.model.WannabeAddon;
import org.openapitools.client.model.WannabeAddonBilling;
import org.openapitools.client.model.WannabeAddonProvider;
import org.openapitools.client.model.WannabeApplication;
import org.openapitools.client.model.WannabeConsumer;
import org.openapitools.client.model.WannabeEnv;
import org.openapitools.client.model.WannabeFeature;
import org.openapitools.client.model.WannabeOrganisation;
import org.openapitools.client.model.WannabePlan;
import org.openapitools.client.model.WannabePlanFeature;
import org.openapitools.client.model.WannabeUser;
import org.openapitools.client.model.Zone;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AllApi
 */
@Disabled
public class AllApiTest {

    private final AllApi api = new AllApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationAppIdEnvironmentGetTest() throws ApiException {
        String appId = null;
        String token = null;
        api.applicationAppIdEnvironmentGet(appId, token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationAppIdEnvironmentPutTest() throws ApiException {
        String appId = null;
        String token = null;
        api.applicationAppIdEnvironmentPut(appId, token);
        // TODO: test validations
    }

    /**
     * Create Matomo addon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMatomoTest() throws ApiException {
        Object body = null;
        Object response = api.createMatomo(body);
        // TODO: test validations
    }

    /**
     * Create Network Group
     *
     * Creates a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupTest() throws ApiException {
        String ownerId = null;
        Object body = null;
        Object response = api.createNetworkGroup(ownerId, body);
        // TODO: test validations
    }

    /**
     * Add external peer
     *
     * Adds an external peer to a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupExternalPeerTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.createNetworkGroupExternalPeer(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Add member
     *
     * Adds a member to a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupMemberTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Schema2 schema2 = null;
        api.createNetworkGroupMember(ownerId, networkGroupId, schema2);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGithubLinkTest() throws ApiException {
        api.deleteGithubLink();
        // TODO: test validations
    }

    /**
     * Delete Matomo addon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMatomoTest() throws ApiException {
        String matomoId = null;
        String body = null;
        Object response = api.deleteMatomo(matomoId, body);
        // TODO: test validations
    }

    /**
     * Delete Network Group
     *
     * Deletes a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        api.deleteNetworkGroup(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Remove external peer
     *
     * Removes an external peer from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupExternalPeerTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        api.deleteNetworkGroupExternalPeer(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Remove member
     *
     * Removes a member from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupMemberTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String memberId = null;
        Object body = null;
        api.deleteNetworkGroupMember(ownerId, networkGroupId, memberId, body);
        // TODO: test validations
    }

    /**
     * Remove peer
     *
     * Removes a peer from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupPeerTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        api.deleteNetworkGroupPeer(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdTest() throws ApiException {
        String id = null;
        api.deleteOrganisationsId(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdTest() throws ApiException {
        String id = null;
        String featureId = null;
        String providerId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(id, featureId, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdTest() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameTest() throws ApiException {
        String id = null;
        String featureName = null;
        String providerId = null;
        String planId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(id, featureName, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonsAddonIdTest() throws ApiException {
        String id = null;
        String addonId = null;
        api.deleteOrganisationsIdAddonsAddonId(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonsAddonIdTagsTagTest() throws ApiException {
        String id = null;
        String tag = null;
        String addonId = null;
        api.deleteOrganisationsIdAddonsAddonIdTagsTag(id, tag, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdTest() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppId(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonIdTest() throws ApiException {
        String id = null;
        String appId = null;
        String addonId = null;
        api.deleteOrganisationsIdApplicationsAppIdAddonsAddonId(id, appId, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdTest() throws ApiException {
        String dependencyId = null;
        String appId = null;
        String id = null;
        api.deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(dependencyId, appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesTest() throws ApiException {
        String id = null;
        String appId = null;
        String deploymentId = null;
        api.deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(id, appId, deploymentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdEnvEnvNameTest() throws ApiException {
        String id = null;
        String appId = null;
        String envName = null;
        api.deleteOrganisationsIdApplicationsAppIdEnvEnvName(id, appId, envName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdInstancesTest() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppIdInstances(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdTagsTagTest() throws ApiException {
        String id = null;
        String appId = null;
        String tag = null;
        api.deleteOrganisationsIdApplicationsAppIdTagsTag(id, appId, tag);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdVhostsDomainTest() throws ApiException {
        String id = null;
        String appId = null;
        String domain = null;
        api.deleteOrganisationsIdApplicationsAppIdVhostsDomain(id, appId, domain);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdConsumersKeyTest() throws ApiException {
        String id = null;
        String key = null;
        api.deleteOrganisationsIdConsumersKey(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdMembersUserIdTest() throws ApiException {
        String id = null;
        String userId = null;
        api.deleteOrganisationsIdMembersUserId(id, userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdPaymentsBillingsBidTest() throws ApiException {
        String id = null;
        String bid = null;
        api.deleteOrganisationsIdPaymentsBillingsBid(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdPaymentsRecurringTest() throws ApiException {
        String id = null;
        api.deleteOrganisationsIdPaymentsRecurring(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfTest() throws ApiException {
        api.deleteSelf();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfAddonsAddonIdTest() throws ApiException {
        String addonId = null;
        api.deleteSelfAddonsAddonId(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfAddonsAddonIdTagsTagTest() throws ApiException {
        String tag = null;
        String addonId = null;
        api.deleteSelfAddonsAddonIdTagsTag(tag, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdTest() throws ApiException {
        String appId = null;
        api.deleteSelfApplicationsAppId(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdAddonsAddonIdTest() throws ApiException {
        String appId = null;
        String addonId = null;
        api.deleteSelfApplicationsAppIdAddonsAddonId(appId, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdDependenciesDependencyIdTest() throws ApiException {
        String dependencyId = null;
        String appId = null;
        api.deleteSelfApplicationsAppIdDependenciesDependencyId(dependencyId, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesTest() throws ApiException {
        String appId = null;
        String deploymentId = null;
        api.deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(appId, deploymentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdEnvEnvNameTest() throws ApiException {
        String appId = null;
        String envName = null;
        api.deleteSelfApplicationsAppIdEnvEnvName(appId, envName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdInstancesTest() throws ApiException {
        String appId = null;
        api.deleteSelfApplicationsAppIdInstances(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdTagsTagTest() throws ApiException {
        String appId = null;
        String tag = null;
        api.deleteSelfApplicationsAppIdTagsTag(appId, tag);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdVhostsDomainTest() throws ApiException {
        String appId = null;
        String domain = null;
        api.deleteSelfApplicationsAppIdVhostsDomain(appId, domain);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String appId = null;
        api.deleteSelfApplicationsAppIdVhostsFavourite(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfConsumersKeyTest() throws ApiException {
        String key = null;
        api.deleteSelfConsumersKey(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfEmailsEmailTest() throws ApiException {
        String email = null;
        api.deleteSelfEmailsEmail(email);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfKeysKeyTest() throws ApiException {
        String key = null;
        api.deleteSelfKeysKey(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfPaymentsBillingsBidTest() throws ApiException {
        String bid = null;
        api.deleteSelfPaymentsBillingsBid(bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfPaymentsMethodsMIdTest() throws ApiException {
        String mId = null;
        api.deleteSelfPaymentsMethodsMId(mId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfPaymentsRecurringTest() throws ApiException {
        api.deleteSelfPaymentsRecurring();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfTokensTest() throws ApiException {
        api.deleteSelfTokens();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSelfTokensTokenTest() throws ApiException {
        String token = null;
        api.deleteSelfTokensToken(token);
        // TODO: test validations
    }

    /**
     * Retrieve events as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventSocketGetTest() throws ApiException {
        api.eventsEventSocketGet();
        // TODO: test validations
    }

    /**
     * Get Addon provider configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigProviderTest() throws ApiException {
        String configurationProviderId = null;
        String body = null;
        Object response = api.getConfigProvider(configurationProviderId, body);
        // TODO: test validations
    }

    /**
     * Get provider&#39;s addon environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigProviderEnvTest() throws ApiException {
        String configurationProviderId = null;
        String body = null;
        List<Object> response = api.getConfigProviderEnv(configurationProviderId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubTest() throws ApiException {
        TransactionId response = api.getGithub();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubApplicationsTest() throws ApiException {
        List<Application> response = api.getGithubApplications();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubCallbackTest() throws ApiException {
        String code = null;
        String state = null;
        String error = null;
        String errorDescription = null;
        String errorUri = null;
        String cookie = null;
        api.getGithubCallback(code, state, error, errorDescription, errorUri, cookie);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubEmailsTest() throws ApiException {
        List<String> response = api.getGithubEmails();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubKeysTest() throws ApiException {
        List<Key> response = api.getGithubKeys();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubLinkTest() throws ApiException {
        String transactionId = null;
        String redirectUrl = null;
        api.getGithubLink(transactionId, redirectUrl);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubLoginTest() throws ApiException {
        String redirectUrl = null;
        String fromAuthorize = null;
        api.getGithubLogin(redirectUrl, fromAuthorize);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubSignupTest() throws ApiException {
        String redirectUrl = null;
        String fromAuthorize = null;
        api.getGithubSignup(redirectUrl, fromAuthorize);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGithubUsernameTest() throws ApiException {
        String response = api.getGithubUsername();
        // TODO: test validations
    }

    /**
     * Get Matomo addon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatomoTest() throws ApiException {
        String matomoId = null;
        String body = null;
        Object response = api.getMatomo(matomoId, body);
        // TODO: test validations
    }

    /**
     * Validate a keycloak token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMatomoKTokenValidationTest() throws ApiException {
        String keycloakToken = null;
        String body = null;
        Object response = api.getMatomoKTokenValidation(keycloakToken, body);
        // TODO: test validations
    }

    /**
     * Get Network Group
     *
     * Gets details of a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.getNetworkGroup(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Get member
     *
     * Gets details of a Network Group member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupMemberTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String memberId = null;
        Object body = null;
        Schema1 response = api.getNetworkGroupMember(ownerId, networkGroupId, memberId, body);
        // TODO: test validations
    }

    /**
     * Get peer
     *
     * Gets details of a Network Group peer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPeerTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupPeer(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Network Group SSE
     *
     * Retrieves the current Network Group details as a Server Sent Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupStreamTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.getNetworkGroupStream(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Get WireGuard® configuration
     *
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupWireGuardConfigurationTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupWireGuardConfiguration(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Get WireGuard® configuration
     *
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupWireGuardConfigurationStreamTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupWireGuardConfigurationStream(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNewsfeedEngineeringTest() throws ApiException {
        api.getNewsfeedEngineering();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNewsfeedsBlogTest() throws ApiException {
        api.getNewsfeedsBlog();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOauthAuthorizeTest() throws ApiException {
        String oauthToken = null;
        String cookie = null;
        api.getOauthAuthorize(oauthToken, cookie);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOauthRightsTest() throws ApiException {
        Rights response = api.getOauthRights();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsTest() throws ApiException {
        String user = null;
        List<Organisation> response = api.getOrganisations(user);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdTest() throws ApiException {
        String id = null;
        Organisation response = api.getOrganisationsId(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersTest() throws ApiException {
        String id = null;
        List<Provider> response = api.getOrganisationsIdAddonproviders(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdTest() throws ApiException {
        String id = null;
        String providerId = null;
        Provider response = api.getOrganisationsIdAddonprovidersProviderId(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdFeaturesTest() throws ApiException {
        String id = null;
        String providerId = null;
        List<Feature> response = api.getOrganisationsIdAddonprovidersProviderIdFeatures(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdPlansTest() throws ApiException {
        String id = null;
        String providerId = null;
        List<Plan> response = api.getOrganisationsIdAddonprovidersProviderIdPlans(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdPlansPlanIdTest() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        Plan response = api.getOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdTagsTest() throws ApiException {
        String id = null;
        String providerId = null;
        List<String> response = api.getOrganisationsIdAddonprovidersProviderIdTags(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsTest() throws ApiException {
        String id = null;
        List<Addon> response = api.getOrganisationsIdAddons(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdTest() throws ApiException {
        String id = null;
        String addonId = null;
        Addon response = api.getOrganisationsIdAddonsAddonId(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdApplicationsTest() throws ApiException {
        String id = null;
        String addonId = null;
        List<Application> response = api.getOrganisationsIdAddonsAddonIdApplications(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdEnvTest() throws ApiException {
        String id = null;
        String addonId = null;
        List<ListEnv> response = api.getOrganisationsIdAddonsAddonIdEnv(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdSsoTest() throws ApiException {
        String providerId = null;
        String id = null;
        AddonProviderSso response = api.getOrganisationsIdAddonsAddonIdSso(providerId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdTagsTest() throws ApiException {
        String id = null;
        String addonId = null;
        List<String> response = api.getOrganisationsIdAddonsAddonIdTags(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsTest() throws ApiException {
        String id = null;
        List<Application> response = api.getOrganisationsIdApplications(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdTest() throws ApiException {
        String id = null;
        String appId = null;
        Application response = api.getOrganisationsIdApplicationsAppId(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdAddonsTest() throws ApiException {
        String id = null;
        String appId = null;
        List<Addon> response = api.getOrganisationsIdApplicationsAppIdAddons(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdAddonsEnvTest() throws ApiException {
        String id = null;
        String appId = null;
        List<Env> response = api.getOrganisationsIdApplicationsAppIdAddonsEnv(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDependenciesTest() throws ApiException {
        String appId = null;
        String id = null;
        List<Application> response = api.getOrganisationsIdApplicationsAppIdDependencies(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDependentsTest() throws ApiException {
        String appId = null;
        String id = null;
        List<Application> response = api.getOrganisationsIdApplicationsAppIdDependents(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDeploymentsTest() throws ApiException {
        String id = null;
        String appId = null;
        String limit = null;
        String offset = null;
        String action = null;
        List<Deployment> response = api.getOrganisationsIdApplicationsAppIdDeployments(id, appId, limit, offset, action);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdEnvTest() throws ApiException {
        String id = null;
        String appId = null;
        List<ListEnv> response = api.getOrganisationsIdApplicationsAppIdEnv(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdInstancesTest() throws ApiException {
        String id = null;
        String appId = null;
        List<AppInstance> response = api.getOrganisationsIdApplicationsAppIdInstances(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdTagsTest() throws ApiException {
        String id = null;
        String appId = null;
        List<String> response = api.getOrganisationsIdApplicationsAppIdTags(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdVhostsTest() throws ApiException {
        String id = null;
        String appId = null;
        List<Vhost> response = api.getOrganisationsIdApplicationsAppIdVhosts(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String id = null;
        String appId = null;
        Vhost response = api.getOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumersTest() throws ApiException {
        String id = null;
        List<Consumer> response = api.getOrganisationsIdConsumers(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumersKeyTest() throws ApiException {
        String id = null;
        String key = null;
        Consumer response = api.getOrganisationsIdConsumersKey(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumersKeySecretTest() throws ApiException {
        String id = null;
        String key = null;
        Secret response = api.getOrganisationsIdConsumersKeySecret(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumptionsTest() throws ApiException {
        String id = null;
        String appId = null;
        String from = null;
        String to = null;
        Conso response = api.getOrganisationsIdConsumptions(id, appId, from, to);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdCreditsTest() throws ApiException {
        String id = null;
        Credits response = api.getOrganisationsIdCredits(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdDeploymentsTest() throws ApiException {
        String id = null;
        DeploymentSummary response = api.getOrganisationsIdDeployments(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdInstancesTest() throws ApiException {
        String id = null;
        Object response = api.getOrganisationsIdInstances(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdMembersTest() throws ApiException {
        String id = null;
        List<Schema1> response = api.getOrganisationsIdMembers(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentInfoTest() throws ApiException {
        String id = null;
        api.getOrganisationsIdPaymentInfo(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillingsTest() throws ApiException {
        String id = null;
        api.getOrganisationsIdPaymentsBillings(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillingsBidTest() throws ApiException {
        String id = null;
        String bid = null;
        api.getOrganisationsIdPaymentsBillingsBid(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillingsBidPdfTest() throws ApiException {
        String id = null;
        String bid = null;
        String token = null;
        api.getOrganisationsIdPaymentsBillingsBidPdf(id, bid, token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsFullPricePriceTest() throws ApiException {
        String id = null;
        String price = null;
        api.getOrganisationsIdPaymentsFullPricePrice(id, price);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordForgottenTest() throws ApiException {
        api.getPasswordForgotten();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordForgottenKeyTest() throws ApiException {
        String key = null;
        api.getPasswordForgottenKey(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsCouponsNameTest() throws ApiException {
        String name = null;
        api.getPaymentsCouponsName(name);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsProvidersTest() throws ApiException {
        List<PaymentProvider> response = api.getPaymentsProviders();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentsTokensStripeTest() throws ApiException {
        api.getPaymentsTokensStripe();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsAddonProvidersTest() throws ApiException {
        List<Provider> response = api.getProductsAddonProviders();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsAddonProvidersProviderIdTest() throws ApiException {
        String providerId = null;
        Provider response = api.getProductsAddonProvidersProviderId(providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsCountriesTest() throws ApiException {
        Country response = api.getProductsCountries();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsCountrycodesTest() throws ApiException {
        Country response = api.getProductsCountrycodes();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsInstancesTest() throws ApiException {
        String _for = null;
        List<Instance> response = api.getProductsInstances(_for);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsInstancesTypeVersionTest() throws ApiException {
        String type = null;
        String version = null;
        String _for = null;
        String app = null;
        Instance response = api.getProductsInstancesTypeVersion(type, version, _for, app);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsPackagesTest() throws ApiException {
        String coupon = null;
        String orgaId = null;
        String currency = null;
        api.getProductsPackages(coupon, orgaId, currency);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsPricesTest() throws ApiException {
        api.getProductsPrices();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsZonesTest() throws ApiException {
        List<Zone> response = api.getProductsZones();
        // TODO: test validations
    }

    /**
     * 
     *
     * Get information about yourself
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfTest() throws ApiException {
        User response = api.getSelf();
        // TODO: test validations
    }

    /**
     * Addon
     *
     * Get all the addons
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsTest() throws ApiException {
        List<Addon> response = api.getSelfAddons();
        // TODO: test validations
    }

    /**
     * Specific addon
     *
     * Get a specific addon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsAddonIdTest() throws ApiException {
        String addonId = null;
        Addon response = api.getSelfAddonsAddonId(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsAddonIdApplicationsTest() throws ApiException {
        String addonId = null;
        List<Application> response = api.getSelfAddonsAddonIdApplications(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsAddonIdEnvTest() throws ApiException {
        String addonId = null;
        List<ListEnv> response = api.getSelfAddonsAddonIdEnv(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsAddonIdSsoTest() throws ApiException {
        String addonId = null;
        Sso response = api.getSelfAddonsAddonIdSso(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfAddonsAddonIdTagsTest() throws ApiException {
        String addonId = null;
        List<String> response = api.getSelfAddonsAddonIdTags(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsTest() throws ApiException {
        List<Application> response = api.getSelfApplications();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdTest() throws ApiException {
        String appId = null;
        Application response = api.getSelfApplicationsAppId(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdAddonsTest() throws ApiException {
        String appId = null;
        List<Addon> response = api.getSelfApplicationsAppIdAddons(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdAddonsEnvTest() throws ApiException {
        String appId = null;
        List<Env> response = api.getSelfApplicationsAppIdAddonsEnv(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdDependenciesTest() throws ApiException {
        String appId = null;
        List<Application> response = api.getSelfApplicationsAppIdDependencies(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdDependenciesDependencyIdTest() throws ApiException {
        String dependencyId = null;
        String appId = null;
        WannabeApplication wannabeApplication = null;
        api.getSelfApplicationsAppIdDependenciesDependencyId(dependencyId, appId, wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdDependentsTest() throws ApiException {
        String appId = null;
        List<Application> response = api.getSelfApplicationsAppIdDependents(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdDeploymentsTest() throws ApiException {
        String appId = null;
        String limit = null;
        String offset = null;
        String action = null;
        List<Deployment> response = api.getSelfApplicationsAppIdDeployments(appId, limit, offset, action);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdEnvTest() throws ApiException {
        String appId = null;
        List<ListEnv> response = api.getSelfApplicationsAppIdEnv(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdInstancesTest() throws ApiException {
        String appId = null;
        List<Instance> response = api.getSelfApplicationsAppIdInstances(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdTagsTest() throws ApiException {
        String appId = null;
        List<String> response = api.getSelfApplicationsAppIdTags(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdVhostsTest() throws ApiException {
        String appId = null;
        List<Vhost> response = api.getSelfApplicationsAppIdVhosts(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String appId = null;
        Vhost response = api.getSelfApplicationsAppIdVhostsFavourite(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfConfirmationEmailTest() throws ApiException {
        api.getSelfConfirmationEmail();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfConsumersTest() throws ApiException {
        List<Consumer> response = api.getSelfConsumers();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfConsumersKeyTest() throws ApiException {
        String key = null;
        Consumer response = api.getSelfConsumersKey(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfConsumersKeySecretTest() throws ApiException {
        String key = null;
        Secret response = api.getSelfConsumersKeySecret(key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfConsumptionsTest() throws ApiException {
        String appId = null;
        String from = null;
        String to = null;
        Conso response = api.getSelfConsumptions(appId, from, to);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfCreditsTest() throws ApiException {
        Credits response = api.getSelfCredits();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfEmailsTest() throws ApiException {
        List<String> response = api.getSelfEmails();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfIdTest() throws ApiException {
        String response = api.getSelfId();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfInstancesTest() throws ApiException {
        List<Instance> response = api.getSelfInstances();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfKeysTest() throws ApiException {
        List<Key> response = api.getSelfKeys();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentInfoTest() throws ApiException {
        api.getSelfPaymentInfo();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentsBillingsTest() throws ApiException {
        api.getSelfPaymentsBillings();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentsBillingsBidTest() throws ApiException {
        String bid = null;
        api.getSelfPaymentsBillingsBid(bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentsBillingsBidPdfTest() throws ApiException {
        String bid = null;
        String token = null;
        api.getSelfPaymentsBillingsBidPdf(bid, token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentsFullpricePriceTest() throws ApiException {
        String price = null;
        api.getSelfPaymentsFullpricePrice(price);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfPaymentsMethodsTest() throws ApiException {
        api.getSelfPaymentsMethods();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfTokensTest() throws ApiException {
        List<Token> response = api.getSelfTokens();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSelfValidateEmailTest() throws ApiException {
        String validationKey = null;
        api.getSelfValidateEmail(validationKey);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSummaryTest() throws ApiException {
        Summary response = api.getSummary();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersIdTest() throws ApiException {
        String id = null;
        User response = api.getUsersId(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersIdApplicationsTest() throws ApiException {
        String id = null;
        List<Application> response = api.getUsersIdApplications(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersUserIdGitInfoTest() throws ApiException {
        String userId = null;
        api.getUsersUserIdGitInfo(userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVendorAppsTest() throws ApiException {
        Integer offset = null;
        List<Application> response = api.getVendorApps(offset);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVendorAppsAddonIdTest() throws ApiException {
        String addonId = null;
        api.getVendorAppsAddonId(addonId);
        // TODO: test validations
    }

    /**
     * List members
     *
     * Lists members in a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroupMembersTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        List<Schema1> response = api.listNetworkGroupMembers(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * List peers
     *
     * Lists peers in a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroupPeersTest() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        List<Object> response = api.listNetworkGroupPeers(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * List Network Groups
     *
     * Lists Network Groups from an owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroupsTest() throws ApiException {
        String ownerId = null;
        Object body = null;
        List<Object> response = api.listNetworkGroups(ownerId, body);
        // TODO: test validations
    }

    /**
     * Fetch the logs drains for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsGetTest() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsGet(appId);
        // TODO: test validations
    }

    /**
     * Delete the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsIdOrUrlDeleteTest() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsIdOrUrlDelete(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsIdOrUrlGetTest() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsIdOrUrlGet(appId);
        // TODO: test validations
    }

    /**
     * Add a log drain for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdDrainsPostTest() throws ApiException {
        String appId = null;
        api.logsAppIdDrainsPost(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdGetTest() throws ApiException {
        String appId = null;
        Integer limit = null;
        String order = null;
        OffsetDateTime after = null;
        OffsetDateTime before = null;
        String filter = null;
        String deploymentId = null;
        api.logsAppIdGet(appId, limit, order, after, before, filter, deploymentId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsAppIdSseGetTest() throws ApiException {
        String appId = null;
        api.logsAppIdSseGet(appId);
        // TODO: test validations
    }

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsDrainsDrainIdPutTest() throws ApiException {
        String drainId = null;
        api.logsDrainsDrainIdPut(drainId);
        // TODO: test validations
    }

    /**
     * Fetch all the logs drains (ccadmin dedicated route)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsDrainsGetTest() throws ApiException {
        api.logsDrainsGet();
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogsChunkedAppIdGetTest() throws ApiException {
        String appId = null;
        Boolean download = null;
        api.logsLogsChunkedAppIdGet(appId, download);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsLogsSocketAppIdGetTest() throws ApiException {
        String appId = null;
        OffsetDateTime since = null;
        String filter = null;
        String deploymentId = null;
        api.logsLogsSocketAppIdGet(appId, since, filter, deploymentId);
        // TODO: test validations
    }

    /**
     * WebSocket to get logs for :appID. Optional queryString arg bind_to_es&#x3D;true to bind WS on log storage and not real time AMQP broker
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsSocketAppIdGetTest() throws ApiException {
        String appId = null;
        api.logsSocketAppIdGet(appId);
        // TODO: test validations
    }

    /**
     * list created e-mail hooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsEmailhooksOwnerIdGetTest() throws ApiException {
        String ownerId = null;
        api.notificationsEmailhooksOwnerIdGet(ownerId);
        // TODO: test validations
    }

    /**
     * delete an e-mail hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsEmailhooksOwnerIdIdDeleteTest() throws ApiException {
        String ownerId = null;
        api.notificationsEmailhooksOwnerIdIdDelete(ownerId);
        // TODO: test validations
    }

    /**
     * edit an e-mail hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsEmailhooksOwnerIdIdPutTest() throws ApiException {
        String ownerId = null;
        api.notificationsEmailhooksOwnerIdIdPut(ownerId);
        // TODO: test validations
    }

    /**
     * create a hook for e-mail notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsEmailhooksOwnerIdPostTest() throws ApiException {
        String ownerId = null;
        api.notificationsEmailhooksOwnerIdPost(ownerId);
        // TODO: test validations
    }

    /**
     * list available events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsInfoEventsGetTest() throws ApiException {
        api.notificationsInfoEventsGet();
        // TODO: test validations
    }

    /**
     * list available webhook formats
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsInfoWebhookformatsGetTest() throws ApiException {
        api.notificationsInfoWebhookformatsGet();
        // TODO: test validations
    }

    /**
     * list created hooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsWebhooksOwnerIdGetTest() throws ApiException {
        String ownerId = null;
        api.notificationsWebhooksOwnerIdGet(ownerId);
        // TODO: test validations
    }

    /**
     * delete a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsWebhooksOwnerIdIdDeleteTest() throws ApiException {
        String ownerId = null;
        api.notificationsWebhooksOwnerIdIdDelete(ownerId);
        // TODO: test validations
    }

    /**
     * edit a hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsWebhooksOwnerIdIdPutTest() throws ApiException {
        String ownerId = null;
        api.notificationsWebhooksOwnerIdIdPut(ownerId);
        // TODO: test validations
    }

    /**
     * create a hook for notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsWebhooksOwnerIdPostTest() throws ApiException {
        String ownerId = null;
        api.notificationsWebhooksOwnerIdPost(ownerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthAccessTokenQueryPostTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthToken = null;
        String oauthSignatureMethod = null;
        String oauthSignature = null;
        String oauthTimestamp = null;
        String oauthNonce = null;
        String oauthVersion = null;
        String oauthVerifier = null;
        String oauthCallback = null;
        String oauthTokenSecret = null;
        String oauthCallbackConfirmed = null;
        api.oauthAccessTokenQueryPost(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauthRequestTokenQueryPostTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthToken = null;
        String oauthSignatureMethod = null;
        String oauthSignature = null;
        String oauthTimestamp = null;
        String oauthNonce = null;
        String oauthVersion = null;
        String oauthVerifier = null;
        String oauthCallback = null;
        String oauthTokenSecret = null;
        String oauthCallbackConfirmed = null;
        api.oauthRequestTokenQueryPost(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiGetTest() throws ApiException {
        api.openapiGet();
        // TODO: test validations
    }

    /**
     * Get the swagger for this API as {type}
     *
     * Get the swagger for this API as {type}. Type can be either \&quot;yml\&quot; or \&quot;json\&quot;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiTypeGetTest() throws ApiException {
        String type = null;
        api.openapiTypeGet(type);
        // TODO: test validations
    }

    /**
     * Remove an add-on provider
     *
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonprovidersProviderIdDeleteTest() throws ApiException {
        String id = null;
        String providerId = null;
        api.organisationsIdAddonprovidersProviderIdDelete(id, providerId);
        // TODO: test validations
    }

    /**
     * List instances for this add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdInstancesGetTest() throws ApiException {
        String id = null;
        String addonId = null;
        String deploymentId = null;
        String withDeleted = null;
        List<SupernovaInstanceView> response = api.organisationsIdAddonsAddonIdInstancesGet(id, addonId, deploymentId, withDeleted);
        // TODO: test validations
    }

    /**
     * Get a specific instance for {addonId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdInstancesInstanceIdGetTest() throws ApiException {
        String instanceId = null;
        String id = null;
        String addonId = null;
        SupernovaInstanceView response = api.organisationsIdAddonsAddonIdInstancesInstanceIdGet(instanceId, id, addonId);
        // TODO: test validations
    }

    /**
     * Get past migrations from add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsGetTest() throws ApiException {
        String id = null;
        String addonId = null;
        List<AddonMigration> response = api.organisationsIdAddonsAddonIdMigrationsGet(id, addonId);
        // TODO: test validations
    }

    /**
     * Get a given migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsMigrationIdGetTest() throws ApiException {
        String migrationId = null;
        String id = null;
        String addonId = null;
        AddonMigration response = api.organisationsIdAddonsAddonIdMigrationsMigrationIdGet(migrationId, id, addonId);
        // TODO: test validations
    }

    /**
     * Start a new add-on migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsPostTest() throws ApiException {
        String id = null;
        String addonId = null;
        OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest = null;
        Object response = api.organisationsIdAddonsAddonIdMigrationsPost(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdSsoGetTest() throws ApiException {
        String id = null;
        String addonId = null;
        Sso response = api.organisationsIdAddonsAddonIdSsoGet(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsPreordersPostTest() throws ApiException {
        String id = null;
        WannabeAddon wannabeAddon = null;
        api.organisationsIdAddonsPreordersPost(id, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBranchPutTest() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBranchPut(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBranchesGetTest() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBranchesGet(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBuildflavorPutTest() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBuildflavorPut(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdDependenciesEnvGetTest() throws ApiException {
        String appId = null;
        String id = null;
        List<LinkedAppEnv> response = api.organisationsIdApplicationsAppIdDependenciesEnvGet(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetTest() throws ApiException {
        String appId = null;
        String deploymentId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(appId, deploymentId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdExposedEnvGetTest() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdExposedEnvGet(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdExposedEnvPutTest() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdExposedEnvPut(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdInstancesInstanceIdGetTest() throws ApiException {
        String instanceId = null;
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdInstancesInstanceIdGet(instanceId, appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsBillingsUnpaidGetTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsBillingsUnpaidGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsDefaultGetTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMethodsDefaultGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsDefaultPutTest() throws ApiException {
        String id = null;
        PaymentData paymentData = null;
        api.organisationsIdPaymentsMethodsDefaultPut(id, paymentData);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsGetTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMethodsGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsMIdDeleteTest() throws ApiException {
        String mId = null;
        String id = null;
        api.organisationsIdPaymentsMethodsMIdDelete(mId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsPostTest() throws ApiException {
        String id = null;
        Body body = null;
        api.organisationsIdPaymentsMethodsPost(id, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMonthlyinvoiceGetTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMonthlyinvoiceGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMonthlyinvoiceMaxcreditPutTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsRecurringGetTest() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsRecurringGet(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsAssetsPayButtonTokenButtonPngGetTest() throws ApiException {
        String token = null;
        api.paymentsAssetsPayButtonTokenButtonPngGet(token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsBidEndStripePostTest() throws ApiException {
        String bid = null;
        api.paymentsBidEndStripePost(bid);
        // TODO: test validations
    }

    /**
     * Handled by our API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAuthorizeTest() throws ApiException {
        api.postAuthorize();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postGithubRedeployTest() throws ApiException {
        String userAgent = null;
        String xGithubEvent = null;
        String xHubSignature = null;
        api.postGithubRedeploy(userAgent, xGithubEvent, xHubSignature);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postGithubSignupTest() throws ApiException {
        String transactionId = null;
        String name = null;
        String otherId = null;
        String otherEmail = null;
        String password = null;
        String autoLink = null;
        String terms = null;
        api.postGithubSignup(transactionId, name, otherId, otherEmail, password, autoLink, terms);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOauthAccessTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthToken = null;
        String oauthSignatureMethod = null;
        String oauthSignature = null;
        String oauthTimestamp = null;
        String oauthNonce = null;
        String oauthVersion = null;
        String oauthVerifier = null;
        String oauthCallback = null;
        String oauthTokenSecret = null;
        String oauthCallbackConfirmed = null;
        api.postOauthAccessToken(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOauthAuthorizeTest() throws ApiException {
        String almighty = null;
        String accessOrganisations = null;
        String manageOrganisations = null;
        String manageOrganisationsServices = null;
        String manageOrganisationsApplications = null;
        String manageOrganisationsMembers = null;
        String accessOrganisationsBills = null;
        String accessOrganisationsCreditCount = null;
        String accessOrganisationsConsumptionStatistics = null;
        String accessPersonalInformation = null;
        String managePersonalInformation = null;
        String manageSshKeys = null;
        String manageServices = null;
        String manageApplications = null;
        String accessBills = null;
        String accessCreditCount = null;
        String accessConsumptionStatistics = null;
        String cookie = null;
        api.postOauthAuthorize(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOauthRequestTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthToken = null;
        String oauthSignatureMethod = null;
        String oauthSignature = null;
        String oauthTimestamp = null;
        String oauthNonce = null;
        String oauthVersion = null;
        String oauthVerifier = null;
        String oauthCallback = null;
        String oauthTokenSecret = null;
        String oauthCallbackConfirmed = null;
        api.postOauthRequestToken(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsTest() throws ApiException {
        WannabeOrganisation wannabeOrganisation = null;
        Organisation response = api.postOrganisations(wannabeOrganisation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersTest() throws ApiException {
        String id = null;
        WannabeAddonProvider wannabeAddonProvider = null;
        Provider response = api.postOrganisationsIdAddonproviders(id, wannabeAddonProvider);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdFeaturesTest() throws ApiException {
        String id = null;
        String providerId = null;
        WannabeFeature wannabeFeature = null;
        Feature response = api.postOrganisationsIdAddonprovidersProviderIdFeatures(id, providerId, wannabeFeature);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdPlansTest() throws ApiException {
        String id = null;
        String providerId = null;
        WannabePlan wannabePlan = null;
        Plan response = api.postOrganisationsIdAddonprovidersProviderIdPlans(id, providerId, wannabePlan);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdTestersTest() throws ApiException {
        String id = null;
        String providerId = null;
        api.postOrganisationsIdAddonprovidersProviderIdTesters(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonsTest() throws ApiException {
        String id = null;
        WannabeAddon wannabeAddon = null;
        Addon response = api.postOrganisationsIdAddons(id, wannabeAddon);
        // TODO: test validations
    }

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplicationsTest() throws ApiException {
        String id = null;
        WannabeApplication wannabeApplication = null;
        Application response = api.postOrganisationsIdApplications(id, wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplicationsAppIdAddonsTest() throws ApiException {
        String id = null;
        String appId = null;
        Body body = null;
        api.postOrganisationsIdApplicationsAppIdAddons(id, appId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplicationsAppIdInstancesTest() throws ApiException {
        String id = null;
        String appId = null;
        String commit = null;
        api.postOrganisationsIdApplicationsAppIdInstances(id, appId, commit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdConsumersTest() throws ApiException {
        String id = null;
        WannabeConsumer wannabeConsumer = null;
        api.postOrganisationsIdConsumers(id, wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdMembersTest() throws ApiException {
        String id = null;
        Schema2 body = null;
        String invitationKey = null;
        api.postOrganisationsIdMembers(id, body, invitationKey);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdPaymentsBillingsTest() throws ApiException {
        String id = null;
        api.postOrganisationsIdPaymentsBillings(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPasswordForgottenTest() throws ApiException {
        String login = null;
        String dropTokens = null;
        String testerPass = null;
        api.postPasswordForgotten(login, dropTokens, testerPass);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPasswordForgottenKeyTest() throws ApiException {
        String key = null;
        String pass = null;
        String pass2 = null;
        api.postPasswordForgottenKey(key, pass, pass2);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfAddonsTest() throws ApiException {
        WannabeAddon wannabeAddon = null;
        api.postSelfAddons(wannabeAddon);
        // TODO: test validations
    }

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfApplicationsTest() throws ApiException {
        WannabeApplication wannabeApplication = null;
        api.postSelfApplications(wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfApplicationsAppIdAddonsTest() throws ApiException {
        String appId = null;
        Body body = null;
        api.postSelfApplicationsAppIdAddons(appId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfApplicationsAppIdInstancesTest() throws ApiException {
        String appId = null;
        String commit = null;
        api.postSelfApplicationsAppIdInstances(appId, commit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfConsumersTest() throws ApiException {
        WannabeConsumer wannabeConsumer = null;
        api.postSelfConsumers(wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfPaymentsBillingsTest() throws ApiException {
        api.postSelfPaymentsBillings();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSelfPaymentsMethodsTest() throws ApiException {
        api.postSelfPaymentsMethods();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUsersTest() throws ApiException {
        WannabeUser wannabeUser = null;
        String invitationKey = null;
        String addonBetaInvitationKey = null;
        String email = null;
        String pass = null;
        String urlNext = null;
        String terms = null;
        api.postUsers(wannabeUser, invitationKey, addonBetaInvitationKey, email, pass, urlNext, terms);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postVendorBillingOwnerIdTest() throws ApiException {
        String addonId = null;
        WannabeAddonBilling wannabeAddonBilling = null;
        api.postVendorBillingOwnerId(addonId, wannabeAddonBilling);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsAddonprovidersProviderIdVersionsGetTest() throws ApiException {
        String providerId = null;
        api.productsAddonprovidersProviderIdVersionsGet(providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsMfaKindsGetTest() throws ApiException {
        api.productsMfaKindsGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdTest() throws ApiException {
        String id = null;
        WannabeOrganisation wannabeOrganisation = null;
        Organisation response = api.putOrganisationsId(id, wannabeOrganisation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderIdTest() throws ApiException {
        String id = null;
        String providerId = null;
        WannabeAddonProvider wannabeAddonProvider = null;
        Provider response = api.putOrganisationsIdAddonprovidersProviderId(id, providerId, wannabeAddonProvider);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdTest() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        WannabePlan wannabePlan = null;
        Plan response = api.putOrganisationsIdAddonprovidersProviderIdPlansPlanId(id, providerId, planId, wannabePlan);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameTest() throws ApiException {
        String id = null;
        String featureName = null;
        String providerId = null;
        String planId = null;
        WannabePlanFeature wannabePlanFeature = null;
        api.putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(id, featureName, providerId, planId, wannabePlanFeature);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonsAddonIdTest() throws ApiException {
        String id = null;
        String addonId = null;
        WannabeAddon wannabeAddon = null;
        Addon response = api.putOrganisationsIdAddonsAddonId(id, addonId, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonsAddonIdTagsTagTest() throws ApiException {
        String id = null;
        String tag = null;
        String addonId = null;
        Body body = null;
        api.putOrganisationsIdAddonsAddonIdTagsTag(id, tag, addonId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdTest() throws ApiException {
        String id = null;
        String appId = null;
        WannabeApplication wannabeApplication = null;
        Application response = api.putOrganisationsIdApplicationsAppId(id, appId, wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdDependenciesDependencyIdTest() throws ApiException {
        String dependencyId = null;
        String appId = null;
        String id = null;
        Body body = null;
        api.putOrganisationsIdApplicationsAppIdDependenciesDependencyId(dependencyId, appId, id, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdEnvTest() throws ApiException {
        String id = null;
        String appId = null;
        WannabeEnv wannabeEnv = null;
        ListEnv response = api.putOrganisationsIdApplicationsAppIdEnv(id, appId, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdEnvEnvNameTest() throws ApiException {
        String id = null;
        String appId = null;
        String envName = null;
        WannabeEnv wannabeEnv = null;
        ListEnv response = api.putOrganisationsIdApplicationsAppIdEnvEnvName(id, appId, envName, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdTagsTagTest() throws ApiException {
        String id = null;
        String appId = null;
        String tag = null;
        Body body = null;
        api.putOrganisationsIdApplicationsAppIdTagsTag(id, appId, tag, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdVhostsDomainTest() throws ApiException {
        String id = null;
        String appId = null;
        String domain = null;
        Vhost vhost = null;
        api.putOrganisationsIdApplicationsAppIdVhostsDomain(id, appId, domain, vhost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String id = null;
        String appId = null;
        Vhost vhost = null;
        api.putOrganisationsIdApplicationsAppIdVhostsFavourite(id, appId, vhost);
        // TODO: test validations
    }

    /**
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAvatarTest() throws ApiException {
        String id = null;
        api.putOrganisationsIdAvatar(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdConsumersKeyTest() throws ApiException {
        String id = null;
        String key = null;
        WannabeConsumer wannabeConsumer = null;
        api.putOrganisationsIdConsumersKey(id, key, wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdMembersUserIdTest() throws ApiException {
        String id = null;
        String userId = null;
        Schema2 body = null;
        api.putOrganisationsIdMembersUserId(id, userId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdPaymentsBillingsBidTest() throws ApiException {
        String id = null;
        String bid = null;
        api.putOrganisationsIdPaymentsBillingsBid(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfTest() throws ApiException {
        WannabeUser wannabeUser = null;
        api.putSelf(wannabeUser);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfAddonsAddonIdTest() throws ApiException {
        String addonId = null;
        WannabeAddon wannabeAddon = null;
        api.putSelfAddonsAddonId(addonId, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfAddonsAddonIdPlanTest() throws ApiException {
        String addonId = null;
        WannabePlan wannabePlan = null;
        api.putSelfAddonsAddonIdPlan(addonId, wannabePlan);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfAddonsAddonIdTagsTagTest() throws ApiException {
        String tag = null;
        String addonId = null;
        Body body = null;
        api.putSelfAddonsAddonIdTagsTag(tag, addonId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdTest() throws ApiException {
        String appId = null;
        WannabeApplication wannabeApplication = null;
        api.putSelfApplicationsAppId(appId, wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdEnvTest() throws ApiException {
        String appId = null;
        WannabeEnv wannabeEnv = null;
        api.putSelfApplicationsAppIdEnv(appId, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdEnvEnvNameTest() throws ApiException {
        String appId = null;
        String envName = null;
        WannabeEnv wannabeEnv = null;
        api.putSelfApplicationsAppIdEnvEnvName(appId, envName, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdTagsTagTest() throws ApiException {
        String appId = null;
        String tag = null;
        Body body = null;
        api.putSelfApplicationsAppIdTagsTag(appId, tag, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdVhostsDomainTest() throws ApiException {
        String appId = null;
        String domain = null;
        Vhost vhost = null;
        api.putSelfApplicationsAppIdVhostsDomain(appId, domain, vhost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfApplicationsAppIdVhostsFavouriteTest() throws ApiException {
        String appId = null;
        Vhost vhost = null;
        api.putSelfApplicationsAppIdVhostsFavourite(appId, vhost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfAvatarTest() throws ApiException {
        Avatar avatar = null;
        api.putSelfAvatar(avatar);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfChangePasswordTest() throws ApiException {
        ChangePassword response = api.putSelfChangePassword();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfConsumersKeyTest() throws ApiException {
        String key = null;
        WannabeConsumer wannabeConsumer = null;
        api.putSelfConsumersKey(key, wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfEmailsEmailTest() throws ApiException {
        String email = null;
        Body body = null;
        api.putSelfEmailsEmail(email, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfKeysKeyTest() throws ApiException {
        String key = null;
        Body body = null;
        api.putSelfKeysKey(key, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSelfPaymentsBillingsBidTest() throws ApiException {
        String bid = null;
        api.putSelfPaymentsBillingsBid(bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putVendorAppsAddonIdTest() throws ApiException {
        String addonId = null;
        api.putVendorAppsAddonId(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfAddonsPreordersPostTest() throws ApiException {
        WannabeAddon wannabeAddon = null;
        api.selfAddonsPreordersPost(wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdBranchPutTest() throws ApiException {
        String appId = null;
        api.selfApplicationsAppIdBranchPut(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdBranchesGetTest() throws ApiException {
        String appId = null;
        api.selfApplicationsAppIdBranchesGet(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdBuildflavorPutTest() throws ApiException {
        String appId = null;
        api.selfApplicationsAppIdBuildflavorPut(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdDependenciesEnvGetTest() throws ApiException {
        String appId = null;
        List<LinkedAppEnv> response = api.selfApplicationsAppIdDependenciesEnvGet(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdDeploymentsDeploymentIdGetTest() throws ApiException {
        String appId = null;
        String deploymentId = null;
        api.selfApplicationsAppIdDeploymentsDeploymentIdGet(appId, deploymentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdExposedEnvGetTest() throws ApiException {
        String appId = null;
        api.selfApplicationsAppIdExposedEnvGet(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdExposedEnvPutTest() throws ApiException {
        String appId = null;
        api.selfApplicationsAppIdExposedEnvPut(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfApplicationsAppIdInstancesInstanceIdGetTest() throws ApiException {
        String instanceId = null;
        String appId = null;
        api.selfApplicationsAppIdInstancesInstanceIdGet(instanceId, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfCliTokensGetTest() throws ApiException {
        String cliToken = null;
        api.selfCliTokensGet(cliToken);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfMfaKindBackupcodesGetTest() throws ApiException {
        String kind = null;
        api.selfMfaKindBackupcodesGet(kind);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfMfaKindConfirmationPostTest() throws ApiException {
        String kind = null;
        api.selfMfaKindConfirmationPost(kind);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfMfaKindDeleteTest() throws ApiException {
        String kind = null;
        api.selfMfaKindDelete(kind);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfMfaKindPostTest() throws ApiException {
        String kind = null;
        api.selfMfaKindPost(kind);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfMfaKindPutTest() throws ApiException {
        String kind = null;
        api.selfMfaKindPut(kind);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsMethodsDefaultGetTest() throws ApiException {
        api.selfPaymentsMethodsDefaultGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsMethodsDefaultPutTest() throws ApiException {
        api.selfPaymentsMethodsDefaultPut();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsMonthlyinvoiceGetTest() throws ApiException {
        api.selfPaymentsMonthlyinvoiceGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsMonthlyinvoiceMaxcreditPutTest() throws ApiException {
        api.selfPaymentsMonthlyinvoiceMaxcreditPut();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsRecurringGetTest() throws ApiException {
        api.selfPaymentsRecurringGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void selfPaymentsTokensStripeGetTest() throws ApiException {
        api.selfPaymentsTokensStripeGet();
        // TODO: test validations
    }

    /**
     * Update provider&#39;s addon environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfigProviderEnvTest() throws ApiException {
        String configurationProviderId = null;
        List<Object> requestBody = null;
        List<Object> response = api.updateConfigProviderEnv(configurationProviderId, requestBody);
        // TODO: test validations
    }

    /**
     * Fetch the logs drains for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsGetTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsGet(appId);
        // TODO: test validations
    }

    /**
     * Delete the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsIdOrUrlDeleteTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsIdOrUrlDelete(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs drain by id or url for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsIdOrUrlGetTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsIdOrUrlGet(appId);
        // TODO: test validations
    }

    /**
     * Add a log drain for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdDrainsPostTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdDrainsPost(appId);
        // TODO: test validations
    }

    /**
     * Fetch the logs for a given application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdGetTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdGet(appId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a chunked, never-ending response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdLogsChunkedGetTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdLogsChunkedGet(appId);
        // TODO: test validations
    }

    /**
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v3LogsAppIdLogsSocketGetTest() throws ApiException {
        String appId = null;
        api.v3LogsAppIdLogsSocketGet(appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vendorAddonsPostTest() throws ApiException {
        api.vendorAddonsPost();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vendorAppsAddonIdLogscollectorGetTest() throws ApiException {
        String addonId = null;
        api.vendorAppsAddonIdLogscollectorGet(addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vendorAppsAddonIdMigrationCallbackPutTest() throws ApiException {
        String addonId = null;
        String planId = null;
        String region = null;
        api.vendorAppsAddonIdMigrationCallbackPut(addonId, planId, region);
        // TODO: test validations
    }

}
