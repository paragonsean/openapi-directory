/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AddonMigration;
import org.openapitools.client.model.AddonProviderSso;
import org.openapitools.client.model.AppInstance;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.Conso;
import org.openapitools.client.model.Consumer;
import org.openapitools.client.model.Credits;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentSummary;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.LinkedAppEnv;
import org.openapitools.client.model.ListEnv;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.OrganisationsIdAddonsAddonIdMigrationsPostRequest;
import org.openapitools.client.model.PaymentData;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.Schema2;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Sso;
import org.openapitools.client.model.SupernovaInstanceView;
import org.openapitools.client.model.Vhost;
import org.openapitools.client.model.WannabeAddon;
import org.openapitools.client.model.WannabeAddonProvider;
import org.openapitools.client.model.WannabeApplication;
import org.openapitools.client.model.WannabeConsumer;
import org.openapitools.client.model.WannabeEnv;
import org.openapitools.client.model.WannabeFeature;
import org.openapitools.client.model.WannabeOrganisation;
import org.openapitools.client.model.WannabePlan;
import org.openapitools.client.model.WannabePlanFeature;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganisationsApi
 */
@Disabled
public class OrganisationsApiTest {

    private final OrganisationsApi api = new OrganisationsApi();

    /**
     * Add external peer
     *
     * Adds an external peer to a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupExternalPeer_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.createNetworkGroupExternalPeer_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Add member
     *
     * Adds a member to a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroupMember_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Schema2 schema2 = null;
        api.createNetworkGroupMember_0(ownerId, networkGroupId, schema2);
        // TODO: test validations
    }

    /**
     * Create Network Group
     *
     * Creates a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkGroup_0Test() throws ApiException {
        String ownerId = null;
        Object body = null;
        Object response = api.createNetworkGroup_0(ownerId, body);
        // TODO: test validations
    }

    /**
     * Remove external peer
     *
     * Removes an external peer from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupExternalPeer_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        api.deleteNetworkGroupExternalPeer_0(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Remove member
     *
     * Removes a member from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupMember_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String memberId = null;
        Object body = null;
        api.deleteNetworkGroupMember_0(ownerId, networkGroupId, memberId, body);
        // TODO: test validations
    }

    /**
     * Remove peer
     *
     * Removes a peer from a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroupPeer_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        api.deleteNetworkGroupPeer_0(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Delete Network Group
     *
     * Deletes a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkGroup_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        api.deleteNetworkGroup_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Test() throws ApiException {
        String id = null;
        String featureId = null;
        String providerId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(id, featureId, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Test() throws ApiException {
        String id = null;
        String featureName = null;
        String providerId = null;
        String planId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(id, featureName, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        api.deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonsAddonIdTagsTag_1Test() throws ApiException {
        String id = null;
        String tag = null;
        String addonId = null;
        api.deleteOrganisationsIdAddonsAddonIdTagsTag_1(id, tag, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdAddonsAddonId_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        api.deleteOrganisationsIdAddonsAddonId_1(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Test() throws ApiException {
        String id = null;
        String appId = null;
        String addonId = null;
        api.deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(id, appId, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Test() throws ApiException {
        String dependencyId = null;
        String appId = null;
        String id = null;
        api.deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String deploymentId = null;
        api.deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(id, appId, deploymentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String envName = null;
        api.deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(id, appId, envName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdInstances_1Test() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppIdInstances_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdTagsTag_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String tag = null;
        api.deleteOrganisationsIdApplicationsAppIdTagsTag_1(id, appId, tag);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String domain = null;
        api.deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(id, appId, domain);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Test() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdApplicationsAppId_1Test() throws ApiException {
        String id = null;
        String appId = null;
        api.deleteOrganisationsIdApplicationsAppId_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdConsumersKey_0Test() throws ApiException {
        String id = null;
        String key = null;
        api.deleteOrganisationsIdConsumersKey_0(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdMembersUserId_0Test() throws ApiException {
        String id = null;
        String userId = null;
        api.deleteOrganisationsIdMembersUserId_0(id, userId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdPaymentsBillingsBid_0Test() throws ApiException {
        String id = null;
        String bid = null;
        api.deleteOrganisationsIdPaymentsBillingsBid_0(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsIdPaymentsRecurring_0Test() throws ApiException {
        String id = null;
        api.deleteOrganisationsIdPaymentsRecurring_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationsId_0Test() throws ApiException {
        String id = null;
        api.deleteOrganisationsId_0(id);
        // TODO: test validations
    }

    /**
     * Get member
     *
     * Gets details of a Network Group member.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupMember_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String memberId = null;
        Object body = null;
        Schema1 response = api.getNetworkGroupMember_0(ownerId, networkGroupId, memberId, body);
        // TODO: test validations
    }

    /**
     * Get peer
     *
     * Gets details of a Network Group peer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupPeer_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupPeer_0(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Network Group SSE
     *
     * Retrieves the current Network Group details as a Server Sent Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupStream_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.getNetworkGroupStream_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * Get WireGuard® configuration
     *
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupWireGuardConfigurationStream_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupWireGuardConfigurationStream_0(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Get WireGuard® configuration
     *
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroupWireGuardConfiguration_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        String peerId = null;
        Object body = null;
        Object response = api.getNetworkGroupWireGuardConfiguration_0(ownerId, networkGroupId, peerId, body);
        // TODO: test validations
    }

    /**
     * Get Network Group
     *
     * Gets details of a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkGroup_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        Object response = api.getNetworkGroup_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdFeatures_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        List<Feature> response = api.getOrganisationsIdAddonprovidersProviderIdFeatures_0(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        Plan response = api.getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdPlans_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        List<Plan> response = api.getOrganisationsIdAddonprovidersProviderIdPlans_0(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderIdTags_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        List<String> response = api.getOrganisationsIdAddonprovidersProviderIdTags_0(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonprovidersProviderId_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        Provider response = api.getOrganisationsIdAddonprovidersProviderId_0(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonproviders_0Test() throws ApiException {
        String id = null;
        List<Provider> response = api.getOrganisationsIdAddonproviders_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdApplications_2Test() throws ApiException {
        String id = null;
        String addonId = null;
        List<Application> response = api.getOrganisationsIdAddonsAddonIdApplications_2(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdEnv_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        List<ListEnv> response = api.getOrganisationsIdAddonsAddonIdEnv_1(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdSso_0Test() throws ApiException {
        String providerId = null;
        String id = null;
        AddonProviderSso response = api.getOrganisationsIdAddonsAddonIdSso_0(providerId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonIdTags_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        List<String> response = api.getOrganisationsIdAddonsAddonIdTags_1(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddonsAddonId_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        Addon response = api.getOrganisationsIdAddonsAddonId_1(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdAddons_1Test() throws ApiException {
        String id = null;
        List<Addon> response = api.getOrganisationsIdAddons_1(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdAddonsEnv_2Test() throws ApiException {
        String id = null;
        String appId = null;
        List<Env> response = api.getOrganisationsIdApplicationsAppIdAddonsEnv_2(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdAddons_2Test() throws ApiException {
        String id = null;
        String appId = null;
        List<Addon> response = api.getOrganisationsIdApplicationsAppIdAddons_2(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDependencies_1Test() throws ApiException {
        String appId = null;
        String id = null;
        List<Application> response = api.getOrganisationsIdApplicationsAppIdDependencies_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDependents_1Test() throws ApiException {
        String appId = null;
        String id = null;
        List<Application> response = api.getOrganisationsIdApplicationsAppIdDependents_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdDeployments_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String limit = null;
        String offset = null;
        String action = null;
        List<Deployment> response = api.getOrganisationsIdApplicationsAppIdDeployments_1(id, appId, limit, offset, action);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdEnv_1Test() throws ApiException {
        String id = null;
        String appId = null;
        List<ListEnv> response = api.getOrganisationsIdApplicationsAppIdEnv_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdInstances_1Test() throws ApiException {
        String id = null;
        String appId = null;
        List<AppInstance> response = api.getOrganisationsIdApplicationsAppIdInstances_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdTags_1Test() throws ApiException {
        String id = null;
        String appId = null;
        List<String> response = api.getOrganisationsIdApplicationsAppIdTags_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdVhostsFavourite_1Test() throws ApiException {
        String id = null;
        String appId = null;
        Vhost response = api.getOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppIdVhosts_1Test() throws ApiException {
        String id = null;
        String appId = null;
        List<Vhost> response = api.getOrganisationsIdApplicationsAppIdVhosts_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplicationsAppId_1Test() throws ApiException {
        String id = null;
        String appId = null;
        Application response = api.getOrganisationsIdApplicationsAppId_1(id, appId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdApplications_1Test() throws ApiException {
        String id = null;
        List<Application> response = api.getOrganisationsIdApplications_1(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumersKeySecret_0Test() throws ApiException {
        String id = null;
        String key = null;
        Secret response = api.getOrganisationsIdConsumersKeySecret_0(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumersKey_0Test() throws ApiException {
        String id = null;
        String key = null;
        Consumer response = api.getOrganisationsIdConsumersKey_0(id, key);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumers_0Test() throws ApiException {
        String id = null;
        List<Consumer> response = api.getOrganisationsIdConsumers_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdConsumptions_0Test() throws ApiException {
        String id = null;
        String appId = null;
        String from = null;
        String to = null;
        Conso response = api.getOrganisationsIdConsumptions_0(id, appId, from, to);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdCredits_0Test() throws ApiException {
        String id = null;
        Credits response = api.getOrganisationsIdCredits_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdDeployments_0Test() throws ApiException {
        String id = null;
        DeploymentSummary response = api.getOrganisationsIdDeployments_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdInstances_0Test() throws ApiException {
        String id = null;
        Object response = api.getOrganisationsIdInstances_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdMembers_0Test() throws ApiException {
        String id = null;
        List<Schema1> response = api.getOrganisationsIdMembers_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentInfo_0Test() throws ApiException {
        String id = null;
        api.getOrganisationsIdPaymentInfo_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillingsBidPdf_0Test() throws ApiException {
        String id = null;
        String bid = null;
        String token = null;
        api.getOrganisationsIdPaymentsBillingsBidPdf_0(id, bid, token);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillingsBid_0Test() throws ApiException {
        String id = null;
        String bid = null;
        api.getOrganisationsIdPaymentsBillingsBid_0(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsBillings_0Test() throws ApiException {
        String id = null;
        api.getOrganisationsIdPaymentsBillings_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsIdPaymentsFullPricePrice_0Test() throws ApiException {
        String id = null;
        String price = null;
        api.getOrganisationsIdPaymentsFullPricePrice_0(id, price);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationsId_0Test() throws ApiException {
        String id = null;
        Organisation response = api.getOrganisationsId_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisations_0Test() throws ApiException {
        String user = null;
        List<Organisation> response = api.getOrganisations_0(user);
        // TODO: test validations
    }

    /**
     * List members
     *
     * Lists members in a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroupMembers_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        List<Schema1> response = api.listNetworkGroupMembers_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * List peers
     *
     * Lists peers in a Network Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroupPeers_0Test() throws ApiException {
        String ownerId = null;
        String networkGroupId = null;
        Object body = null;
        List<Object> response = api.listNetworkGroupPeers_0(ownerId, networkGroupId, body);
        // TODO: test validations
    }

    /**
     * List Network Groups
     *
     * Lists Network Groups from an owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkGroups_0Test() throws ApiException {
        String ownerId = null;
        Object body = null;
        List<Object> response = api.listNetworkGroups_0(ownerId, body);
        // TODO: test validations
    }

    /**
     * Remove an add-on provider
     *
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonprovidersProviderIdDelete_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        api.organisationsIdAddonprovidersProviderIdDelete_0(id, providerId);
        // TODO: test validations
    }

    /**
     * List instances for this add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdInstancesGet_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        String deploymentId = null;
        String withDeleted = null;
        List<SupernovaInstanceView> response = api.organisationsIdAddonsAddonIdInstancesGet_1(id, addonId, deploymentId, withDeleted);
        // TODO: test validations
    }

    /**
     * Get a specific instance for {addonId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Test() throws ApiException {
        String instanceId = null;
        String id = null;
        String addonId = null;
        SupernovaInstanceView response = api.organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(instanceId, id, addonId);
        // TODO: test validations
    }

    /**
     * Get past migrations from add-on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsGet_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        List<AddonMigration> response = api.organisationsIdAddonsAddonIdMigrationsGet_1(id, addonId);
        // TODO: test validations
    }

    /**
     * Get a given migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Test() throws ApiException {
        String migrationId = null;
        String id = null;
        String addonId = null;
        AddonMigration response = api.organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(migrationId, id, addonId);
        // TODO: test validations
    }

    /**
     * Start a new add-on migration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdMigrationsPost_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest = null;
        Object response = api.organisationsIdAddonsAddonIdMigrationsPost_1(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsAddonIdSsoGet_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        Sso response = api.organisationsIdAddonsAddonIdSsoGet_1(id, addonId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdAddonsPreordersPost_1Test() throws ApiException {
        String id = null;
        WannabeAddon wannabeAddon = null;
        api.organisationsIdAddonsPreordersPost_1(id, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBranchPut_1Test() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBranchPut_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBranchesGet_1Test() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBranchesGet_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdBuildflavorPut_1Test() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdBuildflavorPut_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdDependenciesEnvGet_1Test() throws ApiException {
        String appId = null;
        String id = null;
        List<LinkedAppEnv> response = api.organisationsIdApplicationsAppIdDependenciesEnvGet_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Test() throws ApiException {
        String appId = null;
        String deploymentId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(appId, deploymentId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdExposedEnvGet_1Test() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdExposedEnvGet_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdExposedEnvPut_1Test() throws ApiException {
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdExposedEnvPut_1(appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Test() throws ApiException {
        String instanceId = null;
        String appId = null;
        String id = null;
        api.organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(instanceId, appId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsBillingsUnpaidGet_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsBillingsUnpaidGet_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsDefaultGet_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMethodsDefaultGet_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsDefaultPut_0Test() throws ApiException {
        String id = null;
        PaymentData paymentData = null;
        api.organisationsIdPaymentsMethodsDefaultPut_0(id, paymentData);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsGet_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMethodsGet_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsMIdDelete_0Test() throws ApiException {
        String mId = null;
        String id = null;
        api.organisationsIdPaymentsMethodsMIdDelete_0(mId, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMethodsPost_0Test() throws ApiException {
        String id = null;
        Body body = null;
        api.organisationsIdPaymentsMethodsPost_0(id, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMonthlyinvoiceGet_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMonthlyinvoiceGet_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organisationsIdPaymentsRecurringGet_0Test() throws ApiException {
        String id = null;
        api.organisationsIdPaymentsRecurringGet_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdFeatures_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        WannabeFeature wannabeFeature = null;
        Feature response = api.postOrganisationsIdAddonprovidersProviderIdFeatures_0(id, providerId, wannabeFeature);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdPlans_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        WannabePlan wannabePlan = null;
        Plan response = api.postOrganisationsIdAddonprovidersProviderIdPlans_0(id, providerId, wannabePlan);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonprovidersProviderIdTesters_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        api.postOrganisationsIdAddonprovidersProviderIdTesters_0(id, providerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddonproviders_0Test() throws ApiException {
        String id = null;
        WannabeAddonProvider wannabeAddonProvider = null;
        Provider response = api.postOrganisationsIdAddonproviders_0(id, wannabeAddonProvider);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdAddons_1Test() throws ApiException {
        String id = null;
        WannabeAddon wannabeAddon = null;
        Addon response = api.postOrganisationsIdAddons_1(id, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplicationsAppIdAddons_2Test() throws ApiException {
        String id = null;
        String appId = null;
        Body body = null;
        api.postOrganisationsIdApplicationsAppIdAddons_2(id, appId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplicationsAppIdInstances_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String commit = null;
        api.postOrganisationsIdApplicationsAppIdInstances_1(id, appId, commit);
        // TODO: test validations
    }

    /**
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdApplications_1Test() throws ApiException {
        String id = null;
        WannabeApplication wannabeApplication = null;
        Application response = api.postOrganisationsIdApplications_1(id, wannabeApplication);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdConsumers_0Test() throws ApiException {
        String id = null;
        WannabeConsumer wannabeConsumer = null;
        api.postOrganisationsIdConsumers_0(id, wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdMembers_0Test() throws ApiException {
        String id = null;
        Schema2 body = null;
        String invitationKey = null;
        api.postOrganisationsIdMembers_0(id, body, invitationKey);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationsIdPaymentsBillings_0Test() throws ApiException {
        String id = null;
        api.postOrganisationsIdPaymentsBillings_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisations_0Test() throws ApiException {
        WannabeOrganisation wannabeOrganisation = null;
        Organisation response = api.postOrganisations_0(wannabeOrganisation);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Test() throws ApiException {
        String id = null;
        String featureName = null;
        String providerId = null;
        String planId = null;
        WannabePlanFeature wannabePlanFeature = null;
        api.putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(id, featureName, providerId, planId, wannabePlanFeature);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        String planId = null;
        WannabePlan wannabePlan = null;
        Plan response = api.putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(id, providerId, planId, wannabePlan);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonprovidersProviderId_0Test() throws ApiException {
        String id = null;
        String providerId = null;
        WannabeAddonProvider wannabeAddonProvider = null;
        Provider response = api.putOrganisationsIdAddonprovidersProviderId_0(id, providerId, wannabeAddonProvider);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonsAddonIdTagsTag_1Test() throws ApiException {
        String id = null;
        String tag = null;
        String addonId = null;
        Body body = null;
        api.putOrganisationsIdAddonsAddonIdTagsTag_1(id, tag, addonId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAddonsAddonId_1Test() throws ApiException {
        String id = null;
        String addonId = null;
        WannabeAddon wannabeAddon = null;
        Addon response = api.putOrganisationsIdAddonsAddonId_1(id, addonId, wannabeAddon);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Test() throws ApiException {
        String dependencyId = null;
        String appId = null;
        String id = null;
        Body body = null;
        api.putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(dependencyId, appId, id, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdEnvEnvName_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String envName = null;
        WannabeEnv wannabeEnv = null;
        ListEnv response = api.putOrganisationsIdApplicationsAppIdEnvEnvName_1(id, appId, envName, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdEnv_1Test() throws ApiException {
        String id = null;
        String appId = null;
        WannabeEnv wannabeEnv = null;
        ListEnv response = api.putOrganisationsIdApplicationsAppIdEnv_1(id, appId, wannabeEnv);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdTagsTag_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String tag = null;
        Body body = null;
        api.putOrganisationsIdApplicationsAppIdTagsTag_1(id, appId, tag, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdVhostsDomain_1Test() throws ApiException {
        String id = null;
        String appId = null;
        String domain = null;
        Vhost vhost = null;
        api.putOrganisationsIdApplicationsAppIdVhostsDomain_1(id, appId, domain, vhost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppIdVhostsFavourite_1Test() throws ApiException {
        String id = null;
        String appId = null;
        Vhost vhost = null;
        api.putOrganisationsIdApplicationsAppIdVhostsFavourite_1(id, appId, vhost);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdApplicationsAppId_1Test() throws ApiException {
        String id = null;
        String appId = null;
        WannabeApplication wannabeApplication = null;
        Application response = api.putOrganisationsIdApplicationsAppId_1(id, appId, wannabeApplication);
        // TODO: test validations
    }

    /**
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdAvatar_0Test() throws ApiException {
        String id = null;
        api.putOrganisationsIdAvatar_0(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdConsumersKey_0Test() throws ApiException {
        String id = null;
        String key = null;
        WannabeConsumer wannabeConsumer = null;
        api.putOrganisationsIdConsumersKey_0(id, key, wannabeConsumer);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdMembersUserId_0Test() throws ApiException {
        String id = null;
        String userId = null;
        Schema2 body = null;
        api.putOrganisationsIdMembersUserId_0(id, userId, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsIdPaymentsBillingsBid_0Test() throws ApiException {
        String id = null;
        String bid = null;
        api.putOrganisationsIdPaymentsBillingsBid_0(id, bid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putOrganisationsId_0Test() throws ApiException {
        String id = null;
        WannabeOrganisation wannabeOrganisation = null;
        Organisation response = api.putOrganisationsId_0(id, wannabeOrganisation);
        // TODO: test validations
    }

}
