/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SummaryOrganisationsInnerAddonsInner;
import org.openapitools.client.model.SummaryOrganisationsInnerApplicationsInner;
import org.openapitools.client.model.SummaryOrganisationsInnerConsumersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SummaryOrganisationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SummaryOrganisationsInner {
  public static final String SERIALIZED_NAME_ADDONS = "addons";
  @SerializedName(SERIALIZED_NAME_ADDONS)
  private List<SummaryOrganisationsInnerAddonsInner> addons = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLICATIONS = "applications";
  @SerializedName(SERIALIZED_NAME_APPLICATIONS)
  private List<SummaryOrganisationsInnerApplicationsInner> applications = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_CONSUMERS = "consumers";
  @SerializedName(SERIALIZED_NAME_CONSUMERS)
  private List<SummaryOrganisationsInnerConsumersInner> consumers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<String> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public SummaryOrganisationsInner() {
  }

  public SummaryOrganisationsInner addons(List<SummaryOrganisationsInnerAddonsInner> addons) {
    this.addons = addons;
    return this;
  }

  public SummaryOrganisationsInner addAddonsItem(SummaryOrganisationsInnerAddonsInner addonsItem) {
    if (this.addons == null) {
      this.addons = new ArrayList<>();
    }
    this.addons.add(addonsItem);
    return this;
  }

  /**
   * Get addons
   * @return addons
   */
  @javax.annotation.Nullable
  public List<SummaryOrganisationsInnerAddonsInner> getAddons() {
    return addons;
  }

  public void setAddons(List<SummaryOrganisationsInnerAddonsInner> addons) {
    this.addons = addons;
  }


  public SummaryOrganisationsInner applications(List<SummaryOrganisationsInnerApplicationsInner> applications) {
    this.applications = applications;
    return this;
  }

  public SummaryOrganisationsInner addApplicationsItem(SummaryOrganisationsInnerApplicationsInner applicationsItem) {
    if (this.applications == null) {
      this.applications = new ArrayList<>();
    }
    this.applications.add(applicationsItem);
    return this;
  }

  /**
   * Get applications
   * @return applications
   */
  @javax.annotation.Nullable
  public List<SummaryOrganisationsInnerApplicationsInner> getApplications() {
    return applications;
  }

  public void setApplications(List<SummaryOrganisationsInnerApplicationsInner> applications) {
    this.applications = applications;
  }


  public SummaryOrganisationsInner avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * Get avatar
   * @return avatar
   */
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public SummaryOrganisationsInner consumers(List<SummaryOrganisationsInnerConsumersInner> consumers) {
    this.consumers = consumers;
    return this;
  }

  public SummaryOrganisationsInner addConsumersItem(SummaryOrganisationsInnerConsumersInner consumersItem) {
    if (this.consumers == null) {
      this.consumers = new ArrayList<>();
    }
    this.consumers.add(consumersItem);
    return this;
  }

  /**
   * Get consumers
   * @return consumers
   */
  @javax.annotation.Nullable
  public List<SummaryOrganisationsInnerConsumersInner> getConsumers() {
    return consumers;
  }

  public void setConsumers(List<SummaryOrganisationsInnerConsumersInner> consumers) {
    this.consumers = consumers;
  }


  public SummaryOrganisationsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SummaryOrganisationsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SummaryOrganisationsInner providers(List<String> providers) {
    this.providers = providers;
    return this;
  }

  public SummaryOrganisationsInner addProvidersItem(String providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * Get providers
   * @return providers
   */
  @javax.annotation.Nullable
  public List<String> getProviders() {
    return providers;
  }

  public void setProviders(List<String> providers) {
    this.providers = providers;
  }


  public SummaryOrganisationsInner role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryOrganisationsInner summaryOrganisationsInner = (SummaryOrganisationsInner) o;
    return Objects.equals(this.addons, summaryOrganisationsInner.addons) &&
        Objects.equals(this.applications, summaryOrganisationsInner.applications) &&
        Objects.equals(this.avatar, summaryOrganisationsInner.avatar) &&
        Objects.equals(this.consumers, summaryOrganisationsInner.consumers) &&
        Objects.equals(this.id, summaryOrganisationsInner.id) &&
        Objects.equals(this.name, summaryOrganisationsInner.name) &&
        Objects.equals(this.providers, summaryOrganisationsInner.providers) &&
        Objects.equals(this.role, summaryOrganisationsInner.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addons, applications, avatar, consumers, id, name, providers, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryOrganisationsInner {\n");
    sb.append("    addons: ").append(toIndentedString(addons)).append("\n");
    sb.append("    applications: ").append(toIndentedString(applications)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    consumers: ").append(toIndentedString(consumers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addons");
    openapiFields.add("applications");
    openapiFields.add("avatar");
    openapiFields.add("consumers");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("providers");
    openapiFields.add("role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryOrganisationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryOrganisationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryOrganisationsInner is not found in the empty JSON string", SummaryOrganisationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryOrganisationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryOrganisationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addons") != null && !jsonObj.get("addons").isJsonNull()) {
        JsonArray jsonArrayaddons = jsonObj.getAsJsonArray("addons");
        if (jsonArrayaddons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addons` to be an array in the JSON string but got `%s`", jsonObj.get("addons").toString()));
          }

          // validate the optional field `addons` (array)
          for (int i = 0; i < jsonArrayaddons.size(); i++) {
            SummaryOrganisationsInnerAddonsInner.validateJsonElement(jsonArrayaddons.get(i));
          };
        }
      }
      if (jsonObj.get("applications") != null && !jsonObj.get("applications").isJsonNull()) {
        JsonArray jsonArrayapplications = jsonObj.getAsJsonArray("applications");
        if (jsonArrayapplications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applications` to be an array in the JSON string but got `%s`", jsonObj.get("applications").toString()));
          }

          // validate the optional field `applications` (array)
          for (int i = 0; i < jsonArrayapplications.size(); i++) {
            SummaryOrganisationsInnerApplicationsInner.validateJsonElement(jsonArrayapplications.get(i));
          };
        }
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if (jsonObj.get("consumers") != null && !jsonObj.get("consumers").isJsonNull()) {
        JsonArray jsonArrayconsumers = jsonObj.getAsJsonArray("consumers");
        if (jsonArrayconsumers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("consumers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `consumers` to be an array in the JSON string but got `%s`", jsonObj.get("consumers").toString()));
          }

          // validate the optional field `consumers` (array)
          for (int i = 0; i < jsonArrayconsumers.size(); i++) {
            SummaryOrganisationsInnerConsumersInner.validateJsonElement(jsonArrayconsumers.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull() && !jsonObj.get("providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryOrganisationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryOrganisationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryOrganisationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryOrganisationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryOrganisationsInner>() {
           @Override
           public void write(JsonWriter out, SummaryOrganisationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryOrganisationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryOrganisationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryOrganisationsInner
   * @throws IOException if the JSON string is invalid with respect to SummaryOrganisationsInner
   */
  public static SummaryOrganisationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryOrganisationsInner.class);
  }

  /**
   * Convert an instance of SummaryOrganisationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

