/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A user representation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin = false;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_CAN_PAY = "canPay";
  @SerializedName(SERIALIZED_NAME_CAN_PAY)
  private Boolean canPay = false;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Long creationDate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VALIDATED = "emailValidated";
  @SerializedName(SERIALIZED_NAME_EMAIL_VALIDATED)
  private Boolean emailValidated = false;

  public static final String SERIALIZED_NAME_HAS_PASSWORD = "hasPassword";
  @SerializedName(SERIALIZED_NAME_HAS_PASSWORD)
  private Boolean hasPassword = false;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH_APPS = "oauthApps";
  @SerializedName(SERIALIZED_NAME_OAUTH_APPS)
  private List<String> oauthApps = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PREFERRED_M_F_A = "preferredMFA";
  @SerializedName(SERIALIZED_NAME_PREFERRED_M_F_A)
  private String preferredMFA;

  public static final String SERIALIZED_NAME_ZIPCODE = "zipcode";
  @SerializedName(SERIALIZED_NAME_ZIPCODE)
  private String zipcode;

  public User() {
  }

  public User address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the user
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public User admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Is the user an administrator ?
   * @return admin
   */
  @javax.annotation.Nonnull
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public User avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * The location of the user&#39;s avatar
   * @return avatar
   */
  @javax.annotation.Nonnull
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public User canPay(Boolean canPay) {
    this.canPay = canPay;
    return this;
  }

  /**
   * Does the user can pay ?
   * @return canPay
   */
  @javax.annotation.Nonnull
  public Boolean getCanPay() {
    return canPay;
  }

  public void setCanPay(Boolean canPay) {
    this.canPay = canPay;
  }


  public User city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city of the user
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public User country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of the user
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public User creationDate(Long creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The creation timestamp of the user
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public Long getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Long creationDate) {
    this.creationDate = creationDate;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User emailValidated(Boolean emailValidated) {
    this.emailValidated = emailValidated;
    return this;
  }

  /**
   * Does the user email is validate
   * @return emailValidated
   */
  @javax.annotation.Nonnull
  public Boolean getEmailValidated() {
    return emailValidated;
  }

  public void setEmailValidated(Boolean emailValidated) {
    this.emailValidated = emailValidated;
  }


  public User hasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

  /**
   * Get hasPassword
   * @return hasPassword
   */
  @javax.annotation.Nullable
  public Boolean getHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }


  public User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the user : &#x60;user_${uuid}&#x60;
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public User lang(String lang) {
    this.lang = lang;
    return this;
  }

  /**
   * The lang of the user
   * @return lang
   */
  @javax.annotation.Nonnull
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the user
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User oauthApps(List<String> oauthApps) {
    this.oauthApps = oauthApps;
    return this;
  }

  public User addOauthAppsItem(String oauthAppsItem) {
    if (this.oauthApps == null) {
      this.oauthApps = new ArrayList<>();
    }
    this.oauthApps.add(oauthAppsItem);
    return this;
  }

  /**
   * The list of token oauth
   * @return oauthApps
   */
  @javax.annotation.Nonnull
  public List<String> getOauthApps() {
    return oauthApps;
  }

  public void setOauthApps(List<String> oauthApps) {
    this.oauthApps = oauthApps;
  }


  public User phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The phone of the user
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public User preferredMFA(String preferredMFA) {
    this.preferredMFA = preferredMFA;
    return this;
  }

  /**
   * Get preferredMFA
   * @return preferredMFA
   */
  @javax.annotation.Nullable
  public String getPreferredMFA() {
    return preferredMFA;
  }

  public void setPreferredMFA(String preferredMFA) {
    this.preferredMFA = preferredMFA;
  }


  public User zipcode(String zipcode) {
    this.zipcode = zipcode;
    return this;
  }

  /**
   * The zipcode of the user
   * @return zipcode
   */
  @javax.annotation.Nonnull
  public String getZipcode() {
    return zipcode;
  }

  public void setZipcode(String zipcode) {
    this.zipcode = zipcode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.address, user.address) &&
        Objects.equals(this.admin, user.admin) &&
        Objects.equals(this.avatar, user.avatar) &&
        Objects.equals(this.canPay, user.canPay) &&
        Objects.equals(this.city, user.city) &&
        Objects.equals(this.country, user.country) &&
        Objects.equals(this.creationDate, user.creationDate) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.emailValidated, user.emailValidated) &&
        Objects.equals(this.hasPassword, user.hasPassword) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.lang, user.lang) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.oauthApps, user.oauthApps) &&
        Objects.equals(this.phone, user.phone) &&
        Objects.equals(this.preferredMFA, user.preferredMFA) &&
        Objects.equals(this.zipcode, user.zipcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, admin, avatar, canPay, city, country, creationDate, email, emailValidated, hasPassword, id, lang, name, oauthApps, phone, preferredMFA, zipcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    canPay: ").append(toIndentedString(canPay)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailValidated: ").append(toIndentedString(emailValidated)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauthApps: ").append(toIndentedString(oauthApps)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    preferredMFA: ").append(toIndentedString(preferredMFA)).append("\n");
    sb.append("    zipcode: ").append(toIndentedString(zipcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("admin");
    openapiFields.add("avatar");
    openapiFields.add("canPay");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("creationDate");
    openapiFields.add("email");
    openapiFields.add("emailValidated");
    openapiFields.add("hasPassword");
    openapiFields.add("id");
    openapiFields.add("lang");
    openapiFields.add("name");
    openapiFields.add("oauthApps");
    openapiFields.add("phone");
    openapiFields.add("preferredMFA");
    openapiFields.add("zipcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("admin");
    openapiRequiredFields.add("avatar");
    openapiRequiredFields.add("canPay");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("emailValidated");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lang");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("oauthApps");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("zipcode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("oauthApps") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("oauthApps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthApps` to be an array in the JSON string but got `%s`", jsonObj.get("oauthApps").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("preferredMFA") != null && !jsonObj.get("preferredMFA").isJsonNull()) && !jsonObj.get("preferredMFA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredMFA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredMFA").toString()));
      }
      if (!jsonObj.get("zipcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

