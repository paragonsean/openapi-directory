/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for logsAppIdDrainsGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsGet_0(Async)");
        }

        return logsAppIdDrainsGet_0Call(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsGet_0(String appId) throws ApiException {
        logsAppIdDrainsGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsIdOrUrlDelete_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlDelete_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlDelete_0(Async)");
        }

        return logsAppIdDrainsIdOrUrlDelete_0Call(appId, _callback);

    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsIdOrUrlDelete_0(String appId) throws ApiException {
        logsAppIdDrainsIdOrUrlDelete_0WithHttpInfo(appId);
    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsIdOrUrlDelete_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlDelete_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsIdOrUrlGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlGet_0(Async)");
        }

        return logsAppIdDrainsIdOrUrlGet_0Call(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsIdOrUrlGet_0(String appId) throws ApiException {
        logsAppIdDrainsIdOrUrlGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsIdOrUrlGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsPost_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsPost_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsPost_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsPost_0(Async)");
        }

        return logsAppIdDrainsPost_0Call(appId, _callback);

    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsPost_0(String appId) throws ApiException {
        logsAppIdDrainsPost_0WithHttpInfo(appId);
    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsPost_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsPost_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsPost_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsPost_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdGet_0
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdGet_0Call(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployment_id", deploymentId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdGet_0ValidateBeforeCall(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdGet_0(Async)");
        }

        return logsAppIdGet_0Call(appId, limit, order, after, before, filter, deploymentId, _callback);

    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdGet_0(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId) throws ApiException {
        logsAppIdGet_0WithHttpInfo(appId, limit, order, after, before, filter, deploymentId);
    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdGet_0WithHttpInfo(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdGet_0ValidateBeforeCall(appId, limit, order, after, before, filter, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdGet_0Async(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdGet_0ValidateBeforeCall(appId, limit, order, after, before, filter, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdSseGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdSseGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/sse"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdSseGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdSseGet_0(Async)");
        }

        return logsAppIdSseGet_0Call(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdSseGet_0(String appId) throws ApiException {
        logsAppIdSseGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdSseGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdSseGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdSseGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdSseGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsDrainsDrainIdPut_0
     * @param drainId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsDrainIdPut_0Call(String drainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/drains/{drainId}"
            .replace("{" + "drainId" + "}", localVarApiClient.escapeString(drainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsDrainsDrainIdPut_0ValidateBeforeCall(String drainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'drainId' is set
        if (drainId == null) {
            throw new ApiException("Missing the required parameter 'drainId' when calling logsDrainsDrainIdPut_0(Async)");
        }

        return logsDrainsDrainIdPut_0Call(drainId, _callback);

    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsDrainsDrainIdPut_0(String drainId) throws ApiException {
        logsDrainsDrainIdPut_0WithHttpInfo(drainId);
    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsDrainsDrainIdPut_0WithHttpInfo(String drainId) throws ApiException {
        okhttp3.Call localVarCall = logsDrainsDrainIdPut_0ValidateBeforeCall(drainId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsDrainIdPut_0Async(String drainId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsDrainsDrainIdPut_0ValidateBeforeCall(drainId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsDrainsGet_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsGet_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/drains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsDrainsGet_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logsDrainsGet_0Call(_callback);

    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsDrainsGet_0() throws ApiException {
        logsDrainsGet_0WithHttpInfo();
    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsDrainsGet_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logsDrainsGet_0ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsGet_0Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsDrainsGet_0ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogsChunkedAppIdGet_0
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsChunkedAppIdGet_0Call(String appId, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/logs-chunked/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogsChunkedAppIdGet_0ValidateBeforeCall(String appId, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsLogsChunkedAppIdGet_0(Async)");
        }

        return logsLogsChunkedAppIdGet_0Call(appId, download, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsLogsChunkedAppIdGet_0(String appId, Boolean download) throws ApiException {
        logsLogsChunkedAppIdGet_0WithHttpInfo(appId, download);
    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsLogsChunkedAppIdGet_0WithHttpInfo(String appId, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = logsLogsChunkedAppIdGet_0ValidateBeforeCall(appId, download, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsChunkedAppIdGet_0Async(String appId, Boolean download, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogsChunkedAppIdGet_0ValidateBeforeCall(appId, download, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogsSocketAppIdGet_0
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsSocketAppIdGet_0Call(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/logs-socket/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployment_id", deploymentId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogsSocketAppIdGet_0ValidateBeforeCall(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsLogsSocketAppIdGet_0(Async)");
        }

        return logsLogsSocketAppIdGet_0Call(appId, since, filter, deploymentId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsLogsSocketAppIdGet_0(String appId, OffsetDateTime since, String filter, String deploymentId) throws ApiException {
        logsLogsSocketAppIdGet_0WithHttpInfo(appId, since, filter, deploymentId);
    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsLogsSocketAppIdGet_0WithHttpInfo(String appId, OffsetDateTime since, String filter, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = logsLogsSocketAppIdGet_0ValidateBeforeCall(appId, since, filter, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsSocketAppIdGet_0Async(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogsSocketAppIdGet_0ValidateBeforeCall(appId, since, filter, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsGet_0(Async)");
        }

        return v3LogsAppIdDrainsGet_0Call(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsGet_0(String appId) throws ApiException {
        v3LogsAppIdDrainsGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsIdOrUrlDelete_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlDelete_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlDelete_0(Async)");
        }

        return v3LogsAppIdDrainsIdOrUrlDelete_0Call(appId, _callback);

    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsIdOrUrlDelete_0(String appId) throws ApiException {
        v3LogsAppIdDrainsIdOrUrlDelete_0WithHttpInfo(appId);
    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsIdOrUrlDelete_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlDelete_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlDelete_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsIdOrUrlGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlGet_0(Async)");
        }

        return v3LogsAppIdDrainsIdOrUrlGet_0Call(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsIdOrUrlGet_0(String appId) throws ApiException {
        v3LogsAppIdDrainsIdOrUrlGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsIdOrUrlGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsPost_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsPost_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsPost_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsPost_0(Async)");
        }

        return v3LogsAppIdDrainsPost_0Call(appId, _callback);

    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsPost_0(String appId) throws ApiException {
        v3LogsAppIdDrainsPost_0WithHttpInfo(appId);
    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsPost_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsPost_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsPost_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsPost_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdGet_0(Async)");
        }

        return v3LogsAppIdGet_0Call(appId, _callback);

    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdGet_0(String appId) throws ApiException {
        v3LogsAppIdGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdLogsChunkedGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsChunkedGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/logs-chunked"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdLogsChunkedGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdLogsChunkedGet_0(Async)");
        }

        return v3LogsAppIdLogsChunkedGet_0Call(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdLogsChunkedGet_0(String appId) throws ApiException {
        v3LogsAppIdLogsChunkedGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdLogsChunkedGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdLogsChunkedGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsChunkedGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdLogsChunkedGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdLogsSocketGet_0
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsSocketGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/logs-socket"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdLogsSocketGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdLogsSocketGet_0(Async)");
        }

        return v3LogsAppIdLogsSocketGet_0Call(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdLogsSocketGet_0(String appId) throws ApiException {
        v3LogsAppIdLogsSocketGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdLogsSocketGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdLogsSocketGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsSocketGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdLogsSocketGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
