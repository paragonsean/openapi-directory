/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.Plan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Provider {
  public static final String SERIALIZED_NAME_ANALYTICS_ID = "analyticsId";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_ID)
  private String analyticsId;

  public static final String SERIALIZED_NAME_CAN_UPGRADE = "canUpgrade";
  @SerializedName(SERIALIZED_NAME_CAN_UPGRADE)
  private Boolean canUpgrade = false;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<Feature> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_PLUS_NAME = "googlePlusName";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PLUS_NAME)
  private String googlePlusName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_LONG_DESC = "longDesc";
  @SerializedName(SERIALIZED_NAME_LONG_DESC)
  private String longDesc;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_IN_NEW_TAB = "openInNewTab";
  @SerializedName(SERIALIZED_NAME_OPEN_IN_NEW_TAB)
  private Boolean openInNewTab = false;

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<Plan> plans = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHORT_DESC = "shortDesc";
  @SerializedName(SERIALIZED_NAME_SHORT_DESC)
  private String shortDesc;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUPPORT_EMAIL = "supportEmail";
  @SerializedName(SERIALIZED_NAME_SUPPORT_EMAIL)
  private String supportEmail;

  public static final String SERIALIZED_NAME_TWITTER_NAME = "twitterName";
  @SerializedName(SERIALIZED_NAME_TWITTER_NAME)
  private String twitterName;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Provider() {
  }

  public Provider analyticsId(String analyticsId) {
    this.analyticsId = analyticsId;
    return this;
  }

  /**
   * The id of the analytics page link to this addon
   * @return analyticsId
   */
  @javax.annotation.Nonnull
  public String getAnalyticsId() {
    return analyticsId;
  }

  public void setAnalyticsId(String analyticsId) {
    this.analyticsId = analyticsId;
  }


  public Provider canUpgrade(Boolean canUpgrade) {
    this.canUpgrade = canUpgrade;
    return this;
  }

  /**
   * Can the addon be upgraded
   * @return canUpgrade
   */
  @javax.annotation.Nonnull
  public Boolean getCanUpgrade() {
    return canUpgrade;
  }

  public void setCanUpgrade(Boolean canUpgrade) {
    this.canUpgrade = canUpgrade;
  }


  public Provider features(List<Feature> features) {
    this.features = features;
    return this;
  }

  public Provider addFeaturesItem(Feature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public List<Feature> getFeatures() {
    return features;
  }

  public void setFeatures(List<Feature> features) {
    this.features = features;
  }


  public Provider googlePlusName(String googlePlusName) {
    this.googlePlusName = googlePlusName;
    return this;
  }

  /**
   * The name of the google + page link to this addon (could be empty)
   * @return googlePlusName
   */
  @javax.annotation.Nonnull
  public String getGooglePlusName() {
    return googlePlusName;
  }

  public void setGooglePlusName(String googlePlusName) {
    this.googlePlusName = googlePlusName;
  }


  public Provider id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the provider
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Provider logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * The url of the addon&#39;s logo
   * @return logoUrl
   */
  @javax.annotation.Nonnull
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public Provider longDesc(String longDesc) {
    this.longDesc = longDesc;
    return this;
  }

  /**
   * A less concise description of the addon
   * @return longDesc
   */
  @javax.annotation.Nonnull
  public String getLongDesc() {
    return longDesc;
  }

  public void setLongDesc(String longDesc) {
    this.longDesc = longDesc;
  }


  public Provider name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Provider openInNewTab(Boolean openInNewTab) {
    this.openInNewTab = openInNewTab;
    return this;
  }

  /**
   * Does the addon panel need to be open in a new tab
   * @return openInNewTab
   */
  @javax.annotation.Nonnull
  public Boolean getOpenInNewTab() {
    return openInNewTab;
  }

  public void setOpenInNewTab(Boolean openInNewTab) {
    this.openInNewTab = openInNewTab;
  }


  public Provider plans(List<Plan> plans) {
    this.plans = plans;
    return this;
  }

  public Provider addPlansItem(Plan plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

  /**
   * Get plans
   * @return plans
   */
  @javax.annotation.Nullable
  public List<Plan> getPlans() {
    return plans;
  }

  public void setPlans(List<Plan> plans) {
    this.plans = plans;
  }


  public Provider regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public Provider addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * The differents regions where the addon is available
   * @return regions
   */
  @javax.annotation.Nonnull
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }


  public Provider shortDesc(String shortDesc) {
    this.shortDesc = shortDesc;
    return this;
  }

  /**
   * A short description of the addon
   * @return shortDesc
   */
  @javax.annotation.Nonnull
  public String getShortDesc() {
    return shortDesc;
  }

  public void setShortDesc(String shortDesc) {
    this.shortDesc = shortDesc;
  }


  public Provider status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of this addon (RELEASE, BETA, ...)
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Provider supportEmail(String supportEmail) {
    this.supportEmail = supportEmail;
    return this;
  }

  /**
   * The mail to contact in case of issue with this addon
   * @return supportEmail
   */
  @javax.annotation.Nonnull
  public String getSupportEmail() {
    return supportEmail;
  }

  public void setSupportEmail(String supportEmail) {
    this.supportEmail = supportEmail;
  }


  public Provider twitterName(String twitterName) {
    this.twitterName = twitterName;
    return this;
  }

  /**
   * The name of the user to contact on twitter for this addon (could be empty)
   * @return twitterName
   */
  @javax.annotation.Nonnull
  public String getTwitterName() {
    return twitterName;
  }

  public void setTwitterName(String twitterName) {
    this.twitterName = twitterName;
  }


  public Provider website(String website) {
    this.website = website;
    return this;
  }

  /**
   * The website of the provider. If the addon is developped by clever-cloud, the site is \&quot;http://www.clever-cloud.com/\&quot;
   * @return website
   */
  @javax.annotation.Nonnull
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Provider provider = (Provider) o;
    return Objects.equals(this.analyticsId, provider.analyticsId) &&
        Objects.equals(this.canUpgrade, provider.canUpgrade) &&
        Objects.equals(this.features, provider.features) &&
        Objects.equals(this.googlePlusName, provider.googlePlusName) &&
        Objects.equals(this.id, provider.id) &&
        Objects.equals(this.logoUrl, provider.logoUrl) &&
        Objects.equals(this.longDesc, provider.longDesc) &&
        Objects.equals(this.name, provider.name) &&
        Objects.equals(this.openInNewTab, provider.openInNewTab) &&
        Objects.equals(this.plans, provider.plans) &&
        Objects.equals(this.regions, provider.regions) &&
        Objects.equals(this.shortDesc, provider.shortDesc) &&
        Objects.equals(this.status, provider.status) &&
        Objects.equals(this.supportEmail, provider.supportEmail) &&
        Objects.equals(this.twitterName, provider.twitterName) &&
        Objects.equals(this.website, provider.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyticsId, canUpgrade, features, googlePlusName, id, logoUrl, longDesc, name, openInNewTab, plans, regions, shortDesc, status, supportEmail, twitterName, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Provider {\n");
    sb.append("    analyticsId: ").append(toIndentedString(analyticsId)).append("\n");
    sb.append("    canUpgrade: ").append(toIndentedString(canUpgrade)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    googlePlusName: ").append(toIndentedString(googlePlusName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    longDesc: ").append(toIndentedString(longDesc)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openInNewTab: ").append(toIndentedString(openInNewTab)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    shortDesc: ").append(toIndentedString(shortDesc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportEmail: ").append(toIndentedString(supportEmail)).append("\n");
    sb.append("    twitterName: ").append(toIndentedString(twitterName)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyticsId");
    openapiFields.add("canUpgrade");
    openapiFields.add("features");
    openapiFields.add("googlePlusName");
    openapiFields.add("id");
    openapiFields.add("logoUrl");
    openapiFields.add("longDesc");
    openapiFields.add("name");
    openapiFields.add("openInNewTab");
    openapiFields.add("plans");
    openapiFields.add("regions");
    openapiFields.add("shortDesc");
    openapiFields.add("status");
    openapiFields.add("supportEmail");
    openapiFields.add("twitterName");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("analyticsId");
    openapiRequiredFields.add("canUpgrade");
    openapiRequiredFields.add("googlePlusName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("logoUrl");
    openapiRequiredFields.add("longDesc");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("openInNewTab");
    openapiRequiredFields.add("regions");
    openapiRequiredFields.add("shortDesc");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("supportEmail");
    openapiRequiredFields.add("twitterName");
    openapiRequiredFields.add("website");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Provider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Provider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Provider is not found in the empty JSON string", Provider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Provider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Provider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Provider.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("analyticsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyticsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyticsId").toString()));
      }
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            Feature.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      if (!jsonObj.get("googlePlusName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googlePlusName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googlePlusName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
      if (!jsonObj.get("longDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longDesc").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
        JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
        if (jsonArrayplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
          }

          // validate the optional field `plans` (array)
          for (int i = 0; i < jsonArrayplans.size(); i++) {
            Plan.validateJsonElement(jsonArrayplans.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("regions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      if (!jsonObj.get("shortDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortDesc").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("supportEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportEmail").toString()));
      }
      if (!jsonObj.get("twitterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitterName").toString()));
      }
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Provider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Provider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Provider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Provider.class));

       return (TypeAdapter<T>) new TypeAdapter<Provider>() {
           @Override
           public void write(JsonWriter out, Provider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Provider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Provider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Provider
   * @throws IOException if the JSON string is invalid with respect to Provider
   */
  public static Provider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Provider.class);
  }

  /**
   * Convert an instance of Provider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

