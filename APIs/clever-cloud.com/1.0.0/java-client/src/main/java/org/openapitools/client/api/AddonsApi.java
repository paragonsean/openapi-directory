/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AddonMigration;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.ListEnv;
import org.openapitools.client.model.OrganisationsIdAddonsAddonIdMigrationsPostRequest;
import org.openapitools.client.model.Sso;
import org.openapitools.client.model.SupernovaInstanceView;
import org.openapitools.client.model.WannabeAddon;
import org.openapitools.client.model.WannabePlan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddonsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddonsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddonsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOrganisationsIdAddonsAddonIdTagsTag_0
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_0Call(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        return deleteOrganisationsIdAddonsAddonIdTagsTag_0Call(id, tag, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonIdTagsTag_0(String id, String tag, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonIdTagsTag_0WithHttpInfo(id, tag, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonIdTagsTag_0WithHttpInfo(String id, String tag, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(id, tag, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_0Async(String id, String tag, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(id, tag, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonsAddonId_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonId_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonId_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId_0(Async)");
        }

        return deleteOrganisationsIdAddonsAddonId_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonId_0(String id, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonId_0WithHttpInfo(id, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonId_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonId_0Async(String id, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0Call(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0Call(id, appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0(String id, String appId, String addonId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0WithHttpInfo(id, appId, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0WithHttpInfo(String id, String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(id, appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0Async(String id, String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(id, appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfAddonsAddonIdTagsTag_0
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdTagsTag_0Call(String tag, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags/{tag}"
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(String tag, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteSelfAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonIdTagsTag_0(Async)");
        }

        return deleteSelfAddonsAddonIdTagsTag_0Call(tag, addonId, _callback);

    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfAddonsAddonIdTagsTag_0(String tag, String addonId) throws ApiException {
        deleteSelfAddonsAddonIdTagsTag_0WithHttpInfo(tag, addonId);
    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfAddonsAddonIdTagsTag_0WithHttpInfo(String tag, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(tag, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdTagsTag_0Async(String tag, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(tag, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfAddonsAddonId_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonId_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfAddonsAddonId_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonId_0(Async)");
        }

        return deleteSelfAddonsAddonId_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfAddonsAddonId_0(String addonId) throws ApiException {
        deleteSelfAddonsAddonId_0WithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfAddonsAddonId_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfAddonsAddonId_0ValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonId_0Async(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfAddonsAddonId_0ValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdAddonsAddonId_0
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_0Call(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/{addonId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId_0(Async)");
        }

        return deleteSelfApplicationsAppIdAddonsAddonId_0Call(appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdAddonsAddonId_0(String appId, String addonId) throws ApiException {
        deleteSelfApplicationsAppIdAddonsAddonId_0WithHttpInfo(appId, addonId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdAddonsAddonId_0WithHttpInfo(String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_0Async(String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonId_0ValidateBeforeCall(appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProviderEnv_0
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderEnv_0Call(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigProviderEnv_0ValidateBeforeCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling getConfigProviderEnv_0(Async)");
        }

        return getConfigProviderEnv_0Call(configurationProviderId, body, _callback);

    }

    /**
     * Get provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getConfigProviderEnv_0(String configurationProviderId, String body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getConfigProviderEnv_0WithHttpInfo(configurationProviderId, body);
        return localVarResp.getData();
    }

    /**
     * Get provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getConfigProviderEnv_0WithHttpInfo(String configurationProviderId, String body) throws ApiException {
        okhttp3.Call localVarCall = getConfigProviderEnv_0ValidateBeforeCall(configurationProviderId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get provider&#39;s addon environment (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderEnv_0Async(String configurationProviderId, String body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigProviderEnv_0ValidateBeforeCall(configurationProviderId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProvider_0
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProvider_0Call(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigProvider_0ValidateBeforeCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling getConfigProvider_0(Async)");
        }

        return getConfigProvider_0Call(configurationProviderId, body, _callback);

    }

    /**
     * Get Addon provider configuration
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getConfigProvider_0(String configurationProviderId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = getConfigProvider_0WithHttpInfo(configurationProviderId, body);
        return localVarResp.getData();
    }

    /**
     * Get Addon provider configuration
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getConfigProvider_0WithHttpInfo(String configurationProviderId, String body) throws ApiException {
        okhttp3.Call localVarCall = getConfigProvider_0ValidateBeforeCall(configurationProviderId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Addon provider configuration (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProvider_0Async(String configurationProviderId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigProvider_0ValidateBeforeCall(configurationProviderId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatomo_0
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomo_0Call(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/addon-matomo/addons/{matomoId}"
            .replace("{" + "matomoId" + "}", localVarApiClient.escapeString(matomoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatomo_0ValidateBeforeCall(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matomoId' is set
        if (matomoId == null) {
            throw new ApiException("Missing the required parameter 'matomoId' when calling getMatomo_0(Async)");
        }

        return getMatomo_0Call(matomoId, body, _callback);

    }

    /**
     * Get Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getMatomo_0(String matomoId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = getMatomo_0WithHttpInfo(matomoId, body);
        return localVarResp.getData();
    }

    /**
     * Get Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getMatomo_0WithHttpInfo(String matomoId, String body) throws ApiException {
        okhttp3.Call localVarCall = getMatomo_0ValidateBeforeCall(matomoId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Matomo addon (asynchronously)
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomo_0Async(String matomoId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatomo_0ValidateBeforeCall(matomoId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdApplications_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_0(Async)");
        }

        return getOrganisationsIdAddonsAddonIdApplications_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdAddonsAddonIdApplications_0(String id, String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdAddonsAddonIdApplications_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdAddonsAddonIdApplications_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_0Async(String id, String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdEnv_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv_0(Async)");
        }

        return getOrganisationsIdAddonsAddonIdEnv_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdAddonsAddonIdEnv_0(String id, String addonId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdAddonsAddonIdEnv_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdAddonsAddonIdEnv_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnv_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_0Async(String id, String addonId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnv_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdTags_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTags_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdTags_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags_0(Async)");
        }

        return getOrganisationsIdAddonsAddonIdTags_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdAddonsAddonIdTags_0(String id, String addonId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdAddonsAddonIdTags_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdAddonsAddonIdTags_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTags_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTags_0Async(String id, String addonId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTags_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonId_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonId_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonId_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId_0(Async)");
        }

        return getOrganisationsIdAddonsAddonId_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon getOrganisationsIdAddonsAddonId_0(String id, String addonId) throws ApiException {
        ApiResponse<Addon> localVarResp = getOrganisationsIdAddonsAddonId_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> getOrganisationsIdAddonsAddonId_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonId_0Async(String id, String addonId, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddons_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddons_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddons_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddons_0(Async)");
        }

        return getOrganisationsIdAddons_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdAddons_0(String id) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdAddons_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdAddons_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddons_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddons_0Async(String id, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddons_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddonsEnv_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddonsEnv_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getOrganisationsIdApplicationsAppIdAddonsEnv_0(String id, String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getOrganisationsIdApplicationsAppIdAddonsEnv_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getOrganisationsIdApplicationsAppIdAddonsEnv_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_0Async(String id, String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddons_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddons_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdApplicationsAppIdAddons_0(String id, String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdApplicationsAppIdAddons_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdApplicationsAppIdAddons_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_0Async(String id, String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdApplications_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplications_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/applications"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdApplications_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications_0(Async)");
        }

        return getSelfAddonsAddonIdApplications_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfAddonsAddonIdApplications_0(String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfAddonsAddonIdApplications_0WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfAddonsAddonIdApplications_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplications_0ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplications_0Async(String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplications_0ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdEnv_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdEnv_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/env"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdEnv_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdEnv_0(Async)");
        }

        return getSelfAddonsAddonIdEnv_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getSelfAddonsAddonIdEnv_0(String addonId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getSelfAddonsAddonIdEnv_0WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getSelfAddonsAddonIdEnv_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdEnv_0ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdEnv_0Async(String addonId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdEnv_0ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdSso_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdSso_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/sso"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdSso_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdSso_0(Async)");
        }

        return getSelfAddonsAddonIdSso_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return Sso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public Sso getSelfAddonsAddonIdSso_0(String addonId) throws ApiException {
        ApiResponse<Sso> localVarResp = getSelfAddonsAddonIdSso_0WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Sso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sso> getSelfAddonsAddonIdSso_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdSso_0ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdSso_0Async(String addonId, final ApiCallback<Sso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdSso_0ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdTags_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdTags_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdTags_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdTags_0(Async)");
        }

        return getSelfAddonsAddonIdTags_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getSelfAddonsAddonIdTags_0(String addonId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getSelfAddonsAddonIdTags_0WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getSelfAddonsAddonIdTags_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdTags_0ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdTags_0Async(String addonId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdTags_0ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonId_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonId_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonId_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonId_0(Async)");
        }

        return getSelfAddonsAddonId_0Call(addonId, _callback);

    }

    /**
     * Specific addon
     * Get a specific addon
     * @param addonId  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon getSelfAddonsAddonId_0(String addonId) throws ApiException {
        ApiResponse<Addon> localVarResp = getSelfAddonsAddonId_0WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * Specific addon
     * Get a specific addon
     * @param addonId  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> getSelfAddonsAddonId_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonId_0ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Specific addon (asynchronously)
     * Get a specific addon
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonId_0Async(String addonId, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonId_0ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddons_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddons_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddons_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfAddons_0Call(_callback);

    }

    /**
     * Addon
     * Get all the addons
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getSelfAddons_0() throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getSelfAddons_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Addon
     * Get all the addons
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getSelfAddons_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfAddons_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Addon (asynchronously)
     * Get all the addons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddons_0Async(final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddons_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddonsEnv_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnv_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddonsEnv_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv_0(Async)");
        }

        return getSelfApplicationsAppIdAddonsEnv_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getSelfApplicationsAppIdAddonsEnv_0(String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getSelfApplicationsAppIdAddonsEnv_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getSelfApplicationsAppIdAddonsEnv_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnv_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnv_0Async(String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnv_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddons_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddons_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddons_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons_0(Async)");
        }

        return getSelfApplicationsAppIdAddons_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getSelfApplicationsAppIdAddons_0(String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getSelfApplicationsAppIdAddons_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getSelfApplicationsAppIdAddons_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddons_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddons_0Async(String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddons_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesGet_0
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_0Call(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentId", deploymentId));
        }

        if (withDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDeleted", withDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_0ValidateBeforeCall(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet_0(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesGet_0Call(id, addonId, deploymentId, withDeleted, _callback);

    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return List&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public List<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesGet_0(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        ApiResponse<List<SupernovaInstanceView>> localVarResp = organisationsIdAddonsAddonIdInstancesGet_0WithHttpInfo(id, addonId, deploymentId, withDeleted);
        return localVarResp.getData();
    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return ApiResponse&lt;List&lt;SupernovaInstanceView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupernovaInstanceView>> organisationsIdAddonsAddonIdInstancesGet_0WithHttpInfo(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGet_0ValidateBeforeCall(id, addonId, deploymentId, withDeleted, null);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List instances for this add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_0Async(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback<List<SupernovaInstanceView>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGet_0ValidateBeforeCall(id, addonId, deploymentId, withDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesInstanceIdGet_0
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_0Call(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_0ValidateBeforeCall(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_0(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesInstanceIdGet_0Call(instanceId, id, addonId, _callback);

    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return SupernovaInstanceView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public SupernovaInstanceView organisationsIdAddonsAddonIdInstancesInstanceIdGet_0(String instanceId, String id, String addonId) throws ApiException {
        ApiResponse<SupernovaInstanceView> localVarResp = organisationsIdAddonsAddonIdInstancesInstanceIdGet_0WithHttpInfo(instanceId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesInstanceIdGet_0WithHttpInfo(String instanceId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, id, addonId, null);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific instance for {addonId} (asynchronously)
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_0Async(String instanceId, String id, String addonId, final ApiCallback<SupernovaInstanceView> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsGet_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet_0(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsGet_0Call(id, addonId, _callback);

    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public List<AddonMigration> organisationsIdAddonsAddonIdMigrationsGet_0(String id, String addonId) throws ApiException {
        ApiResponse<List<AddonMigration>> localVarResp = organisationsIdAddonsAddonIdMigrationsGet_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;AddonMigration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddonMigration>> organisationsIdAddonsAddonIdMigrationsGet_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGet_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get past migrations from add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_0Async(String id, String addonId, final ApiCallback<List<AddonMigration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGet_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0Call(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations/{migrationId}"
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0ValidateBeforeCall(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0Call(migrationId, id, addonId, _callback);

    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return AddonMigration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public AddonMigration organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0(String migrationId, String id, String addonId) throws ApiException {
        ApiResponse<AddonMigration> localVarResp = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0WithHttpInfo(migrationId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddonMigration> organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0WithHttpInfo(String migrationId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0ValidateBeforeCall(migrationId, id, addonId, null);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given migration (asynchronously)
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0Async(String migrationId, String id, String addonId, final ApiCallback<AddonMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_0ValidateBeforeCall(migrationId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsPost_0
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_0Call(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organisationsIdAddonsAddonIdMigrationsPostRequest;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_0ValidateBeforeCall(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost_0(Async)");
        }

        // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
        if (organisationsIdAddonsAddonIdMigrationsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost_0(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsPost_0Call(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);

    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public Object organisationsIdAddonsAddonIdMigrationsPost_0(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = organisationsIdAddonsAddonIdMigrationsPost_0WithHttpInfo(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> organisationsIdAddonsAddonIdMigrationsPost_0WithHttpInfo(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPost_0ValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new add-on migration (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_0Async(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPost_0ValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdSsoGet_0
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGet_0Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/sso"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdSsoGet_0ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet_0(Async)");
        }

        return organisationsIdAddonsAddonIdSsoGet_0Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Sso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public Sso organisationsIdAddonsAddonIdSsoGet_0(String id, String addonId) throws ApiException {
        ApiResponse<Sso> localVarResp = organisationsIdAddonsAddonIdSsoGet_0WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Sso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sso> organisationsIdAddonsAddonIdSsoGet_0WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGet_0ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGet_0Async(String id, String addonId, final ApiCallback<Sso> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGet_0ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsPreordersPost_0
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPost_0Call(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/preorders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsPreordersPost_0ValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost_0(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost_0(Async)");
        }

        return organisationsIdAddonsPreordersPost_0Call(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdAddonsPreordersPost_0(String id, WannabeAddon wannabeAddon) throws ApiException {
        organisationsIdAddonsPreordersPost_0WithHttpInfo(id, wannabeAddon);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdAddonsPreordersPost_0WithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPost_0ValidateBeforeCall(id, wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPost_0Async(String id, WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPost_0ValidateBeforeCall(id, wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddons_0
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddons_0Call(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddons_0ValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddons_0(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons_0(Async)");
        }

        return postOrganisationsIdAddons_0Call(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon postOrganisationsIdAddons_0(String id, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = postOrganisationsIdAddons_0WithHttpInfo(id, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> postOrganisationsIdAddons_0WithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddons_0ValidateBeforeCall(id, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddons_0Async(String id, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddons_0ValidateBeforeCall(id, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdAddons_0
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_0Call(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_0(Async)");
        }

        return postOrganisationsIdApplicationsAppIdAddons_0Call(id, appId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdAddons_0(String id, String appId, Body body) throws ApiException {
        postOrganisationsIdApplicationsAppIdAddons_0WithHttpInfo(id, appId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdAddons_0WithHttpInfo(String id, String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(id, appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_0Async(String id, String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_0ValidateBeforeCall(id, appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfAddons_0
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfAddons_0Call(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfAddons_0ValidateBeforeCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling postSelfAddons_0(Async)");
        }

        return postSelfAddons_0Call(wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfAddons_0(WannabeAddon wannabeAddon) throws ApiException {
        postSelfAddons_0WithHttpInfo(wannabeAddon);
    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfAddons_0WithHttpInfo(WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = postSelfAddons_0ValidateBeforeCall(wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfAddons_0Async(WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfAddons_0ValidateBeforeCall(wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplicationsAppIdAddons_0
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddons_0Call(String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsAppIdAddons_0ValidateBeforeCall(String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons_0(Async)");
        }

        return postSelfApplicationsAppIdAddons_0Call(appId, body, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplicationsAppIdAddons_0(String appId, Body body) throws ApiException {
        postSelfApplicationsAppIdAddons_0WithHttpInfo(appId, body);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsAppIdAddons_0WithHttpInfo(String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddons_0ValidateBeforeCall(appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddons_0Async(String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddons_0ValidateBeforeCall(appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonIdTagsTag_0
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_0Call(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag_0(Async)");
        }

        return putOrganisationsIdAddonsAddonIdTagsTag_0Call(id, tag, addonId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAddonsAddonIdTagsTag_0(String id, String tag, String addonId, Body body) throws ApiException {
        putOrganisationsIdAddonsAddonIdTagsTag_0WithHttpInfo(id, tag, addonId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAddonsAddonIdTagsTag_0WithHttpInfo(String id, String tag, String addonId, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(id, tag, addonId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_0Async(String id, String tag, String addonId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTag_0ValidateBeforeCall(id, tag, addonId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonId_0
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonId_0Call(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonId_0ValidateBeforeCall(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId_0(Async)");
        }

        return putOrganisationsIdAddonsAddonId_0Call(id, addonId, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public Addon putOrganisationsIdAddonsAddonId_0(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = putOrganisationsIdAddonsAddonId_0WithHttpInfo(id, addonId, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> putOrganisationsIdAddonsAddonId_0WithHttpInfo(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonId_0Async(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonId_0ValidateBeforeCall(id, addonId, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonIdPlan_0
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdPlan_0Call(String addonId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/plan"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonIdPlan_0ValidateBeforeCall(String addonId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdPlan_0(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling putSelfAddonsAddonIdPlan_0(Async)");
        }

        return putSelfAddonsAddonIdPlan_0Call(addonId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonIdPlan_0(String addonId, WannabePlan wannabePlan) throws ApiException {
        putSelfAddonsAddonIdPlan_0WithHttpInfo(addonId, wannabePlan);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonIdPlan_0WithHttpInfo(String addonId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonIdPlan_0ValidateBeforeCall(addonId, wannabePlan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdPlan_0Async(String addonId, WannabePlan wannabePlan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonIdPlan_0ValidateBeforeCall(addonId, wannabePlan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonIdTagsTag_0
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdTagsTag_0Call(String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags/{tag}"
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putSelfAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdTagsTag_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfAddonsAddonIdTagsTag_0(Async)");
        }

        return putSelfAddonsAddonIdTagsTag_0Call(tag, addonId, body, _callback);

    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonIdTagsTag_0(String tag, String addonId, Body body) throws ApiException {
        putSelfAddonsAddonIdTagsTag_0WithHttpInfo(tag, addonId, body);
    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonIdTagsTag_0WithHttpInfo(String tag, String addonId, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(tag, addonId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdTagsTag_0Async(String tag, String addonId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonIdTagsTag_0ValidateBeforeCall(tag, addonId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonId_0
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonId_0Call(String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonId_0ValidateBeforeCall(String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonId_0(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling putSelfAddonsAddonId_0(Async)");
        }

        return putSelfAddonsAddonId_0Call(addonId, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonId_0(String addonId, WannabeAddon wannabeAddon) throws ApiException {
        putSelfAddonsAddonId_0WithHttpInfo(addonId, wannabeAddon);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonId_0WithHttpInfo(String addonId, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonId_0ValidateBeforeCall(addonId, wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonId_0Async(String addonId, WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonId_0ValidateBeforeCall(addonId, wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfAddonsPreordersPost_0
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfAddonsPreordersPost_0Call(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons/preorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfAddonsPreordersPost_0ValidateBeforeCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling selfAddonsPreordersPost_0(Async)");
        }

        return selfAddonsPreordersPost_0Call(wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfAddonsPreordersPost_0(WannabeAddon wannabeAddon) throws ApiException {
        selfAddonsPreordersPost_0WithHttpInfo(wannabeAddon);
    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfAddonsPreordersPost_0WithHttpInfo(WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = selfAddonsPreordersPost_0ValidateBeforeCall(wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfAddonsPreordersPost_0Async(WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfAddonsPreordersPost_0ValidateBeforeCall(wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigProviderEnv_0
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigProviderEnv_0Call(String configurationProviderId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigProviderEnv_0ValidateBeforeCall(String configurationProviderId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling updateConfigProviderEnv_0(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateConfigProviderEnv_0(Async)");
        }

        return updateConfigProviderEnv_0Call(configurationProviderId, requestBody, _callback);

    }

    /**
     * Update provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> updateConfigProviderEnv_0(String configurationProviderId, List<Object> requestBody) throws ApiException {
        ApiResponse<List<Object>> localVarResp = updateConfigProviderEnv_0WithHttpInfo(configurationProviderId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> updateConfigProviderEnv_0WithHttpInfo(String configurationProviderId, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateConfigProviderEnv_0ValidateBeforeCall(configurationProviderId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update provider&#39;s addon environment (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigProviderEnv_0Async(String configurationProviderId, List<Object> requestBody, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigProviderEnv_0ValidateBeforeCall(configurationProviderId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAddonsPost_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPost_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor//addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAddonsPost_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return vendorAddonsPost_0Call(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAddonsPost_0() throws ApiException {
        vendorAddonsPost_0WithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAddonsPost_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = vendorAddonsPost_0ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPost_0Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAddonsPost_0ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
