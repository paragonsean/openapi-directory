/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AppInstance;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.LinkedAppEnv;
import org.openapitools.client.model.ListEnv;
import org.openapitools.client.model.Vhost;
import org.openapitools.client.model.WannabeApplication;
import org.openapitools.client.model.WannabeEnv;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1Call(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1Call(id, appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1(String id, String appId, String addonId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1WithHttpInfo(id, appId, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1WithHttpInfo(String id, String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(id, appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1Async(String id, String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(id, appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Call(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Call(dependencyId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(String dependencyId, String appId, String id) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(dependencyId, appId, id);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(String dependencyId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Async(String dependencyId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0Call(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0Call(id, appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0(String id, String appId, String deploymentId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0WithHttpInfo(id, appId, deploymentId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0WithHttpInfo(String id, String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(id, appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0Async(String id, String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(id, appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdEnvEnvName_0
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_0Call(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdEnvEnvName_0Call(id, appId, envName, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdEnvEnvName_0(String id, String appId, String envName) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdEnvEnvName_0WithHttpInfo(id, appId, envName);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdEnvEnvName_0WithHttpInfo(String id, String appId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(id, appId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_0Async(String id, String appId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(id, appId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdInstances_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdInstances_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdInstances_0(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_0Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdTagsTag_0
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_0Call(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdTagsTag_0Call(id, appId, tag, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdTagsTag_0(String id, String appId, String tag) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdTagsTag_0WithHttpInfo(id, appId, tag);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdTagsTag_0WithHttpInfo(String id, String appId, String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(id, appId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_0Async(String id, String appId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(id, appId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsDomain_0
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_0Call(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsDomain_0Call(id, appId, domain, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsDomain_0(String id, String appId, String domain) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsDomain_0WithHttpInfo(id, appId, domain);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsDomain_0WithHttpInfo(String id, String appId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(id, appId, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_0Async(String id, String appId, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(id, appId, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppId_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppId_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppId_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId_0(Async)");
        }

        return deleteOrganisationsIdApplicationsAppId_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppId_0(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppId_0WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppId_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppId_0Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdAddonsAddonId_1
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_1Call(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/{addonId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId_1(Async)");
        }

        return deleteSelfApplicationsAppIdAddonsAddonId_1Call(appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdAddonsAddonId_1(String appId, String addonId) throws ApiException {
        deleteSelfApplicationsAppIdAddonsAddonId_1WithHttpInfo(appId, addonId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdAddonsAddonId_1WithHttpInfo(String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonId_1Async(String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonId_1ValidateBeforeCall(appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdDependenciesDependencyId_0
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyId_0Call(String dependencyId, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(String dependencyId, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        return deleteSelfApplicationsAppIdDependenciesDependencyId_0Call(dependencyId, appId, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdDependenciesDependencyId_0(String dependencyId, String appId) throws ApiException {
        deleteSelfApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(dependencyId, appId);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(String dependencyId, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyId_0Async(String dependencyId, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0Call(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments/{deploymentId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0(Async)");
        }

        return deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0Call(appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0(String appId, String deploymentId) throws ApiException {
        deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0WithHttpInfo(appId, deploymentId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0WithHttpInfo(String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0Async(String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances_0ValidateBeforeCall(appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdEnvEnvName_0
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdEnvEnvName_0Call(String appId, String envName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env/{envName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(String appId, String envName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteSelfApplicationsAppIdEnvEnvName_0(Async)");
        }

        return deleteSelfApplicationsAppIdEnvEnvName_0Call(appId, envName, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdEnvEnvName_0(String appId, String envName) throws ApiException {
        deleteSelfApplicationsAppIdEnvEnvName_0WithHttpInfo(appId, envName);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdEnvEnvName_0WithHttpInfo(String appId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(appId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdEnvEnvName_0Async(String appId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(appId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdInstances_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdInstances_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdInstances_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdInstances_0(Async)");
        }

        return deleteSelfApplicationsAppIdInstances_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdInstances_0(String appId) throws ApiException {
        deleteSelfApplicationsAppIdInstances_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdInstances_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdInstances_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdTagsTag_0
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdTagsTag_0Call(String appId, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags/{tag}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(String appId, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteSelfApplicationsAppIdTagsTag_0(Async)");
        }

        return deleteSelfApplicationsAppIdTagsTag_0Call(appId, tag, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdTagsTag_0(String appId, String tag) throws ApiException {
        deleteSelfApplicationsAppIdTagsTag_0WithHttpInfo(appId, tag);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdTagsTag_0WithHttpInfo(String appId, String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(appId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdTagsTag_0Async(String appId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(appId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdVhostsDomain_0
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsDomain_0Call(String appId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/{domain}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(String appId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteSelfApplicationsAppIdVhostsDomain_0(Async)");
        }

        return deleteSelfApplicationsAppIdVhostsDomain_0Call(appId, domain, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdVhostsDomain_0(String appId, String domain) throws ApiException {
        deleteSelfApplicationsAppIdVhostsDomain_0WithHttpInfo(appId, domain);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdVhostsDomain_0WithHttpInfo(String appId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(appId, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsDomain_0Async(String appId, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(appId, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdVhostsFavourite_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsFavourite_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return deleteSelfApplicationsAppIdVhostsFavourite_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdVhostsFavourite_0(String appId) throws ApiException {
        deleteSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsFavourite_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppId_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppId_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppId_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppId_0(Async)");
        }

        return deleteSelfApplicationsAppId_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppId_0(String appId) throws ApiException {
        deleteSelfApplicationsAppId_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppId_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppId_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppId_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppId_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubApplications_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplications_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubApplications_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubApplications_0Call(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getGithubApplications_0() throws ApiException {
        ApiResponse<List<Application>> localVarResp = getGithubApplications_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getGithubApplications_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubApplications_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplications_0Async(final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubApplications_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdApplications_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_1(Async)");
        }

        return getOrganisationsIdAddonsAddonIdApplications_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdAddonsAddonIdApplications_1(String id, String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdAddonsAddonIdApplications_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdAddonsAddonIdApplications_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_1Async(String id, String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddonsEnv_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddonsEnv_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getOrganisationsIdApplicationsAppIdAddonsEnv_1(String id, String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getOrganisationsIdApplicationsAppIdAddonsEnv_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getOrganisationsIdApplicationsAppIdAddonsEnv_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_1Async(String id, String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddons_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddons_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdApplicationsAppIdAddons_1(String id, String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdApplicationsAppIdAddons_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdApplicationsAppIdAddons_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_1Async(String id, String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependencies_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependencies_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependencies_0(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependencies_0WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependencies_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependencies_0ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_0Async(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependencies_0ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependents_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependents_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependents_0(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependents_0WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependents_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependents_0ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_0Async(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependents_0ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDeployments_0
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_0Call(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_0ValidateBeforeCall(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDeployments_0Call(id, appId, limit, offset, action, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getOrganisationsIdApplicationsAppIdDeployments_0(String id, String appId, String limit, String offset, String action) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getOrganisationsIdApplicationsAppIdDeployments_0WithHttpInfo(id, appId, limit, offset, action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getOrganisationsIdApplicationsAppIdDeployments_0WithHttpInfo(String id, String appId, String limit, String offset, String action) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeployments_0ValidateBeforeCall(id, appId, limit, offset, action, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_0Async(String id, String appId, String limit, String offset, String action, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeployments_0ValidateBeforeCall(id, appId, limit, offset, action, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdEnv_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdEnv_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdApplicationsAppIdEnv_0(String id, String appId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdApplicationsAppIdEnv_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdApplicationsAppIdEnv_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_0Async(String id, String appId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdInstances_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdInstances_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;AppInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<AppInstance> getOrganisationsIdApplicationsAppIdInstances_0(String id, String appId) throws ApiException {
        ApiResponse<List<AppInstance>> localVarResp = getOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;AppInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppInstance>> getOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_0Async(String id, String appId, final ApiCallback<List<AppInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdTags_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTags_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdTags_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdTags_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdApplicationsAppIdTags_0(String id, String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdApplicationsAppIdTags_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdApplicationsAppIdTags_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTags_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTags_0Async(String id, String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTags_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhostsFavourite_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Vhost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public Vhost getOrganisationsIdApplicationsAppIdVhostsFavourite_0(String id, String appId) throws ApiException {
        ApiResponse<Vhost> localVarResp = getOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vhost> getOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_0Async(String id, String appId, final ApiCallback<Vhost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhosts_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts_0(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhosts_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public List<Vhost> getOrganisationsIdApplicationsAppIdVhosts_0(String id, String appId) throws ApiException {
        ApiResponse<List<Vhost>> localVarResp = getOrganisationsIdApplicationsAppIdVhosts_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Vhost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vhost>> getOrganisationsIdApplicationsAppIdVhosts_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhosts_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_0Async(String id, String appId, final ApiCallback<List<Vhost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhosts_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppId_0
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppId_0Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppId_0ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId_0(Async)");
        }

        return getOrganisationsIdApplicationsAppId_0Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application getOrganisationsIdApplicationsAppId_0(String id, String appId) throws ApiException {
        ApiResponse<Application> localVarResp = getOrganisationsIdApplicationsAppId_0WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> getOrganisationsIdApplicationsAppId_0WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppId_0Async(String id, String appId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplications_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplications_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplications_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplications_0(Async)");
        }

        return getOrganisationsIdApplications_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplications_0(String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplications_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplications_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplications_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplications_0Async(String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplications_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdApplications_1
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplications_1Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/applications"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdApplications_1ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications_1(Async)");
        }

        return getSelfAddonsAddonIdApplications_1Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfAddonsAddonIdApplications_1(String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfAddonsAddonIdApplications_1WithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfAddonsAddonIdApplications_1WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplications_1ValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplications_1Async(String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplications_1ValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddonsEnv_1
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnv_1Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddonsEnv_1ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv_1(Async)");
        }

        return getSelfApplicationsAppIdAddonsEnv_1Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getSelfApplicationsAppIdAddonsEnv_1(String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getSelfApplicationsAppIdAddonsEnv_1WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getSelfApplicationsAppIdAddonsEnv_1WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnv_1ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnv_1Async(String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnv_1ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddons_1
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddons_1Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddons_1ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons_1(Async)");
        }

        return getSelfApplicationsAppIdAddons_1Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getSelfApplicationsAppIdAddons_1(String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getSelfApplicationsAppIdAddons_1WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getSelfApplicationsAppIdAddons_1WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddons_1ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddons_1Async(String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddons_1ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependenciesDependencyId_0
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyId_0Call(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling getSelfApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling getSelfApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        return getSelfApplicationsAppIdDependenciesDependencyId_0Call(dependencyId, appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfApplicationsAppIdDependenciesDependencyId_0(String dependencyId, String appId, WannabeApplication wannabeApplication) throws ApiException {
        getSelfApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(dependencyId, appId, wannabeApplication);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(String dependencyId, String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyId_0Async(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependencies_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependencies_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependencies_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependencies_0(Async)");
        }

        return getSelfApplicationsAppIdDependencies_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplicationsAppIdDependencies_0(String appId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplicationsAppIdDependencies_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplicationsAppIdDependencies_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependencies_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependencies_0Async(String appId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependencies_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependents_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependents_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependents_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependents_0(Async)");
        }

        return getSelfApplicationsAppIdDependents_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplicationsAppIdDependents_0(String appId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplicationsAppIdDependents_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplicationsAppIdDependents_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependents_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependents_0Async(String appId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependents_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDeployments_0
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDeployments_0Call(String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDeployments_0ValidateBeforeCall(String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDeployments_0(Async)");
        }

        return getSelfApplicationsAppIdDeployments_0Call(appId, limit, offset, action, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getSelfApplicationsAppIdDeployments_0(String appId, String limit, String offset, String action) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getSelfApplicationsAppIdDeployments_0WithHttpInfo(appId, limit, offset, action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getSelfApplicationsAppIdDeployments_0WithHttpInfo(String appId, String limit, String offset, String action) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDeployments_0ValidateBeforeCall(appId, limit, offset, action, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDeployments_0Async(String appId, String limit, String offset, String action, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDeployments_0ValidateBeforeCall(appId, limit, offset, action, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdEnv_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdEnv_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdEnv_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdEnv_0(Async)");
        }

        return getSelfApplicationsAppIdEnv_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getSelfApplicationsAppIdEnv_0(String appId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getSelfApplicationsAppIdEnv_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getSelfApplicationsAppIdEnv_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdEnv_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdEnv_0Async(String appId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdEnv_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdInstances_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdInstances_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdInstances_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdInstances_0(Async)");
        }

        return getSelfApplicationsAppIdInstances_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> getSelfApplicationsAppIdInstances_0(String appId) throws ApiException {
        ApiResponse<List<Instance>> localVarResp = getSelfApplicationsAppIdInstances_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> getSelfApplicationsAppIdInstances_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdInstances_0Async(String appId, final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdTags_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdTags_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdTags_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdTags_0(Async)");
        }

        return getSelfApplicationsAppIdTags_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getSelfApplicationsAppIdTags_0(String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getSelfApplicationsAppIdTags_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getSelfApplicationsAppIdTags_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdTags_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdTags_0Async(String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdTags_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdVhostsFavourite_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsFavourite_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return getSelfApplicationsAppIdVhostsFavourite_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return Vhost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public Vhost getSelfApplicationsAppIdVhostsFavourite_0(String appId) throws ApiException {
        ApiResponse<Vhost> localVarResp = getSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vhost> getSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsFavourite_0Async(String appId, final ApiCallback<Vhost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdVhosts_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhosts_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdVhosts_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhosts_0(Async)");
        }

        return getSelfApplicationsAppIdVhosts_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public List<Vhost> getSelfApplicationsAppIdVhosts_0(String appId) throws ApiException {
        ApiResponse<List<Vhost>> localVarResp = getSelfApplicationsAppIdVhosts_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Vhost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vhost>> getSelfApplicationsAppIdVhosts_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhosts_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhosts_0Async(String appId, final ApiCallback<List<Vhost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhosts_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppId_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppId_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppId_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppId_0(Async)");
        }

        return getSelfApplicationsAppId_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application getSelfApplicationsAppId_0(String appId) throws ApiException {
        ApiResponse<Application> localVarResp = getSelfApplicationsAppId_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> getSelfApplicationsAppId_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppId_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppId_0Async(String appId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppId_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplications_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplications_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplications_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfApplications_0Call(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplications_0() throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplications_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplications_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfApplications_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplications_0Async(final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplications_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersIdApplications_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdApplications_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersIdApplications_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUsersIdApplications_0(Async)");
        }

        return getUsersIdApplications_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getUsersIdApplications_0(String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getUsersIdApplications_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getUsersIdApplications_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUsersIdApplications_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdApplications_0Async(String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersIdApplications_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchPut_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPut_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchPut_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut_0(Async)");
        }

        return organisationsIdApplicationsAppIdBranchPut_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchPut_0(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchPut_0WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchPut_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPut_0ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPut_0Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPut_0ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchesGet_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branches"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet_0(Async)");
        }

        return organisationsIdApplicationsAppIdBranchesGet_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchesGet_0(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchesGet_0WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchesGet_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGet_0ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_0Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGet_0ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBuildflavorPut_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/buildflavor"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut_0(Async)");
        }

        return organisationsIdApplicationsAppIdBuildflavorPut_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBuildflavorPut_0(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBuildflavorPut_0WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBuildflavorPut_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_0Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDependenciesEnvGet_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_0(Async)");
        }

        return organisationsIdApplicationsAppIdDependenciesEnvGet_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;LinkedAppEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAppEnv> organisationsIdApplicationsAppIdDependenciesEnvGet_0(String appId, String id) throws ApiException {
        ApiResponse<List<LinkedAppEnv>> localVarResp = organisationsIdApplicationsAppIdDependenciesEnvGet_0WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;LinkedAppEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAppEnv>> organisationsIdApplicationsAppIdDependenciesEnvGet_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_0Async(String appId, String id, final ApiCallback<List<LinkedAppEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0Call(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0(Async)");
        }

        return organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0Call(appId, deploymentId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0(String appId, String deploymentId, String id) throws ApiException {
        organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0WithHttpInfo(appId, deploymentId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0WithHttpInfo(String appId, String deploymentId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(appId, deploymentId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0Async(String appId, String deploymentId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(appId, deploymentId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvGet_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet_0(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvGet_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvGet_0(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvGet_0WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvGet_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_0Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvPut_0
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_0Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut_0(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvPut_0Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvPut_0(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvPut_0WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvPut_0WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_0Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdInstancesInstanceIdGet_0
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_0Call(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_0(Async)");
        }

        return organisationsIdApplicationsAppIdInstancesInstanceIdGet_0Call(instanceId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdInstancesInstanceIdGet_0(String instanceId, String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdInstancesInstanceIdGet_0WithHttpInfo(instanceId, appId, id);
    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdInstancesInstanceIdGet_0WithHttpInfo(String instanceId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_0Async(String instanceId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdAddons_1
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_1Call(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_1(Async)");
        }

        return postOrganisationsIdApplicationsAppIdAddons_1Call(id, appId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdAddons_1(String id, String appId, Body body) throws ApiException {
        postOrganisationsIdApplicationsAppIdAddons_1WithHttpInfo(id, appId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdAddons_1WithHttpInfo(String id, String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(id, appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_1Async(String id, String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_1ValidateBeforeCall(id, appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdInstances_0
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_0Call(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances_0(Async)");
        }

        return postOrganisationsIdApplicationsAppIdInstances_0Call(id, appId, commit, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdInstances_0(String id, String appId, String commit) throws ApiException {
        postOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(id, appId, commit);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdInstances_0WithHttpInfo(String id, String appId, String commit) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, commit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_0Async(String id, String appId, String commit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstances_0ValidateBeforeCall(id, appId, commit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplications_0
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplications_0Call(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplications_0ValidateBeforeCall(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplications_0(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications_0(Async)");
        }

        return postOrganisationsIdApplications_0Call(id, wannabeApplication, _callback);

    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application postOrganisationsIdApplications_0(String id, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = postOrganisationsIdApplications_0WithHttpInfo(id, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> postOrganisationsIdApplications_0WithHttpInfo(String id, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplications_0ValidateBeforeCall(id, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplications_0Async(String id, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplications_0ValidateBeforeCall(id, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplicationsAppIdAddons_1
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddons_1Call(String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsAppIdAddons_1ValidateBeforeCall(String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons_1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons_1(Async)");
        }

        return postSelfApplicationsAppIdAddons_1Call(appId, body, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplicationsAppIdAddons_1(String appId, Body body) throws ApiException {
        postSelfApplicationsAppIdAddons_1WithHttpInfo(appId, body);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsAppIdAddons_1WithHttpInfo(String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddons_1ValidateBeforeCall(appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddons_1Async(String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddons_1ValidateBeforeCall(appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplicationsAppIdInstances_0
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdInstances_0Call(String appId, String commit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsAppIdInstances_0ValidateBeforeCall(String appId, String commit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdInstances_0(Async)");
        }

        return postSelfApplicationsAppIdInstances_0Call(appId, commit, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplicationsAppIdInstances_0(String appId, String commit) throws ApiException {
        postSelfApplicationsAppIdInstances_0WithHttpInfo(appId, commit);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsAppIdInstances_0WithHttpInfo(String appId, String commit) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, commit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdInstances_0Async(String appId, String commit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsAppIdInstances_0ValidateBeforeCall(appId, commit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplications_0
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplications_0Call(WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplications_0ValidateBeforeCall(WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling postSelfApplications_0(Async)");
        }

        return postSelfApplications_0Call(wannabeApplication, _callback);

    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplications_0(WannabeApplication wannabeApplication) throws ApiException {
        postSelfApplications_0WithHttpInfo(wannabeApplication);
    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplications_0WithHttpInfo(WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplications_0ValidateBeforeCall(wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplications_0Async(WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplications_0ValidateBeforeCall(wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Call(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Call(dependencyId, appId, id, body, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0(String dependencyId, String appId, String id, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(dependencyId, appId, id, body);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0WithHttpInfo(String dependencyId, String appId, String id, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0Async(String dependencyId, String appId, String id, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyId_0ValidateBeforeCall(dependencyId, appId, id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnvEnvName_0
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_0Call(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnvEnvName_0Call(id, appId, envName, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnvEnvName_0(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnvEnvName_0WithHttpInfo(id, appId, envName, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnvEnvName_0WithHttpInfo(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(id, appId, envName, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_0Async(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvName_0ValidateBeforeCall(id, appId, envName, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnv_0
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_0Call(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv_0(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnv_0Call(id, appId, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnv_0(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnv_0WithHttpInfo(id, appId, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnv_0WithHttpInfo(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(id, appId, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_0Async(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnv_0ValidateBeforeCall(id, appId, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdTagsTag_0
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_0Call(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdTagsTag_0Call(id, appId, tag, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdTagsTag_0(String id, String appId, String tag, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdTagsTag_0WithHttpInfo(id, appId, tag, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdTagsTag_0WithHttpInfo(String id, String appId, String tag, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(id, appId, tag, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_0Async(String id, String appId, String tag, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTag_0ValidateBeforeCall(id, appId, tag, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsDomain_0
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_0Call(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsDomain_0Call(id, appId, domain, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsDomain_0(String id, String appId, String domain, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsDomain_0WithHttpInfo(id, appId, domain, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsDomain_0WithHttpInfo(String id, String appId, String domain, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(id, appId, domain, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_0Async(String id, String appId, String domain, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomain_0ValidateBeforeCall(id, appId, domain, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsFavourite_0
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsFavourite_0Call(id, appId, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsFavourite_0(String id, String appId, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(id, appId, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsFavourite_0WithHttpInfo(String id, String appId, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_0Async(String id, String appId, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(id, appId, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppId_0
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppId_0Call(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppId_0ValidateBeforeCall(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId_0(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId_0(Async)");
        }

        return putOrganisationsIdApplicationsAppId_0Call(id, appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application putOrganisationsIdApplicationsAppId_0(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = putOrganisationsIdApplicationsAppId_0WithHttpInfo(id, appId, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> putOrganisationsIdApplicationsAppId_0WithHttpInfo(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppId_0Async(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppId_0ValidateBeforeCall(id, appId, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdEnvEnvName_0
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvEnvName_0Call(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env/{envName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling putSelfApplicationsAppIdEnvEnvName_0(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnvEnvName_0(Async)");
        }

        return putSelfApplicationsAppIdEnvEnvName_0Call(appId, envName, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdEnvEnvName_0(String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        putSelfApplicationsAppIdEnvEnvName_0WithHttpInfo(appId, envName, wannabeEnv);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdEnvEnvName_0WithHttpInfo(String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(appId, envName, wannabeEnv, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvEnvName_0Async(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvEnvName_0ValidateBeforeCall(appId, envName, wannabeEnv, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdEnv_0
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnv_0Call(String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdEnv_0ValidateBeforeCall(String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnv_0(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnv_0(Async)");
        }

        return putSelfApplicationsAppIdEnv_0Call(appId, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdEnv_0(String appId, WannabeEnv wannabeEnv) throws ApiException {
        putSelfApplicationsAppIdEnv_0WithHttpInfo(appId, wannabeEnv);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdEnv_0WithHttpInfo(String appId, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnv_0ValidateBeforeCall(appId, wannabeEnv, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnv_0Async(String appId, WannabeEnv wannabeEnv, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnv_0ValidateBeforeCall(appId, wannabeEnv, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdTagsTag_0
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdTagsTag_0Call(String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags/{tag}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putSelfApplicationsAppIdTagsTag_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfApplicationsAppIdTagsTag_0(Async)");
        }

        return putSelfApplicationsAppIdTagsTag_0Call(appId, tag, body, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdTagsTag_0(String appId, String tag, Body body) throws ApiException {
        putSelfApplicationsAppIdTagsTag_0WithHttpInfo(appId, tag, body);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdTagsTag_0WithHttpInfo(String appId, String tag, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(appId, tag, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdTagsTag_0Async(String appId, String tag, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdTagsTag_0ValidateBeforeCall(appId, tag, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdVhostsDomain_0
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsDomain_0Call(String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/{domain}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling putSelfApplicationsAppIdVhostsDomain_0(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsDomain_0(Async)");
        }

        return putSelfApplicationsAppIdVhostsDomain_0Call(appId, domain, vhost, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdVhostsDomain_0(String appId, String domain, Vhost vhost) throws ApiException {
        putSelfApplicationsAppIdVhostsDomain_0WithHttpInfo(appId, domain, vhost);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdVhostsDomain_0WithHttpInfo(String appId, String domain, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(appId, domain, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsDomain_0Async(String appId, String domain, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsDomain_0ValidateBeforeCall(appId, domain, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdVhostsFavourite_0
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsFavourite_0Call(String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsFavourite_0(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsFavourite_0(Async)");
        }

        return putSelfApplicationsAppIdVhostsFavourite_0Call(appId, vhost, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdVhostsFavourite_0(String appId, Vhost vhost) throws ApiException {
        putSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(appId, vhost);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdVhostsFavourite_0WithHttpInfo(String appId, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsFavourite_0Async(String appId, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsFavourite_0ValidateBeforeCall(appId, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppId_0
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppId_0Call(String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppId_0ValidateBeforeCall(String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppId_0(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling putSelfApplicationsAppId_0(Async)");
        }

        return putSelfApplicationsAppId_0Call(appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppId_0(String appId, WannabeApplication wannabeApplication) throws ApiException {
        putSelfApplicationsAppId_0WithHttpInfo(appId, wannabeApplication);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppId_0WithHttpInfo(String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppId_0ValidateBeforeCall(appId, wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppId_0Async(String appId, WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppId_0ValidateBeforeCall(appId, wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBranchPut_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchPut_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBranchPut_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchPut_0(Async)");
        }

        return selfApplicationsAppIdBranchPut_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBranchPut_0(String appId) throws ApiException {
        selfApplicationsAppIdBranchPut_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBranchPut_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBranchPut_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchPut_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBranchPut_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBranchesGet_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchesGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/branches"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBranchesGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchesGet_0(Async)");
        }

        return selfApplicationsAppIdBranchesGet_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBranchesGet_0(String appId) throws ApiException {
        selfApplicationsAppIdBranchesGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBranchesGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBranchesGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchesGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBranchesGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBuildflavorPut_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBuildflavorPut_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/buildflavor"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBuildflavorPut_0(Async)");
        }

        return selfApplicationsAppIdBuildflavorPut_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBuildflavorPut_0(String appId) throws ApiException {
        selfApplicationsAppIdBuildflavorPut_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBuildflavorPut_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBuildflavorPut_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBuildflavorPut_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdDependenciesEnvGet_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDependenciesEnvGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdDependenciesEnvGet_0(Async)");
        }

        return selfApplicationsAppIdDependenciesEnvGet_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;LinkedAppEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAppEnv> selfApplicationsAppIdDependenciesEnvGet_0(String appId) throws ApiException {
        ApiResponse<List<LinkedAppEnv>> localVarResp = selfApplicationsAppIdDependenciesEnvGet_0WithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;LinkedAppEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAppEnv>> selfApplicationsAppIdDependenciesEnvGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDependenciesEnvGet_0Async(String appId, final ApiCallback<List<LinkedAppEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdDependenciesEnvGet_0ValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdDeploymentsDeploymentIdGet_0
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGet_0Call(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments/{deploymentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_0(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet_0(Async)");
        }

        return selfApplicationsAppIdDeploymentsDeploymentIdGet_0Call(appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdDeploymentsDeploymentIdGet_0(String appId, String deploymentId) throws ApiException {
        selfApplicationsAppIdDeploymentsDeploymentIdGet_0WithHttpInfo(appId, deploymentId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdDeploymentsDeploymentIdGet_0WithHttpInfo(String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGet_0Async(String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdDeploymentsDeploymentIdGet_0ValidateBeforeCall(appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdExposedEnvGet_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvGet_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvGet_0(Async)");
        }

        return selfApplicationsAppIdExposedEnvGet_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdExposedEnvGet_0(String appId) throws ApiException {
        selfApplicationsAppIdExposedEnvGet_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdExposedEnvGet_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvGet_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvGet_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdExposedEnvPut_0
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvPut_0Call(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvPut_0(Async)");
        }

        return selfApplicationsAppIdExposedEnvPut_0Call(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdExposedEnvPut_0(String appId) throws ApiException {
        selfApplicationsAppIdExposedEnvPut_0WithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdExposedEnvPut_0WithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvPut_0Async(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvPut_0ValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdInstancesInstanceIdGet_0
     * @param instanceId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGet_0Call(String instanceId, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(String instanceId, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling selfApplicationsAppIdInstancesInstanceIdGet_0(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdInstancesInstanceIdGet_0(Async)");
        }

        return selfApplicationsAppIdInstancesInstanceIdGet_0Call(instanceId, appId, _callback);

    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdInstancesInstanceIdGet_0(String instanceId, String appId) throws ApiException {
        selfApplicationsAppIdInstancesInstanceIdGet_0WithHttpInfo(instanceId, appId);
    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdInstancesInstanceIdGet_0WithHttpInfo(String instanceId, String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGet_0Async(String instanceId, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdInstancesInstanceIdGet_0ValidateBeforeCall(instanceId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
