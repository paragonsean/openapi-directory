/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Application;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.TransactionId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GithubApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GithubApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GithubApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteGithubLink_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGithubLink_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGithubLink_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteGithubLink_0Call(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGithubLink_0() throws ApiException {
        deleteGithubLink_0WithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGithubLink_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteGithubLink_0ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGithubLink_0Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGithubLink_0ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubApplications_1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplications_1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubApplications_1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubApplications_1Call(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getGithubApplications_1() throws ApiException {
        ApiResponse<List<Application>> localVarResp = getGithubApplications_1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getGithubApplications_1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubApplications_1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplications_1Async(final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubApplications_1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubCallback_0
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubCallback_0Call(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/callback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (errorDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_description", errorDescription));
        }

        if (errorUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_uri", errorUri));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubCallback_0ValidateBeforeCall(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback _callback) throws ApiException {
        return getGithubCallback_0Call(code, state, error, errorDescription, errorUri, cookie, _callback);

    }

    /**
     * 
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubCallback_0(String code, String state, String error, String errorDescription, String errorUri, String cookie) throws ApiException {
        getGithubCallback_0WithHttpInfo(code, state, error, errorDescription, errorUri, cookie);
    }

    /**
     * 
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubCallback_0WithHttpInfo(String code, String state, String error, String errorDescription, String errorUri, String cookie) throws ApiException {
        okhttp3.Call localVarCall = getGithubCallback_0ValidateBeforeCall(code, state, error, errorDescription, errorUri, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubCallback_0Async(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubCallback_0ValidateBeforeCall(code, state, error, errorDescription, errorUri, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubEmails_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubEmails_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubEmails_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubEmails_0Call(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getGithubEmails_0() throws ApiException {
        ApiResponse<List<String>> localVarResp = getGithubEmails_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getGithubEmails_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubEmails_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubEmails_0Async(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubEmails_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubKeys_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubKeys_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubKeys_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubKeys_0Call(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public List<Key> getGithubKeys_0() throws ApiException {
        ApiResponse<List<Key>> localVarResp = getGithubKeys_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Key&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Key>> getGithubKeys_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubKeys_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubKeys_0Async(final ApiCallback<List<Key>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubKeys_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubLink_0
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLink_0Call(String transactionId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubLink_0ValidateBeforeCall(String transactionId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        return getGithubLink_0Call(transactionId, redirectUrl, _callback);

    }

    /**
     * 
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubLink_0(String transactionId, String redirectUrl) throws ApiException {
        getGithubLink_0WithHttpInfo(transactionId, redirectUrl);
    }

    /**
     * 
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubLink_0WithHttpInfo(String transactionId, String redirectUrl) throws ApiException {
        okhttp3.Call localVarCall = getGithubLink_0ValidateBeforeCall(transactionId, redirectUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLink_0Async(String transactionId, String redirectUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubLink_0ValidateBeforeCall(transactionId, redirectUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubLogin_0
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLogin_0Call(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        if (fromAuthorize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromAuthorize", fromAuthorize));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubLogin_0ValidateBeforeCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        return getGithubLogin_0Call(redirectUrl, fromAuthorize, _callback);

    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubLogin_0(String redirectUrl, String fromAuthorize) throws ApiException {
        getGithubLogin_0WithHttpInfo(redirectUrl, fromAuthorize);
    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubLogin_0WithHttpInfo(String redirectUrl, String fromAuthorize) throws ApiException {
        okhttp3.Call localVarCall = getGithubLogin_0ValidateBeforeCall(redirectUrl, fromAuthorize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLogin_0Async(String redirectUrl, String fromAuthorize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubLogin_0ValidateBeforeCall(redirectUrl, fromAuthorize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubSignup_0
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubSignup_0Call(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        if (fromAuthorize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromAuthorize", fromAuthorize));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubSignup_0ValidateBeforeCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        return getGithubSignup_0Call(redirectUrl, fromAuthorize, _callback);

    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubSignup_0(String redirectUrl, String fromAuthorize) throws ApiException {
        getGithubSignup_0WithHttpInfo(redirectUrl, fromAuthorize);
    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubSignup_0WithHttpInfo(String redirectUrl, String fromAuthorize) throws ApiException {
        okhttp3.Call localVarCall = getGithubSignup_0ValidateBeforeCall(redirectUrl, fromAuthorize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubSignup_0Async(String redirectUrl, String fromAuthorize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubSignup_0ValidateBeforeCall(redirectUrl, fromAuthorize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubUsername_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubUsername_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubUsername_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubUsername_0Call(_callback);

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public String getGithubUsername_0() throws ApiException {
        ApiResponse<String> localVarResp = getGithubUsername_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getGithubUsername_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubUsername_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubUsername_0Async(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubUsername_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithub_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithub_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithub_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithub_0Call(_callback);

    }

    /**
     * 
     * 
     * @return TransactionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public TransactionId getGithub_0() throws ApiException {
        ApiResponse<TransactionId> localVarResp = getGithub_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;TransactionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionId> getGithub_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithub_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithub_0Async(final ApiCallback<TransactionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithub_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postGithubRedeploy_0
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubRedeploy_0Call(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/redeploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (xGithubEvent != null) {
            localVarHeaderParams.put("X-Github-Event", localVarApiClient.parameterToString(xGithubEvent));
        }

        if (xHubSignature != null) {
            localVarHeaderParams.put("X-Hub-Signature", localVarApiClient.parameterToString(xHubSignature));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGithubRedeploy_0ValidateBeforeCall(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback _callback) throws ApiException {
        return postGithubRedeploy_0Call(userAgent, xGithubEvent, xHubSignature, _callback);

    }

    /**
     * 
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public void postGithubRedeploy_0(String userAgent, String xGithubEvent, String xHubSignature) throws ApiException {
        postGithubRedeploy_0WithHttpInfo(userAgent, xGithubEvent, xHubSignature);
    }

    /**
     * 
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postGithubRedeploy_0WithHttpInfo(String userAgent, String xGithubEvent, String xHubSignature) throws ApiException {
        okhttp3.Call localVarCall = postGithubRedeploy_0ValidateBeforeCall(userAgent, xGithubEvent, xHubSignature, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubRedeploy_0Async(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGithubRedeploy_0ValidateBeforeCall(userAgent, xGithubEvent, xHubSignature, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postGithubSignup_0
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubSignup_0Call(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (otherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherId", otherId));
        }

        if (otherEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherEmail", otherEmail));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (autoLink != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoLink", autoLink));
        }

        if (terms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terms", terms));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGithubSignup_0ValidateBeforeCall(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback _callback) throws ApiException {
        return postGithubSignup_0Call(transactionId, name, otherId, otherEmail, password, autoLink, terms, _callback);

    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public void postGithubSignup_0(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms) throws ApiException {
        postGithubSignup_0WithHttpInfo(transactionId, name, otherId, otherEmail, password, autoLink, terms);
    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postGithubSignup_0WithHttpInfo(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms) throws ApiException {
        okhttp3.Call localVarCall = postGithubSignup_0ValidateBeforeCall(transactionId, name, otherId, otherEmail, password, autoLink, terms, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubSignup_0Async(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGithubSignup_0ValidateBeforeCall(transactionId, name, otherId, otherEmail, password, autoLink, terms, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
