/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AddonMigration;
import org.openapitools.client.model.AddonProviderSso;
import org.openapitools.client.model.AppInstance;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Avatar;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.ChangePassword;
import org.openapitools.client.model.Conso;
import org.openapitools.client.model.Consumer;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Credits;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentSummary;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.LinkedAppEnv;
import org.openapitools.client.model.ListEnv;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.OrganisationsIdAddonsAddonIdMigrationsPostRequest;
import org.openapitools.client.model.PaymentData;
import org.openapitools.client.model.PaymentProvider;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.Rights;
import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.Schema2;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Sso;
import org.openapitools.client.model.Summary;
import org.openapitools.client.model.SupernovaInstanceView;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.TransactionId;
import org.openapitools.client.model.User;
import org.openapitools.client.model.Vhost;
import org.openapitools.client.model.WannabeAddon;
import org.openapitools.client.model.WannabeAddonBilling;
import org.openapitools.client.model.WannabeAddonProvider;
import org.openapitools.client.model.WannabeApplication;
import org.openapitools.client.model.WannabeConsumer;
import org.openapitools.client.model.WannabeEnv;
import org.openapitools.client.model.WannabeFeature;
import org.openapitools.client.model.WannabeOrganisation;
import org.openapitools.client.model.WannabePlan;
import org.openapitools.client.model.WannabePlanFeature;
import org.openapitools.client.model.WannabeUser;
import org.openapitools.client.model.Zone;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AllApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AllApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AllApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationAppIdEnvironmentGet
     * @param appId  (required)
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationAppIdEnvironmentGetCall(String appId, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/{appId}/environment"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationAppIdEnvironmentGetValidateBeforeCall(String appId, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling applicationAppIdEnvironmentGet(Async)");
        }

        return applicationAppIdEnvironmentGetCall(appId, token, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void applicationAppIdEnvironmentGet(String appId, String token) throws ApiException {
        applicationAppIdEnvironmentGetWithHttpInfo(appId, token);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationAppIdEnvironmentGetWithHttpInfo(String appId, String token) throws ApiException {
        okhttp3.Call localVarCall = applicationAppIdEnvironmentGetValidateBeforeCall(appId, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationAppIdEnvironmentGetAsync(String appId, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationAppIdEnvironmentGetValidateBeforeCall(appId, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationAppIdEnvironmentPut
     * @param appId  (required)
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationAppIdEnvironmentPutCall(String appId, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/application/{appId}/environment"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationAppIdEnvironmentPutValidateBeforeCall(String appId, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling applicationAppIdEnvironmentPut(Async)");
        }

        return applicationAppIdEnvironmentPutCall(appId, token, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void applicationAppIdEnvironmentPut(String appId, String token) throws ApiException {
        applicationAppIdEnvironmentPutWithHttpInfo(appId, token);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationAppIdEnvironmentPutWithHttpInfo(String appId, String token) throws ApiException {
        okhttp3.Call localVarCall = applicationAppIdEnvironmentPutValidateBeforeCall(appId, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationAppIdEnvironmentPutAsync(String appId, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationAppIdEnvironmentPutValidateBeforeCall(appId, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMatomo
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMatomoCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/providers/addon-matomo/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMatomoValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return createMatomoCall(body, _callback);

    }

    /**
     * Create Matomo addon
     * 
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public Object createMatomo(Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createMatomoWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create Matomo addon
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createMatomoWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = createMatomoValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Matomo addon (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMatomoAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMatomoValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroup
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroup(Async)");
        }

        return createNetworkGroupCall(ownerId, body, _callback);

    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroup(String ownerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupWithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupWithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Group (asynchronously)
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupAsync(String ownerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupExternalPeer
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeerCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupExternalPeerValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer(Async)");
        }

        return createNetworkGroupExternalPeerCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroupExternalPeer(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupExternalPeerWithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupExternalPeerWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupExternalPeerValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add external peer (asynchronously)
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeerAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupExternalPeerValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupMember
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMemberCall(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema2;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupMemberValidateBeforeCall(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupMember(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember(Async)");
        }

        return createNetworkGroupMemberCall(ownerId, networkGroupId, schema2, _callback);

    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createNetworkGroupMember(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        createNetworkGroupMemberWithHttpInfo(ownerId, networkGroupId, schema2);
    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createNetworkGroupMemberWithHttpInfo(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, schema2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add member (asynchronously)
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMemberAsync(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, schema2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGithubLink
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGithubLinkCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGithubLinkValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteGithubLinkCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGithubLink() throws ApiException {
        deleteGithubLinkWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGithubLinkWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteGithubLinkValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGithubLinkAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGithubLinkValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMatomo
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMatomoCall(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/providers/addon-matomo/resources/{matomoId}"
            .replace("{" + "matomoId" + "}", localVarApiClient.escapeString(matomoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMatomoValidateBeforeCall(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matomoId' is set
        if (matomoId == null) {
            throw new ApiException("Missing the required parameter 'matomoId' when calling deleteMatomo(Async)");
        }

        return deleteMatomoCall(matomoId, body, _callback);

    }

    /**
     * Delete Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMatomo(String matomoId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMatomoWithHttpInfo(matomoId, body);
        return localVarResp.getData();
    }

    /**
     * Delete Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMatomoWithHttpInfo(String matomoId, String body) throws ApiException {
        okhttp3.Call localVarCall = deleteMatomoValidateBeforeCall(matomoId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Matomo addon (asynchronously)
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMatomoAsync(String matomoId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMatomoValidateBeforeCall(matomoId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroup
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroup(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup(Async)");
        }

        return deleteNetworkGroupCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroup(String ownerId, String networkGroupId, Object body) throws ApiException {
        deleteNetworkGroupWithHttpInfo(ownerId, networkGroupId, body);
    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupValidateBeforeCall(ownerId, networkGroupId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Network Group (asynchronously)
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupExternalPeer
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeerCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupExternalPeerValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer(Async)");
        }

        return deleteNetworkGroupExternalPeerCall(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupExternalPeer(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupExternalPeerWithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupExternalPeerWithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove external peer (asynchronously)
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeerAsync(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupMember
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMemberCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupMemberValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember(Async)");
        }

        return deleteNetworkGroupMemberCall(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupMember(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        deleteNetworkGroupMemberWithHttpInfo(ownerId, networkGroupId, memberId, body);
    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupMemberWithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove member (asynchronously)
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMemberAsync(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupPeer
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeerCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupPeerValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer(Async)");
        }

        return deleteNetworkGroupPeerCall(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupPeer(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupPeerWithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupPeerWithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove peer (asynchronously)
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeerAsync(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsId
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsId(Async)");
        }

        return deleteOrganisationsIdCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsId(String id) throws ApiException {
        deleteOrganisationsIdWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCall(String id, String featureId, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features/{featureId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdValidateBeforeCall(String id, String featureId, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdCall(id, featureId, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId(String id, String featureId, String providerId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdWithHttpInfo(id, featureId, providerId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdWithHttpInfo(String id, String featureId, String providerId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdValidateBeforeCall(id, featureId, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdAsync(String id, String featureId, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureIdValidateBeforeCall(id, featureId, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(id, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId(String id, String providerId, String planId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(id, providerId, planId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(String id, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdAsync(String id, String providerId, String planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCall(String id, String featureName, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(String id, String featureName, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCall(id, featureName, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(String id, String featureName, String providerId, String planId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameWithHttpInfo(id, featureName, providerId, planId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameWithHttpInfo(String id, String featureName, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(id, featureName, providerId, planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameAsync(String id, String featureName, String providerId, String planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(id, featureName, providerId, planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonsAddonId
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonIdValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId(Async)");
        }

        return deleteOrganisationsIdAddonsAddonIdCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonId(String id, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonIdWithHttpInfo(id, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonIdWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdAsync(String id, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonsAddonIdTagsTag
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTagCall(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        return deleteOrganisationsIdAddonsAddonIdTagsTagCall(id, tag, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonIdTagsTag(String id, String tag, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonIdTagsTagWithHttpInfo(id, tag, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonIdTagsTagWithHttpInfo(String id, String tag, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(id, tag, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTagAsync(String id, String tag, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(id, tag, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppId
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppId(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdWithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAsync(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdAddonsAddonId
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCall(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonIdValidateBeforeCall(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdAddonsAddonIdCall(id, appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonId(String id, String appId, String addonId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdAddonsAddonIdWithHttpInfo(id, appId, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdAddonsAddonIdWithHttpInfo(String id, String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonIdValidateBeforeCall(id, appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonIdAsync(String id, String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonIdValidateBeforeCall(id, appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCall(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdCall(dependencyId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId(String dependencyId, String appId, String id) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdWithHttpInfo(dependencyId, appId, id);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdWithHttpInfo(String dependencyId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdAsync(String dependencyId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCall(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesCall(id, appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances(String id, String appId, String deploymentId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesWithHttpInfo(id, appId, deploymentId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesWithHttpInfo(String id, String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(id, appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesAsync(String id, String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(id, appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdEnvEnvName
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvNameCall(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdEnvEnvNameCall(id, appId, envName, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdEnvEnvName(String id, String appId, String envName) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdEnvEnvNameWithHttpInfo(id, appId, envName);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdEnvEnvNameWithHttpInfo(String id, String appId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(id, appId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvNameAsync(String id, String appId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(id, appId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdInstances
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstancesCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdInstancesCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdInstances(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstancesAsync(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdTagsTag
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTagCall(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdTagsTagCall(id, appId, tag, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdTagsTag(String id, String appId, String tag) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdTagsTagWithHttpInfo(id, appId, tag);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdTagsTagWithHttpInfo(String id, String appId, String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(id, appId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTagAsync(String id, String appId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(id, appId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsDomain
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomainCall(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsDomainCall(id, appId, domain, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsDomain(String id, String appId, String domain) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsDomainWithHttpInfo(id, appId, domain);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsDomainWithHttpInfo(String id, String appId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(id, appId, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomainAsync(String id, String appId, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(id, appId, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsFavourite
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsFavouriteCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsFavourite(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavouriteAsync(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdConsumersKey
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdConsumersKeyCall(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdConsumersKeyValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdConsumersKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteOrganisationsIdConsumersKey(Async)");
        }

        return deleteOrganisationsIdConsumersKeyCall(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdConsumersKey(String id, String key) throws ApiException {
        deleteOrganisationsIdConsumersKeyWithHttpInfo(id, key);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdConsumersKeyWithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdConsumersKeyValidateBeforeCall(id, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdConsumersKeyAsync(String id, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdConsumersKeyValidateBeforeCall(id, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdMembersUserId
     * @param id  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdMembersUserIdCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdMembersUserIdValidateBeforeCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteOrganisationsIdMembersUserId(Async)");
        }

        return deleteOrganisationsIdMembersUserIdCall(id, userId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdMembersUserId(String id, String userId) throws ApiException {
        deleteOrganisationsIdMembersUserIdWithHttpInfo(id, userId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdMembersUserIdWithHttpInfo(String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdMembersUserIdValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdMembersUserIdAsync(String id, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdMembersUserIdValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdPaymentsBillingsBid
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsBillingsBidCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdPaymentsBillingsBidValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsBillingsBid(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling deleteOrganisationsIdPaymentsBillingsBid(Async)");
        }

        return deleteOrganisationsIdPaymentsBillingsBidCall(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdPaymentsBillingsBid(String id, String bid) throws ApiException {
        deleteOrganisationsIdPaymentsBillingsBidWithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdPaymentsBillingsBidWithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsBillingsBidAsync(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdPaymentsRecurring
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsRecurringCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/recurring"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdPaymentsRecurringValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsRecurring(Async)");
        }

        return deleteOrganisationsIdPaymentsRecurringCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdPaymentsRecurring(String id) throws ApiException {
        deleteOrganisationsIdPaymentsRecurringWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdPaymentsRecurringWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsRecurringValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsRecurringAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsRecurringValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelf
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteSelfCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUser </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelf() throws ApiException {
        deleteSelfWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteSelfValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfAddonsAddonId
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfAddonsAddonIdValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonId(Async)");
        }

        return deleteSelfAddonsAddonIdCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfAddonsAddonId(String addonId) throws ApiException {
        deleteSelfAddonsAddonIdWithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfAddonsAddonIdWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdAsync(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfAddonsAddonIdTagsTag
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdTagsTagCall(String tag, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags/{tag}"
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfAddonsAddonIdTagsTagValidateBeforeCall(String tag, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteSelfAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfAddonsAddonIdTagsTag(Async)");
        }

        return deleteSelfAddonsAddonIdTagsTagCall(tag, addonId, _callback);

    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfAddonsAddonIdTagsTag(String tag, String addonId) throws ApiException {
        deleteSelfAddonsAddonIdTagsTagWithHttpInfo(tag, addonId);
    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfAddonsAddonIdTagsTagWithHttpInfo(String tag, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdTagsTagValidateBeforeCall(tag, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfAddonsAddonIdTagsTagAsync(String tag, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfAddonsAddonIdTagsTagValidateBeforeCall(tag, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppId
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppId(Async)");
        }

        return deleteSelfApplicationsAppIdCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppId(String appId) throws ApiException {
        deleteSelfApplicationsAppIdWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdAddonsAddonId
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonIdCall(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/{addonId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonIdValidateBeforeCall(String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteSelfApplicationsAppIdAddonsAddonId(Async)");
        }

        return deleteSelfApplicationsAppIdAddonsAddonIdCall(appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdAddonsAddonId(String appId, String addonId) throws ApiException {
        deleteSelfApplicationsAppIdAddonsAddonIdWithHttpInfo(appId, addonId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdAddonsAddonIdWithHttpInfo(String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonIdValidateBeforeCall(appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdAddonsAddonIdAsync(String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdAddonsAddonIdValidateBeforeCall(appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdDependenciesDependencyId
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyIdCall(String dependencyId, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(String dependencyId, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDependenciesDependencyId(Async)");
        }

        return deleteSelfApplicationsAppIdDependenciesDependencyIdCall(dependencyId, appId, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdDependenciesDependencyId(String dependencyId, String appId) throws ApiException {
        deleteSelfApplicationsAppIdDependenciesDependencyIdWithHttpInfo(dependencyId, appId);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdDependenciesDependencyIdWithHttpInfo(String dependencyId, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDependenciesDependencyIdAsync(String dependencyId, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments/{deploymentId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(Async)");
        }

        return deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesCall(appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstances(String appId, String deploymentId) throws ApiException {
        deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesWithHttpInfo(appId, deploymentId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesWithHttpInfo(String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> cancelDeploy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesAsync(String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdDeploymentsDeploymentIdInstancesValidateBeforeCall(appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdEnvEnvName
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdEnvEnvNameCall(String appId, String envName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env/{envName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(String appId, String envName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteSelfApplicationsAppIdEnvEnvName(Async)");
        }

        return deleteSelfApplicationsAppIdEnvEnvNameCall(appId, envName, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdEnvEnvName(String appId, String envName) throws ApiException {
        deleteSelfApplicationsAppIdEnvEnvNameWithHttpInfo(appId, envName);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdEnvEnvNameWithHttpInfo(String appId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(appId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdEnvEnvNameAsync(String appId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(appId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdInstances
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdInstancesCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdInstancesValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdInstances(Async)");
        }

        return deleteSelfApplicationsAppIdInstancesCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdInstances(String appId) throws ApiException {
        deleteSelfApplicationsAppIdInstancesWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdInstancesWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdInstancesValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdInstancesAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdInstancesValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdTagsTag
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdTagsTagCall(String appId, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags/{tag}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdTagsTagValidateBeforeCall(String appId, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteSelfApplicationsAppIdTagsTag(Async)");
        }

        return deleteSelfApplicationsAppIdTagsTagCall(appId, tag, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdTagsTag(String appId, String tag) throws ApiException {
        deleteSelfApplicationsAppIdTagsTagWithHttpInfo(appId, tag);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdTagsTagWithHttpInfo(String appId, String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdTagsTagValidateBeforeCall(appId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdTagsTagAsync(String appId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdTagsTagValidateBeforeCall(appId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdVhostsDomain
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsDomainCall(String appId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/{domain}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdVhostsDomainValidateBeforeCall(String appId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteSelfApplicationsAppIdVhostsDomain(Async)");
        }

        return deleteSelfApplicationsAppIdVhostsDomainCall(appId, domain, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdVhostsDomain(String appId, String domain) throws ApiException {
        deleteSelfApplicationsAppIdVhostsDomainWithHttpInfo(appId, domain);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdVhostsDomainWithHttpInfo(String appId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsDomainValidateBeforeCall(appId, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsDomainAsync(String appId, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsDomainValidateBeforeCall(appId, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfApplicationsAppIdVhostsFavourite
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsFavouriteCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteSelfApplicationsAppIdVhostsFavourite(Async)");
        }

        return deleteSelfApplicationsAppIdVhostsFavouriteCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfApplicationsAppIdVhostsFavourite(String appId) throws ApiException {
        deleteSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfApplicationsAppIdVhostsFavouriteAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfConsumersKey
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfConsumersKeyCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/consumers/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfConsumersKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteSelfConsumersKey(Async)");
        }

        return deleteSelfConsumersKeyCall(key, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfConsumersKey(String key) throws ApiException {
        deleteSelfConsumersKeyWithHttpInfo(key);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfConsumersKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfConsumersKeyValidateBeforeCall(key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfConsumersKeyAsync(String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfConsumersKeyValidateBeforeCall(key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfEmailsEmail
     * @param email  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfEmailsEmailCall(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/emails/{email}"
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfEmailsEmailValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling deleteSelfEmailsEmail(Async)");
        }

        return deleteSelfEmailsEmailCall(email, _callback);

    }

    /**
     * 
     * 
     * @param email  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfEmailsEmail(String email) throws ApiException {
        deleteSelfEmailsEmailWithHttpInfo(email);
    }

    /**
     * 
     * 
     * @param email  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfEmailsEmailWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfEmailsEmailValidateBeforeCall(email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param email  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfEmailsEmailAsync(String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfEmailsEmailValidateBeforeCall(email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfKeysKey
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeSshKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfKeysKeyCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/keys/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfKeysKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteSelfKeysKey(Async)");
        }

        return deleteSelfKeysKeyCall(key, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeSshKey </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfKeysKey(String key) throws ApiException {
        deleteSelfKeysKeyWithHttpInfo(key);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeSshKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfKeysKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfKeysKeyValidateBeforeCall(key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeSshKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfKeysKeyAsync(String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfKeysKeyValidateBeforeCall(key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfPaymentsBillingsBid
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsBillingsBidCall(String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings/{bid}"
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfPaymentsBillingsBidValidateBeforeCall(String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling deleteSelfPaymentsBillingsBid(Async)");
        }

        return deleteSelfPaymentsBillingsBidCall(bid, _callback);

    }

    /**
     * 
     * 
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfPaymentsBillingsBid(String bid) throws ApiException {
        deleteSelfPaymentsBillingsBidWithHttpInfo(bid);
    }

    /**
     * 
     * 
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfPaymentsBillingsBidWithHttpInfo(String bid) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfPaymentsBillingsBidValidateBeforeCall(bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsBillingsBidAsync(String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfPaymentsBillingsBidValidateBeforeCall(bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfPaymentsMethodsMId
     * @param mId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUserCard </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsMethodsMIdCall(String mId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/methods/{mId}"
            .replace("{" + "mId" + "}", localVarApiClient.escapeString(mId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfPaymentsMethodsMIdValidateBeforeCall(String mId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mId' is set
        if (mId == null) {
            throw new ApiException("Missing the required parameter 'mId' when calling deleteSelfPaymentsMethodsMId(Async)");
        }

        return deleteSelfPaymentsMethodsMIdCall(mId, _callback);

    }

    /**
     * 
     * 
     * @param mId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUserCard </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfPaymentsMethodsMId(String mId) throws ApiException {
        deleteSelfPaymentsMethodsMIdWithHttpInfo(mId);
    }

    /**
     * 
     * 
     * @param mId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUserCard </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfPaymentsMethodsMIdWithHttpInfo(String mId) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfPaymentsMethodsMIdValidateBeforeCall(mId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param mId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteUserCard </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsMethodsMIdAsync(String mId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfPaymentsMethodsMIdValidateBeforeCall(mId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfPaymentsRecurring
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsRecurringCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfPaymentsRecurringValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteSelfPaymentsRecurringCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfPaymentsRecurring() throws ApiException {
        deleteSelfPaymentsRecurringWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfPaymentsRecurringWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteSelfPaymentsRecurringValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfPaymentsRecurringAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfPaymentsRecurringValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeAllTokens </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfTokensCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteSelfTokensCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeAllTokens </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfTokens() throws ApiException {
        deleteSelfTokensWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeAllTokens </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteSelfTokensValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeAllTokens </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfTokensAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfTokensValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSelfTokensToken
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfTokensTokenCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/tokens/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSelfTokensTokenValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteSelfTokensToken(Async)");
        }

        return deleteSelfTokensTokenCall(token, _callback);

    }

    /**
     * 
     * 
     * @param token  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeToken </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSelfTokensToken(String token) throws ApiException {
        deleteSelfTokensTokenWithHttpInfo(token);
    }

    /**
     * 
     * 
     * @param token  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSelfTokensTokenWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = deleteSelfTokensTokenValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> revokeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSelfTokensTokenAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSelfTokensTokenValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsEventSocketGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventSocketGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/event-socket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsEventSocketGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return eventsEventSocketGetCall(_callback);

    }

    /**
     * 
     * Retrieve events as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void eventsEventSocketGet() throws ApiException {
        eventsEventSocketGetWithHttpInfo();
    }

    /**
     * 
     * Retrieve events as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventsEventSocketGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = eventsEventSocketGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve events as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsEventSocketGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsEventSocketGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProvider
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigProviderValidateBeforeCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling getConfigProvider(Async)");
        }

        return getConfigProviderCall(configurationProviderId, body, _callback);

    }

    /**
     * Get Addon provider configuration
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getConfigProvider(String configurationProviderId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = getConfigProviderWithHttpInfo(configurationProviderId, body);
        return localVarResp.getData();
    }

    /**
     * Get Addon provider configuration
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getConfigProviderWithHttpInfo(String configurationProviderId, String body) throws ApiException {
        okhttp3.Call localVarCall = getConfigProviderValidateBeforeCall(configurationProviderId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Addon provider configuration (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> requested config provider object </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderAsync(String configurationProviderId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigProviderValidateBeforeCall(configurationProviderId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigProviderEnv
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderEnvCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigProviderEnvValidateBeforeCall(String configurationProviderId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling getConfigProviderEnv(Async)");
        }

        return getConfigProviderEnvCall(configurationProviderId, body, _callback);

    }

    /**
     * Get provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getConfigProviderEnv(String configurationProviderId, String body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getConfigProviderEnvWithHttpInfo(configurationProviderId, body);
        return localVarResp.getData();
    }

    /**
     * Get provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getConfigProviderEnvWithHttpInfo(String configurationProviderId, String body) throws ApiException {
        okhttp3.Call localVarCall = getConfigProviderEnvValidateBeforeCall(configurationProviderId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get provider&#39;s addon environment (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> config provider environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigProviderEnvAsync(String configurationProviderId, String body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigProviderEnvValidateBeforeCall(configurationProviderId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithub
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubCall(_callback);

    }

    /**
     * 
     * 
     * @return TransactionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public TransactionId getGithub() throws ApiException {
        ApiResponse<TransactionId> localVarResp = getGithubWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;TransactionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionId> getGithubWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> startGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubAsync(final ApiCallback<TransactionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubApplications
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplicationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubApplicationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubApplicationsCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getGithubApplications() throws ApiException {
        ApiResponse<List<Application>> localVarResp = getGithubApplicationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getGithubApplicationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubApplicationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubApplicationsAsync(final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubApplicationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubCallback
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubCallbackCall(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/callback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (errorDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_description", errorDescription));
        }

        if (errorUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_uri", errorUri));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubCallbackValidateBeforeCall(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback _callback) throws ApiException {
        return getGithubCallbackCall(code, state, error, errorDescription, errorUri, cookie, _callback);

    }

    /**
     * 
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubCallback(String code, String state, String error, String errorDescription, String errorUri, String cookie) throws ApiException {
        getGithubCallbackWithHttpInfo(code, state, error, errorDescription, errorUri, cookie);
    }

    /**
     * 
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubCallbackWithHttpInfo(String code, String state, String error, String errorDescription, String errorUri, String cookie) throws ApiException {
        okhttp3.Call localVarCall = getGithubCallbackValidateBeforeCall(code, state, error, errorDescription, errorUri, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param code  (optional)
     * @param state  (optional)
     * @param error  (optional)
     * @param errorDescription  (optional)
     * @param errorUri  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubCallback </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubCallbackAsync(String code, String state, String error, String errorDescription, String errorUri, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubCallbackValidateBeforeCall(code, state, error, errorDescription, errorUri, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubEmails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubEmailsCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getGithubEmails() throws ApiException {
        ApiResponse<List<String>> localVarResp = getGithubEmailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getGithubEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubEmails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubEmailsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubKeysCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public List<Key> getGithubKeys() throws ApiException {
        ApiResponse<List<Key>> localVarResp = getGithubKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Key&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Key>> getGithubKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubKeysAsync(final ApiCallback<List<Key>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubLink
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLinkCall(String transactionId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubLinkValidateBeforeCall(String transactionId, String redirectUrl, final ApiCallback _callback) throws ApiException {
        return getGithubLinkCall(transactionId, redirectUrl, _callback);

    }

    /**
     * 
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubLink(String transactionId, String redirectUrl) throws ApiException {
        getGithubLinkWithHttpInfo(transactionId, redirectUrl);
    }

    /**
     * 
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubLinkWithHttpInfo(String transactionId, String redirectUrl) throws ApiException {
        okhttp3.Call localVarCall = getGithubLinkValidateBeforeCall(transactionId, redirectUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId From GET /github (optional)
     * @param redirectUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkGithub </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLinkAsync(String transactionId, String redirectUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubLinkValidateBeforeCall(transactionId, redirectUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubLogin
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLoginCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        if (fromAuthorize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromAuthorize", fromAuthorize));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubLoginValidateBeforeCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        return getGithubLoginCall(redirectUrl, fromAuthorize, _callback);

    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubLogin(String redirectUrl, String fromAuthorize) throws ApiException {
        getGithubLoginWithHttpInfo(redirectUrl, fromAuthorize);
    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubLoginWithHttpInfo(String redirectUrl, String fromAuthorize) throws ApiException {
        okhttp3.Call localVarCall = getGithubLoginValidateBeforeCall(redirectUrl, fromAuthorize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubLogin </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubLoginAsync(String redirectUrl, String fromAuthorize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubLoginValidateBeforeCall(redirectUrl, fromAuthorize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubSignup
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubSignupCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUrl", redirectUrl));
        }

        if (fromAuthorize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromAuthorize", fromAuthorize));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubSignupValidateBeforeCall(String redirectUrl, String fromAuthorize, final ApiCallback _callback) throws ApiException {
        return getGithubSignupCall(redirectUrl, fromAuthorize, _callback);

    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public void getGithubSignup(String redirectUrl, String fromAuthorize) throws ApiException {
        getGithubSignupWithHttpInfo(redirectUrl, fromAuthorize);
    }

    /**
     * 
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getGithubSignupWithHttpInfo(String redirectUrl, String fromAuthorize) throws ApiException {
        okhttp3.Call localVarCall = getGithubSignupValidateBeforeCall(redirectUrl, fromAuthorize, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param redirectUrl  (optional)
     * @param fromAuthorize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> githubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubSignupAsync(String redirectUrl, String fromAuthorize, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubSignupValidateBeforeCall(redirectUrl, fromAuthorize, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGithubUsername
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubUsernameCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGithubUsernameValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGithubUsernameCall(_callback);

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public String getGithubUsername() throws ApiException {
        ApiResponse<String> localVarResp = getGithubUsernameWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getGithubUsernameWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGithubUsernameValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGithubUsername </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGithubUsernameAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGithubUsernameValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatomo
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomoCall(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/addon-matomo/addons/{matomoId}"
            .replace("{" + "matomoId" + "}", localVarApiClient.escapeString(matomoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatomoValidateBeforeCall(String matomoId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matomoId' is set
        if (matomoId == null) {
            throw new ApiException("Missing the required parameter 'matomoId' when calling getMatomo(Async)");
        }

        return getMatomoCall(matomoId, body, _callback);

    }

    /**
     * Get Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getMatomo(String matomoId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = getMatomoWithHttpInfo(matomoId, body);
        return localVarResp.getData();
    }

    /**
     * Get Matomo addon
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getMatomoWithHttpInfo(String matomoId, String body) throws ApiException {
        okhttp3.Call localVarCall = getMatomoValidateBeforeCall(matomoId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Matomo addon (asynchronously)
     * 
     * @param matomoId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomoAsync(String matomoId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatomoValidateBeforeCall(matomoId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatomoKTokenValidation
     * @param keycloakToken Environment variable injected on the app with &#39;KEYCLOAK_TOKEN&#39; name (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomoKTokenValidationCall(String keycloakToken, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/addon-matomo/token/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keycloakToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keycloakToken", keycloakToken));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatomoKTokenValidationValidateBeforeCall(String keycloakToken, String body, final ApiCallback _callback) throws ApiException {
        return getMatomoKTokenValidationCall(keycloakToken, body, _callback);

    }

    /**
     * Validate a keycloak token
     * 
     * @param keycloakToken Environment variable injected on the app with &#39;KEYCLOAK_TOKEN&#39; name (optional)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public Object getMatomoKTokenValidation(String keycloakToken, String body) throws ApiException {
        ApiResponse<Object> localVarResp = getMatomoKTokenValidationWithHttpInfo(keycloakToken, body);
        return localVarResp.getData();
    }

    /**
     * Validate a keycloak token
     * 
     * @param keycloakToken Environment variable injected on the app with &#39;KEYCLOAK_TOKEN&#39; name (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getMatomoKTokenValidationWithHttpInfo(String keycloakToken, String body) throws ApiException {
        okhttp3.Call localVarCall = getMatomoKTokenValidationValidateBeforeCall(keycloakToken, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate a keycloak token (asynchronously)
     * 
     * @param keycloakToken Environment variable injected on the app with &#39;KEYCLOAK_TOKEN&#39; name (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatomoKTokenValidationAsync(String keycloakToken, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatomoKTokenValidationValidateBeforeCall(keycloakToken, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroup
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroup(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroup(Async)");
        }

        return getNetworkGroupCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroup(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Group (asynchronously)
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupMember
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMemberCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupMemberValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupMember(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getNetworkGroupMember(Async)");
        }

        return getNetworkGroupMemberCall(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return Schema1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Schema1 getNetworkGroupMember(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        ApiResponse<Schema1> localVarResp = getNetworkGroupMemberWithHttpInfo(ownerId, networkGroupId, memberId, body);
        return localVarResp.getData();
    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema1> getNetworkGroupMemberWithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get member (asynchronously)
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMemberAsync(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Schema1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupMemberValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPeer
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeerCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPeerValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupPeer(Async)");
        }

        return getNetworkGroupPeerCall(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupPeer(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupPeerWithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupPeerWithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get peer (asynchronously)
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeerAsync(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPeerValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupStream
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStreamCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupStreamValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupStream(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream(Async)");
        }

        return getNetworkGroupStreamCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupStream(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupStreamWithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupStreamWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupStreamValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Network Group SSE (asynchronously)
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStreamAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupStreamValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfiguration
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfigurationValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration(Async)");
        }

        return getNetworkGroupWireGuardConfigurationCall(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfiguration(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfigurationWithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfigurationWithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationAsync(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfigurationStream
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStreamCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfigurationStreamValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream(Async)");
        }

        return getNetworkGroupWireGuardConfigurationStreamCall(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfigurationStream(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfigurationStreamWithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfigurationStreamWithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStreamValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStreamAsync(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStreamValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNewsfeedEngineering
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEngineeringFeed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewsfeedEngineeringCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/newsfeeds/engineering";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewsfeedEngineeringValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getNewsfeedEngineeringCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEngineeringFeed </td><td>  -  </td></tr>
     </table>
     */
    public void getNewsfeedEngineering() throws ApiException {
        getNewsfeedEngineeringWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEngineeringFeed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getNewsfeedEngineeringWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getNewsfeedEngineeringValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEngineeringFeed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewsfeedEngineeringAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewsfeedEngineeringValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNewsfeedsBlog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBlogFeed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewsfeedsBlogCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/newsfeeds/blog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewsfeedsBlogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getNewsfeedsBlogCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBlogFeed </td><td>  -  </td></tr>
     </table>
     */
    public void getNewsfeedsBlog() throws ApiException {
        getNewsfeedsBlogWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBlogFeed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getNewsfeedsBlogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getNewsfeedsBlogValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBlogFeed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewsfeedsBlogAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewsfeedsBlogValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOauthAuthorize
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthAuthorizeCall(String oauthToken, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauthAuthorizeValidateBeforeCall(String oauthToken, String cookie, final ApiCallback _callback) throws ApiException {
        return getOauthAuthorizeCall(oauthToken, cookie, _callback);

    }

    /**
     * 
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public void getOauthAuthorize(String oauthToken, String cookie) throws ApiException {
        getOauthAuthorizeWithHttpInfo(oauthToken, cookie);
    }

    /**
     * 
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOauthAuthorizeWithHttpInfo(String oauthToken, String cookie) throws ApiException {
        okhttp3.Call localVarCall = getOauthAuthorizeValidateBeforeCall(oauthToken, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthAuthorizeAsync(String oauthToken, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauthAuthorizeValidateBeforeCall(oauthToken, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOauthRights
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthRightsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/rights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauthRightsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOauthRightsCall(_callback);

    }

    /**
     * 
     * 
     * @return Rights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public Rights getOauthRights() throws ApiException {
        ApiResponse<Rights> localVarResp = getOauthRightsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Rights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rights> getOauthRightsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOauthRightsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Rights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthRightsAsync(final ApiCallback<Rights> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauthRightsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Rights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisations
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        return getOrganisationsCall(user, _callback);

    }

    /**
     * 
     * 
     * @param user  (optional)
     * @return List&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public List<Organisation> getOrganisations(String user) throws ApiException {
        ApiResponse<List<Organisation>> localVarResp = getOrganisationsWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param user  (optional)
     * @return ApiResponse&lt;List&lt;Organisation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organisation>> getOrganisationsWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsAsync(String user, final ApiCallback<List<Organisation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsId
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsId(Async)");
        }

        return getOrganisationsIdCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation getOrganisationsId(String id) throws ApiException {
        ApiResponse<Organisation> localVarResp = getOrganisationsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> getOrganisationsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAsync(String id, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonproviders
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonproviders(Async)");
        }

        return getOrganisationsIdAddonprovidersCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public List<Provider> getOrganisationsIdAddonproviders(String id) throws ApiException {
        ApiResponse<List<Provider>> localVarResp = getOrganisationsIdAddonprovidersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Provider&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Provider>> getOrganisationsIdAddonprovidersWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersAsync(String id, final ApiCallback<List<Provider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderId
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderId(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdCall(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public Provider getOrganisationsIdAddonprovidersProviderId(String id, String providerId) throws ApiException {
        ApiResponse<Provider> localVarResp = getOrganisationsIdAddonprovidersProviderIdWithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> getOrganisationsIdAddonprovidersProviderIdWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdAsync(String id, String providerId, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdFeatures
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeaturesCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdFeatures(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdFeatures(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdFeaturesCall(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public List<Feature> getOrganisationsIdAddonprovidersProviderIdFeatures(String id, String providerId) throws ApiException {
        ApiResponse<List<Feature>> localVarResp = getOrganisationsIdAddonprovidersProviderIdFeaturesWithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Feature>> getOrganisationsIdAddonprovidersProviderIdFeaturesWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeaturesAsync(String id, String providerId, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdPlans
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlans(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlans(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdPlansCall(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public List<Plan> getOrganisationsIdAddonprovidersProviderIdPlans(String id, String providerId) throws ApiException {
        ApiResponse<List<Plan>> localVarResp = getOrganisationsIdAddonprovidersProviderIdPlansWithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;Plan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Plan>> getOrganisationsIdAddonprovidersProviderIdPlansWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansAsync(String id, String providerId, final ApiCallback<List<Plan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdPlansPlanId
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(id, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan getOrganisationsIdAddonprovidersProviderIdPlansPlanId(String id, String providerId, String planId) throws ApiException {
        ApiResponse<Plan> localVarResp = getOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(id, providerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> getOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(String id, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanIdAsync(String id, String providerId, String planId, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdTags
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTagsCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTagsValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdTags(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdTags(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdTagsCall(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdAddonprovidersProviderIdTags(String id, String providerId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdAddonprovidersProviderIdTagsWithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdAddonprovidersProviderIdTagsWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdTagsValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTagsAsync(String id, String providerId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdTagsValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddons
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddons(Async)");
        }

        return getOrganisationsIdAddonsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdAddons(String id) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdAddonsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdAddonsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAsync(String id, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonId
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId(Async)");
        }

        return getOrganisationsIdAddonsAddonIdCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon getOrganisationsIdAddonsAddonId(String id, String addonId) throws ApiException {
        ApiResponse<Addon> localVarResp = getOrganisationsIdAddonsAddonIdWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> getOrganisationsIdAddonsAddonIdWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdAsync(String id, String addonId, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdApplications
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplicationsCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdApplicationsValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications(Async)");
        }

        return getOrganisationsIdAddonsAddonIdApplicationsCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdAddonsAddonIdApplications(String id, String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdAddonsAddonIdApplicationsWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdAddonsAddonIdApplicationsWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplicationsValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplicationsAsync(String id, String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplicationsValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdEnv
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnvCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdEnvValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv(Async)");
        }

        return getOrganisationsIdAddonsAddonIdEnvCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdAddonsAddonIdEnv(String id, String addonId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdAddonsAddonIdEnvWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdAddonsAddonIdEnvWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnvValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnvAsync(String id, String addonId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnvValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdSso
     * @param providerId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdSsoCall(String providerId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/sso"
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdSsoValidateBeforeCall(String providerId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonsAddonIdSso(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdSso(Async)");
        }

        return getOrganisationsIdAddonsAddonIdSsoCall(providerId, id, _callback);

    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @return AddonProviderSso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public AddonProviderSso getOrganisationsIdAddonsAddonIdSso(String providerId, String id) throws ApiException {
        ApiResponse<AddonProviderSso> localVarResp = getOrganisationsIdAddonsAddonIdSsoWithHttpInfo(providerId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AddonProviderSso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddonProviderSso> getOrganisationsIdAddonsAddonIdSsoWithHttpInfo(String providerId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdSsoValidateBeforeCall(providerId, id, null);
        Type localVarReturnType = new TypeToken<AddonProviderSso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdSsoAsync(String providerId, String id, final ApiCallback<AddonProviderSso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdSsoValidateBeforeCall(providerId, id, _callback);
        Type localVarReturnType = new TypeToken<AddonProviderSso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdTags
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTagsCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdTagsValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags(Async)");
        }

        return getOrganisationsIdAddonsAddonIdTagsCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdAddonsAddonIdTags(String id, String addonId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdAddonsAddonIdTagsWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdAddonsAddonIdTagsWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTagsValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTagsAsync(String id, String addonId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTagsValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplications
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplications(Async)");
        }

        return getOrganisationsIdApplicationsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplications(String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAsync(String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppId
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId(Async)");
        }

        return getOrganisationsIdApplicationsAppIdCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application getOrganisationsIdApplicationsAppId(String id, String appId) throws ApiException {
        ApiResponse<Application> localVarResp = getOrganisationsIdApplicationsAppIdWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> getOrganisationsIdApplicationsAppIdWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAsync(String id, String appId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddons
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddonsCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdApplicationsAppIdAddons(String id, String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdApplicationsAppIdAddonsWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdApplicationsAppIdAddonsWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsAsync(String id, String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddonsEnv
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnvCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnvValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddonsEnvCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getOrganisationsIdApplicationsAppIdAddonsEnv(String id, String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getOrganisationsIdApplicationsAppIdAddonsEnvWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getOrganisationsIdApplicationsAppIdAddonsEnvWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnvValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnvAsync(String id, String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnvValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependencies
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependenciesCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependenciesValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependenciesCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependencies(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependenciesWithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependenciesWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependenciesValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependenciesAsync(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependenciesValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependents
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependentsCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependentsValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependentsCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependents(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependentsWithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependentsWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependentsValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependentsAsync(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependentsValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDeployments
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeploymentsCall(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDeploymentsValidateBeforeCall(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDeploymentsCall(id, appId, limit, offset, action, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getOrganisationsIdApplicationsAppIdDeployments(String id, String appId, String limit, String offset, String action) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getOrganisationsIdApplicationsAppIdDeploymentsWithHttpInfo(id, appId, limit, offset, action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getOrganisationsIdApplicationsAppIdDeploymentsWithHttpInfo(String id, String appId, String limit, String offset, String action) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeploymentsValidateBeforeCall(id, appId, limit, offset, action, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeploymentsAsync(String id, String appId, String limit, String offset, String action, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeploymentsValidateBeforeCall(id, appId, limit, offset, action, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdEnv
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnvCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv(Async)");
        }

        return getOrganisationsIdApplicationsAppIdEnvCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdApplicationsAppIdEnv(String id, String appId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdApplicationsAppIdEnvWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdApplicationsAppIdEnvWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnvAsync(String id, String appId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdInstances
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstancesCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        return getOrganisationsIdApplicationsAppIdInstancesCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;AppInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<AppInstance> getOrganisationsIdApplicationsAppIdInstances(String id, String appId) throws ApiException {
        ApiResponse<List<AppInstance>> localVarResp = getOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;AppInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppInstance>> getOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstancesAsync(String id, String appId, final ApiCallback<List<AppInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdTags
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTagsCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdTagsValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags(Async)");
        }

        return getOrganisationsIdApplicationsAppIdTagsCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdApplicationsAppIdTags(String id, String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdApplicationsAppIdTagsWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdApplicationsAppIdTagsWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTagsValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTagsAsync(String id, String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTagsValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhosts
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhostsCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public List<Vhost> getOrganisationsIdApplicationsAppIdVhosts(String id, String appId) throws ApiException {
        ApiResponse<List<Vhost>> localVarResp = getOrganisationsIdApplicationsAppIdVhostsWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Vhost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vhost>> getOrganisationsIdApplicationsAppIdVhostsWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsAsync(String id, String appId, final ApiCallback<List<Vhost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhostsFavourite
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavouriteCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhostsFavouriteCall(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Vhost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public Vhost getOrganisationsIdApplicationsAppIdVhostsFavourite(String id, String appId) throws ApiException {
        ApiResponse<Vhost> localVarResp = getOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vhost> getOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavouriteAsync(String id, String appId, final ApiCallback<Vhost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumers
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumersValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumers(Async)");
        }

        return getOrganisationsIdConsumersCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public List<Consumer> getOrganisationsIdConsumers(String id) throws ApiException {
        ApiResponse<List<Consumer>> localVarResp = getOrganisationsIdConsumersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Consumer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Consumer>> getOrganisationsIdConsumersWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersAsync(String id, final ApiCallback<List<Consumer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumersKey
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeyCall(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumersKeyValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKey(Async)");
        }

        return getOrganisationsIdConsumersKeyCall(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return Consumer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public Consumer getOrganisationsIdConsumersKey(String id, String key) throws ApiException {
        ApiResponse<Consumer> localVarResp = getOrganisationsIdConsumersKeyWithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Consumer> getOrganisationsIdConsumersKeyWithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeyValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeyAsync(String id, String key, final ApiCallback<Consumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeyValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumersKeySecret
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeySecretCall(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}/secret"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumersKeySecretValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKeySecret(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKeySecret(Async)");
        }

        return getOrganisationsIdConsumersKeySecretCall(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public Secret getOrganisationsIdConsumersKeySecret(String id, String key) throws ApiException {
        ApiResponse<Secret> localVarResp = getOrganisationsIdConsumersKeySecretWithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Secret> getOrganisationsIdConsumersKeySecretWithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeySecretValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeySecretAsync(String id, String key, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeySecretValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumptions
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumptionsCall(String id, String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumptions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumptionsValidateBeforeCall(String id, String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumptions(Async)");
        }

        return getOrganisationsIdConsumptionsCall(id, appId, from, to, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return Conso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public Conso getOrganisationsIdConsumptions(String id, String appId, String from, String to) throws ApiException {
        ApiResponse<Conso> localVarResp = getOrganisationsIdConsumptionsWithHttpInfo(id, appId, from, to);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return ApiResponse&lt;Conso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conso> getOrganisationsIdConsumptionsWithHttpInfo(String id, String appId, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumptionsValidateBeforeCall(id, appId, from, to, null);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumptionsAsync(String id, String appId, String from, String to, final ApiCallback<Conso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumptionsValidateBeforeCall(id, appId, from, to, _callback);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdCredits
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdCreditsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/credits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdCreditsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdCredits(Async)");
        }

        return getOrganisationsIdCreditsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Credits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public Credits getOrganisationsIdCredits(String id) throws ApiException {
        ApiResponse<Credits> localVarResp = getOrganisationsIdCreditsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Credits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credits> getOrganisationsIdCreditsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdCreditsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdCreditsAsync(String id, final ApiCallback<Credits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdCreditsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdDeployments
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdDeploymentsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdDeploymentsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdDeployments(Async)");
        }

        return getOrganisationsIdDeploymentsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return DeploymentSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentSummary getOrganisationsIdDeployments(String id) throws ApiException {
        ApiResponse<DeploymentSummary> localVarResp = getOrganisationsIdDeploymentsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DeploymentSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentSummary> getOrganisationsIdDeploymentsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdDeploymentsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeploymentSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdDeploymentsAsync(String id, final ApiCallback<DeploymentSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdDeploymentsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeploymentSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdInstances
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdInstancesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdInstancesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdInstances(Async)");
        }

        return getOrganisationsIdInstancesCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganisationsIdInstances(String id) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganisationsIdInstancesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganisationsIdInstancesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdInstancesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdInstancesAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdInstancesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdMembers
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdMembersCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdMembersValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdMembers(Async)");
        }

        return getOrganisationsIdMembersCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getOrganisationsIdMembers(String id) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getOrganisationsIdMembersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getOrganisationsIdMembersWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdMembersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdMembersAsync(String id, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdMembersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentInfo
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentInfoCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payment-info"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentInfoValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentInfo(Async)");
        }

        return getOrganisationsIdPaymentInfoCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentInfo(String id) throws ApiException {
        getOrganisationsIdPaymentInfoWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentInfoWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentInfoValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentInfoAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentInfoValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillings
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillingsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillings(Async)");
        }

        return getOrganisationsIdPaymentsBillingsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillings(String id) throws ApiException {
        getOrganisationsIdPaymentsBillingsWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillingsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillingsBid
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillingsBidValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBid(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBid(Async)");
        }

        return getOrganisationsIdPaymentsBillingsBidCall(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillingsBid(String id, String bid) throws ApiException {
        getOrganisationsIdPaymentsBillingsBidWithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillingsBidWithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidAsync(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillingsBidPdf
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdfCall(String id, String bid, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}.pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdfValidateBeforeCall(String id, String bid, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBidPdf(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBidPdf(Async)");
        }

        return getOrganisationsIdPaymentsBillingsBidPdfCall(id, bid, token, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillingsBidPdf(String id, String bid, String token) throws ApiException {
        getOrganisationsIdPaymentsBillingsBidPdfWithHttpInfo(id, bid, token);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillingsBidPdfWithHttpInfo(String id, String bid, String token) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidPdfValidateBeforeCall(id, bid, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdfAsync(String id, String bid, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidPdfValidateBeforeCall(id, bid, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsFullPricePrice
     * @param id  (required)
     * @param price  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsFullPricePriceCall(String id, String price, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/fullprice/{price}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "price" + "}", localVarApiClient.escapeString(price.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsFullPricePriceValidateBeforeCall(String id, String price, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsFullPricePrice(Async)");
        }

        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling getOrganisationsIdPaymentsFullPricePrice(Async)");
        }

        return getOrganisationsIdPaymentsFullPricePriceCall(id, price, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param price  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsFullPricePrice(String id, String price) throws ApiException {
        getOrganisationsIdPaymentsFullPricePriceWithHttpInfo(id, price);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param price  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsFullPricePriceWithHttpInfo(String id, String price) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsFullPricePriceValidateBeforeCall(id, price, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param price  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsFullPricePriceAsync(String id, String price, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsFullPricePriceValidateBeforeCall(id, price, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPasswordForgotten
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPasswordForgottenForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordForgottenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/password_forgotten";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPasswordForgottenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPasswordForgottenCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPasswordForgottenForm </td><td>  -  </td></tr>
     </table>
     */
    public void getPasswordForgotten() throws ApiException {
        getPasswordForgottenWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPasswordForgottenForm </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPasswordForgottenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPasswordForgottenValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPasswordForgottenForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordForgottenAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPasswordForgottenValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPasswordForgottenKey
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmPasswordResetRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordForgottenKeyCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/password_forgotten/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPasswordForgottenKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getPasswordForgottenKey(Async)");
        }

        return getPasswordForgottenKeyCall(key, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmPasswordResetRequest </td><td>  -  </td></tr>
     </table>
     */
    public void getPasswordForgottenKey(String key) throws ApiException {
        getPasswordForgottenKeyWithHttpInfo(key);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmPasswordResetRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPasswordForgottenKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getPasswordForgottenKeyValidateBeforeCall(key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> confirmPasswordResetRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordForgottenKeyAsync(String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPasswordForgottenKeyValidateBeforeCall(key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentsCouponsName
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCoupon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCouponsNameCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/coupons/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsCouponsNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPaymentsCouponsName(Async)");
        }

        return getPaymentsCouponsNameCall(name, _callback);

    }

    /**
     * 
     * 
     * @param name  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCoupon </td><td>  -  </td></tr>
     </table>
     */
    public void getPaymentsCouponsName(String name) throws ApiException {
        getPaymentsCouponsNameWithHttpInfo(name);
    }

    /**
     * 
     * 
     * @param name  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCoupon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPaymentsCouponsNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getPaymentsCouponsNameValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCoupon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsCouponsNameAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsCouponsNameValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentsProviders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePaymentProviders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsProvidersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsProvidersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPaymentsProvidersCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;PaymentProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePaymentProviders </td><td>  -  </td></tr>
     </table>
     */
    public List<PaymentProvider> getPaymentsProviders() throws ApiException {
        ApiResponse<List<PaymentProvider>> localVarResp = getPaymentsProvidersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;PaymentProvider&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePaymentProviders </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PaymentProvider>> getPaymentsProvidersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPaymentsProvidersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PaymentProvider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePaymentProviders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsProvidersAsync(final ApiCallback<List<PaymentProvider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsProvidersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PaymentProvider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentsTokensStripe
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getStripeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsTokensStripeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/tokens/stripe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentsTokensStripeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPaymentsTokensStripeCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getStripeToken </td><td>  -  </td></tr>
     </table>
     */
    public void getPaymentsTokensStripe() throws ApiException {
        getPaymentsTokensStripeWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getStripeToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPaymentsTokensStripeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPaymentsTokensStripeValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getStripeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentsTokensStripeAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentsTokensStripeValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsAddonProviders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProviders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAddonProvidersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/addonproviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsAddonProvidersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsAddonProvidersCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProviders </td><td>  -  </td></tr>
     </table>
     */
    public List<Provider> getProductsAddonProviders() throws ApiException {
        ApiResponse<List<Provider>> localVarResp = getProductsAddonProvidersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Provider&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProviders </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Provider>> getProductsAddonProvidersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsAddonProvidersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProviders </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAddonProvidersAsync(final ApiCallback<List<Provider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsAddonProvidersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsAddonProvidersProviderId
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAddonProvidersProviderIdCall(String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/addonproviders/{provider_id}"
            .replace("{" + "provider_id" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsAddonProvidersProviderIdValidateBeforeCall(String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getProductsAddonProvidersProviderId(Async)");
        }

        return getProductsAddonProvidersProviderIdCall(providerId, _callback);

    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProvider </td><td>  -  </td></tr>
     </table>
     */
    public Provider getProductsAddonProvidersProviderId(String providerId) throws ApiException {
        ApiResponse<Provider> localVarResp = getProductsAddonProvidersProviderIdWithHttpInfo(providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> getProductsAddonProvidersProviderIdWithHttpInfo(String providerId) throws ApiException {
        okhttp3.Call localVarCall = getProductsAddonProvidersProviderIdValidateBeforeCall(providerId, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAddonProvidersProviderIdAsync(String providerId, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsAddonProvidersProviderIdValidateBeforeCall(providerId, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsCountriesCall(_callback);

    }

    /**
     * 
     * 
     * @return Country
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountries </td><td>  -  </td></tr>
     </table>
     */
    public Country getProductsCountries() throws ApiException {
        ApiResponse<Country> localVarResp = getProductsCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Country> getProductsCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCountriesAsync(final ApiCallback<Country> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsCountrycodes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountryCodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCountrycodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/countrycodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsCountrycodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsCountrycodesCall(_callback);

    }

    /**
     * 
     * 
     * @return Country
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountryCodes </td><td>  -  </td></tr>
     </table>
     */
    public Country getProductsCountrycodes() throws ApiException {
        ApiResponse<Country> localVarResp = getProductsCountrycodesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountryCodes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Country> getProductsCountrycodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsCountrycodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCountryCodes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCountrycodesAsync(final ApiCallback<Country> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsCountrycodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Country>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsInstances
     * @param _for  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsInstancesCall(String _for, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_for != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("for", _for));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsInstancesValidateBeforeCall(String _for, final ApiCallback _callback) throws ApiException {
        return getProductsInstancesCall(_for, _callback);

    }

    /**
     * 
     * 
     * @param _for  (optional)
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> getProductsInstances(String _for) throws ApiException {
        ApiResponse<List<Instance>> localVarResp = getProductsInstancesWithHttpInfo(_for);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param _for  (optional)
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> getProductsInstancesWithHttpInfo(String _for) throws ApiException {
        okhttp3.Call localVarCall = getProductsInstancesValidateBeforeCall(_for, null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _for  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsInstancesAsync(String _for, final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsInstancesValidateBeforeCall(_for, _callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsInstancesTypeVersion
     * @param type  (required)
     * @param version  (required)
     * @param _for  (optional)
     * @param app  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsInstancesTypeVersionCall(String type, String version, String _for, String app, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/instances/{type}-{version}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_for != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("for", _for));
        }

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsInstancesTypeVersionValidateBeforeCall(String type, String version, String _for, String app, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getProductsInstancesTypeVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getProductsInstancesTypeVersion(Async)");
        }

        return getProductsInstancesTypeVersionCall(type, version, _for, app, _callback);

    }

    /**
     * 
     * 
     * @param type  (required)
     * @param version  (required)
     * @param _for  (optional)
     * @param app  (optional)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstance </td><td>  -  </td></tr>
     </table>
     */
    public Instance getProductsInstancesTypeVersion(String type, String version, String _for, String app) throws ApiException {
        ApiResponse<Instance> localVarResp = getProductsInstancesTypeVersionWithHttpInfo(type, version, _for, app);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param type  (required)
     * @param version  (required)
     * @param _for  (optional)
     * @param app  (optional)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> getProductsInstancesTypeVersionWithHttpInfo(String type, String version, String _for, String app) throws ApiException {
        okhttp3.Call localVarCall = getProductsInstancesTypeVersionValidateBeforeCall(type, version, _for, app, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param type  (required)
     * @param version  (required)
     * @param _for  (optional)
     * @param app  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableInstance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsInstancesTypeVersionAsync(String type, String version, String _for, String app, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsInstancesTypeVersionValidateBeforeCall(type, version, _for, app, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsPackages
     * @param coupon  (optional)
     * @param orgaId  (optional)
     * @param currency  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePackages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsPackagesCall(String coupon, String orgaId, String currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (coupon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coupon", coupon));
        }

        if (orgaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orgaId", orgaId));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsPackagesValidateBeforeCall(String coupon, String orgaId, String currency, final ApiCallback _callback) throws ApiException {
        return getProductsPackagesCall(coupon, orgaId, currency, _callback);

    }

    /**
     * 
     * 
     * @param coupon  (optional)
     * @param orgaId  (optional)
     * @param currency  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePackages </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsPackages(String coupon, String orgaId, String currency) throws ApiException {
        getProductsPackagesWithHttpInfo(coupon, orgaId, currency);
    }

    /**
     * 
     * 
     * @param coupon  (optional)
     * @param orgaId  (optional)
     * @param currency  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePackages </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsPackagesWithHttpInfo(String coupon, String orgaId, String currency) throws ApiException {
        okhttp3.Call localVarCall = getProductsPackagesValidateBeforeCall(coupon, orgaId, currency, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param coupon  (optional)
     * @param orgaId  (optional)
     * @param currency  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailablePackages </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsPackagesAsync(String coupon, String orgaId, String currency, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsPackagesValidateBeforeCall(coupon, orgaId, currency, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsPrices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getExchangeRates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsPricesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsPricesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsPricesCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getExchangeRates </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsPrices() throws ApiException {
        getProductsPricesWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getExchangeRates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsPricesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsPricesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getExchangeRates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsPricesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsPricesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsZones
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getZones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsZonesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/zones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsZonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsZonesCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getZones </td><td>  -  </td></tr>
     </table>
     */
    public List<Zone> getProductsZones() throws ApiException {
        ApiResponse<List<Zone>> localVarResp = getProductsZonesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Zone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getZones </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Zone>> getProductsZonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsZonesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Zone>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getZones </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsZonesAsync(final ApiCallback<List<Zone>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsZonesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Zone>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelf
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfCall(_callback);

    }

    /**
     * 
     * Get information about yourself
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public User getSelf() throws ApiException {
        ApiResponse<User> localVarResp = getSelfWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about yourself
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getSelfWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about yourself
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAsync(final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddons
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfAddonsCall(_callback);

    }

    /**
     * Addon
     * Get all the addons
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getSelfAddons() throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getSelfAddonsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Addon
     * Get all the addons
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getSelfAddonsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Addon (asynchronously)
     * Get all the addons
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAsync(final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonId
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonId(Async)");
        }

        return getSelfAddonsAddonIdCall(addonId, _callback);

    }

    /**
     * Specific addon
     * Get a specific addon
     * @param addonId  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon getSelfAddonsAddonId(String addonId) throws ApiException {
        ApiResponse<Addon> localVarResp = getSelfAddonsAddonIdWithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * Specific addon
     * Get a specific addon
     * @param addonId  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> getSelfAddonsAddonIdWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Specific addon (asynchronously)
     * Get a specific addon
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdAsync(String addonId, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdApplications
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplicationsCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/applications"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdApplicationsValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdApplications(Async)");
        }

        return getSelfAddonsAddonIdApplicationsCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfAddonsAddonIdApplications(String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfAddonsAddonIdApplicationsWithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfAddonsAddonIdApplicationsWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplicationsValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdApplicationsAsync(String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdApplicationsValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdEnv
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdEnvCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/env"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdEnvValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdEnv(Async)");
        }

        return getSelfAddonsAddonIdEnvCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getSelfAddonsAddonIdEnv(String addonId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getSelfAddonsAddonIdEnvWithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getSelfAddonsAddonIdEnvWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdEnvValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdEnvAsync(String addonId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdEnvValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdSso
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdSsoCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/sso"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdSsoValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdSso(Async)");
        }

        return getSelfAddonsAddonIdSsoCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return Sso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public Sso getSelfAddonsAddonIdSso(String addonId) throws ApiException {
        ApiResponse<Sso> localVarResp = getSelfAddonsAddonIdSsoWithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Sso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sso> getSelfAddonsAddonIdSsoWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdSsoValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdSsoAsync(String addonId, final ApiCallback<Sso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdSsoValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfAddonsAddonIdTags
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdTagsCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfAddonsAddonIdTagsValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getSelfAddonsAddonIdTags(Async)");
        }

        return getSelfAddonsAddonIdTagsCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getSelfAddonsAddonIdTags(String addonId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getSelfAddonsAddonIdTagsWithHttpInfo(addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getSelfAddonsAddonIdTagsWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getSelfAddonsAddonIdTagsValidateBeforeCall(addonId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfAddonsAddonIdTagsAsync(String addonId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfAddonsAddonIdTagsValidateBeforeCall(addonId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplications
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfApplicationsCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplications() throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplicationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplicationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAsync(final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppId
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppId(Async)");
        }

        return getSelfApplicationsAppIdCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application getSelfApplicationsAppId(String appId) throws ApiException {
        ApiResponse<Application> localVarResp = getSelfApplicationsAppIdWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> getSelfApplicationsAppIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAsync(String appId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddons
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddonsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddons(Async)");
        }

        return getSelfApplicationsAppIdAddonsCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getSelfApplicationsAppIdAddons(String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getSelfApplicationsAppIdAddonsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getSelfApplicationsAppIdAddonsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsAsync(String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdAddonsEnv
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnvCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdAddonsEnvValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdAddonsEnv(Async)");
        }

        return getSelfApplicationsAppIdAddonsEnvCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getSelfApplicationsAppIdAddonsEnv(String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getSelfApplicationsAppIdAddonsEnvWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getSelfApplicationsAppIdAddonsEnvWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnvValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdAddonsEnvAsync(String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdAddonsEnvValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependencies
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependenciesValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependencies(Async)");
        }

        return getSelfApplicationsAppIdDependenciesCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplicationsAppIdDependencies(String appId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplicationsAppIdDependenciesWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplicationsAppIdDependenciesWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesAsync(String appId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependenciesDependencyId
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyIdCall(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling getSelfApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling getSelfApplicationsAppIdDependenciesDependencyId(Async)");
        }

        return getSelfApplicationsAppIdDependenciesDependencyIdCall(dependencyId, appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfApplicationsAppIdDependenciesDependencyId(String dependencyId, String appId, WannabeApplication wannabeApplication) throws ApiException {
        getSelfApplicationsAppIdDependenciesDependencyIdWithHttpInfo(dependencyId, appId, wannabeApplication);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfApplicationsAppIdDependenciesDependencyIdWithHttpInfo(String dependencyId, String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependenciesDependencyIdAsync(String dependencyId, String appId, WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDependents
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependentsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDependentsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDependents(Async)");
        }

        return getSelfApplicationsAppIdDependentsCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getSelfApplicationsAppIdDependents(String appId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getSelfApplicationsAppIdDependentsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getSelfApplicationsAppIdDependentsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependentsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDependentsAsync(String appId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDependentsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdDeployments
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDeploymentsCall(String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdDeploymentsValidateBeforeCall(String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdDeployments(Async)");
        }

        return getSelfApplicationsAppIdDeploymentsCall(appId, limit, offset, action, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getSelfApplicationsAppIdDeployments(String appId, String limit, String offset, String action) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getSelfApplicationsAppIdDeploymentsWithHttpInfo(appId, limit, offset, action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getSelfApplicationsAppIdDeploymentsWithHttpInfo(String appId, String limit, String offset, String action) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdDeploymentsValidateBeforeCall(appId, limit, offset, action, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeployments </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdDeploymentsAsync(String appId, String limit, String offset, String action, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdDeploymentsValidateBeforeCall(appId, limit, offset, action, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdEnv
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdEnvCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdEnvValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdEnv(Async)");
        }

        return getSelfApplicationsAppIdEnvCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getSelfApplicationsAppIdEnv(String appId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getSelfApplicationsAppIdEnvWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getSelfApplicationsAppIdEnvWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdEnvValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdEnvAsync(String appId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdEnvValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdInstances
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdInstancesCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdInstancesValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdInstances(Async)");
        }

        return getSelfApplicationsAppIdInstancesCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> getSelfApplicationsAppIdInstances(String appId) throws ApiException {
        ApiResponse<List<Instance>> localVarResp = getSelfApplicationsAppIdInstancesWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> getSelfApplicationsAppIdInstancesWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdInstancesValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdInstancesAsync(String appId, final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdInstancesValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdTags
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdTagsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdTagsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdTags(Async)");
        }

        return getSelfApplicationsAppIdTagsCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getSelfApplicationsAppIdTags(String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getSelfApplicationsAppIdTagsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getSelfApplicationsAppIdTagsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdTagsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdTagsAsync(String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdTagsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdVhosts
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdVhostsValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhosts(Async)");
        }

        return getSelfApplicationsAppIdVhostsCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public List<Vhost> getSelfApplicationsAppIdVhosts(String appId) throws ApiException {
        ApiResponse<List<Vhost>> localVarResp = getSelfApplicationsAppIdVhostsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Vhost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vhost>> getSelfApplicationsAppIdVhostsWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsAsync(String appId, final ApiCallback<List<Vhost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfApplicationsAppIdVhostsFavourite
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsFavouriteCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSelfApplicationsAppIdVhostsFavourite(Async)");
        }

        return getSelfApplicationsAppIdVhostsFavouriteCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return Vhost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public Vhost getSelfApplicationsAppIdVhostsFavourite(String appId) throws ApiException {
        ApiResponse<Vhost> localVarResp = getSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vhost> getSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfApplicationsAppIdVhostsFavouriteAsync(String appId, final ApiCallback<Vhost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfConfirmationEmail
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConfirmationEmail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConfirmationEmailCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/confirmation_email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfConfirmationEmailValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfConfirmationEmailCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConfirmationEmail </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfConfirmationEmail() throws ApiException {
        getSelfConfirmationEmailWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConfirmationEmail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfConfirmationEmailWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfConfirmationEmailValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConfirmationEmail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConfirmationEmailAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfConfirmationEmailValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfConsumers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/consumers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfConsumersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfConsumersCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public List<Consumer> getSelfConsumers() throws ApiException {
        ApiResponse<List<Consumer>> localVarResp = getSelfConsumersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Consumer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Consumer>> getSelfConsumersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfConsumersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersAsync(final ApiCallback<List<Consumer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfConsumersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfConsumersKey
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersKeyCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/consumers/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfConsumersKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSelfConsumersKey(Async)");
        }

        return getSelfConsumersKeyCall(key, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @return Consumer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public Consumer getSelfConsumersKey(String key) throws ApiException {
        ApiResponse<Consumer> localVarResp = getSelfConsumersKeyWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param key  (required)
     * @return ApiResponse&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Consumer> getSelfConsumersKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getSelfConsumersKeyValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersKeyAsync(String key, final ApiCallback<Consumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfConsumersKeyValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfConsumersKeySecret
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersKeySecretCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/consumers/{key}/secret"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfConsumersKeySecretValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSelfConsumersKeySecret(Async)");
        }

        return getSelfConsumersKeySecretCall(key, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public Secret getSelfConsumersKeySecret(String key) throws ApiException {
        ApiResponse<Secret> localVarResp = getSelfConsumersKeySecretWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param key  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Secret> getSelfConsumersKeySecretWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getSelfConsumersKeySecretValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumersKeySecretAsync(String key, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfConsumersKeySecretValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfConsumptions
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumptionsCall(String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/consumptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfConsumptionsValidateBeforeCall(String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        return getSelfConsumptionsCall(appId, from, to, _callback);

    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return Conso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumptions </td><td>  -  </td></tr>
     </table>
     */
    public Conso getSelfConsumptions(String appId, String from, String to) throws ApiException {
        ApiResponse<Conso> localVarResp = getSelfConsumptionsWithHttpInfo(appId, from, to);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return ApiResponse&lt;Conso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumptions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conso> getSelfConsumptionsWithHttpInfo(String appId, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = getSelfConsumptionsValidateBeforeCall(appId, from, to, null);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfConsumptionsAsync(String appId, String from, String to, final ApiCallback<Conso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfConsumptionsValidateBeforeCall(appId, from, to, _callback);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfCredits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfCreditsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/credits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfCreditsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfCreditsCall(_callback);

    }

    /**
     * 
     * 
     * @return Credits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public Credits getSelfCredits() throws ApiException {
        ApiResponse<Credits> localVarResp = getSelfCreditsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Credits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credits> getSelfCreditsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfCreditsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfCreditsAsync(final ApiCallback<Credits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfCreditsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfEmails
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEmailAddresses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfEmailsCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEmailAddresses </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getSelfEmails() throws ApiException {
        ApiResponse<List<String>> localVarResp = getSelfEmailsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEmailAddresses </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getSelfEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfEmailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEmailAddresses </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfEmailsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfEmailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfId
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfIdCall(_callback);

    }

    /**
     * 
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getId </td><td>  -  </td></tr>
     </table>
     */
    public String getSelfId() throws ApiException {
        ApiResponse<String> localVarResp = getSelfIdWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getId </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getSelfIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfIdValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getId </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfIdAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfIdValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfInstances
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfInstancesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfInstancesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfInstancesCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> getSelfInstances() throws ApiException {
        ApiResponse<List<Instance>> localVarResp = getSelfInstancesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> getSelfInstancesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfInstancesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfInstancesAsync(final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfInstancesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSshKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfKeysCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSshKeys </td><td>  -  </td></tr>
     </table>
     */
    public List<Key> getSelfKeys() throws ApiException {
        ApiResponse<List<Key>> localVarResp = getSelfKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Key&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSshKeys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Key>> getSelfKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSshKeys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfKeysAsync(final ApiCallback<List<Key>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Key>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payment-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfPaymentInfoCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentInfo() throws ApiException {
        getSelfPaymentInfoWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentInfoValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentInfoAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentInfoValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentsBillings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentsBillingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfPaymentsBillingsCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentsBillings() throws ApiException {
        getSelfPaymentsBillingsWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentsBillingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentsBillingsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentsBillingsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentsBillingsBid
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsBidCall(String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings/{bid}"
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentsBillingsBidValidateBeforeCall(String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBid(Async)");
        }

        return getSelfPaymentsBillingsBidCall(bid, _callback);

    }

    /**
     * 
     * 
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentsBillingsBid(String bid) throws ApiException {
        getSelfPaymentsBillingsBidWithHttpInfo(bid);
    }

    /**
     * 
     * 
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentsBillingsBidWithHttpInfo(String bid) throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentsBillingsBidValidateBeforeCall(bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsBidAsync(String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentsBillingsBidValidateBeforeCall(bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentsBillingsBidPdf
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsBidPdfCall(String bid, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings/{bid}.pdf"
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentsBillingsBidPdfValidateBeforeCall(String bid, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getSelfPaymentsBillingsBidPdf(Async)");
        }

        return getSelfPaymentsBillingsBidPdfCall(bid, token, _callback);

    }

    /**
     * 
     * 
     * @param bid  (required)
     * @param token  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentsBillingsBidPdf(String bid, String token) throws ApiException {
        getSelfPaymentsBillingsBidPdfWithHttpInfo(bid, token);
    }

    /**
     * 
     * 
     * @param bid  (required)
     * @param token  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentsBillingsBidPdfWithHttpInfo(String bid, String token) throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentsBillingsBidPdfValidateBeforeCall(bid, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsBillingsBidPdfAsync(String bid, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentsBillingsBidPdfValidateBeforeCall(bid, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentsFullpricePrice
     * @param price  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsFullpricePriceCall(String price, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/fullprice/{price}"
            .replace("{" + "price" + "}", localVarApiClient.escapeString(price.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentsFullpricePriceValidateBeforeCall(String price, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling getSelfPaymentsFullpricePrice(Async)");
        }

        return getSelfPaymentsFullpricePriceCall(price, _callback);

    }

    /**
     * 
     * 
     * @param price  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentsFullpricePrice(String price) throws ApiException {
        getSelfPaymentsFullpricePriceWithHttpInfo(price);
    }

    /**
     * 
     * 
     * @param price  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentsFullpricePriceWithHttpInfo(String price) throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentsFullpricePriceValidateBeforeCall(price, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param price  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsFullpricePriceAsync(String price, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentsFullpricePriceValidateBeforeCall(price, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfPaymentsMethods
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserPaymentMethods </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsMethodsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfPaymentsMethodsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfPaymentsMethodsCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserPaymentMethods </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfPaymentsMethods() throws ApiException {
        getSelfPaymentsMethodsWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserPaymentMethods </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfPaymentsMethodsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfPaymentsMethodsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserPaymentMethods </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfPaymentsMethodsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfPaymentsMethodsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSelfTokens </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfTokensCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSelfTokensCall(_callback);

    }

    /**
     * 
     * 
     * @return List&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSelfTokens </td><td>  -  </td></tr>
     </table>
     */
    public List<Token> getSelfTokens() throws ApiException {
        ApiResponse<List<Token>> localVarResp = getSelfTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;Token&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSelfTokens </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Token>> getSelfTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSelfTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSelfTokens </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfTokensAsync(final ApiCallback<List<Token>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Token>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSelfValidateEmail
     * @param validationKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateEmail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfValidateEmailCall(String validationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/validate_email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validationKey", validationKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSelfValidateEmailValidateBeforeCall(String validationKey, final ApiCallback _callback) throws ApiException {
        return getSelfValidateEmailCall(validationKey, _callback);

    }

    /**
     * 
     * 
     * @param validationKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateEmail </td><td>  -  </td></tr>
     </table>
     */
    public void getSelfValidateEmail(String validationKey) throws ApiException {
        getSelfValidateEmailWithHttpInfo(validationKey);
    }

    /**
     * 
     * 
     * @param validationKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateEmail </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSelfValidateEmailWithHttpInfo(String validationKey) throws ApiException {
        okhttp3.Call localVarCall = getSelfValidateEmailValidateBeforeCall(validationKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param validationKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> validateEmail </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSelfValidateEmailAsync(String validationKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSelfValidateEmailValidateBeforeCall(validationKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSummary
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSummary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSummaryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSummaryCall(_callback);

    }

    /**
     * 
     * 
     * @return Summary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSummary </td><td>  -  </td></tr>
     </table>
     */
    public Summary getSummary() throws ApiException {
        ApiResponse<Summary> localVarResp = getSummaryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Summary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSummary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Summary> getSummaryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Summary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSummary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSummaryAsync(final ApiCallback<Summary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSummaryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Summary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersId
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUsersId(Async)");
        }

        return getUsersIdCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public User getUsersId(String id) throws ApiException {
        ApiResponse<User> localVarResp = getUsersIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUsersIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUsersIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdAsync(String id, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersIdApplications
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdApplicationsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersIdApplicationsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUsersIdApplications(Async)");
        }

        return getUsersIdApplicationsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getUsersIdApplications(String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getUsersIdApplicationsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getUsersIdApplicationsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUsersIdApplicationsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersIdApplicationsAsync(String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersIdApplicationsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersUserIdGitInfo
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGitInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersUserIdGitInfoCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/git-info"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersUserIdGitInfoValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUsersUserIdGitInfo(Async)");
        }

        return getUsersUserIdGitInfoCall(userId, _callback);

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGitInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getUsersUserIdGitInfo(String userId) throws ApiException {
        getUsersUserIdGitInfoWithHttpInfo(userId);
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGitInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getUsersUserIdGitInfoWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUsersUserIdGitInfoValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getGitInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersUserIdGitInfoAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersUserIdGitInfoValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVendorApps
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsCall(Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorAppsValidateBeforeCall(Integer offset, final ApiCallback _callback) throws ApiException {
        return getVendorAppsCall(offset, _callback);

    }

    /**
     * 
     * 
     * @param offset  (optional)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getVendorApps(Integer offset) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getVendorAppsWithHttpInfo(offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param offset  (optional)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getVendorAppsWithHttpInfo(Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getVendorAppsValidateBeforeCall(offset, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsAsync(Integer offset, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorAppsValidateBeforeCall(offset, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVendorAppsAddonId
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsAddonIdCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorAppsAddonIdValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getVendorAppsAddonId(Async)");
        }

        return getVendorAppsAddonIdCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getVendorAppsAddonId(String addonId) throws ApiException {
        getVendorAppsAddonIdWithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVendorAppsAddonIdWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getVendorAppsAddonIdValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsAddonIdAsync(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorAppsAddonIdValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupMembers
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembersCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupMembersValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers(Async)");
        }

        return listNetworkGroupMembersCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> listNetworkGroupMembers(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = listNetworkGroupMembersWithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> listNetworkGroupMembersWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupMembersValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List members (asynchronously)
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembersAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupMembersValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupPeers
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeersCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupPeersValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers(Async)");
        }

        return listNetworkGroupPeersCall(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroupPeers(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroupPeersWithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroupPeersWithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupPeersValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List peers (asynchronously)
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeersAsync(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupPeersValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroups
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupsCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupsValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroups(Async)");
        }

        return listNetworkGroupsCall(ownerId, body, _callback);

    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroups(String ownerId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroupsWithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroupsWithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupsValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Network Groups (asynchronously)
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupsAsync(String ownerId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupsValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsGet(Async)");
        }

        return logsAppIdDrainsGetCall(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsGet(String appId) throws ApiException {
        logsAppIdDrainsGetWithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsIdOrUrlDelete
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlDeleteCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlDelete(Async)");
        }

        return logsAppIdDrainsIdOrUrlDeleteCall(appId, _callback);

    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsIdOrUrlDelete(String appId) throws ApiException {
        logsAppIdDrainsIdOrUrlDeleteWithHttpInfo(appId);
    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsIdOrUrlDeleteWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlDeleteAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsIdOrUrlGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsIdOrUrlGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsIdOrUrlGet(Async)");
        }

        return logsAppIdDrainsIdOrUrlGetCall(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsIdOrUrlGet(String appId) throws ApiException {
        logsAppIdDrainsIdOrUrlGetWithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsIdOrUrlGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsIdOrUrlGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsIdOrUrlGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdDrainsPost
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsPostCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdDrainsPostValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdDrainsPost(Async)");
        }

        return logsAppIdDrainsPostCall(appId, _callback);

    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdDrainsPost(String appId) throws ApiException {
        logsAppIdDrainsPostWithHttpInfo(appId);
    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdDrainsPostWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdDrainsPostValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdDrainsPostAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdDrainsPostValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdGet
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdGetCall(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployment_id", deploymentId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdGetValidateBeforeCall(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdGet(Async)");
        }

        return logsAppIdGetCall(appId, limit, order, after, before, filter, deploymentId, _callback);

    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdGet(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId) throws ApiException {
        logsAppIdGetWithHttpInfo(appId, limit, order, after, before, filter, deploymentId);
    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdGetWithHttpInfo(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdGetValidateBeforeCall(appId, limit, order, after, before, filter, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs for a given application
     * @param appId Application Id (required)
     * @param limit Number of lines to return (optional)
     * @param order Logs order (optional, default to desc)
     * @param after Lowest bound for logs date, ISO 8601 (optional)
     * @param before Highest bounds for logs date, ISO 8601 (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdGetAsync(String appId, Integer limit, String order, OffsetDateTime after, OffsetDateTime before, String filter, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdGetValidateBeforeCall(appId, limit, order, after, before, filter, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsAppIdSseGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdSseGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{appId}/sse"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsAppIdSseGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsAppIdSseGet(Async)");
        }

        return logsAppIdSseGetCall(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsAppIdSseGet(String appId) throws ApiException {
        logsAppIdSseGetWithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsAppIdSseGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsAppIdSseGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a sse connection. To have authorization, you have to add &#x60;authorization&#x3D;oAuthAuthorizationString&#x60; as query param.
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsAppIdSseGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsAppIdSseGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsDrainsDrainIdPut
     * @param drainId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsDrainIdPutCall(String drainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/drains/{drainId}"
            .replace("{" + "drainId" + "}", localVarApiClient.escapeString(drainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsDrainsDrainIdPutValidateBeforeCall(String drainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'drainId' is set
        if (drainId == null) {
            throw new ApiException("Missing the required parameter 'drainId' when calling logsDrainsDrainIdPut(Async)");
        }

        return logsDrainsDrainIdPutCall(drainId, _callback);

    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsDrainsDrainIdPut(String drainId) throws ApiException {
        logsDrainsDrainIdPutWithHttpInfo(drainId);
    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsDrainsDrainIdPutWithHttpInfo(String drainId) throws ApiException {
        okhttp3.Call localVarCall = logsDrainsDrainIdPutValidateBeforeCall(drainId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param drainId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsDrainIdPutAsync(String drainId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsDrainsDrainIdPutValidateBeforeCall(drainId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsDrainsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/drains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsDrainsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return logsDrainsGetCall(_callback);

    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsDrainsGet() throws ApiException {
        logsDrainsGetWithHttpInfo();
    }

    /**
     * 
     * Fetch all the logs drains (ccadmin dedicated route)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsDrainsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = logsDrainsGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch all the logs drains (ccadmin dedicated route)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsDrainsGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsDrainsGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogsChunkedAppIdGet
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsChunkedAppIdGetCall(String appId, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/logs-chunked/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogsChunkedAppIdGetValidateBeforeCall(String appId, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsLogsChunkedAppIdGet(Async)");
        }

        return logsLogsChunkedAppIdGetCall(appId, download, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsLogsChunkedAppIdGet(String appId, Boolean download) throws ApiException {
        logsLogsChunkedAppIdGetWithHttpInfo(appId, download);
    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsLogsChunkedAppIdGetWithHttpInfo(String appId, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = logsLogsChunkedAppIdGetValidateBeforeCall(appId, download, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Application Id (required)
     * @param download Tell the user-agent to download the body as a file (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsChunkedAppIdGetAsync(String appId, Boolean download, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogsChunkedAppIdGetValidateBeforeCall(appId, download, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsLogsSocketAppIdGet
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsSocketAppIdGetCall(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/logs-socket/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployment_id", deploymentId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsLogsSocketAppIdGetValidateBeforeCall(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsLogsSocketAppIdGet(Async)");
        }

        return logsLogsSocketAppIdGetCall(appId, since, filter, deploymentId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsLogsSocketAppIdGet(String appId, OffsetDateTime since, String filter, String deploymentId) throws ApiException {
        logsLogsSocketAppIdGetWithHttpInfo(appId, since, filter, deploymentId);
    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsLogsSocketAppIdGetWithHttpInfo(String appId, OffsetDateTime since, String filter, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = logsLogsSocketAppIdGetValidateBeforeCall(appId, since, filter, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Application Id (required)
     * @param since Only fetch logs newer than this (ISO-8601 formatted) date (optional)
     * @param filter A pattern to filter with (optional)
     * @param deploymentId Only fetch logs emitted by this deployment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsLogsSocketAppIdGetAsync(String appId, OffsetDateTime since, String filter, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsLogsSocketAppIdGetValidateBeforeCall(appId, since, filter, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsSocketAppIdGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsSocketAppIdGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs-socket/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsSocketAppIdGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling logsSocketAppIdGet(Async)");
        }

        return logsSocketAppIdGetCall(appId, _callback);

    }

    /**
     * 
     * WebSocket to get logs for :appID. Optional queryString arg bind_to_es&#x3D;true to bind WS on log storage and not real time AMQP broker
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void logsSocketAppIdGet(String appId) throws ApiException {
        logsSocketAppIdGetWithHttpInfo(appId);
    }

    /**
     * 
     * WebSocket to get logs for :appID. Optional queryString arg bind_to_es&#x3D;true to bind WS on log storage and not real time AMQP broker
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logsSocketAppIdGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = logsSocketAppIdGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * WebSocket to get logs for :appID. Optional queryString arg bind_to_es&#x3D;true to bind WS on log storage and not real time AMQP broker
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsSocketAppIdGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsSocketAppIdGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsEmailhooksOwnerIdGet
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdGetCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/emailhooks/{ownerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsEmailhooksOwnerIdGetValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdGet(Async)");
        }

        return notificationsEmailhooksOwnerIdGetCall(ownerId, _callback);

    }

    /**
     * 
     * list created e-mail hooks
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsEmailhooksOwnerIdGet(String ownerId) throws ApiException {
        notificationsEmailhooksOwnerIdGetWithHttpInfo(ownerId);
    }

    /**
     * 
     * list created e-mail hooks
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsEmailhooksOwnerIdGetWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdGetValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * list created e-mail hooks
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdGetAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdGetValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsEmailhooksOwnerIdIdDelete
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdIdDeleteCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/emailhooks/{ownerId}/:id"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsEmailhooksOwnerIdIdDeleteValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdIdDelete(Async)");
        }

        return notificationsEmailhooksOwnerIdIdDeleteCall(ownerId, _callback);

    }

    /**
     * 
     * delete an e-mail hook
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsEmailhooksOwnerIdIdDelete(String ownerId) throws ApiException {
        notificationsEmailhooksOwnerIdIdDeleteWithHttpInfo(ownerId);
    }

    /**
     * 
     * delete an e-mail hook
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsEmailhooksOwnerIdIdDeleteWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdIdDeleteValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete an e-mail hook
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdIdDeleteAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdIdDeleteValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsEmailhooksOwnerIdIdPut
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdIdPutCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/emailhooks/{ownerId}/:id"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsEmailhooksOwnerIdIdPutValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdIdPut(Async)");
        }

        return notificationsEmailhooksOwnerIdIdPutCall(ownerId, _callback);

    }

    /**
     * 
     * edit an e-mail hook
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsEmailhooksOwnerIdIdPut(String ownerId) throws ApiException {
        notificationsEmailhooksOwnerIdIdPutWithHttpInfo(ownerId);
    }

    /**
     * 
     * edit an e-mail hook
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsEmailhooksOwnerIdIdPutWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdIdPutValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * edit an e-mail hook
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdIdPutAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdIdPutValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsEmailhooksOwnerIdPost
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdPostCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/emailhooks/{ownerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsEmailhooksOwnerIdPostValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsEmailhooksOwnerIdPost(Async)");
        }

        return notificationsEmailhooksOwnerIdPostCall(ownerId, _callback);

    }

    /**
     * 
     * create a hook for e-mail notifications
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsEmailhooksOwnerIdPost(String ownerId) throws ApiException {
        notificationsEmailhooksOwnerIdPostWithHttpInfo(ownerId);
    }

    /**
     * 
     * create a hook for e-mail notifications
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsEmailhooksOwnerIdPostWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdPostValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * create a hook for e-mail notifications
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsEmailhooksOwnerIdPostAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsEmailhooksOwnerIdPostValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsInfoEventsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsInfoEventsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/info/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsInfoEventsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return notificationsInfoEventsGetCall(_callback);

    }

    /**
     * 
     * list available events
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsInfoEventsGet() throws ApiException {
        notificationsInfoEventsGetWithHttpInfo();
    }

    /**
     * 
     * list available events
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsInfoEventsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notificationsInfoEventsGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * list available events
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsInfoEventsGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsInfoEventsGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsInfoWebhookformatsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsInfoWebhookformatsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/info/webhookformats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsInfoWebhookformatsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return notificationsInfoWebhookformatsGetCall(_callback);

    }

    /**
     * 
     * list available webhook formats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsInfoWebhookformatsGet() throws ApiException {
        notificationsInfoWebhookformatsGetWithHttpInfo();
    }

    /**
     * 
     * list available webhook formats
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsInfoWebhookformatsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = notificationsInfoWebhookformatsGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * list available webhook formats
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsInfoWebhookformatsGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsInfoWebhookformatsGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsWebhooksOwnerIdGet
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdGetCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/webhooks/{ownerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsWebhooksOwnerIdGetValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdGet(Async)");
        }

        return notificationsWebhooksOwnerIdGetCall(ownerId, _callback);

    }

    /**
     * 
     * list created hooks
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsWebhooksOwnerIdGet(String ownerId) throws ApiException {
        notificationsWebhooksOwnerIdGetWithHttpInfo(ownerId);
    }

    /**
     * 
     * list created hooks
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsWebhooksOwnerIdGetWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdGetValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * list created hooks
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdGetAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdGetValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsWebhooksOwnerIdIdDelete
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdIdDeleteCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/webhooks/{ownerId}/:id"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsWebhooksOwnerIdIdDeleteValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdIdDelete(Async)");
        }

        return notificationsWebhooksOwnerIdIdDeleteCall(ownerId, _callback);

    }

    /**
     * 
     * delete a hook
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsWebhooksOwnerIdIdDelete(String ownerId) throws ApiException {
        notificationsWebhooksOwnerIdIdDeleteWithHttpInfo(ownerId);
    }

    /**
     * 
     * delete a hook
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsWebhooksOwnerIdIdDeleteWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdIdDeleteValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete a hook
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdIdDeleteAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdIdDeleteValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsWebhooksOwnerIdIdPut
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdIdPutCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/webhooks/{ownerId}/:id"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsWebhooksOwnerIdIdPutValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdIdPut(Async)");
        }

        return notificationsWebhooksOwnerIdIdPutCall(ownerId, _callback);

    }

    /**
     * 
     * edit a hook
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsWebhooksOwnerIdIdPut(String ownerId) throws ApiException {
        notificationsWebhooksOwnerIdIdPutWithHttpInfo(ownerId);
    }

    /**
     * 
     * edit a hook
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsWebhooksOwnerIdIdPutWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdIdPutValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * edit a hook
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdIdPutAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdIdPutValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsWebhooksOwnerIdPost
     * @param ownerId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdPostCall(String ownerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/webhooks/{ownerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsWebhooksOwnerIdPostValidateBeforeCall(String ownerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling notificationsWebhooksOwnerIdPost(Async)");
        }

        return notificationsWebhooksOwnerIdPostCall(ownerId, _callback);

    }

    /**
     * 
     * create a hook for notifications
     * @param ownerId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void notificationsWebhooksOwnerIdPost(String ownerId) throws ApiException {
        notificationsWebhooksOwnerIdPostWithHttpInfo(ownerId);
    }

    /**
     * 
     * create a hook for notifications
     * @param ownerId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationsWebhooksOwnerIdPostWithHttpInfo(String ownerId) throws ApiException {
        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdPostValidateBeforeCall(ownerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * create a hook for notifications
     * @param ownerId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsWebhooksOwnerIdPostAsync(String ownerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsWebhooksOwnerIdPostValidateBeforeCall(ownerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthAccessTokenQueryPost
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenQueryPostCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/access_token_query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthAccessTokenQueryPostValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return oauthAccessTokenQueryPostCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void oauthAccessTokenQueryPost(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        oauthAccessTokenQueryPostWithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthAccessTokenQueryPostWithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = oauthAccessTokenQueryPostValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenQueryPostAsync(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthAccessTokenQueryPostValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthRequestTokenQueryPost
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenQueryPostCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/request_token_query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthRequestTokenQueryPostValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return oauthRequestTokenQueryPostCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void oauthRequestTokenQueryPost(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        oauthRequestTokenQueryPostWithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthRequestTokenQueryPostWithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = oauthRequestTokenQueryPostValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenQueryPostAsync(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthRequestTokenQueryPostValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swagger documenting this API in yaml format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "//openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return openapiGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swagger documenting this API in yaml format. </td><td>  -  </td></tr>
     </table>
     */
    public void openapiGet() throws ApiException {
        openapiGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swagger documenting this API in yaml format. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> openapiGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = openapiGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The swagger documenting this API in yaml format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiTypeGet
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This API swagger documentation in {type} format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiTypeGetCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi.{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiTypeGetValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling openapiTypeGet(Async)");
        }

        return openapiTypeGetCall(type, _callback);

    }

    /**
     * Get the swagger for this API as {type}
     * Get the swagger for this API as {type}. Type can be either \&quot;yml\&quot; or \&quot;json\&quot;.
     * @param type  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This API swagger documentation in {type} format. </td><td>  -  </td></tr>
     </table>
     */
    public void openapiTypeGet(String type) throws ApiException {
        openapiTypeGetWithHttpInfo(type);
    }

    /**
     * Get the swagger for this API as {type}
     * Get the swagger for this API as {type}. Type can be either \&quot;yml\&quot; or \&quot;json\&quot;.
     * @param type  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This API swagger documentation in {type} format. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> openapiTypeGetWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = openapiTypeGetValidateBeforeCall(type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the swagger for this API as {type} (asynchronously)
     * Get the swagger for this API as {type}. Type can be either \&quot;yml\&quot; or \&quot;json\&quot;.
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This API swagger documentation in {type} format. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiTypeGetAsync(String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiTypeGetValidateBeforeCall(type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonprovidersProviderIdDelete
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonprovidersProviderIdDeleteCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonprovidersProviderIdDeleteValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonprovidersProviderIdDelete(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling organisationsIdAddonprovidersProviderIdDelete(Async)");
        }

        return organisationsIdAddonprovidersProviderIdDeleteCall(id, providerId, _callback);

    }

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdAddonprovidersProviderIdDelete(String id, String providerId) throws ApiException {
        organisationsIdAddonprovidersProviderIdDeleteWithHttpInfo(id, providerId);
    }

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdAddonprovidersProviderIdDeleteWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonprovidersProviderIdDeleteValidateBeforeCall(id, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an add-on provider (asynchronously)
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonprovidersProviderIdDeleteAsync(String id, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonprovidersProviderIdDeleteValidateBeforeCall(id, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesGet
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGetCall(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentId", deploymentId));
        }

        if (withDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDeleted", withDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesGetValidateBeforeCall(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesGetCall(id, addonId, deploymentId, withDeleted, _callback);

    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return List&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public List<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesGet(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        ApiResponse<List<SupernovaInstanceView>> localVarResp = organisationsIdAddonsAddonIdInstancesGetWithHttpInfo(id, addonId, deploymentId, withDeleted);
        return localVarResp.getData();
    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return ApiResponse&lt;List&lt;SupernovaInstanceView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupernovaInstanceView>> organisationsIdAddonsAddonIdInstancesGetWithHttpInfo(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGetValidateBeforeCall(id, addonId, deploymentId, withDeleted, null);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List instances for this add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGetAsync(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback<List<SupernovaInstanceView>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGetValidateBeforeCall(id, addonId, deploymentId, withDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesInstanceIdGet
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGetCall(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGetValidateBeforeCall(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesInstanceIdGetCall(instanceId, id, addonId, _callback);

    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return SupernovaInstanceView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public SupernovaInstanceView organisationsIdAddonsAddonIdInstancesInstanceIdGet(String instanceId, String id, String addonId) throws ApiException {
        ApiResponse<SupernovaInstanceView> localVarResp = organisationsIdAddonsAddonIdInstancesInstanceIdGetWithHttpInfo(instanceId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesInstanceIdGetWithHttpInfo(String instanceId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGetValidateBeforeCall(instanceId, id, addonId, null);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific instance for {addonId} (asynchronously)
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGetAsync(String instanceId, String id, String addonId, final ApiCallback<SupernovaInstanceView> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGetValidateBeforeCall(instanceId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsGet
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGetCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsGetValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsGetCall(id, addonId, _callback);

    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public List<AddonMigration> organisationsIdAddonsAddonIdMigrationsGet(String id, String addonId) throws ApiException {
        ApiResponse<List<AddonMigration>> localVarResp = organisationsIdAddonsAddonIdMigrationsGetWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;AddonMigration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddonMigration>> organisationsIdAddonsAddonIdMigrationsGetWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGetValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get past migrations from add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGetAsync(String id, String addonId, final ApiCallback<List<AddonMigration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGetValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsMigrationIdGet
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGetCall(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations/{migrationId}"
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGetValidateBeforeCall(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsMigrationIdGetCall(migrationId, id, addonId, _callback);

    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return AddonMigration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public AddonMigration organisationsIdAddonsAddonIdMigrationsMigrationIdGet(String migrationId, String id, String addonId) throws ApiException {
        ApiResponse<AddonMigration> localVarResp = organisationsIdAddonsAddonIdMigrationsMigrationIdGetWithHttpInfo(migrationId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddonMigration> organisationsIdAddonsAddonIdMigrationsMigrationIdGetWithHttpInfo(String migrationId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGetValidateBeforeCall(migrationId, id, addonId, null);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given migration (asynchronously)
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGetAsync(String migrationId, String id, String addonId, final ApiCallback<AddonMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGetValidateBeforeCall(migrationId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsPost
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPostCall(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organisationsIdAddonsAddonIdMigrationsPostRequest;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsPostValidateBeforeCall(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost(Async)");
        }

        // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
        if (organisationsIdAddonsAddonIdMigrationsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsPostCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);

    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public Object organisationsIdAddonsAddonIdMigrationsPost(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = organisationsIdAddonsAddonIdMigrationsPostWithHttpInfo(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> organisationsIdAddonsAddonIdMigrationsPostWithHttpInfo(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPostValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new add-on migration (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPostAsync(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPostValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdSsoGet
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGetCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/sso"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdSsoGetValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet(Async)");
        }

        return organisationsIdAddonsAddonIdSsoGetCall(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Sso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public Sso organisationsIdAddonsAddonIdSsoGet(String id, String addonId) throws ApiException {
        ApiResponse<Sso> localVarResp = organisationsIdAddonsAddonIdSsoGetWithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Sso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sso> organisationsIdAddonsAddonIdSsoGetWithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGetValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGetAsync(String id, String addonId, final ApiCallback<Sso> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGetValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsPreordersPost
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPostCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/preorders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsPreordersPostValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost(Async)");
        }

        return organisationsIdAddonsPreordersPostCall(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdAddonsPreordersPost(String id, WannabeAddon wannabeAddon) throws ApiException {
        organisationsIdAddonsPreordersPostWithHttpInfo(id, wannabeAddon);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdAddonsPreordersPostWithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPostValidateBeforeCall(id, wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPostAsync(String id, WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPostValidateBeforeCall(id, wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchPut
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPutCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchPutValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut(Async)");
        }

        return organisationsIdApplicationsAppIdBranchPutCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchPut(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchPutWithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchPutWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPutValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPutAsync(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPutValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchesGet
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGetCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branches"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchesGetValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet(Async)");
        }

        return organisationsIdApplicationsAppIdBranchesGetCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchesGet(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchesGetWithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchesGetWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGetValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGetAsync(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGetValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBuildflavorPut
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPutCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/buildflavor"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPutValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut(Async)");
        }

        return organisationsIdApplicationsAppIdBuildflavorPutCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBuildflavorPut(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBuildflavorPutWithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBuildflavorPutWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPutValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPutAsync(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPutValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDependenciesEnvGet
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGetCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGetValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet(Async)");
        }

        return organisationsIdApplicationsAppIdDependenciesEnvGetCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;LinkedAppEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAppEnv> organisationsIdApplicationsAppIdDependenciesEnvGet(String appId, String id) throws ApiException {
        ApiResponse<List<LinkedAppEnv>> localVarResp = organisationsIdApplicationsAppIdDependenciesEnvGetWithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;LinkedAppEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAppEnv>> organisationsIdApplicationsAppIdDependenciesEnvGetWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGetValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGetAsync(String appId, String id, final ApiCallback<List<LinkedAppEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGetValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCall(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(Async)");
        }

        return organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetCall(appId, deploymentId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet(String appId, String deploymentId, String id) throws ApiException {
        organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetWithHttpInfo(appId, deploymentId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetWithHttpInfo(String appId, String deploymentId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(appId, deploymentId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetAsync(String appId, String deploymentId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(appId, deploymentId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvGet
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGetCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGetValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvGetCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvGet(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvGetWithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvGetWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGetValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGetAsync(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGetValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvPut
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPutCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPutValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvPutCall(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvPut(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvPutWithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvPutWithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPutValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPutAsync(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPutValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdInstancesInstanceIdGet
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGetCall(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet(Async)");
        }

        return organisationsIdApplicationsAppIdInstancesInstanceIdGetCall(instanceId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdInstancesInstanceIdGet(String instanceId, String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdInstancesInstanceIdGetWithHttpInfo(instanceId, appId, id);
    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdInstancesInstanceIdGetWithHttpInfo(String instanceId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(instanceId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGetAsync(String instanceId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(instanceId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsBillingsUnpaidGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsBillingsUnpaidGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/unpaid"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsBillingsUnpaidGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsBillingsUnpaidGet(Async)");
        }

        return organisationsIdPaymentsBillingsUnpaidGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsBillingsUnpaidGet(String id) throws ApiException {
        organisationsIdPaymentsBillingsUnpaidGetWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsBillingsUnpaidGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsBillingsUnpaidGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsBillingsUnpaidGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsBillingsUnpaidGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsDefaultGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsDefaultGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultGet(Async)");
        }

        return organisationsIdPaymentsMethodsDefaultGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsDefaultGet(String id) throws ApiException {
        organisationsIdPaymentsMethodsDefaultGetWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsDefaultGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsDefaultPut
     * @param id  (required)
     * @param paymentData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultPutCall(String id, PaymentData paymentData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentData;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsDefaultPutValidateBeforeCall(String id, PaymentData paymentData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultPut(Async)");
        }

        // verify the required parameter 'paymentData' is set
        if (paymentData == null) {
            throw new ApiException("Missing the required parameter 'paymentData' when calling organisationsIdPaymentsMethodsDefaultPut(Async)");
        }

        return organisationsIdPaymentsMethodsDefaultPutCall(id, paymentData, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsDefaultPut(String id, PaymentData paymentData) throws ApiException {
        organisationsIdPaymentsMethodsDefaultPutWithHttpInfo(id, paymentData);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsDefaultPutWithHttpInfo(String id, PaymentData paymentData) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultPutValidateBeforeCall(id, paymentData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultPutAsync(String id, PaymentData paymentData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultPutValidateBeforeCall(id, paymentData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsGet(Async)");
        }

        return organisationsIdPaymentsMethodsGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsGet(String id) throws ApiException {
        organisationsIdPaymentsMethodsGetWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsMIdDelete
     * @param mId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsMIdDeleteCall(String mId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/{mId}"
            .replace("{" + "mId" + "}", localVarApiClient.escapeString(mId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsMIdDeleteValidateBeforeCall(String mId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mId' is set
        if (mId == null) {
            throw new ApiException("Missing the required parameter 'mId' when calling organisationsIdPaymentsMethodsMIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsMIdDelete(Async)");
        }

        return organisationsIdPaymentsMethodsMIdDeleteCall(mId, id, _callback);

    }

    /**
     * 
     * 
     * @param mId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsMIdDelete(String mId, String id) throws ApiException {
        organisationsIdPaymentsMethodsMIdDeleteWithHttpInfo(mId, id);
    }

    /**
     * 
     * 
     * @param mId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsMIdDeleteWithHttpInfo(String mId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsMIdDeleteValidateBeforeCall(mId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param mId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsMIdDeleteAsync(String mId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsMIdDeleteValidateBeforeCall(mId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsPost
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsPostCall(String id, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsPostValidateBeforeCall(String id, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsPost(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organisationsIdPaymentsMethodsPost(Async)");
        }

        return organisationsIdPaymentsMethodsPostCall(id, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsPost(String id, Body body) throws ApiException {
        organisationsIdPaymentsMethodsPostWithHttpInfo(id, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsPostWithHttpInfo(String id, Body body) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsPostValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsPostAsync(String id, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsPostValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMonthlyinvoiceGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/monthlyinvoice"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceGet(Async)");
        }

        return organisationsIdPaymentsMonthlyinvoiceGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMonthlyinvoiceGet(String id) throws ApiException {
        organisationsIdPaymentsMonthlyinvoiceGetWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMonthlyinvoiceGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMonthlyinvoiceMaxcreditPut
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/monthlyinvoice/maxcredit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(Async)");
        }

        return organisationsIdPaymentsMonthlyinvoiceMaxcreditPutCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut(String id) throws ApiException {
        organisationsIdPaymentsMonthlyinvoiceMaxcreditPutWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMonthlyinvoiceMaxcreditPutWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPutAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsRecurringGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsRecurringGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/recurring"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsRecurringGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsRecurringGet(Async)");
        }

        return organisationsIdPaymentsRecurringGetCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsRecurringGet(String id) throws ApiException {
        organisationsIdPaymentsRecurringGetWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsRecurringGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsRecurringGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsRecurringGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsRecurringGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsAssetsPayButtonTokenButtonPngGet
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsAssetsPayButtonTokenButtonPngGetCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/assets/pay_button/{token}/button.png"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsAssetsPayButtonTokenButtonPngGetValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling paymentsAssetsPayButtonTokenButtonPngGet(Async)");
        }

        return paymentsAssetsPayButtonTokenButtonPngGetCall(token, _callback);

    }

    /**
     * 
     * 
     * @param token  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void paymentsAssetsPayButtonTokenButtonPngGet(String token) throws ApiException {
        paymentsAssetsPayButtonTokenButtonPngGetWithHttpInfo(token);
    }

    /**
     * 
     * 
     * @param token  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentsAssetsPayButtonTokenButtonPngGetWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = paymentsAssetsPayButtonTokenButtonPngGetValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsAssetsPayButtonTokenButtonPngGetAsync(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsAssetsPayButtonTokenButtonPngGetValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsBidEndStripePost
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> endPaymentWithStripe </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsBidEndStripePostCall(String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/{bid}/end/stripe"
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsBidEndStripePostValidateBeforeCall(String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling paymentsBidEndStripePost(Async)");
        }

        return paymentsBidEndStripePostCall(bid, _callback);

    }

    /**
     * 
     * 
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> endPaymentWithStripe </td><td>  -  </td></tr>
     </table>
     */
    public void paymentsBidEndStripePost(String bid) throws ApiException {
        paymentsBidEndStripePostWithHttpInfo(bid);
    }

    /**
     * 
     * 
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> endPaymentWithStripe </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentsBidEndStripePostWithHttpInfo(String bid) throws ApiException {
        okhttp3.Call localVarCall = paymentsBidEndStripePostValidateBeforeCall(bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> endPaymentWithStripe </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsBidEndStripePostAsync(String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsBidEndStripePostValidateBeforeCall(bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAuthorize
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorize </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAuthorizeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return postAuthorizeCall(_callback);

    }

    /**
     * 
     * Handled by our API.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorize </td><td>  -  </td></tr>
     </table>
     */
    public void postAuthorize() throws ApiException {
        postAuthorizeWithHttpInfo();
    }

    /**
     * 
     * Handled by our API.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorize </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postAuthorizeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = postAuthorizeValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Handled by our API.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorize </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAuthorizeAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAuthorizeValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postGithubRedeploy
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubRedeployCall(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/redeploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        if (xGithubEvent != null) {
            localVarHeaderParams.put("X-Github-Event", localVarApiClient.parameterToString(xGithubEvent));
        }

        if (xHubSignature != null) {
            localVarHeaderParams.put("X-Hub-Signature", localVarApiClient.parameterToString(xHubSignature));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGithubRedeployValidateBeforeCall(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback _callback) throws ApiException {
        return postGithubRedeployCall(userAgent, xGithubEvent, xHubSignature, _callback);

    }

    /**
     * 
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public void postGithubRedeploy(String userAgent, String xGithubEvent, String xHubSignature) throws ApiException {
        postGithubRedeployWithHttpInfo(userAgent, xGithubEvent, xHubSignature);
    }

    /**
     * 
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postGithubRedeployWithHttpInfo(String userAgent, String xGithubEvent, String xHubSignature) throws ApiException {
        okhttp3.Call localVarCall = postGithubRedeployValidateBeforeCall(userAgent, xGithubEvent, xHubSignature, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent  (optional)
     * @param xGithubEvent  (optional)
     * @param xHubSignature  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApp </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubRedeployAsync(String userAgent, String xGithubEvent, String xHubSignature, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGithubRedeployValidateBeforeCall(userAgent, xGithubEvent, xHubSignature, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postGithubSignup
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubSignupCall(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/github/signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (otherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherId", otherId));
        }

        if (otherEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("otherEmail", otherEmail));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (autoLink != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoLink", autoLink));
        }

        if (terms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terms", terms));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postGithubSignupValidateBeforeCall(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback _callback) throws ApiException {
        return postGithubSignupCall(transactionId, name, otherId, otherEmail, password, autoLink, terms, _callback);

    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public void postGithubSignup(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms) throws ApiException {
        postGithubSignupWithHttpInfo(transactionId, name, otherId, otherEmail, password, autoLink, terms);
    }

    /**
     * 
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postGithubSignupWithHttpInfo(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms) throws ApiException {
        okhttp3.Call localVarCall = postGithubSignupValidateBeforeCall(transactionId, name, otherId, otherEmail, password, autoLink, terms, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param transactionId  (optional)
     * @param name  (optional)
     * @param otherId  (optional)
     * @param otherEmail  (optional)
     * @param password  (optional)
     * @param autoLink  (optional)
     * @param terms  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> finsihGithubSignup </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postGithubSignupAsync(String transactionId, String name, String otherId, String otherEmail, String password, String autoLink, String terms, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postGithubSignupValidateBeforeCall(transactionId, name, otherId, otherEmail, password, autoLink, terms, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthAccessToken
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAccessTokenCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthAccessTokenValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return postOauthAccessTokenCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthAccessToken(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        postOauthAccessTokenWithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthAccessTokenWithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = postOauthAccessTokenValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAccessTokenAsync(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthAccessTokenValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthAuthorize
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAuthorizeCall(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (almighty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("almighty", almighty));
        }

        if (accessOrganisations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations", accessOrganisations));
        }

        if (manageOrganisations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations", manageOrganisations));
        }

        if (manageOrganisationsServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_services", manageOrganisationsServices));
        }

        if (manageOrganisationsApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_applications", manageOrganisationsApplications));
        }

        if (manageOrganisationsMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_members", manageOrganisationsMembers));
        }

        if (accessOrganisationsBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_bills", accessOrganisationsBills));
        }

        if (accessOrganisationsCreditCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_credit_count", accessOrganisationsCreditCount));
        }

        if (accessOrganisationsConsumptionStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_consumption_statistics", accessOrganisationsConsumptionStatistics));
        }

        if (accessPersonalInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_personal_information", accessPersonalInformation));
        }

        if (managePersonalInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_personal_information", managePersonalInformation));
        }

        if (manageSshKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_ssh_keys", manageSshKeys));
        }

        if (manageServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_services", manageServices));
        }

        if (manageApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_applications", manageApplications));
        }

        if (accessBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_bills", accessBills));
        }

        if (accessCreditCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_credit_count", accessCreditCount));
        }

        if (accessConsumptionStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_consumption_statistics", accessConsumptionStatistics));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthAuthorizeValidateBeforeCall(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback _callback) throws ApiException {
        return postOauthAuthorizeCall(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, _callback);

    }

    /**
     * 
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthAuthorize(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie) throws ApiException {
        postOauthAuthorizeWithHttpInfo(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie);
    }

    /**
     * 
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthAuthorizeWithHttpInfo(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie) throws ApiException {
        okhttp3.Call localVarCall = postOauthAuthorizeValidateBeforeCall(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAuthorizeAsync(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthAuthorizeValidateBeforeCall(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthRequestToken
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthRequestTokenCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/request_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthRequestTokenValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return postOauthRequestTokenCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthRequestToken(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        postOauthRequestTokenWithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthRequestTokenWithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = postOauthRequestTokenValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthRequestTokenAsync(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthRequestTokenValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisations
     * @param wannabeOrganisation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsCall(WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeOrganisation;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsValidateBeforeCall(WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeOrganisation' is set
        if (wannabeOrganisation == null) {
            throw new ApiException("Missing the required parameter 'wannabeOrganisation' when calling postOrganisations(Async)");
        }

        return postOrganisationsCall(wannabeOrganisation, _callback);

    }

    /**
     * 
     * 
     * @param wannabeOrganisation  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation postOrganisations(WannabeOrganisation wannabeOrganisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = postOrganisationsWithHttpInfo(wannabeOrganisation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param wannabeOrganisation  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> postOrganisationsWithHttpInfo(WannabeOrganisation wannabeOrganisation) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsValidateBeforeCall(wannabeOrganisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeOrganisation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsAsync(WannabeOrganisation wannabeOrganisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsValidateBeforeCall(wannabeOrganisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonproviders
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersCall(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonProvider;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersValidateBeforeCall(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonproviders(Async)");
        }

        // verify the required parameter 'wannabeAddonProvider' is set
        if (wannabeAddonProvider == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonProvider' when calling postOrganisationsIdAddonproviders(Async)");
        }

        return postOrganisationsIdAddonprovidersCall(id, wannabeAddonProvider, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public Provider postOrganisationsIdAddonproviders(String id, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        ApiResponse<Provider> localVarResp = postOrganisationsIdAddonprovidersWithHttpInfo(id, wannabeAddonProvider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> postOrganisationsIdAddonprovidersWithHttpInfo(String id, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersValidateBeforeCall(id, wannabeAddonProvider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersAsync(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersValidateBeforeCall(id, wannabeAddonProvider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdFeatures
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeaturesCall(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeFeature;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdFeatures(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdFeatures(Async)");
        }

        // verify the required parameter 'wannabeFeature' is set
        if (wannabeFeature == null) {
            throw new ApiException("Missing the required parameter 'wannabeFeature' when calling postOrganisationsIdAddonprovidersProviderIdFeatures(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdFeaturesCall(id, providerId, wannabeFeature, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public Feature postOrganisationsIdAddonprovidersProviderIdFeatures(String id, String providerId, WannabeFeature wannabeFeature) throws ApiException {
        ApiResponse<Feature> localVarResp = postOrganisationsIdAddonprovidersProviderIdFeaturesWithHttpInfo(id, providerId, wannabeFeature);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Feature> postOrganisationsIdAddonprovidersProviderIdFeaturesWithHttpInfo(String id, String providerId, WannabeFeature wannabeFeature) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(id, providerId, wannabeFeature, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeaturesAsync(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback<Feature> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdFeaturesValidateBeforeCall(id, providerId, wannabeFeature, _callback);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdPlans
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlansCall(String id, String providerId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(String id, String providerId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdPlans(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdPlans(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling postOrganisationsIdAddonprovidersProviderIdPlans(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdPlansCall(id, providerId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan postOrganisationsIdAddonprovidersProviderIdPlans(String id, String providerId, WannabePlan wannabePlan) throws ApiException {
        ApiResponse<Plan> localVarResp = postOrganisationsIdAddonprovidersProviderIdPlansWithHttpInfo(id, providerId, wannabePlan);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> postOrganisationsIdAddonprovidersProviderIdPlansWithHttpInfo(String id, String providerId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(id, providerId, wannabePlan, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlansAsync(String id, String providerId, WannabePlan wannabePlan, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdPlansValidateBeforeCall(id, providerId, wannabePlan, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdTesters
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTestersCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/testers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTestersValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdTesters(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdTesters(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdTestersCall(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdAddonprovidersProviderIdTesters(String id, String providerId) throws ApiException {
        postOrganisationsIdAddonprovidersProviderIdTestersWithHttpInfo(id, providerId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdAddonprovidersProviderIdTestersWithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdTestersValidateBeforeCall(id, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTestersAsync(String id, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdTestersValidateBeforeCall(id, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddons
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonsCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonsValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddons(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons(Async)");
        }

        return postOrganisationsIdAddonsCall(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon postOrganisationsIdAddons(String id, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = postOrganisationsIdAddonsWithHttpInfo(id, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> postOrganisationsIdAddonsWithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonsValidateBeforeCall(id, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonsAsync(String id, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonsValidateBeforeCall(id, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplications
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsCall(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsValidateBeforeCall(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplications(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications(Async)");
        }

        return postOrganisationsIdApplicationsCall(id, wannabeApplication, _callback);

    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application postOrganisationsIdApplications(String id, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = postOrganisationsIdApplicationsWithHttpInfo(id, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> postOrganisationsIdApplicationsWithHttpInfo(String id, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsValidateBeforeCall(id, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAsync(String id, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsValidateBeforeCall(id, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdAddons
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddonsCall(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons(Async)");
        }

        return postOrganisationsIdApplicationsAppIdAddonsCall(id, appId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdAddons(String id, String appId, Body body) throws ApiException {
        postOrganisationsIdApplicationsAppIdAddonsWithHttpInfo(id, appId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdAddonsWithHttpInfo(String id, String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(id, appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddonsAsync(String id, String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddonsValidateBeforeCall(id, appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdInstances
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstancesCall(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances(Async)");
        }

        return postOrganisationsIdApplicationsAppIdInstancesCall(id, appId, commit, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdInstances(String id, String appId, String commit) throws ApiException {
        postOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(id, appId, commit);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdInstancesWithHttpInfo(String id, String appId, String commit) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, commit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstancesAsync(String id, String appId, String commit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstancesValidateBeforeCall(id, appId, commit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdConsumers
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdConsumersCall(String id, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdConsumersValidateBeforeCall(String id, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdConsumers(Async)");
        }

        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling postOrganisationsIdConsumers(Async)");
        }

        return postOrganisationsIdConsumersCall(id, wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdConsumers(String id, WannabeConsumer wannabeConsumer) throws ApiException {
        postOrganisationsIdConsumersWithHttpInfo(id, wannabeConsumer);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdConsumersWithHttpInfo(String id, WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdConsumersValidateBeforeCall(id, wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdConsumersAsync(String id, WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdConsumersValidateBeforeCall(id, wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdMembers
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdMembersCall(String id, Schema2 body, String invitationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invitationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invitationKey", invitationKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdMembersValidateBeforeCall(String id, Schema2 body, String invitationKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdMembers(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdMembers(Async)");
        }

        return postOrganisationsIdMembersCall(id, body, invitationKey, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdMembers(String id, Schema2 body, String invitationKey) throws ApiException {
        postOrganisationsIdMembersWithHttpInfo(id, body, invitationKey);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdMembersWithHttpInfo(String id, Schema2 body, String invitationKey) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdMembersValidateBeforeCall(id, body, invitationKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdMembersAsync(String id, Schema2 body, String invitationKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdMembersValidateBeforeCall(id, body, invitationKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdPaymentsBillings
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdPaymentsBillingsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdPaymentsBillingsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdPaymentsBillings(Async)");
        }

        return postOrganisationsIdPaymentsBillingsCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdPaymentsBillings(String id) throws ApiException {
        postOrganisationsIdPaymentsBillingsWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdPaymentsBillingsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdPaymentsBillingsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdPaymentsBillingsAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdPaymentsBillingsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPasswordForgotten
     * @param login  (optional)
     * @param dropTokens  (optional)
     * @param testerPass  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> askForPasswordResetViaForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPasswordForgottenCall(String login, String dropTokens, String testerPass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/password_forgotten";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (login != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("login", login));
        }

        if (dropTokens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drop_tokens", dropTokens));
        }

        if (testerPass != null) {
            localVarHeaderParams.put("TesterPass", localVarApiClient.parameterToString(testerPass));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPasswordForgottenValidateBeforeCall(String login, String dropTokens, String testerPass, final ApiCallback _callback) throws ApiException {
        return postPasswordForgottenCall(login, dropTokens, testerPass, _callback);

    }

    /**
     * 
     * 
     * @param login  (optional)
     * @param dropTokens  (optional)
     * @param testerPass  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> askForPasswordResetViaForm </td><td>  -  </td></tr>
     </table>
     */
    public void postPasswordForgotten(String login, String dropTokens, String testerPass) throws ApiException {
        postPasswordForgottenWithHttpInfo(login, dropTokens, testerPass);
    }

    /**
     * 
     * 
     * @param login  (optional)
     * @param dropTokens  (optional)
     * @param testerPass  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> askForPasswordResetViaForm </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPasswordForgottenWithHttpInfo(String login, String dropTokens, String testerPass) throws ApiException {
        okhttp3.Call localVarCall = postPasswordForgottenValidateBeforeCall(login, dropTokens, testerPass, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param login  (optional)
     * @param dropTokens  (optional)
     * @param testerPass  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> askForPasswordResetViaForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPasswordForgottenAsync(String login, String dropTokens, String testerPass, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPasswordForgottenValidateBeforeCall(login, dropTokens, testerPass, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPasswordForgottenKey
     * @param key  (required)
     * @param pass  (optional)
     * @param pass2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetPasswordForgotten </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPasswordForgottenKeyCall(String key, String pass, String pass2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/password_forgotten/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass", pass));
        }

        if (pass2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass2", pass2));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPasswordForgottenKeyValidateBeforeCall(String key, String pass, String pass2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postPasswordForgottenKey(Async)");
        }

        return postPasswordForgottenKeyCall(key, pass, pass2, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @param pass  (optional)
     * @param pass2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetPasswordForgotten </td><td>  -  </td></tr>
     </table>
     */
    public void postPasswordForgottenKey(String key, String pass, String pass2) throws ApiException {
        postPasswordForgottenKeyWithHttpInfo(key, pass, pass2);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @param pass  (optional)
     * @param pass2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetPasswordForgotten </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postPasswordForgottenKeyWithHttpInfo(String key, String pass, String pass2) throws ApiException {
        okhttp3.Call localVarCall = postPasswordForgottenKeyValidateBeforeCall(key, pass, pass2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param pass  (optional)
     * @param pass2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> resetPasswordForgotten </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPasswordForgottenKeyAsync(String key, String pass, String pass2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPasswordForgottenKeyValidateBeforeCall(key, pass, pass2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfAddons
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfAddonsCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfAddonsValidateBeforeCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling postSelfAddons(Async)");
        }

        return postSelfAddonsCall(wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfAddons(WannabeAddon wannabeAddon) throws ApiException {
        postSelfAddonsWithHttpInfo(wannabeAddon);
    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfAddonsWithHttpInfo(WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = postSelfAddonsValidateBeforeCall(wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfAddonsAsync(WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfAddonsValidateBeforeCall(wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplications
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsCall(WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsValidateBeforeCall(WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling postSelfApplications(Async)");
        }

        return postSelfApplicationsCall(wannabeApplication, _callback);

    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplications(WannabeApplication wannabeApplication) throws ApiException {
        postSelfApplicationsWithHttpInfo(wannabeApplication);
    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsWithHttpInfo(WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsValidateBeforeCall(wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAsync(WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsValidateBeforeCall(wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplicationsAppIdAddons
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddonsCall(String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/addons"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsAppIdAddonsValidateBeforeCall(String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdAddons(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postSelfApplicationsAppIdAddons(Async)");
        }

        return postSelfApplicationsAppIdAddonsCall(appId, body, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplicationsAppIdAddons(String appId, Body body) throws ApiException {
        postSelfApplicationsAppIdAddonsWithHttpInfo(appId, body);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsAppIdAddonsWithHttpInfo(String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddonsValidateBeforeCall(appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdAddonsAsync(String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsAppIdAddonsValidateBeforeCall(appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfApplicationsAppIdInstances
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdInstancesCall(String appId, String commit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfApplicationsAppIdInstancesValidateBeforeCall(String appId, String commit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postSelfApplicationsAppIdInstances(Async)");
        }

        return postSelfApplicationsAppIdInstancesCall(appId, commit, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfApplicationsAppIdInstances(String appId, String commit) throws ApiException {
        postSelfApplicationsAppIdInstancesWithHttpInfo(appId, commit);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfApplicationsAppIdInstancesWithHttpInfo(String appId, String commit) throws ApiException {
        okhttp3.Call localVarCall = postSelfApplicationsAppIdInstancesValidateBeforeCall(appId, commit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfApplicationsAppIdInstancesAsync(String appId, String commit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfApplicationsAppIdInstancesValidateBeforeCall(appId, commit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfConsumers
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfConsumersCall(WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/self/consumers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfConsumersValidateBeforeCall(WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling postSelfConsumers(Async)");
        }

        return postSelfConsumersCall(wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfConsumers(WannabeConsumer wannabeConsumer) throws ApiException {
        postSelfConsumersWithHttpInfo(wannabeConsumer);
    }

    /**
     * 
     * 
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfConsumersWithHttpInfo(WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = postSelfConsumersValidateBeforeCall(wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfConsumersAsync(WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfConsumersValidateBeforeCall(wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfPaymentsBillings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfPaymentsBillingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfPaymentsBillingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return postSelfPaymentsBillingsCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfPaymentsBillings() throws ApiException {
        postSelfPaymentsBillingsWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfPaymentsBillingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = postSelfPaymentsBillingsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfPaymentsBillingsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfPaymentsBillingsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSelfPaymentsMethods
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addUserMethod </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfPaymentsMethodsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSelfPaymentsMethodsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return postSelfPaymentsMethodsCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addUserMethod </td><td>  -  </td></tr>
     </table>
     */
    public void postSelfPaymentsMethods() throws ApiException {
        postSelfPaymentsMethodsWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addUserMethod </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSelfPaymentsMethodsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = postSelfPaymentsMethodsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addUserMethod </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSelfPaymentsMethodsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSelfPaymentsMethodsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postUsers
     * @param wannabeUser  (required)
     * @param invitationKey  (optional)
     * @param addonBetaInvitationKey  (optional)
     * @param email  (optional)
     * @param pass  (optional)
     * @param urlNext  (optional)
     * @param terms  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUser createUserFromForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersCall(WannabeUser wannabeUser, String invitationKey, String addonBetaInvitationKey, String email, String pass, String urlNext, String terms, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeUser;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invitationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invitationKey", invitationKey));
        }

        if (addonBetaInvitationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addonBetaInvitationKey", addonBetaInvitationKey));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (pass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pass", pass));
        }

        if (urlNext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url_next", urlNext));
        }

        if (terms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terms", terms));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postUsersValidateBeforeCall(WannabeUser wannabeUser, String invitationKey, String addonBetaInvitationKey, String email, String pass, String urlNext, String terms, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeUser' is set
        if (wannabeUser == null) {
            throw new ApiException("Missing the required parameter 'wannabeUser' when calling postUsers(Async)");
        }

        return postUsersCall(wannabeUser, invitationKey, addonBetaInvitationKey, email, pass, urlNext, terms, _callback);

    }

    /**
     * 
     * 
     * @param wannabeUser  (required)
     * @param invitationKey  (optional)
     * @param addonBetaInvitationKey  (optional)
     * @param email  (optional)
     * @param pass  (optional)
     * @param urlNext  (optional)
     * @param terms  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUser createUserFromForm </td><td>  -  </td></tr>
     </table>
     */
    public void postUsers(WannabeUser wannabeUser, String invitationKey, String addonBetaInvitationKey, String email, String pass, String urlNext, String terms) throws ApiException {
        postUsersWithHttpInfo(wannabeUser, invitationKey, addonBetaInvitationKey, email, pass, urlNext, terms);
    }

    /**
     * 
     * 
     * @param wannabeUser  (required)
     * @param invitationKey  (optional)
     * @param addonBetaInvitationKey  (optional)
     * @param email  (optional)
     * @param pass  (optional)
     * @param urlNext  (optional)
     * @param terms  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUser createUserFromForm </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postUsersWithHttpInfo(WannabeUser wannabeUser, String invitationKey, String addonBetaInvitationKey, String email, String pass, String urlNext, String terms) throws ApiException {
        okhttp3.Call localVarCall = postUsersValidateBeforeCall(wannabeUser, invitationKey, addonBetaInvitationKey, email, pass, urlNext, terms, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeUser  (required)
     * @param invitationKey  (optional)
     * @param addonBetaInvitationKey  (optional)
     * @param email  (optional)
     * @param pass  (optional)
     * @param urlNext  (optional)
     * @param terms  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUser createUserFromForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postUsersAsync(WannabeUser wannabeUser, String invitationKey, String addonBetaInvitationKey, String email, String pass, String urlNext, String terms, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postUsersValidateBeforeCall(wannabeUser, invitationKey, addonBetaInvitationKey, email, pass, urlNext, terms, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVendorBillingOwnerId
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVendorBillingOwnerIdCall(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonBilling;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}/consumptions"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVendorBillingOwnerIdValidateBeforeCall(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling postVendorBillingOwnerId(Async)");
        }

        // verify the required parameter 'wannabeAddonBilling' is set
        if (wannabeAddonBilling == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonBilling' when calling postVendorBillingOwnerId(Async)");
        }

        return postVendorBillingOwnerIdCall(addonId, wannabeAddonBilling, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void postVendorBillingOwnerId(String addonId, WannabeAddonBilling wannabeAddonBilling) throws ApiException {
        postVendorBillingOwnerIdWithHttpInfo(addonId, wannabeAddonBilling);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postVendorBillingOwnerIdWithHttpInfo(String addonId, WannabeAddonBilling wannabeAddonBilling) throws ApiException {
        okhttp3.Call localVarCall = postVendorBillingOwnerIdValidateBeforeCall(addonId, wannabeAddonBilling, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVendorBillingOwnerIdAsync(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVendorBillingOwnerIdValidateBeforeCall(addonId, wannabeAddonBilling, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsAddonprovidersProviderIdVersionsGet
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAddonprovidersProviderIdVersionsGetCall(String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/addonproviders/{provider_id}/versions"
            .replace("{" + "provider_id" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsAddonprovidersProviderIdVersionsGetValidateBeforeCall(String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling productsAddonprovidersProviderIdVersionsGet(Async)");
        }

        return productsAddonprovidersProviderIdVersionsGetCall(providerId, _callback);

    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void productsAddonprovidersProviderIdVersionsGet(String providerId) throws ApiException {
        productsAddonprovidersProviderIdVersionsGetWithHttpInfo(providerId);
    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsAddonprovidersProviderIdVersionsGetWithHttpInfo(String providerId) throws ApiException {
        okhttp3.Call localVarCall = productsAddonprovidersProviderIdVersionsGetValidateBeforeCall(providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsAddonprovidersProviderIdVersionsGetAsync(String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsAddonprovidersProviderIdVersionsGetValidateBeforeCall(providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsMfaKindsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsMfaKindsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/mfa_kinds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsMfaKindsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return productsMfaKindsGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void productsMfaKindsGet() throws ApiException {
        productsMfaKindsGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsMfaKindsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = productsMfaKindsGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsMfaKindsGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsMfaKindsGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsId
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdCall(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeOrganisation;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdValidateBeforeCall(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsId(Async)");
        }

        // verify the required parameter 'wannabeOrganisation' is set
        if (wannabeOrganisation == null) {
            throw new ApiException("Missing the required parameter 'wannabeOrganisation' when calling putOrganisationsId(Async)");
        }

        return putOrganisationsIdCall(id, wannabeOrganisation, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation putOrganisationsId(String id, WannabeOrganisation wannabeOrganisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = putOrganisationsIdWithHttpInfo(id, wannabeOrganisation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> putOrganisationsIdWithHttpInfo(String id, WannabeOrganisation wannabeOrganisation) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdValidateBeforeCall(id, wannabeOrganisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAsync(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdValidateBeforeCall(id, wannabeOrganisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderId
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdCall(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonProvider;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderId(Async)");
        }

        // verify the required parameter 'wannabeAddonProvider' is set
        if (wannabeAddonProvider == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonProvider' when calling putOrganisationsIdAddonprovidersProviderId(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderIdCall(id, providerId, wannabeAddonProvider, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public Provider putOrganisationsIdAddonprovidersProviderId(String id, String providerId, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        ApiResponse<Provider> localVarResp = putOrganisationsIdAddonprovidersProviderIdWithHttpInfo(id, providerId, wannabeAddonProvider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> putOrganisationsIdAddonprovidersProviderIdWithHttpInfo(String id, String providerId, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(id, providerId, wannabeAddonProvider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdAsync(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdValidateBeforeCall(id, providerId, wannabeAddonProvider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderIdPlansPlanId
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderIdPlansPlanIdCall(id, providerId, planId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan putOrganisationsIdAddonprovidersProviderIdPlansPlanId(String id, String providerId, String planId, WannabePlan wannabePlan) throws ApiException {
        ApiResponse<Plan> localVarResp = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(id, providerId, planId, wannabePlan);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> putOrganisationsIdAddonprovidersProviderIdPlansPlanIdWithHttpInfo(String id, String providerId, String planId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, wannabePlan, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdAsync(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdValidateBeforeCall(id, providerId, planId, wannabePlan, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCall(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlanFeature;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        // verify the required parameter 'wannabePlanFeature' is set
        if (wannabePlanFeature == null) {
            throw new ApiException("Missing the required parameter 'wannabePlanFeature' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameCall(id, featureName, providerId, planId, wannabePlanFeature, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature) throws ApiException {
        putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameWithHttpInfo(id, featureName, providerId, planId, wannabePlanFeature);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameWithHttpInfo(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(id, featureName, providerId, planId, wannabePlanFeature, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameAsync(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureNameValidateBeforeCall(id, featureName, providerId, planId, wannabePlanFeature, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonId
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdCall(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonIdValidateBeforeCall(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId(Async)");
        }

        return putOrganisationsIdAddonsAddonIdCall(id, addonId, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public Addon putOrganisationsIdAddonsAddonId(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = putOrganisationsIdAddonsAddonIdWithHttpInfo(id, addonId, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> putOrganisationsIdAddonsAddonIdWithHttpInfo(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdAsync(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdValidateBeforeCall(id, addonId, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonIdTagsTag
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTagCall(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag(Async)");
        }

        return putOrganisationsIdAddonsAddonIdTagsTagCall(id, tag, addonId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAddonsAddonIdTagsTag(String id, String tag, String addonId, Body body) throws ApiException {
        putOrganisationsIdAddonsAddonIdTagsTagWithHttpInfo(id, tag, addonId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAddonsAddonIdTagsTagWithHttpInfo(String id, String tag, String addonId, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(id, tag, addonId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTagAsync(String id, String tag, String addonId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTagValidateBeforeCall(id, tag, addonId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppId
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdCall(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdValidateBeforeCall(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId(Async)");
        }

        return putOrganisationsIdApplicationsAppIdCall(id, appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application putOrganisationsIdApplicationsAppId(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = putOrganisationsIdApplicationsAppIdWithHttpInfo(id, appId, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> putOrganisationsIdApplicationsAppIdWithHttpInfo(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdAsync(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdValidateBeforeCall(id, appId, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdDependenciesDependencyId
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCall(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId(Async)");
        }

        return putOrganisationsIdApplicationsAppIdDependenciesDependencyIdCall(dependencyId, appId, id, body, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdDependenciesDependencyId(String dependencyId, String appId, String id, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdDependenciesDependencyIdWithHttpInfo(dependencyId, appId, id, body);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdDependenciesDependencyIdWithHttpInfo(String dependencyId, String appId, String id, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyIdAsync(String dependencyId, String appId, String id, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyIdValidateBeforeCall(dependencyId, appId, id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnv
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvCall(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnvCall(id, appId, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnv(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnvWithHttpInfo(id, appId, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnvWithHttpInfo(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(id, appId, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvAsync(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvValidateBeforeCall(id, appId, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnvEnvName
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvNameCall(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnvEnvNameCall(id, appId, envName, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnvEnvName(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnvEnvNameWithHttpInfo(id, appId, envName, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnvEnvNameWithHttpInfo(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(id, appId, envName, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvNameAsync(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvNameValidateBeforeCall(id, appId, envName, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdTagsTag
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTagCall(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag(Async)");
        }

        return putOrganisationsIdApplicationsAppIdTagsTagCall(id, appId, tag, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdTagsTag(String id, String appId, String tag, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdTagsTagWithHttpInfo(id, appId, tag, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdTagsTagWithHttpInfo(String id, String appId, String tag, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(id, appId, tag, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTagAsync(String id, String appId, String tag, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTagValidateBeforeCall(id, appId, tag, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsDomain
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomainCall(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsDomainCall(id, appId, domain, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsDomain(String id, String appId, String domain, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsDomainWithHttpInfo(id, appId, domain, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsDomainWithHttpInfo(String id, String appId, String domain, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(id, appId, domain, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomainAsync(String id, String appId, String domain, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomainValidateBeforeCall(id, appId, domain, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsFavourite
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavouriteCall(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsFavouriteCall(id, appId, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsFavourite(String id, String appId, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(id, appId, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsFavouriteWithHttpInfo(String id, String appId, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavouriteAsync(String id, String appId, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavouriteValidateBeforeCall(id, appId, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAvatar
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAvatarCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/avatar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAvatarValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAvatar(Async)");
        }

        return putOrganisationsIdAvatarCall(id, _callback);

    }

    /**
     * 
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAvatar(String id) throws ApiException {
        putOrganisationsIdAvatarWithHttpInfo(id);
    }

    /**
     * 
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAvatarWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAvatarValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAvatarAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAvatarValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdConsumersKey
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdConsumersKeyCall(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdConsumersKeyValidateBeforeCall(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdConsumersKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putOrganisationsIdConsumersKey(Async)");
        }

        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling putOrganisationsIdConsumersKey(Async)");
        }

        return putOrganisationsIdConsumersKeyCall(id, key, wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdConsumersKey(String id, String key, WannabeConsumer wannabeConsumer) throws ApiException {
        putOrganisationsIdConsumersKeyWithHttpInfo(id, key, wannabeConsumer);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdConsumersKeyWithHttpInfo(String id, String key, WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdConsumersKeyValidateBeforeCall(id, key, wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdConsumersKeyAsync(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdConsumersKeyValidateBeforeCall(id, key, wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdMembersUserId
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdMembersUserIdCall(String id, String userId, Schema2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdMembersUserIdValidateBeforeCall(String id, String userId, Schema2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putOrganisationsIdMembersUserId(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdMembersUserId(Async)");
        }

        return putOrganisationsIdMembersUserIdCall(id, userId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdMembersUserId(String id, String userId, Schema2 body) throws ApiException {
        putOrganisationsIdMembersUserIdWithHttpInfo(id, userId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdMembersUserIdWithHttpInfo(String id, String userId, Schema2 body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdMembersUserIdValidateBeforeCall(id, userId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdMembersUserIdAsync(String id, String userId, Schema2 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdMembersUserIdValidateBeforeCall(id, userId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdPaymentsBillingsBid
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdPaymentsBillingsBidCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdPaymentsBillingsBidValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdPaymentsBillingsBid(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling putOrganisationsIdPaymentsBillingsBid(Async)");
        }

        return putOrganisationsIdPaymentsBillingsBidCall(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdPaymentsBillingsBid(String id, String bid) throws ApiException {
        putOrganisationsIdPaymentsBillingsBidWithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdPaymentsBillingsBidWithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdPaymentsBillingsBidAsync(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdPaymentsBillingsBidValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelf
     * @param wannabeUser  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfCall(WannabeUser wannabeUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeUser;

        // create path and map variables
        String localVarPath = "/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfValidateBeforeCall(WannabeUser wannabeUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeUser' is set
        if (wannabeUser == null) {
            throw new ApiException("Missing the required parameter 'wannabeUser' when calling putSelf(Async)");
        }

        return putSelfCall(wannabeUser, _callback);

    }

    /**
     * 
     * 
     * @param wannabeUser  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editUser </td><td>  -  </td></tr>
     </table>
     */
    public void putSelf(WannabeUser wannabeUser) throws ApiException {
        putSelfWithHttpInfo(wannabeUser);
    }

    /**
     * 
     * 
     * @param wannabeUser  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editUser </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfWithHttpInfo(WannabeUser wannabeUser) throws ApiException {
        okhttp3.Call localVarCall = putSelfValidateBeforeCall(wannabeUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeUser  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editUser </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAsync(WannabeUser wannabeUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfValidateBeforeCall(wannabeUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonId
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdCall(String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonIdValidateBeforeCall(String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonId(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling putSelfAddonsAddonId(Async)");
        }

        return putSelfAddonsAddonIdCall(addonId, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonId(String addonId, WannabeAddon wannabeAddon) throws ApiException {
        putSelfAddonsAddonIdWithHttpInfo(addonId, wannabeAddon);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonIdWithHttpInfo(String addonId, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonIdValidateBeforeCall(addonId, wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon informations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdAsync(String addonId, WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonIdValidateBeforeCall(addonId, wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonIdPlan
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdPlanCall(String addonId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/plan"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonIdPlanValidateBeforeCall(String addonId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdPlan(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling putSelfAddonsAddonIdPlan(Async)");
        }

        return putSelfAddonsAddonIdPlanCall(addonId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonIdPlan(String addonId, WannabePlan wannabePlan) throws ApiException {
        putSelfAddonsAddonIdPlanWithHttpInfo(addonId, wannabePlan);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonIdPlanWithHttpInfo(String addonId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonIdPlanValidateBeforeCall(addonId, wannabePlan, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update plan of an add-on. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdPlanAsync(String addonId, WannabePlan wannabePlan, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonIdPlanValidateBeforeCall(addonId, wannabePlan, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAddonsAddonIdTagsTag
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdTagsTagCall(String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/addons/{addonId}/tags/{tag}"
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAddonsAddonIdTagsTagValidateBeforeCall(String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putSelfAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putSelfAddonsAddonIdTagsTag(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfAddonsAddonIdTagsTag(Async)");
        }

        return putSelfAddonsAddonIdTagsTagCall(tag, addonId, body, _callback);

    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAddonsAddonIdTagsTag(String tag, String addonId, Body body) throws ApiException {
        putSelfAddonsAddonIdTagsTagWithHttpInfo(tag, addonId, body);
    }

    /**
     * 
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAddonsAddonIdTagsTagWithHttpInfo(String tag, String addonId, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfAddonsAddonIdTagsTagValidateBeforeCall(tag, addonId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAddonsAddonIdTagsTagAsync(String tag, String addonId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAddonsAddonIdTagsTagValidateBeforeCall(tag, addonId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppId
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdCall(String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdValidateBeforeCall(String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppId(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling putSelfApplicationsAppId(Async)");
        }

        return putSelfApplicationsAppIdCall(appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppId(String appId, WannabeApplication wannabeApplication) throws ApiException {
        putSelfApplicationsAppIdWithHttpInfo(appId, wannabeApplication);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdWithHttpInfo(String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdValidateBeforeCall(appId, wannabeApplication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdAsync(String appId, WannabeApplication wannabeApplication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdValidateBeforeCall(appId, wannabeApplication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdEnv
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvCall(String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdEnvValidateBeforeCall(String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnv(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnv(Async)");
        }

        return putSelfApplicationsAppIdEnvCall(appId, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdEnv(String appId, WannabeEnv wannabeEnv) throws ApiException {
        putSelfApplicationsAppIdEnvWithHttpInfo(appId, wannabeEnv);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdEnvWithHttpInfo(String appId, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvValidateBeforeCall(appId, wannabeEnv, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvAsync(String appId, WannabeEnv wannabeEnv, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvValidateBeforeCall(appId, wannabeEnv, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdEnvEnvName
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvEnvNameCall(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/env/{envName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling putSelfApplicationsAppIdEnvEnvName(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putSelfApplicationsAppIdEnvEnvName(Async)");
        }

        return putSelfApplicationsAppIdEnvEnvNameCall(appId, envName, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdEnvEnvName(String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        putSelfApplicationsAppIdEnvEnvNameWithHttpInfo(appId, envName, wannabeEnv);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdEnvEnvNameWithHttpInfo(String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(appId, envName, wannabeEnv, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdEnvEnvNameAsync(String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdEnvEnvNameValidateBeforeCall(appId, envName, wannabeEnv, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdTagsTag
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdTagsTagCall(String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/tags/{tag}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdTagsTagValidateBeforeCall(String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putSelfApplicationsAppIdTagsTag(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfApplicationsAppIdTagsTag(Async)");
        }

        return putSelfApplicationsAppIdTagsTagCall(appId, tag, body, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdTagsTag(String appId, String tag, Body body) throws ApiException {
        putSelfApplicationsAppIdTagsTagWithHttpInfo(appId, tag, body);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdTagsTagWithHttpInfo(String appId, String tag, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdTagsTagValidateBeforeCall(appId, tag, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdTagsTagAsync(String appId, String tag, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdTagsTagValidateBeforeCall(appId, tag, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdVhostsDomain
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsDomainCall(String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/{domain}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdVhostsDomainValidateBeforeCall(String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling putSelfApplicationsAppIdVhostsDomain(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsDomain(Async)");
        }

        return putSelfApplicationsAppIdVhostsDomainCall(appId, domain, vhost, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdVhostsDomain(String appId, String domain, Vhost vhost) throws ApiException {
        putSelfApplicationsAppIdVhostsDomainWithHttpInfo(appId, domain, vhost);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdVhostsDomainWithHttpInfo(String appId, String domain, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsDomainValidateBeforeCall(appId, domain, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsDomainAsync(String appId, String domain, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsDomainValidateBeforeCall(appId, domain, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfApplicationsAppIdVhostsFavourite
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsFavouriteCall(String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/vhosts/favourite"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putSelfApplicationsAppIdVhostsFavourite(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putSelfApplicationsAppIdVhostsFavourite(Async)");
        }

        return putSelfApplicationsAppIdVhostsFavouriteCall(appId, vhost, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfApplicationsAppIdVhostsFavourite(String appId, Vhost vhost) throws ApiException {
        putSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(appId, vhost);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfApplicationsAppIdVhostsFavouriteWithHttpInfo(String appId, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfApplicationsAppIdVhostsFavouriteAsync(String appId, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfApplicationsAppIdVhostsFavouriteValidateBeforeCall(appId, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfAvatar
     * @param avatar  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setUserAvatar setUserAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAvatarCall(Avatar avatar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = avatar;

        // create path and map variables
        String localVarPath = "/self/avatar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfAvatarValidateBeforeCall(Avatar avatar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'avatar' is set
        if (avatar == null) {
            throw new ApiException("Missing the required parameter 'avatar' when calling putSelfAvatar(Async)");
        }

        return putSelfAvatarCall(avatar, _callback);

    }

    /**
     * 
     * 
     * @param avatar  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setUserAvatar setUserAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfAvatar(Avatar avatar) throws ApiException {
        putSelfAvatarWithHttpInfo(avatar);
    }

    /**
     * 
     * 
     * @param avatar  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setUserAvatar setUserAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfAvatarWithHttpInfo(Avatar avatar) throws ApiException {
        okhttp3.Call localVarCall = putSelfAvatarValidateBeforeCall(avatar, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param avatar  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setUserAvatar setUserAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfAvatarAsync(Avatar avatar, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfAvatarValidateBeforeCall(avatar, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfChangePassword
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeUserPassword </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfChangePasswordCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/change_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfChangePasswordValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return putSelfChangePasswordCall(_callback);

    }

    /**
     * 
     * 
     * @return ChangePassword
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeUserPassword </td><td>  -  </td></tr>
     </table>
     */
    public ChangePassword putSelfChangePassword() throws ApiException {
        ApiResponse<ChangePassword> localVarResp = putSelfChangePasswordWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ChangePassword&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeUserPassword </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ChangePassword> putSelfChangePasswordWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = putSelfChangePasswordValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ChangePassword>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> changeUserPassword </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfChangePasswordAsync(final ApiCallback<ChangePassword> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfChangePasswordValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ChangePassword>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfConsumersKey
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT same consumer data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfConsumersKeyCall(String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/self/consumers/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfConsumersKeyValidateBeforeCall(String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putSelfConsumersKey(Async)");
        }

        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling putSelfConsumersKey(Async)");
        }

        return putSelfConsumersKeyCall(key, wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT same consumer data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfConsumersKey(String key, WannabeConsumer wannabeConsumer) throws ApiException {
        putSelfConsumersKeyWithHttpInfo(key, wannabeConsumer);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT same consumer data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfConsumersKeyWithHttpInfo(String key, WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = putSelfConsumersKeyValidateBeforeCall(key, wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT same consumer data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfConsumersKeyAsync(String key, WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfConsumersKeyValidateBeforeCall(key, wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfEmailsEmail
     * @param email  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfEmailsEmailCall(String email, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/emails/{email}"
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfEmailsEmailValidateBeforeCall(String email, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling putSelfEmailsEmail(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfEmailsEmail(Async)");
        }

        return putSelfEmailsEmailCall(email, body, _callback);

    }

    /**
     * 
     * 
     * @param email  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfEmailsEmail(String email, Body body) throws ApiException {
        putSelfEmailsEmailWithHttpInfo(email, body);
    }

    /**
     * 
     * 
     * @param email  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfEmailsEmailWithHttpInfo(String email, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfEmailsEmailValidateBeforeCall(email, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param email  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addEmailAddress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfEmailsEmailAsync(String email, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfEmailsEmailValidateBeforeCall(email, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfKeysKey
     * @param key  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addSshKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfKeysKeyCall(String key, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/self/keys/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfKeysKeyValidateBeforeCall(String key, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putSelfKeysKey(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSelfKeysKey(Async)");
        }

        return putSelfKeysKeyCall(key, body, _callback);

    }

    /**
     * 
     * 
     * @param key  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addSshKey </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfKeysKey(String key, Body body) throws ApiException {
        putSelfKeysKeyWithHttpInfo(key, body);
    }

    /**
     * 
     * 
     * @param key  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addSshKey </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfKeysKeyWithHttpInfo(String key, Body body) throws ApiException {
        okhttp3.Call localVarCall = putSelfKeysKeyValidateBeforeCall(key, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param key  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addSshKey </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfKeysKeyAsync(String key, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfKeysKeyValidateBeforeCall(key, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSelfPaymentsBillingsBid
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfPaymentsBillingsBidCall(String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/billings/{bid}"
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSelfPaymentsBillingsBidValidateBeforeCall(String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling putSelfPaymentsBillingsBid(Async)");
        }

        return putSelfPaymentsBillingsBidCall(bid, _callback);

    }

    /**
     * 
     * 
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public void putSelfPaymentsBillingsBid(String bid) throws ApiException {
        putSelfPaymentsBillingsBidWithHttpInfo(bid);
    }

    /**
     * 
     * 
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSelfPaymentsBillingsBidWithHttpInfo(String bid) throws ApiException {
        okhttp3.Call localVarCall = putSelfPaymentsBillingsBidValidateBeforeCall(bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSelfPaymentsBillingsBidAsync(String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSelfPaymentsBillingsBidValidateBeforeCall(bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVendorAppsAddonId
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVendorAppsAddonIdCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVendorAppsAddonIdValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putVendorAppsAddonId(Async)");
        }

        return putVendorAppsAddonIdCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public void putVendorAppsAddonId(String addonId) throws ApiException {
        putVendorAppsAddonIdWithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putVendorAppsAddonIdWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = putVendorAppsAddonIdValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVendorAppsAddonIdAsync(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVendorAppsAddonIdValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfAddonsPreordersPost
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfAddonsPreordersPostCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/self/addons/preorders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfAddonsPreordersPostValidateBeforeCall(WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling selfAddonsPreordersPost(Async)");
        }

        return selfAddonsPreordersPostCall(wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfAddonsPreordersPost(WannabeAddon wannabeAddon) throws ApiException {
        selfAddonsPreordersPostWithHttpInfo(wannabeAddon);
    }

    /**
     * 
     * 
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfAddonsPreordersPostWithHttpInfo(WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = selfAddonsPreordersPostValidateBeforeCall(wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfAddonsPreordersPostAsync(WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfAddonsPreordersPostValidateBeforeCall(wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBranchPut
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchPutCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBranchPutValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchPut(Async)");
        }

        return selfApplicationsAppIdBranchPutCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBranchPut(String appId) throws ApiException {
        selfApplicationsAppIdBranchPutWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBranchPutWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBranchPutValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchPutAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBranchPutValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBranchesGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchesGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/branches"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBranchesGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBranchesGet(Async)");
        }

        return selfApplicationsAppIdBranchesGetCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBranchesGet(String appId) throws ApiException {
        selfApplicationsAppIdBranchesGetWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBranchesGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBranchesGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBranchesGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBranchesGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdBuildflavorPut
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBuildflavorPutCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/buildflavor"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdBuildflavorPutValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdBuildflavorPut(Async)");
        }

        return selfApplicationsAppIdBuildflavorPutCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdBuildflavorPut(String appId) throws ApiException {
        selfApplicationsAppIdBuildflavorPutWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdBuildflavorPutWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdBuildflavorPutValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdBuildflavorPutAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdBuildflavorPutValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdDependenciesEnvGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDependenciesEnvGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/dependencies/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdDependenciesEnvGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdDependenciesEnvGet(Async)");
        }

        return selfApplicationsAppIdDependenciesEnvGetCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return List&lt;LinkedAppEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAppEnv> selfApplicationsAppIdDependenciesEnvGet(String appId) throws ApiException {
        ApiResponse<List<LinkedAppEnv>> localVarResp = selfApplicationsAppIdDependenciesEnvGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;LinkedAppEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAppEnv>> selfApplicationsAppIdDependenciesEnvGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdDependenciesEnvGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDependenciesEnvGetAsync(String appId, final ApiCallback<List<LinkedAppEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdDependenciesEnvGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdDeploymentsDeploymentIdGet
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGetCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/deployments/{deploymentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling selfApplicationsAppIdDeploymentsDeploymentIdGet(Async)");
        }

        return selfApplicationsAppIdDeploymentsDeploymentIdGetCall(appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdDeploymentsDeploymentIdGet(String appId, String deploymentId) throws ApiException {
        selfApplicationsAppIdDeploymentsDeploymentIdGetWithHttpInfo(appId, deploymentId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdDeploymentsDeploymentIdGetWithHttpInfo(String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdDeploymentsDeploymentIdGetAsync(String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdDeploymentsDeploymentIdGetValidateBeforeCall(appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdExposedEnvGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdExposedEnvGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvGet(Async)");
        }

        return selfApplicationsAppIdExposedEnvGetCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdExposedEnvGet(String appId) throws ApiException {
        selfApplicationsAppIdExposedEnvGetWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdExposedEnvGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdExposedEnvPut
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvPutCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdExposedEnvPutValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdExposedEnvPut(Async)");
        }

        return selfApplicationsAppIdExposedEnvPutCall(appId, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdExposedEnvPut(String appId) throws ApiException {
        selfApplicationsAppIdExposedEnvPutWithHttpInfo(appId);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdExposedEnvPutWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvPutValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdExposedEnvPutAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdExposedEnvPutValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfApplicationsAppIdInstancesInstanceIdGet
     * @param instanceId  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGetCall(String instanceId, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/applications/{appId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(String instanceId, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling selfApplicationsAppIdInstancesInstanceIdGet(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling selfApplicationsAppIdInstancesInstanceIdGet(Async)");
        }

        return selfApplicationsAppIdInstancesInstanceIdGetCall(instanceId, appId, _callback);

    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfApplicationsAppIdInstancesInstanceIdGet(String instanceId, String appId) throws ApiException {
        selfApplicationsAppIdInstancesInstanceIdGetWithHttpInfo(instanceId, appId);
    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfApplicationsAppIdInstancesInstanceIdGetWithHttpInfo(String instanceId, String appId) throws ApiException {
        okhttp3.Call localVarCall = selfApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(instanceId, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfApplicationsAppIdInstancesInstanceIdGetAsync(String instanceId, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfApplicationsAppIdInstancesInstanceIdGetValidateBeforeCall(instanceId, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfCliTokensGet
     * @param cliToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfCliTokensGetCall(String cliToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/cli_tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cliToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cli_token", cliToken));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfCliTokensGetValidateBeforeCall(String cliToken, final ApiCallback _callback) throws ApiException {
        return selfCliTokensGetCall(cliToken, _callback);

    }

    /**
     * 
     * 
     * @param cliToken  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfCliTokensGet(String cliToken) throws ApiException {
        selfCliTokensGetWithHttpInfo(cliToken);
    }

    /**
     * 
     * 
     * @param cliToken  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfCliTokensGetWithHttpInfo(String cliToken) throws ApiException {
        okhttp3.Call localVarCall = selfCliTokensGetValidateBeforeCall(cliToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param cliToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfCliTokensGetAsync(String cliToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfCliTokensGetValidateBeforeCall(cliToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfMfaKindBackupcodesGet
     * @param kind  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindBackupcodesGetCall(String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/mfa/{kind}/backupcodes"
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfMfaKindBackupcodesGetValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling selfMfaKindBackupcodesGet(Async)");
        }

        return selfMfaKindBackupcodesGetCall(kind, _callback);

    }

    /**
     * 
     * 
     * @param kind  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfMfaKindBackupcodesGet(String kind) throws ApiException {
        selfMfaKindBackupcodesGetWithHttpInfo(kind);
    }

    /**
     * 
     * 
     * @param kind  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfMfaKindBackupcodesGetWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = selfMfaKindBackupcodesGetValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param kind  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindBackupcodesGetAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfMfaKindBackupcodesGetValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfMfaKindConfirmationPost
     * @param kind  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindConfirmationPostCall(String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/mfa/{kind}/confirmation"
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfMfaKindConfirmationPostValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling selfMfaKindConfirmationPost(Async)");
        }

        return selfMfaKindConfirmationPostCall(kind, _callback);

    }

    /**
     * 
     * 
     * @param kind  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfMfaKindConfirmationPost(String kind) throws ApiException {
        selfMfaKindConfirmationPostWithHttpInfo(kind);
    }

    /**
     * 
     * 
     * @param kind  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfMfaKindConfirmationPostWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = selfMfaKindConfirmationPostValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param kind  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindConfirmationPostAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfMfaKindConfirmationPostValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfMfaKindDelete
     * @param kind  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindDeleteCall(String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/mfa/{kind}"
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfMfaKindDeleteValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling selfMfaKindDelete(Async)");
        }

        return selfMfaKindDeleteCall(kind, _callback);

    }

    /**
     * 
     * 
     * @param kind  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfMfaKindDelete(String kind) throws ApiException {
        selfMfaKindDeleteWithHttpInfo(kind);
    }

    /**
     * 
     * 
     * @param kind  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfMfaKindDeleteWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = selfMfaKindDeleteValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param kind  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindDeleteAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfMfaKindDeleteValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfMfaKindPost
     * @param kind  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindPostCall(String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/mfa/{kind}"
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfMfaKindPostValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling selfMfaKindPost(Async)");
        }

        return selfMfaKindPostCall(kind, _callback);

    }

    /**
     * 
     * 
     * @param kind  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfMfaKindPost(String kind) throws ApiException {
        selfMfaKindPostWithHttpInfo(kind);
    }

    /**
     * 
     * 
     * @param kind  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfMfaKindPostWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = selfMfaKindPostValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param kind  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindPostAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfMfaKindPostValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfMfaKindPut
     * @param kind  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindPutCall(String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/mfa/{kind}"
            .replace("{" + "kind" + "}", localVarApiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfMfaKindPutValidateBeforeCall(String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling selfMfaKindPut(Async)");
        }

        return selfMfaKindPutCall(kind, _callback);

    }

    /**
     * 
     * 
     * @param kind  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfMfaKindPut(String kind) throws ApiException {
        selfMfaKindPutWithHttpInfo(kind);
    }

    /**
     * 
     * 
     * @param kind  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfMfaKindPutWithHttpInfo(String kind) throws ApiException {
        okhttp3.Call localVarCall = selfMfaKindPutValidateBeforeCall(kind, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param kind  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfMfaKindPutAsync(String kind, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfMfaKindPutValidateBeforeCall(kind, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsMethodsDefaultGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMethodsDefaultGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/methods/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsMethodsDefaultGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsMethodsDefaultGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsMethodsDefaultGet() throws ApiException {
        selfPaymentsMethodsDefaultGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsMethodsDefaultGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsMethodsDefaultGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMethodsDefaultGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsMethodsDefaultGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsMethodsDefaultPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMethodsDefaultPutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/methods/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsMethodsDefaultPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsMethodsDefaultPutCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsMethodsDefaultPut() throws ApiException {
        selfPaymentsMethodsDefaultPutWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsMethodsDefaultPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsMethodsDefaultPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMethodsDefaultPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsMethodsDefaultPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsMonthlyinvoiceGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMonthlyinvoiceGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/monthlyinvoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsMonthlyinvoiceGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsMonthlyinvoiceGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsMonthlyinvoiceGet() throws ApiException {
        selfPaymentsMonthlyinvoiceGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsMonthlyinvoiceGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsMonthlyinvoiceGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMonthlyinvoiceGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsMonthlyinvoiceGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsMonthlyinvoiceMaxcreditPut
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMonthlyinvoiceMaxcreditPutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/monthlyinvoice/maxcredit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsMonthlyinvoiceMaxcreditPutCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsMonthlyinvoiceMaxcreditPut() throws ApiException {
        selfPaymentsMonthlyinvoiceMaxcreditPutWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsMonthlyinvoiceMaxcreditPutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsMonthlyinvoiceMaxcreditPutAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsMonthlyinvoiceMaxcreditPutValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsRecurringGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsRecurringGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsRecurringGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsRecurringGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsRecurringGet() throws ApiException {
        selfPaymentsRecurringGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsRecurringGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsRecurringGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsRecurringGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsRecurringGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for selfPaymentsTokensStripeGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsTokensStripeGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/self/payments/tokens/stripe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call selfPaymentsTokensStripeGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return selfPaymentsTokensStripeGetCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void selfPaymentsTokensStripeGet() throws ApiException {
        selfPaymentsTokensStripeGetWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> selfPaymentsTokensStripeGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = selfPaymentsTokensStripeGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call selfPaymentsTokensStripeGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = selfPaymentsTokensStripeGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigProviderEnv
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigProviderEnvCall(String configurationProviderId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v4/addon-providers/config-provider/addons/{configurationProviderId}/env"
            .replace("{" + "configurationProviderId" + "}", localVarApiClient.escapeString(configurationProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigProviderEnvValidateBeforeCall(String configurationProviderId, List<Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationProviderId' is set
        if (configurationProviderId == null) {
            throw new ApiException("Missing the required parameter 'configurationProviderId' when calling updateConfigProviderEnv(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling updateConfigProviderEnv(Async)");
        }

        return updateConfigProviderEnvCall(configurationProviderId, requestBody, _callback);

    }

    /**
     * Update provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> updateConfigProviderEnv(String configurationProviderId, List<Object> requestBody) throws ApiException {
        ApiResponse<List<Object>> localVarResp = updateConfigProviderEnvWithHttpInfo(configurationProviderId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Update provider&#39;s addon environment
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> updateConfigProviderEnvWithHttpInfo(String configurationProviderId, List<Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateConfigProviderEnvValidateBeforeCall(configurationProviderId, requestBody, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update provider&#39;s addon environment (asynchronously)
     * 
     * @param configurationProviderId Automatically added (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updated config providers environment variables </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigProviderEnvAsync(String configurationProviderId, List<Object> requestBody, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigProviderEnvValidateBeforeCall(configurationProviderId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsGet(Async)");
        }

        return v3LogsAppIdDrainsGetCall(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsGet(String appId) throws ApiException {
        v3LogsAppIdDrainsGetWithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drains for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsIdOrUrlDelete
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlDeleteCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlDelete(Async)");
        }

        return v3LogsAppIdDrainsIdOrUrlDeleteCall(appId, _callback);

    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsIdOrUrlDelete(String appId) throws ApiException {
        v3LogsAppIdDrainsIdOrUrlDeleteWithHttpInfo(appId);
    }

    /**
     * 
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsIdOrUrlDeleteWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlDeleteAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlDeleteValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsIdOrUrlGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains/:idOrUrl"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsIdOrUrlGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsIdOrUrlGet(Async)");
        }

        return v3LogsAppIdDrainsIdOrUrlGetCall(appId, _callback);

    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsIdOrUrlGet(String appId) throws ApiException {
        v3LogsAppIdDrainsIdOrUrlGetWithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsIdOrUrlGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs drain by id or url for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsIdOrUrlGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsIdOrUrlGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdDrainsPost
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsPostCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/drains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdDrainsPostValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdDrainsPost(Async)");
        }

        return v3LogsAppIdDrainsPostCall(appId, _callback);

    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdDrainsPost(String appId) throws ApiException {
        v3LogsAppIdDrainsPostWithHttpInfo(appId);
    }

    /**
     * 
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdDrainsPostWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdDrainsPostValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a log drain for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdDrainsPostAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdDrainsPostValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdGet(Async)");
        }

        return v3LogsAppIdGetCall(appId, _callback);

    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdGet(String appId) throws ApiException {
        v3LogsAppIdGetWithHttpInfo(appId);
    }

    /**
     * 
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Fetch the logs for a given application
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdLogsChunkedGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsChunkedGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/logs-chunked"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdLogsChunkedGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdLogsChunkedGet(Async)");
        }

        return v3LogsAppIdLogsChunkedGetCall(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdLogsChunkedGet(String appId) throws ApiException {
        v3LogsAppIdLogsChunkedGetWithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdLogsChunkedGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdLogsChunkedGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a chunked, never-ending response
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsChunkedGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdLogsChunkedGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3LogsAppIdLogsSocketGet
     * @param appId Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsSocketGetCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/logs/{appId}/logs-socket"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3LogsAppIdLogsSocketGetValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v3LogsAppIdLogsSocketGet(Async)");
        }

        return v3LogsAppIdLogsSocketGetCall(appId, _callback);

    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void v3LogsAppIdLogsSocketGet(String appId) throws ApiException {
        v3LogsAppIdLogsSocketGetWithHttpInfo(appId);
    }

    /**
     * 
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v3LogsAppIdLogsSocketGetWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = v3LogsAppIdLogsSocketGetValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve logs as they come through a websocket connection. To have authorization, you have to send a &#x60;{ \&quot;message_type\&quot;: \&quot;oauth\&quot;, \&quot;authorization\&quot;: \&quot;oauth authorization string\&quot; }&#x60; message
     * @param appId Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> &lt;No description&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3LogsAppIdLogsSocketGetAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3LogsAppIdLogsSocketGetValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAddonsPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor//addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAddonsPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return vendorAddonsPostCall(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAddonsPost() throws ApiException {
        vendorAddonsPostWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAddonsPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = vendorAddonsPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAddonsPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAppsAddonIdLogscollectorGet
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdLogscollectorGetCall(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor//apps/{addonId}/logscollector"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAppsAddonIdLogscollectorGetValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling vendorAppsAddonIdLogscollectorGet(Async)");
        }

        return vendorAppsAddonIdLogscollectorGetCall(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAppsAddonIdLogscollectorGet(String addonId) throws ApiException {
        vendorAppsAddonIdLogscollectorGetWithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAppsAddonIdLogscollectorGetWithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = vendorAppsAddonIdLogscollectorGetValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdLogscollectorGetAsync(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAppsAddonIdLogscollectorGetValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAppsAddonIdMigrationCallbackPut
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdMigrationCallbackPutCall(String addonId, String planId, String region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}/migration_callback"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plan_id", planId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAppsAddonIdMigrationCallbackPutValidateBeforeCall(String addonId, String planId, String region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling vendorAppsAddonIdMigrationCallbackPut(Async)");
        }

        return vendorAppsAddonIdMigrationCallbackPutCall(addonId, planId, region, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAppsAddonIdMigrationCallbackPut(String addonId, String planId, String region) throws ApiException {
        vendorAppsAddonIdMigrationCallbackPutWithHttpInfo(addonId, planId, region);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAppsAddonIdMigrationCallbackPutWithHttpInfo(String addonId, String planId, String region) throws ApiException {
        okhttp3.Call localVarCall = vendorAppsAddonIdMigrationCallbackPutValidateBeforeCall(addonId, planId, region, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdMigrationCallbackPutAsync(String addonId, String planId, String region, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAppsAddonIdMigrationCallbackPutValidateBeforeCall(addonId, planId, region, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
