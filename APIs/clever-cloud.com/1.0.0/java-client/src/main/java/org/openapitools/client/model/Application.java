/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.Flavor;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.Vhost;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Application {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = false;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_BUILD_FLAVOR = "buildFlavor";
  @SerializedName(SERIALIZED_NAME_BUILD_FLAVOR)
  private Flavor buildFlavor;

  public static final String SERIALIZED_NAME_CANCEL_ON_PUSH = "cancelOnPush";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_PUSH)
  private Boolean cancelOnPush = false;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private LocalDate creationDate;

  public static final String SERIALIZED_NAME_DEPLOY_URL = "deployUrl";
  @SerializedName(SERIALIZED_NAME_DEPLOY_URL)
  private String deployUrl;

  public static final String SERIALIZED_NAME_DEPLOYMENT = "deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private Deployment deployment;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  private Boolean favourite = false;

  public static final String SERIALIZED_NAME_HOMOGENEOUS = "homogeneous";
  @SerializedName(SERIALIZED_NAME_HOMOGENEOUS)
  private Boolean homogeneous = false;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private Instance instance;

  public static final String SERIALIZED_NAME_LAST_DEPLOY = "last_deploy";
  @SerializedName(SERIALIZED_NAME_LAST_DEPLOY)
  private Integer lastDeploy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_SEPARATE_BUILD = "separateBuild";
  @SerializedName(SERIALIZED_NAME_SEPARATE_BUILD)
  private Boolean separateBuild = false;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STICKY_SESSIONS = "stickySessions";
  @SerializedName(SERIALIZED_NAME_STICKY_SESSIONS)
  private Boolean stickySessions = false;

  public static final String SERIALIZED_NAME_VHOSTS = "vhosts";
  @SerializedName(SERIALIZED_NAME_VHOSTS)
  private List<Vhost> vhosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBHOOK_SECRET = "webhookSecret";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_SECRET)
  private String webhookSecret;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhookUrl";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public Application() {
  }

  public Application archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nonnull
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public Application branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nonnull
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public Application buildFlavor(Flavor buildFlavor) {
    this.buildFlavor = buildFlavor;
    return this;
  }

  /**
   * Get buildFlavor
   * @return buildFlavor
   */
  @javax.annotation.Nonnull
  public Flavor getBuildFlavor() {
    return buildFlavor;
  }

  public void setBuildFlavor(Flavor buildFlavor) {
    this.buildFlavor = buildFlavor;
  }


  public Application cancelOnPush(Boolean cancelOnPush) {
    this.cancelOnPush = cancelOnPush;
    return this;
  }

  /**
   * Get cancelOnPush
   * @return cancelOnPush
   */
  @javax.annotation.Nonnull
  public Boolean getCancelOnPush() {
    return cancelOnPush;
  }

  public void setCancelOnPush(Boolean cancelOnPush) {
    this.cancelOnPush = cancelOnPush;
  }


  public Application commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nonnull
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public Application creationDate(LocalDate creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public LocalDate getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(LocalDate creationDate) {
    this.creationDate = creationDate;
  }


  public Application deployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
    return this;
  }

  /**
   * Get deployUrl
   * @return deployUrl
   */
  @javax.annotation.Nonnull
  public String getDeployUrl() {
    return deployUrl;
  }

  public void setDeployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
  }


  public Application deployment(Deployment deployment) {
    this.deployment = deployment;
    return this;
  }

  /**
   * Get deployment
   * @return deployment
   */
  @javax.annotation.Nonnull
  public Deployment getDeployment() {
    return deployment;
  }

  public void setDeployment(Deployment deployment) {
    this.deployment = deployment;
  }


  public Application description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Application favourite(Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Get favourite
   * @return favourite
   */
  @javax.annotation.Nonnull
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(Boolean favourite) {
    this.favourite = favourite;
  }


  public Application homogeneous(Boolean homogeneous) {
    this.homogeneous = homogeneous;
    return this;
  }

  /**
   * Get homogeneous
   * @return homogeneous
   */
  @javax.annotation.Nonnull
  public Boolean getHomogeneous() {
    return homogeneous;
  }

  public void setHomogeneous(Boolean homogeneous) {
    this.homogeneous = homogeneous;
  }


  public Application id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Application instance(Instance instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Get instance
   * @return instance
   */
  @javax.annotation.Nonnull
  public Instance getInstance() {
    return instance;
  }

  public void setInstance(Instance instance) {
    this.instance = instance;
  }


  public Application lastDeploy(Integer lastDeploy) {
    this.lastDeploy = lastDeploy;
    return this;
  }

  /**
   * Get lastDeploy
   * @return lastDeploy
   */
  @javax.annotation.Nonnull
  public Integer getLastDeploy() {
    return lastDeploy;
  }

  public void setLastDeploy(Integer lastDeploy) {
    this.lastDeploy = lastDeploy;
  }


  public Application name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Application ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nonnull
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public Application separateBuild(Boolean separateBuild) {
    this.separateBuild = separateBuild;
    return this;
  }

  /**
   * Get separateBuild
   * @return separateBuild
   */
  @javax.annotation.Nonnull
  public Boolean getSeparateBuild() {
    return separateBuild;
  }

  public void setSeparateBuild(Boolean separateBuild) {
    this.separateBuild = separateBuild;
  }


  public Application state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Application stickySessions(Boolean stickySessions) {
    this.stickySessions = stickySessions;
    return this;
  }

  /**
   * Get stickySessions
   * @return stickySessions
   */
  @javax.annotation.Nonnull
  public Boolean getStickySessions() {
    return stickySessions;
  }

  public void setStickySessions(Boolean stickySessions) {
    this.stickySessions = stickySessions;
  }


  public Application vhosts(List<Vhost> vhosts) {
    this.vhosts = vhosts;
    return this;
  }

  public Application addVhostsItem(Vhost vhostsItem) {
    if (this.vhosts == null) {
      this.vhosts = new ArrayList<>();
    }
    this.vhosts.add(vhostsItem);
    return this;
  }

  /**
   * Get vhosts
   * @return vhosts
   */
  @javax.annotation.Nonnull
  public List<Vhost> getVhosts() {
    return vhosts;
  }

  public void setVhosts(List<Vhost> vhosts) {
    this.vhosts = vhosts;
  }


  public Application webhookSecret(String webhookSecret) {
    this.webhookSecret = webhookSecret;
    return this;
  }

  /**
   * Get webhookSecret
   * @return webhookSecret
   */
  @javax.annotation.Nonnull
  public String getWebhookSecret() {
    return webhookSecret;
  }

  public void setWebhookSecret(String webhookSecret) {
    this.webhookSecret = webhookSecret;
  }


  public Application webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nonnull
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public Application zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * &#x60;par&#x60; ou &#x60;mtl&#x60;
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.archived, application.archived) &&
        Objects.equals(this.branch, application.branch) &&
        Objects.equals(this.buildFlavor, application.buildFlavor) &&
        Objects.equals(this.cancelOnPush, application.cancelOnPush) &&
        Objects.equals(this.commitId, application.commitId) &&
        Objects.equals(this.creationDate, application.creationDate) &&
        Objects.equals(this.deployUrl, application.deployUrl) &&
        Objects.equals(this.deployment, application.deployment) &&
        Objects.equals(this.description, application.description) &&
        Objects.equals(this.favourite, application.favourite) &&
        Objects.equals(this.homogeneous, application.homogeneous) &&
        Objects.equals(this.id, application.id) &&
        Objects.equals(this.instance, application.instance) &&
        Objects.equals(this.lastDeploy, application.lastDeploy) &&
        Objects.equals(this.name, application.name) &&
        Objects.equals(this.ownerId, application.ownerId) &&
        Objects.equals(this.separateBuild, application.separateBuild) &&
        Objects.equals(this.state, application.state) &&
        Objects.equals(this.stickySessions, application.stickySessions) &&
        Objects.equals(this.vhosts, application.vhosts) &&
        Objects.equals(this.webhookSecret, application.webhookSecret) &&
        Objects.equals(this.webhookUrl, application.webhookUrl) &&
        Objects.equals(this.zone, application.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, branch, buildFlavor, cancelOnPush, commitId, creationDate, deployUrl, deployment, description, favourite, homogeneous, id, instance, lastDeploy, name, ownerId, separateBuild, state, stickySessions, vhosts, webhookSecret, webhookUrl, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    buildFlavor: ").append(toIndentedString(buildFlavor)).append("\n");
    sb.append("    cancelOnPush: ").append(toIndentedString(cancelOnPush)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deployUrl: ").append(toIndentedString(deployUrl)).append("\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    homogeneous: ").append(toIndentedString(homogeneous)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    lastDeploy: ").append(toIndentedString(lastDeploy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    separateBuild: ").append(toIndentedString(separateBuild)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stickySessions: ").append(toIndentedString(stickySessions)).append("\n");
    sb.append("    vhosts: ").append(toIndentedString(vhosts)).append("\n");
    sb.append("    webhookSecret: ").append(toIndentedString(webhookSecret)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("branch");
    openapiFields.add("buildFlavor");
    openapiFields.add("cancelOnPush");
    openapiFields.add("commitId");
    openapiFields.add("creationDate");
    openapiFields.add("deployUrl");
    openapiFields.add("deployment");
    openapiFields.add("description");
    openapiFields.add("favourite");
    openapiFields.add("homogeneous");
    openapiFields.add("id");
    openapiFields.add("instance");
    openapiFields.add("last_deploy");
    openapiFields.add("name");
    openapiFields.add("ownerId");
    openapiFields.add("separateBuild");
    openapiFields.add("state");
    openapiFields.add("stickySessions");
    openapiFields.add("vhosts");
    openapiFields.add("webhookSecret");
    openapiFields.add("webhookUrl");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("buildFlavor");
    openapiRequiredFields.add("cancelOnPush");
    openapiRequiredFields.add("commitId");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("deployUrl");
    openapiRequiredFields.add("deployment");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("favourite");
    openapiRequiredFields.add("homogeneous");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instance");
    openapiRequiredFields.add("last_deploy");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("ownerId");
    openapiRequiredFields.add("separateBuild");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("stickySessions");
    openapiRequiredFields.add("vhosts");
    openapiRequiredFields.add("webhookSecret");
    openapiRequiredFields.add("webhookUrl");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Application
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Application.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Application` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Application.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      // validate the required field `buildFlavor`
      Flavor.validateJsonElement(jsonObj.get("buildFlavor"));
      if (!jsonObj.get("commitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitId").toString()));
      }
      if (!jsonObj.get("deployUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployUrl").toString()));
      }
      // validate the required field `deployment`
      Deployment.validateJsonElement(jsonObj.get("deployment"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `instance`
      Instance.validateJsonElement(jsonObj.get("instance"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("vhosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vhosts` to be an array in the JSON string but got `%s`", jsonObj.get("vhosts").toString()));
      }

      JsonArray jsonArrayvhosts = jsonObj.getAsJsonArray("vhosts");
      // validate the required field `vhosts` (array)
      for (int i = 0; i < jsonArrayvhosts.size(); i++) {
        Vhost.validateJsonElement(jsonArrayvhosts.get(i));
      };
      if (!jsonObj.get("webhookSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookSecret").toString()));
      }
      if (!jsonObj.get("webhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookUrl").toString()));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Application given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Application
   * @throws IOException if the JSON string is invalid with respect to Application
   */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

  /**
   * Convert an instance of Application to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

