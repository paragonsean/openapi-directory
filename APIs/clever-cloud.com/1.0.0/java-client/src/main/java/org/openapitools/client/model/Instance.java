/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Flavor;
import org.openapitools.client.model.Variant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_BUILD_FLAVOR = "buildFlavor";
  @SerializedName(SERIALIZED_NAME_BUILD_FLAVOR)
  private Flavor buildFlavor;

  public static final String SERIALIZED_NAME_COMING_SOON = "comingSoon";
  @SerializedName(SERIALIZED_NAME_COMING_SOON)
  private Boolean comingSoon = false;

  public static final String SERIALIZED_NAME_DEFAULT_ENV = "defaultEnv";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ENV)
  private Object defaultEnv;

  public static final String SERIALIZED_NAME_DEFAULT_FLAVOR = "defaultFlavor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FLAVOR)
  private Flavor defaultFlavor;

  public static final String SERIALIZED_NAME_DEPLOYMENTS = "deployments";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENTS)
  private List<String> deployments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = false;

  public static final String SERIALIZED_NAME_FLAVORS = "flavors";
  @SerializedName(SERIALIZED_NAME_FLAVORS)
  private List<Flavor> flavors = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_AND_VERSION = "instanceAndVersion";
  @SerializedName(SERIALIZED_NAME_INSTANCE_AND_VERSION)
  private String instanceAndVersion;

  public static final String SERIALIZED_NAME_MAX_ALLOWED_INSTANCES = "maxAllowedInstances";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_INSTANCES)
  private Integer maxAllowedInstances;

  public static final String SERIALIZED_NAME_MAX_FLAVOR = "maxFlavor";
  @SerializedName(SERIALIZED_NAME_MAX_FLAVOR)
  private Flavor maxFlavor;

  public static final String SERIALIZED_NAME_MAX_INSTANCES = "maxInstances";
  @SerializedName(SERIALIZED_NAME_MAX_INSTANCES)
  private Integer maxInstances;

  public static final String SERIALIZED_NAME_MIN_FLAVOR = "minFlavor";
  @SerializedName(SERIALIZED_NAME_MIN_FLAVOR)
  private Flavor minFlavor;

  public static final String SERIALIZED_NAME_MIN_INSTANCES = "minInstances";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCES)
  private Integer minInstances;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private Variant variant;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Instance() {
  }

  public Instance buildFlavor(Flavor buildFlavor) {
    this.buildFlavor = buildFlavor;
    return this;
  }

  /**
   * Get buildFlavor
   * @return buildFlavor
   */
  @javax.annotation.Nullable
  public Flavor getBuildFlavor() {
    return buildFlavor;
  }

  public void setBuildFlavor(Flavor buildFlavor) {
    this.buildFlavor = buildFlavor;
  }


  public Instance comingSoon(Boolean comingSoon) {
    this.comingSoon = comingSoon;
    return this;
  }

  /**
   * Get comingSoon
   * @return comingSoon
   */
  @javax.annotation.Nullable
  public Boolean getComingSoon() {
    return comingSoon;
  }

  public void setComingSoon(Boolean comingSoon) {
    this.comingSoon = comingSoon;
  }


  public Instance defaultEnv(Object defaultEnv) {
    this.defaultEnv = defaultEnv;
    return this;
  }

  /**
   * Get defaultEnv
   * @return defaultEnv
   */
  @javax.annotation.Nonnull
  public Object getDefaultEnv() {
    return defaultEnv;
  }

  public void setDefaultEnv(Object defaultEnv) {
    this.defaultEnv = defaultEnv;
  }


  public Instance defaultFlavor(Flavor defaultFlavor) {
    this.defaultFlavor = defaultFlavor;
    return this;
  }

  /**
   * Get defaultFlavor
   * @return defaultFlavor
   */
  @javax.annotation.Nullable
  public Flavor getDefaultFlavor() {
    return defaultFlavor;
  }

  public void setDefaultFlavor(Flavor defaultFlavor) {
    this.defaultFlavor = defaultFlavor;
  }


  public Instance deployments(List<String> deployments) {
    this.deployments = deployments;
    return this;
  }

  public Instance addDeploymentsItem(String deploymentsItem) {
    if (this.deployments == null) {
      this.deployments = new ArrayList<>();
    }
    this.deployments.add(deploymentsItem);
    return this;
  }

  /**
   * Get deployments
   * @return deployments
   */
  @javax.annotation.Nullable
  public List<String> getDeployments() {
    return deployments;
  }

  public void setDeployments(List<String> deployments) {
    this.deployments = deployments;
  }


  public Instance description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Instance enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Instance flavors(List<Flavor> flavors) {
    this.flavors = flavors;
    return this;
  }

  public Instance addFlavorsItem(Flavor flavorsItem) {
    if (this.flavors == null) {
      this.flavors = new ArrayList<>();
    }
    this.flavors.add(flavorsItem);
    return this;
  }

  /**
   * Get flavors
   * @return flavors
   */
  @javax.annotation.Nonnull
  public List<Flavor> getFlavors() {
    return flavors;
  }

  public void setFlavors(List<Flavor> flavors) {
    this.flavors = flavors;
  }


  public Instance instanceAndVersion(String instanceAndVersion) {
    this.instanceAndVersion = instanceAndVersion;
    return this;
  }

  /**
   * Get instanceAndVersion
   * @return instanceAndVersion
   */
  @javax.annotation.Nonnull
  public String getInstanceAndVersion() {
    return instanceAndVersion;
  }

  public void setInstanceAndVersion(String instanceAndVersion) {
    this.instanceAndVersion = instanceAndVersion;
  }


  public Instance maxAllowedInstances(Integer maxAllowedInstances) {
    this.maxAllowedInstances = maxAllowedInstances;
    return this;
  }

  /**
   * Get maxAllowedInstances
   * @return maxAllowedInstances
   */
  @javax.annotation.Nonnull
  public Integer getMaxAllowedInstances() {
    return maxAllowedInstances;
  }

  public void setMaxAllowedInstances(Integer maxAllowedInstances) {
    this.maxAllowedInstances = maxAllowedInstances;
  }


  public Instance maxFlavor(Flavor maxFlavor) {
    this.maxFlavor = maxFlavor;
    return this;
  }

  /**
   * Get maxFlavor
   * @return maxFlavor
   */
  @javax.annotation.Nonnull
  public Flavor getMaxFlavor() {
    return maxFlavor;
  }

  public void setMaxFlavor(Flavor maxFlavor) {
    this.maxFlavor = maxFlavor;
  }


  public Instance maxInstances(Integer maxInstances) {
    this.maxInstances = maxInstances;
    return this;
  }

  /**
   * Get maxInstances
   * @return maxInstances
   */
  @javax.annotation.Nonnull
  public Integer getMaxInstances() {
    return maxInstances;
  }

  public void setMaxInstances(Integer maxInstances) {
    this.maxInstances = maxInstances;
  }


  public Instance minFlavor(Flavor minFlavor) {
    this.minFlavor = minFlavor;
    return this;
  }

  /**
   * Get minFlavor
   * @return minFlavor
   */
  @javax.annotation.Nonnull
  public Flavor getMinFlavor() {
    return minFlavor;
  }

  public void setMinFlavor(Flavor minFlavor) {
    this.minFlavor = minFlavor;
  }


  public Instance minInstances(Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

  /**
   * Get minInstances
   * @return minInstances
   */
  @javax.annotation.Nonnull
  public Integer getMinInstances() {
    return minInstances;
  }

  public void setMinInstances(Integer minInstances) {
    this.minInstances = minInstances;
  }


  public Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Instance tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Instance addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Instance type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Instance variant(Variant variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nonnull
  public Variant getVariant() {
    return variant;
  }

  public void setVariant(Variant variant) {
    this.variant = variant;
  }


  public Instance version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.buildFlavor, instance.buildFlavor) &&
        Objects.equals(this.comingSoon, instance.comingSoon) &&
        Objects.equals(this.defaultEnv, instance.defaultEnv) &&
        Objects.equals(this.defaultFlavor, instance.defaultFlavor) &&
        Objects.equals(this.deployments, instance.deployments) &&
        Objects.equals(this.description, instance.description) &&
        Objects.equals(this.enabled, instance.enabled) &&
        Objects.equals(this.flavors, instance.flavors) &&
        Objects.equals(this.instanceAndVersion, instance.instanceAndVersion) &&
        Objects.equals(this.maxAllowedInstances, instance.maxAllowedInstances) &&
        Objects.equals(this.maxFlavor, instance.maxFlavor) &&
        Objects.equals(this.maxInstances, instance.maxInstances) &&
        Objects.equals(this.minFlavor, instance.minFlavor) &&
        Objects.equals(this.minInstances, instance.minInstances) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.tags, instance.tags) &&
        Objects.equals(this.type, instance.type) &&
        Objects.equals(this.variant, instance.variant) &&
        Objects.equals(this.version, instance.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildFlavor, comingSoon, defaultEnv, defaultFlavor, deployments, description, enabled, flavors, instanceAndVersion, maxAllowedInstances, maxFlavor, maxInstances, minFlavor, minInstances, name, tags, type, variant, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    buildFlavor: ").append(toIndentedString(buildFlavor)).append("\n");
    sb.append("    comingSoon: ").append(toIndentedString(comingSoon)).append("\n");
    sb.append("    defaultEnv: ").append(toIndentedString(defaultEnv)).append("\n");
    sb.append("    defaultFlavor: ").append(toIndentedString(defaultFlavor)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    flavors: ").append(toIndentedString(flavors)).append("\n");
    sb.append("    instanceAndVersion: ").append(toIndentedString(instanceAndVersion)).append("\n");
    sb.append("    maxAllowedInstances: ").append(toIndentedString(maxAllowedInstances)).append("\n");
    sb.append("    maxFlavor: ").append(toIndentedString(maxFlavor)).append("\n");
    sb.append("    maxInstances: ").append(toIndentedString(maxInstances)).append("\n");
    sb.append("    minFlavor: ").append(toIndentedString(minFlavor)).append("\n");
    sb.append("    minInstances: ").append(toIndentedString(minInstances)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildFlavor");
    openapiFields.add("comingSoon");
    openapiFields.add("defaultEnv");
    openapiFields.add("defaultFlavor");
    openapiFields.add("deployments");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("flavors");
    openapiFields.add("instanceAndVersion");
    openapiFields.add("maxAllowedInstances");
    openapiFields.add("maxFlavor");
    openapiFields.add("maxInstances");
    openapiFields.add("minFlavor");
    openapiFields.add("minInstances");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("variant");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultEnv");
    openapiRequiredFields.add("flavors");
    openapiRequiredFields.add("instanceAndVersion");
    openapiRequiredFields.add("maxAllowedInstances");
    openapiRequiredFields.add("maxFlavor");
    openapiRequiredFields.add("maxInstances");
    openapiRequiredFields.add("minFlavor");
    openapiRequiredFields.add("minInstances");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("variant");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Instance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buildFlavor`
      if (jsonObj.get("buildFlavor") != null && !jsonObj.get("buildFlavor").isJsonNull()) {
        Flavor.validateJsonElement(jsonObj.get("buildFlavor"));
      }
      // validate the optional field `defaultFlavor`
      if (jsonObj.get("defaultFlavor") != null && !jsonObj.get("defaultFlavor").isJsonNull()) {
        Flavor.validateJsonElement(jsonObj.get("defaultFlavor"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deployments") != null && !jsonObj.get("deployments").isJsonNull() && !jsonObj.get("deployments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployments` to be an array in the JSON string but got `%s`", jsonObj.get("deployments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("flavors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flavors` to be an array in the JSON string but got `%s`", jsonObj.get("flavors").toString()));
      }

      JsonArray jsonArrayflavors = jsonObj.getAsJsonArray("flavors");
      // validate the required field `flavors` (array)
      for (int i = 0; i < jsonArrayflavors.size(); i++) {
        Flavor.validateJsonElement(jsonArrayflavors.get(i));
      };
      if (!jsonObj.get("instanceAndVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceAndVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceAndVersion").toString()));
      }
      // validate the required field `maxFlavor`
      Flavor.validateJsonElement(jsonObj.get("maxFlavor"));
      // validate the required field `minFlavor`
      Flavor.validateJsonElement(jsonObj.get("minFlavor"));
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `variant`
      Variant.validateJsonElement(jsonObj.get("variant"));
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

