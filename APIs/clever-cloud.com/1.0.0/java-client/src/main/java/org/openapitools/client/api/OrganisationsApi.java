/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Addon;
import org.openapitools.client.model.AddonMigration;
import org.openapitools.client.model.AddonProviderSso;
import org.openapitools.client.model.AppInstance;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.Body;
import org.openapitools.client.model.Conso;
import org.openapitools.client.model.Consumer;
import org.openapitools.client.model.Credits;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentSummary;
import org.openapitools.client.model.Env;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.LinkedAppEnv;
import org.openapitools.client.model.ListEnv;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.OrganisationsIdAddonsAddonIdMigrationsPostRequest;
import org.openapitools.client.model.PaymentData;
import org.openapitools.client.model.Plan;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.Schema2;
import org.openapitools.client.model.Secret;
import org.openapitools.client.model.Sso;
import org.openapitools.client.model.SupernovaInstanceView;
import org.openapitools.client.model.Vhost;
import org.openapitools.client.model.WannabeAddon;
import org.openapitools.client.model.WannabeAddonProvider;
import org.openapitools.client.model.WannabeApplication;
import org.openapitools.client.model.WannabeConsumer;
import org.openapitools.client.model.WannabeEnv;
import org.openapitools.client.model.WannabeFeature;
import org.openapitools.client.model.WannabeOrganisation;
import org.openapitools.client.model.WannabePlan;
import org.openapitools.client.model.WannabePlanFeature;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganisationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkGroupExternalPeer_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeer_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupExternalPeer_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer_0(Async)");
        }

        return createNetworkGroupExternalPeer_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroupExternalPeer_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupExternalPeer_0WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupExternalPeer_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupExternalPeer_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add external peer (asynchronously)
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeer_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupExternalPeer_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupMember_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMember_0Call(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema2;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupMember_0ValidateBeforeCall(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupMember_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember_0(Async)");
        }

        return createNetworkGroupMember_0Call(ownerId, networkGroupId, schema2, _callback);

    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createNetworkGroupMember_0(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        createNetworkGroupMember_0WithHttpInfo(ownerId, networkGroupId, schema2);
    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createNetworkGroupMember_0WithHttpInfo(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, schema2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add member (asynchronously)
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMember_0Async(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, schema2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroup_0
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroup_0Call(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroup_0ValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroup_0(Async)");
        }

        return createNetworkGroup_0Call(ownerId, body, _callback);

    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroup_0(String ownerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroup_0WithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroup_0WithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroup_0ValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Group (asynchronously)
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroup_0Async(String ownerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroup_0ValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupExternalPeer_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeer_0Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupExternalPeer_0ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer_0(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer_0(Async)");
        }

        return deleteNetworkGroupExternalPeer_0Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupExternalPeer_0(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupExternalPeer_0WithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupExternalPeer_0WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove external peer (asynchronously)
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeer_0Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupMember_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMember_0Call(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupMember_0ValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember_0(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember_0(Async)");
        }

        return deleteNetworkGroupMember_0Call(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupMember_0(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        deleteNetworkGroupMember_0WithHttpInfo(ownerId, networkGroupId, memberId, body);
    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupMember_0WithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove member (asynchronously)
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMember_0Async(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupPeer_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeer_0Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupPeer_0ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer_0(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer_0(Async)");
        }

        return deleteNetworkGroupPeer_0Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupPeer_0(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupPeer_0WithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupPeer_0WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove peer (asynchronously)
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeer_0Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroup_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroup_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroup_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroup_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup_0(Async)");
        }

        return deleteNetworkGroup_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroup_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        deleteNetworkGroup_0WithHttpInfo(ownerId, networkGroupId, body);
    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroup_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroup_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Network Group (asynchronously)
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroup_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroup_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Call(String id, String featureId, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features/{featureId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureId" + "}", localVarApiClient.escapeString(featureId.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0ValidateBeforeCall(String id, String featureId, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Call(id, featureId, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0(String id, String featureId, String providerId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0WithHttpInfo(id, featureId, providerId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0WithHttpInfo(String id, String featureId, String providerId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0ValidateBeforeCall(id, featureId, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureId  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0Async(String id, String featureId, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdFeaturesFeatureId_0ValidateBeforeCall(id, featureId, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Call(String id, String featureName, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(String id, String featureName, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Call(id, featureName, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(String id, String featureName, String providerId, String planId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0WithHttpInfo(id, featureName, providerId, planId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0WithHttpInfo(String id, String featureName, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(id, featureName, providerId, planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Async(String id, String featureName, String providerId, String planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(id, featureName, providerId, planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        return deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(id, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(String id, String providerId, String planId) throws ApiException {
        deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(id, providerId, planId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(String id, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Async(String id, String providerId, String planId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonsAddonIdTagsTag_1
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_1Call(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(String id, String tag, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        return deleteOrganisationsIdAddonsAddonIdTagsTag_1Call(id, tag, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonIdTagsTag_1(String id, String tag, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonIdTagsTag_1WithHttpInfo(id, tag, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonIdTagsTag_1WithHttpInfo(String id, String tag, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(id, tag, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonIdTagsTag_1Async(String id, String tag, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(id, tag, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdAddonsAddonId_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonId_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdAddonsAddonId_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdAddonsAddonId_1(Async)");
        }

        return deleteOrganisationsIdAddonsAddonId_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdAddonsAddonId_1(String id, String addonId) throws ApiException {
        deleteOrganisationsIdAddonsAddonId_1WithHttpInfo(id, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdAddonsAddonId_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deprovisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdAddonsAddonId_1Async(String id, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Call(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2ValidateBeforeCall(String id, String appId, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Call(id, appId, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2(String id, String appId, String addonId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2WithHttpInfo(id, appId, addonId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2WithHttpInfo(String id, String appId, String addonId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2ValidateBeforeCall(id, appId, addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlinkAddonFromApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2Async(String id, String appId, String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdAddonsAddonId_2ValidateBeforeCall(id, appId, addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Call(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(String dependencyId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Call(dependencyId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(String dependencyId, String appId, String id) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1WithHttpInfo(dependencyId, appId, id);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1WithHttpInfo(String dependencyId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(dependencyId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Async(String dependencyId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(dependencyId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Call(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1ValidateBeforeCall(String id, String appId, String deploymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Call(id, appId, deploymentId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1(String id, String appId, String deploymentId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1WithHttpInfo(id, appId, deploymentId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1WithHttpInfo(String id, String appId, String deploymentId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1ValidateBeforeCall(id, appId, deploymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1Async(String id, String appId, String deploymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdDeploymentsDeploymentIdInstances_1ValidateBeforeCall(id, appId, deploymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdEnvEnvName_1
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Call(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(String id, String appId, String envName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Call(id, appId, envName, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdEnvEnvName_1(String id, String appId, String envName) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdEnvEnvName_1WithHttpInfo(id, appId, envName);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdEnvEnvName_1WithHttpInfo(String id, String appId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(id, appId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdEnvEnvName_1Async(String id, String appId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(id, appId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdInstances_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdInstances_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdInstances_1(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> undeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdInstances_1Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdTagsTag_1
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_1Call(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(String id, String appId, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdTagsTag_1Call(id, appId, tag, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdTagsTag_1(String id, String appId, String tag) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdTagsTag_1WithHttpInfo(id, appId, tag);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdTagsTag_1WithHttpInfo(String id, String appId, String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(id, appId, tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdTagsTag_1Async(String id, String appId, String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(id, appId, tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsDomain_1
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Call(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(String id, String appId, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Call(id, appId, domain, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsDomain_1(String id, String appId, String domain) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsDomain_1WithHttpInfo(id, appId, domain);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsDomain_1WithHttpInfo(String id, String appId, String domain) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(id, appId, domain, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsDomain_1Async(String id, String appId, String domain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(id, appId, domain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unmarkFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdApplicationsAppId_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppId_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdApplicationsAppId_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdApplicationsAppId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteOrganisationsIdApplicationsAppId_1(Async)");
        }

        return deleteOrganisationsIdApplicationsAppId_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdApplicationsAppId_1(String id, String appId) throws ApiException {
        deleteOrganisationsIdApplicationsAppId_1WithHttpInfo(id, appId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdApplicationsAppId_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdApplicationsAppId_1Async(String id, String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdConsumersKey_0
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdConsumersKey_0Call(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdConsumersKey_0ValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdConsumersKey_0(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteOrganisationsIdConsumersKey_0(Async)");
        }

        return deleteOrganisationsIdConsumersKey_0Call(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdConsumersKey_0(String id, String key) throws ApiException {
        deleteOrganisationsIdConsumersKey_0WithHttpInfo(id, key);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdConsumersKey_0WithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdConsumersKey_0Async(String id, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdMembersUserId_0
     * @param id  (required)
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdMembersUserId_0Call(String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdMembersUserId_0ValidateBeforeCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdMembersUserId_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteOrganisationsIdMembersUserId_0(Async)");
        }

        return deleteOrganisationsIdMembersUserId_0Call(id, userId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdMembersUserId_0(String id, String userId) throws ApiException {
        deleteOrganisationsIdMembersUserId_0WithHttpInfo(id, userId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdMembersUserId_0WithHttpInfo(String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdMembersUserId_0ValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> removeOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdMembersUserId_0Async(String id, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdMembersUserId_0ValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdPaymentsBillingsBid_0
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsBillingsBid_0Call(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling deleteOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        return deleteOrganisationsIdPaymentsBillingsBid_0Call(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdPaymentsBillingsBid_0(String id, String bid) throws ApiException {
        deleteOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletePurchaseOrder </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsBillingsBid_0Async(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsIdPaymentsRecurring_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsRecurring_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/recurring"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsIdPaymentsRecurring_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsIdPaymentsRecurring_0(Async)");
        }

        return deleteOrganisationsIdPaymentsRecurring_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsIdPaymentsRecurring_0(String id) throws ApiException {
        deleteOrganisationsIdPaymentsRecurring_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsIdPaymentsRecurring_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsRecurring_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRecurrentPayment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsIdPaymentsRecurring_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsIdPaymentsRecurring_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganisationsId_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsId_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganisationsId_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOrganisationsId_0(Async)");
        }

        return deleteOrganisationsId_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrganisationsId_0(String id) throws ApiException {
        deleteOrganisationsId_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrganisationsId_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganisationsId_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrganisationsId_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganisationsId_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupMember_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMember_0Call(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupMember_0ValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupMember_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember_0(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getNetworkGroupMember_0(Async)");
        }

        return getNetworkGroupMember_0Call(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return Schema1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Schema1 getNetworkGroupMember_0(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        ApiResponse<Schema1> localVarResp = getNetworkGroupMember_0WithHttpInfo(ownerId, networkGroupId, memberId, body);
        return localVarResp.getData();
    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema1> getNetworkGroupMember_0WithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get member (asynchronously)
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMember_0Async(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Schema1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupMember_0ValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPeer_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeer_0Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPeer_0ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer_0(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupPeer_0(Async)");
        }

        return getNetworkGroupPeer_0Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupPeer_0(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupPeer_0WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupPeer_0WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get peer (asynchronously)
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeer_0Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPeer_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupStream_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStream_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupStream_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupStream_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream_0(Async)");
        }

        return getNetworkGroupStream_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupStream_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupStream_0WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupStream_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupStream_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Network Group SSE (asynchronously)
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStream_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupStream_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfigurationStream_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStream_0Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfigurationStream_0ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream_0(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream_0(Async)");
        }

        return getNetworkGroupWireGuardConfigurationStream_0Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfigurationStream_0(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfigurationStream_0WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfigurationStream_0WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStream_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStream_0Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStream_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfiguration_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfiguration_0Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfiguration_0ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration_0(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration_0(Async)");
        }

        return getNetworkGroupWireGuardConfiguration_0Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfiguration_0(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfiguration_0WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfiguration_0WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfiguration_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfiguration_0Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfiguration_0ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroup_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroup_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroup_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroup_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroup_0(Async)");
        }

        return getNetworkGroup_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroup_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroup_0WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroup_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroup_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Group (asynchronously)
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroup_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroup_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdFeatures_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeatures_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdFeatures_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdFeatures_0(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdFeatures_0Call(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public List<Feature> getOrganisationsIdAddonprovidersProviderIdFeatures_0(String id, String providerId) throws ApiException {
        ApiResponse<List<Feature>> localVarResp = getOrganisationsIdAddonprovidersProviderIdFeatures_0WithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;Feature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Feature>> getOrganisationsIdAddonprovidersProviderIdFeatures_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderFeatures </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdFeatures_0Async(String id, String providerId, final ApiCallback<List<Feature>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<Feature>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(String id, String providerId, String planId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(id, providerId, planId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(String id, String providerId, String planId) throws ApiException {
        ApiResponse<Plan> localVarResp = getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(id, providerId, planId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(String id, String providerId, String planId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Async(String id, String providerId, String planId, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdPlans_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlans_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdPlans_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdPlans_0(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdPlans_0Call(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public List<Plan> getOrganisationsIdAddonprovidersProviderIdPlans_0(String id, String providerId) throws ApiException {
        ApiResponse<List<Plan>> localVarResp = getOrganisationsIdAddonprovidersProviderIdPlans_0WithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;Plan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Plan>> getOrganisationsIdAddonprovidersProviderIdPlans_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderPlans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdPlans_0Async(String id, String providerId, final ApiCallback<List<Plan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<Plan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderIdTags_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTags_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTags_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderIdTags_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderIdTags_0(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderIdTags_0Call(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdAddonprovidersProviderIdTags_0(String id, String providerId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdAddonprovidersProviderIdTags_0WithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdAddonprovidersProviderIdTags_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdTags_0ValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getProviderTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderIdTags_0Async(String id, String providerId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderIdTags_0ValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonprovidersProviderId_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderId_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonprovidersProviderId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonprovidersProviderId_0(Async)");
        }

        return getOrganisationsIdAddonprovidersProviderId_0Call(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public Provider getOrganisationsIdAddonprovidersProviderId_0(String id, String providerId) throws ApiException {
        ApiResponse<Provider> localVarResp = getOrganisationsIdAddonprovidersProviderId_0WithHttpInfo(id, providerId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> getOrganisationsIdAddonprovidersProviderId_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(id, providerId, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about given provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonprovidersProviderId_0Async(String id, String providerId, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(id, providerId, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonproviders_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonproviders_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonproviders_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonproviders_0(Async)");
        }

        return getOrganisationsIdAddonproviders_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public List<Provider> getOrganisationsIdAddonproviders_0(String id) throws ApiException {
        ApiResponse<List<Provider>> localVarResp = getOrganisationsIdAddonproviders_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Provider&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Provider>> getOrganisationsIdAddonproviders_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonproviders_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all informations about all providers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonproviders_0Async(String id, final ApiCallback<List<Provider>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonproviders_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Provider>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdApplications_2
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_2Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_2ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdApplications_2(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdApplications_2(Async)");
        }

        return getOrganisationsIdAddonsAddonIdApplications_2Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdAddonsAddonIdApplications_2(String id, String addonId) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdAddonsAddonIdApplications_2WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdAddonsAddonIdApplications_2WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_2ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationsLinkedToAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdApplications_2Async(String id, String addonId, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdApplications_2ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdEnv_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdEnv_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdEnv_1(Async)");
        }

        return getOrganisationsIdAddonsAddonIdEnv_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdAddonsAddonIdEnv_1(String id, String addonId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdAddonsAddonIdEnv_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdAddonsAddonIdEnv_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnv_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdEnv_1Async(String id, String addonId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdEnv_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdSso_0
     * @param providerId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdSso_0Call(String providerId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/sso"
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdSso_0ValidateBeforeCall(String providerId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling getOrganisationsIdAddonsAddonIdSso_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdSso_0(Async)");
        }

        return getOrganisationsIdAddonsAddonIdSso_0Call(providerId, id, _callback);

    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @return AddonProviderSso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public AddonProviderSso getOrganisationsIdAddonsAddonIdSso_0(String providerId, String id) throws ApiException {
        ApiResponse<AddonProviderSso> localVarResp = getOrganisationsIdAddonsAddonIdSso_0WithHttpInfo(providerId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;AddonProviderSso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddonProviderSso> getOrganisationsIdAddonsAddonIdSso_0WithHttpInfo(String providerId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdSso_0ValidateBeforeCall(providerId, id, null);
        Type localVarReturnType = new TypeToken<AddonProviderSso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param providerId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdSso_0Async(String providerId, String id, final ApiCallback<AddonProviderSso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdSso_0ValidateBeforeCall(providerId, id, _callback);
        Type localVarReturnType = new TypeToken<AddonProviderSso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonIdTags_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTags_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonIdTags_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonIdTags_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonIdTags_1(Async)");
        }

        return getOrganisationsIdAddonsAddonIdTags_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdAddonsAddonIdTags_1(String id, String addonId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdAddonsAddonIdTags_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdAddonsAddonIdTags_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTags_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonIdTags_1Async(String id, String addonId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonIdTags_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddonsAddonId_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonId_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddonsAddonId_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getOrganisationsIdAddonsAddonId_1(Async)");
        }

        return getOrganisationsIdAddonsAddonId_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon getOrganisationsIdAddonsAddonId_1(String id, String addonId) throws ApiException {
        ApiResponse<Addon> localVarResp = getOrganisationsIdAddonsAddonId_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> getOrganisationsIdAddonsAddonId_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddonsAddonId_1Async(String id, String addonId, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdAddons_1
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddons_1Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdAddons_1ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdAddons_1(Async)");
        }

        return getOrganisationsIdAddons_1Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdAddons_1(String id) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdAddons_1WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdAddons_1WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdAddons_1ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddons </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdAddons_1Async(String id, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdAddons_1ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddonsEnv_2
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_2Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_2ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_2(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddonsEnv_2(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddonsEnv_2Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Env&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Env> getOrganisationsIdApplicationsAppIdAddonsEnv_2(String id, String appId) throws ApiException {
        ApiResponse<List<Env>> localVarResp = getOrganisationsIdApplicationsAppIdAddonsEnv_2WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Env&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Env>> getOrganisationsIdApplicationsAppIdAddonsEnv_2WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_2ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getEnvOfAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddonsEnv_2Async(String id, String appId, final ApiCallback<List<Env>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddonsEnv_2ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Env>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdAddons_2
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_2Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdAddons_2(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdAddons_2(Async)");
        }

        return getOrganisationsIdApplicationsAppIdAddons_2Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public List<Addon> getOrganisationsIdApplicationsAppIdAddons_2(String id, String appId) throws ApiException {
        ApiResponse<List<Addon>> localVarResp = getOrganisationsIdApplicationsAppIdAddons_2WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Addon&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Addon>> getOrganisationsIdApplicationsAppIdAddons_2WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAddonsLinkedToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdAddons_2Async(String id, String appId, final ApiCallback<List<Addon>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Addon>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependencies_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependencies_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependencies_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependencies_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependencies_1(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependencies_1WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependencies_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependencies_1ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependencies_1Async(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependencies_1ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDependents_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDependents_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDependents_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDependents_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplicationsAppIdDependents_1(String appId, String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplicationsAppIdDependents_1WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplicationsAppIdDependents_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependents_1ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDependents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDependents_1Async(String appId, String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDependents_1ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdDeployments_1
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_1Call(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_1ValidateBeforeCall(String id, String appId, String limit, String offset, String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdDeployments_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdDeployments_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdDeployments_1Call(id, appId, limit, offset, action, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return List&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public List<Deployment> getOrganisationsIdApplicationsAppIdDeployments_1(String id, String appId, String limit, String offset, String action) throws ApiException {
        ApiResponse<List<Deployment>> localVarResp = getOrganisationsIdApplicationsAppIdDeployments_1WithHttpInfo(id, appId, limit, offset, action);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @return ApiResponse&lt;List&lt;Deployment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deployment>> getOrganisationsIdApplicationsAppIdDeployments_1WithHttpInfo(String id, String appId, String limit, String offset, String action) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeployments_1ValidateBeforeCall(id, appId, limit, offset, action, null);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param action  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationDeploymentsForOrga </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdDeployments_1Async(String id, String appId, String limit, String offset, String action, final ApiCallback<List<Deployment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdDeployments_1ValidateBeforeCall(id, appId, limit, offset, action, _callback);
        Type localVarReturnType = new TypeToken<List<Deployment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdEnv_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdEnv_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdEnv_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdEnv_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public List<ListEnv> getOrganisationsIdApplicationsAppIdEnv_1(String id, String appId) throws ApiException {
        ApiResponse<List<ListEnv>> localVarResp = getOrganisationsIdApplicationsAppIdEnv_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;ListEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListEnv>> getOrganisationsIdApplicationsAppIdEnv_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdEnv_1Async(String id, String appId, final ApiCallback<List<ListEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<ListEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdInstances_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdInstances_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;AppInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public List<AppInstance> getOrganisationsIdApplicationsAppIdInstances_1(String id, String appId) throws ApiException {
        ApiResponse<List<AppInstance>> localVarResp = getOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;AppInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppInstance>> getOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInstances </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdInstances_1Async(String id, String appId, final ApiCallback<List<AppInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<AppInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdTags_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTags_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdTags_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdTags_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdTags_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdTags_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getOrganisationsIdApplicationsAppIdTags_1(String id, String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = getOrganisationsIdApplicationsAppIdTags_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getOrganisationsIdApplicationsAppIdTags_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTags_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationTags </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdTags_1Async(String id, String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdTags_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhostsFavourite_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Vhost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public Vhost getOrganisationsIdApplicationsAppIdVhostsFavourite_1(String id, String appId) throws ApiException {
        ApiResponse<Vhost> localVarResp = getOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vhost> getOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhostsFavourite_1Async(String id, String appId, final ApiCallback<Vhost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Vhost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppIdVhosts_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppIdVhosts_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppIdVhosts_1(Async)");
        }

        return getOrganisationsIdApplicationsAppIdVhosts_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return List&lt;Vhost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public List<Vhost> getOrganisationsIdApplicationsAppIdVhosts_1(String id, String appId) throws ApiException {
        ApiResponse<List<Vhost>> localVarResp = getOrganisationsIdApplicationsAppIdVhosts_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;Vhost&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vhost>> getOrganisationsIdApplicationsAppIdVhosts_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhosts_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVhosts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppIdVhosts_1Async(String id, String appId, final ApiCallback<List<Vhost>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppIdVhosts_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<List<Vhost>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplicationsAppId_1
     * @param id  (required)
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppId_1Call(String id, String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplicationsAppId_1ValidateBeforeCall(String id, String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplicationsAppId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getOrganisationsIdApplicationsAppId_1(Async)");
        }

        return getOrganisationsIdApplicationsAppId_1Call(id, appId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application getOrganisationsIdApplicationsAppId_1(String id, String appId) throws ApiException {
        ApiResponse<Application> localVarResp = getOrganisationsIdApplicationsAppId_1WithHttpInfo(id, appId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> getOrganisationsIdApplicationsAppId_1WithHttpInfo(String id, String appId) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplicationsAppId_1Async(String id, String appId, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdApplications_1
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplications_1Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdApplications_1ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdApplications_1(Async)");
        }

        return getOrganisationsIdApplications_1Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getOrganisationsIdApplications_1(String id) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getOrganisationsIdApplications_1WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getOrganisationsIdApplications_1WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdApplications_1ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllApplications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdApplications_1Async(String id, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdApplications_1ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumersKeySecret_0
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeySecret_0Call(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}/secret"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumersKeySecret_0ValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKeySecret_0(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKeySecret_0(Async)");
        }

        return getOrganisationsIdConsumersKeySecret_0Call(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return Secret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public Secret getOrganisationsIdConsumersKeySecret_0(String id, String key) throws ApiException {
        ApiResponse<Secret> localVarResp = getOrganisationsIdConsumersKeySecret_0WithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Secret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Secret> getOrganisationsIdConsumersKeySecret_0WithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeySecret_0ValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumerSecret </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKeySecret_0Async(String id, String key, final ApiCallback<Secret> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumersKeySecret_0ValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Secret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumersKey_0
     * @param id  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKey_0Call(String id, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumersKey_0ValidateBeforeCall(String id, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumersKey_0(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getOrganisationsIdConsumersKey_0(Async)");
        }

        return getOrganisationsIdConsumersKey_0Call(id, key, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return Consumer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public Consumer getOrganisationsIdConsumersKey_0(String id, String key) throws ApiException {
        ApiResponse<Consumer> localVarResp = getOrganisationsIdConsumersKey_0WithHttpInfo(id, key);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @return ApiResponse&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Consumer> getOrganisationsIdConsumersKey_0WithHttpInfo(String id, String key) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, null);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumersKey_0Async(String id, String key, final ApiCallback<Consumer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, _callback);
        Type localVarReturnType = new TypeToken<Consumer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumers_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumers_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumers_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumers_0(Async)");
        }

        return getOrganisationsIdConsumers_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Consumer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public List<Consumer> getOrganisationsIdConsumers_0(String id) throws ApiException {
        ApiResponse<List<Consumer>> localVarResp = getOrganisationsIdConsumers_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Consumer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Consumer>> getOrganisationsIdConsumers_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumers_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getConsumers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumers_0Async(String id, final ApiCallback<List<Consumer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumers_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Consumer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdConsumptions_0
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumptions_0Call(String id, String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumptions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdConsumptions_0ValidateBeforeCall(String id, String appId, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdConsumptions_0(Async)");
        }

        return getOrganisationsIdConsumptions_0Call(id, appId, from, to, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return Conso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public Conso getOrganisationsIdConsumptions_0(String id, String appId, String from, String to) throws ApiException {
        ApiResponse<Conso> localVarResp = getOrganisationsIdConsumptions_0WithHttpInfo(id, appId, from, to);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @return ApiResponse&lt;Conso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conso> getOrganisationsIdConsumptions_0WithHttpInfo(String id, String appId, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdConsumptions_0ValidateBeforeCall(id, appId, from, to, null);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (optional)
     * @param from  (optional)
     * @param to  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdConsumptions_0Async(String id, String appId, String from, String to, final ApiCallback<Conso> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdConsumptions_0ValidateBeforeCall(id, appId, from, to, _callback);
        Type localVarReturnType = new TypeToken<Conso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdCredits_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdCredits_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/credits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdCredits_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdCredits_0(Async)");
        }

        return getOrganisationsIdCredits_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Credits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public Credits getOrganisationsIdCredits_0(String id) throws ApiException {
        ApiResponse<Credits> localVarResp = getOrganisationsIdCredits_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Credits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credits> getOrganisationsIdCredits_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdCredits_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAmount </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdCredits_0Async(String id, final ApiCallback<Credits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdCredits_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdDeployments_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdDeployments_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/deployments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdDeployments_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdDeployments_0(Async)");
        }

        return getOrganisationsIdDeployments_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return DeploymentSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentSummary getOrganisationsIdDeployments_0(String id) throws ApiException {
        ApiResponse<DeploymentSummary> localVarResp = getOrganisationsIdDeployments_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DeploymentSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentSummary> getOrganisationsIdDeployments_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdDeployments_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeploymentSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDeploymentsForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdDeployments_0Async(String id, final ApiCallback<DeploymentSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdDeployments_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeploymentSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdInstances_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdInstances_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdInstances_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdInstances_0(Async)");
        }

        return getOrganisationsIdInstances_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public Object getOrganisationsIdInstances_0(String id) throws ApiException {
        ApiResponse<Object> localVarResp = getOrganisationsIdInstances_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getOrganisationsIdInstances_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdInstances_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInstancesForAllApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdInstances_0Async(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdInstances_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdMembers_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdMembers_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdMembers_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdMembers_0(Async)");
        }

        return getOrganisationsIdMembers_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getOrganisationsIdMembers_0(String id) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getOrganisationsIdMembers_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getOrganisationsIdMembers_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdMembers_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisationMembers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdMembers_0Async(String id, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdMembers_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentInfo_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentInfo_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payment-info"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentInfo_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentInfo_0(Async)");
        }

        return getOrganisationsIdPaymentInfo_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentInfo_0(String id) throws ApiException {
        getOrganisationsIdPaymentInfo_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentInfo_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentInfo_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPaymentInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentInfo_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentInfo_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillingsBidPdf_0
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdf_0Call(String id, String bid, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}.pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdf_0ValidateBeforeCall(String id, String bid, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBidPdf_0(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBidPdf_0(Async)");
        }

        return getOrganisationsIdPaymentsBillingsBidPdf_0Call(id, bid, token, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillingsBidPdf_0(String id, String bid, String token) throws ApiException {
        getOrganisationsIdPaymentsBillingsBidPdf_0WithHttpInfo(id, bid, token);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillingsBidPdf_0WithHttpInfo(String id, String bid, String token) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidPdf_0ValidateBeforeCall(id, bid, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param token  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPdfInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBidPdf_0Async(String id, String bid, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBidPdf_0ValidateBeforeCall(id, bid, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillingsBid_0
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBid_0Call(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling getOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        return getOrganisationsIdPaymentsBillingsBid_0Call(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillingsBid_0(String id, String bid) throws ApiException {
        getOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoice </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillingsBid_0Async(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsBillings_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillings_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsBillings_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsBillings_0(Async)");
        }

        return getOrganisationsIdPaymentsBillings_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsBillings_0(String id) throws ApiException {
        getOrganisationsIdPaymentsBillings_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsBillings_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillings_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getInvoices </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsBillings_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsBillings_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsIdPaymentsFullPricePrice_0
     * @param id  (required)
     * @param price  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsFullPricePrice_0Call(String id, String price, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/fullprice/{price}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "price" + "}", localVarApiClient.escapeString(price.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsIdPaymentsFullPricePrice_0ValidateBeforeCall(String id, String price, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsIdPaymentsFullPricePrice_0(Async)");
        }

        // verify the required parameter 'price' is set
        if (price == null) {
            throw new ApiException("Missing the required parameter 'price' when calling getOrganisationsIdPaymentsFullPricePrice_0(Async)");
        }

        return getOrganisationsIdPaymentsFullPricePrice_0Call(id, price, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param price  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public void getOrganisationsIdPaymentsFullPricePrice_0(String id, String price) throws ApiException {
        getOrganisationsIdPaymentsFullPricePrice_0WithHttpInfo(id, price);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param price  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOrganisationsIdPaymentsFullPricePrice_0WithHttpInfo(String id, String price) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsIdPaymentsFullPricePrice_0ValidateBeforeCall(id, price, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param price  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> priceWithTax </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsIdPaymentsFullPricePrice_0Async(String id, String price, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsIdPaymentsFullPricePrice_0ValidateBeforeCall(id, price, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisationsId_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsId_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsId_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganisationsId_0(Async)");
        }

        return getOrganisationsId_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation getOrganisationsId_0(String id) throws ApiException {
        ApiResponse<Organisation> localVarResp = getOrganisationsId_0WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> getOrganisationsId_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsId_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsId_0Async(String id, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsId_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisations_0
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisations_0Call(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisations_0ValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        return getOrganisations_0Call(user, _callback);

    }

    /**
     * 
     * 
     * @param user  (optional)
     * @return List&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public List<Organisation> getOrganisations_0(String user) throws ApiException {
        ApiResponse<List<Organisation>> localVarResp = getOrganisations_0WithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param user  (optional)
     * @return ApiResponse&lt;List&lt;Organisation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organisation>> getOrganisations_0WithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = getOrganisations_0ValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserOrganisations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisations_0Async(String user, final ApiCallback<List<Organisation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisations_0ValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupMembers_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembers_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupMembers_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers_0(Async)");
        }

        return listNetworkGroupMembers_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> listNetworkGroupMembers_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = listNetworkGroupMembers_0WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> listNetworkGroupMembers_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupMembers_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List members (asynchronously)
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembers_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupMembers_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupPeers_0
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeers_0Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupPeers_0ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers_0(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers_0(Async)");
        }

        return listNetworkGroupPeers_0Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroupPeers_0(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroupPeers_0WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroupPeers_0WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupPeers_0ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List peers (asynchronously)
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeers_0Async(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupPeers_0ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroups_0
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroups_0Call(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroups_0ValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroups_0(Async)");
        }

        return listNetworkGroups_0Call(ownerId, body, _callback);

    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroups_0(String ownerId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroups_0WithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroups_0WithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroups_0ValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Network Groups (asynchronously)
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroups_0Async(String ownerId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroups_0ValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonprovidersProviderIdDelete_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonprovidersProviderIdDelete_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonprovidersProviderIdDelete_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonprovidersProviderIdDelete_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling organisationsIdAddonprovidersProviderIdDelete_0(Async)");
        }

        return organisationsIdAddonprovidersProviderIdDelete_0Call(id, providerId, _callback);

    }

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdAddonprovidersProviderIdDelete_0(String id, String providerId) throws ApiException {
        organisationsIdAddonprovidersProviderIdDelete_0WithHttpInfo(id, providerId);
    }

    /**
     * Remove an add-on provider
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdAddonprovidersProviderIdDelete_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonprovidersProviderIdDelete_0ValidateBeforeCall(id, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an add-on provider (asynchronously)
     * Remove a given add-on provider. providerId must be owned by organisation {id}.
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> If the deletion was successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> If user has no access to organisation {id} or provider or if there still are add-ons of this provider. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If no such organisation/provider exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonprovidersProviderIdDelete_0Async(String id, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonprovidersProviderIdDelete_0ValidateBeforeCall(id, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesGet_1
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_1Call(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deploymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentId", deploymentId));
        }

        if (withDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDeleted", withDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_1ValidateBeforeCall(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesGet_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesGet_1(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesGet_1Call(id, addonId, deploymentId, withDeleted, _callback);

    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return List&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public List<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesGet_1(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        ApiResponse<List<SupernovaInstanceView>> localVarResp = organisationsIdAddonsAddonIdInstancesGet_1WithHttpInfo(id, addonId, deploymentId, withDeleted);
        return localVarResp.getData();
    }

    /**
     * List instances for this add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @return ApiResponse&lt;List&lt;SupernovaInstanceView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupernovaInstanceView>> organisationsIdAddonsAddonIdInstancesGet_1WithHttpInfo(String id, String addonId, String deploymentId, String withDeleted) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGet_1ValidateBeforeCall(id, addonId, deploymentId, withDeleted, null);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List instances for this add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param deploymentId  (optional)
     * @param withDeleted  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The instance list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesGet_1Async(String id, String addonId, String deploymentId, String withDeleted, final ApiCallback<List<SupernovaInstanceView>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesGet_1ValidateBeforeCall(id, addonId, deploymentId, withDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<SupernovaInstanceView>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdInstancesInstanceIdGet_1
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Call(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_1ValidateBeforeCall(String instanceId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(Async)");
        }

        return organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Call(instanceId, id, addonId, _callback);

    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return SupernovaInstanceView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public SupernovaInstanceView organisationsIdAddonsAddonIdInstancesInstanceIdGet_1(String instanceId, String id, String addonId) throws ApiException {
        ApiResponse<SupernovaInstanceView> localVarResp = organisationsIdAddonsAddonIdInstancesInstanceIdGet_1WithHttpInfo(instanceId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a specific instance for {addonId}
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;SupernovaInstanceView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupernovaInstanceView> organisationsIdAddonsAddonIdInstancesInstanceIdGet_1WithHttpInfo(String instanceId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGet_1ValidateBeforeCall(instanceId, id, addonId, null);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific instance for {addonId} (asynchronously)
     * 
     * @param instanceId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdInstancesInstanceIdGet_1Async(String instanceId, String id, String addonId, final ApiCallback<SupernovaInstanceView> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdInstancesInstanceIdGet_1ValidateBeforeCall(instanceId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<SupernovaInstanceView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsGet_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsGet_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsGet_1(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsGet_1Call(id, addonId, _callback);

    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return List&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public List<AddonMigration> organisationsIdAddonsAddonIdMigrationsGet_1(String id, String addonId) throws ApiException {
        ApiResponse<List<AddonMigration>> localVarResp = organisationsIdAddonsAddonIdMigrationsGet_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get past migrations from add-on.
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;List&lt;AddonMigration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddonMigration>> organisationsIdAddonsAddonIdMigrationsGet_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGet_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get past migrations from add-on. (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of migrations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsGet_1Async(String id, String addonId, final ApiCallback<List<AddonMigration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsGet_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<List<AddonMigration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Call(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations/{migrationId}"
            .replace("{" + "migrationId" + "}", localVarApiClient.escapeString(migrationId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1ValidateBeforeCall(String migrationId, String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'migrationId' is set
        if (migrationId == null) {
            throw new ApiException("Missing the required parameter 'migrationId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Call(migrationId, id, addonId, _callback);

    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return AddonMigration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public AddonMigration organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1(String migrationId, String id, String addonId) throws ApiException {
        ApiResponse<AddonMigration> localVarResp = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1WithHttpInfo(migrationId, id, addonId);
        return localVarResp.getData();
    }

    /**
     * Get a given migration
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;AddonMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddonMigration> organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1WithHttpInfo(String migrationId, String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1ValidateBeforeCall(migrationId, id, addonId, null);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a given migration (asynchronously)
     * 
     * @param migrationId  (required)
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The migration object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1Async(String migrationId, String id, String addonId, final ApiCallback<AddonMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsMigrationIdGet_1ValidateBeforeCall(migrationId, id, addonId, _callback);
        Type localVarReturnType = new TypeToken<AddonMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdMigrationsPost_1
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_1Call(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organisationsIdAddonsAddonIdMigrationsPostRequest;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/migrations"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_1ValidateBeforeCall(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdMigrationsPost_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdMigrationsPost_1(Async)");
        }

        // verify the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' is set
        if (organisationsIdAddonsAddonIdMigrationsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'organisationsIdAddonsAddonIdMigrationsPostRequest' when calling organisationsIdAddonsAddonIdMigrationsPost_1(Async)");
        }

        return organisationsIdAddonsAddonIdMigrationsPost_1Call(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);

    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public Object organisationsIdAddonsAddonIdMigrationsPost_1(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        ApiResponse<Object> localVarResp = organisationsIdAddonsAddonIdMigrationsPost_1WithHttpInfo(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest);
        return localVarResp.getData();
    }

    /**
     * Start a new add-on migration
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> organisationsIdAddonsAddonIdMigrationsPost_1WithHttpInfo(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPost_1ValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a new add-on migration (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param organisationsIdAddonsAddonIdMigrationsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Migration has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdMigrationsPost_1Async(String id, String addonId, OrganisationsIdAddonsAddonIdMigrationsPostRequest organisationsIdAddonsAddonIdMigrationsPostRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdMigrationsPost_1ValidateBeforeCall(id, addonId, organisationsIdAddonsAddonIdMigrationsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsAddonIdSsoGet_1
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGet_1Call(String id, String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/sso"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsAddonIdSsoGet_1ValidateBeforeCall(String id, String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsAddonIdSsoGet_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling organisationsIdAddonsAddonIdSsoGet_1(Async)");
        }

        return organisationsIdAddonsAddonIdSsoGet_1Call(id, addonId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return Sso
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public Sso organisationsIdAddonsAddonIdSsoGet_1(String id, String addonId) throws ApiException {
        ApiResponse<Sso> localVarResp = organisationsIdAddonsAddonIdSsoGet_1WithHttpInfo(id, addonId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @return ApiResponse&lt;Sso&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sso> organisationsIdAddonsAddonIdSsoGet_1WithHttpInfo(String id, String addonId) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGet_1ValidateBeforeCall(id, addonId, null);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSOData </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsAddonIdSsoGet_1Async(String id, String addonId, final ApiCallback<Sso> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsAddonIdSsoGet_1ValidateBeforeCall(id, addonId, _callback);
        Type localVarReturnType = new TypeToken<Sso>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdAddonsPreordersPost_1
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPost_1Call(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/preorders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdAddonsPreordersPost_1ValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdAddonsPreordersPost_1(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling organisationsIdAddonsPreordersPost_1(Async)");
        }

        return organisationsIdAddonsPreordersPost_1Call(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdAddonsPreordersPost_1(String id, WannabeAddon wannabeAddon) throws ApiException {
        organisationsIdAddonsPreordersPost_1WithHttpInfo(id, wannabeAddon);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdAddonsPreordersPost_1WithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPost_1ValidateBeforeCall(id, wannabeAddon, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdAddonsPreordersPost_1Async(String id, WannabeAddon wannabeAddon, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdAddonsPreordersPost_1ValidateBeforeCall(id, wannabeAddon, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchPut_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPut_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchPut_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchPut_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchPut_1(Async)");
        }

        return organisationsIdApplicationsAppIdBranchPut_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchPut_1(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchPut_1WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchPut_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPut_1ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchPut_1Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchPut_1ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBranchesGet_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/branches"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBranchesGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBranchesGet_1(Async)");
        }

        return organisationsIdApplicationsAppIdBranchesGet_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBranchesGet_1(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBranchesGet_1WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBranchesGet_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGet_1ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBranchesGet_1Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBranchesGet_1ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdBuildflavorPut_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/buildflavor"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdBuildflavorPut_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdBuildflavorPut_1(Async)");
        }

        return organisationsIdApplicationsAppIdBuildflavorPut_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdBuildflavorPut_1(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdBuildflavorPut_1WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdBuildflavorPut_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPut_1ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdBuildflavorPut_1Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdBuildflavorPut_1ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDependenciesEnvGet_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDependenciesEnvGet_1(Async)");
        }

        return organisationsIdApplicationsAppIdDependenciesEnvGet_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return List&lt;LinkedAppEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public List<LinkedAppEnv> organisationsIdApplicationsAppIdDependenciesEnvGet_1(String appId, String id) throws ApiException {
        ApiResponse<List<LinkedAppEnv>> localVarResp = organisationsIdApplicationsAppIdDependenciesEnvGet_1WithHttpInfo(appId, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;List&lt;LinkedAppEnv&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LinkedAppEnv>> organisationsIdApplicationsAppIdDependenciesEnvGet_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGet_1ValidateBeforeCall(appId, id, null);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get env variables defined by application dependencies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDependenciesEnvGet_1Async(String appId, String id, final ApiCallback<List<LinkedAppEnv>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDependenciesEnvGet_1ValidateBeforeCall(appId, id, _callback);
        Type localVarReturnType = new TypeToken<List<LinkedAppEnv>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Call(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/deployments/{deploymentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "deploymentId" + "}", localVarApiClient.escapeString(deploymentId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1ValidateBeforeCall(String appId, String deploymentId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(Async)");
        }

        return organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Call(appId, deploymentId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1(String appId, String deploymentId, String id) throws ApiException {
        organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1WithHttpInfo(appId, deploymentId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1WithHttpInfo(String appId, String deploymentId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1ValidateBeforeCall(appId, deploymentId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param deploymentId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1Async(String appId, String deploymentId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdDeploymentsDeploymentIdGet_1ValidateBeforeCall(appId, deploymentId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvGet_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvGet_1(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvGet_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvGet_1(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvGet_1WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvGet_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGet_1ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvGet_1Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvGet_1ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdExposedEnvPut_1
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_1Call(String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/exposed_env"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_1ValidateBeforeCall(String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdExposedEnvPut_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdExposedEnvPut_1(Async)");
        }

        return organisationsIdApplicationsAppIdExposedEnvPut_1Call(appId, id, _callback);

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdExposedEnvPut_1(String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdExposedEnvPut_1WithHttpInfo(appId, id);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdExposedEnvPut_1WithHttpInfo(String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPut_1ValidateBeforeCall(appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdExposedEnvPut_1Async(String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdExposedEnvPut_1ValidateBeforeCall(appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdApplicationsAppIdInstancesInstanceIdGet_1
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Call(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_1ValidateBeforeCall(String instanceId, String appId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(Async)");
        }

        return organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Call(instanceId, appId, id, _callback);

    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdApplicationsAppIdInstancesInstanceIdGet_1(String instanceId, String appId, String id) throws ApiException {
        organisationsIdApplicationsAppIdInstancesInstanceIdGet_1WithHttpInfo(instanceId, appId, id);
    }

    /**
     * 
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdApplicationsAppIdInstancesInstanceIdGet_1WithHttpInfo(String instanceId, String appId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGet_1ValidateBeforeCall(instanceId, appId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param instanceId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdApplicationsAppIdInstancesInstanceIdGet_1Async(String instanceId, String appId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdApplicationsAppIdInstancesInstanceIdGet_1ValidateBeforeCall(instanceId, appId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsBillingsUnpaidGet_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsBillingsUnpaidGet_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/unpaid"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsBillingsUnpaidGet_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsBillingsUnpaidGet_0(Async)");
        }

        return organisationsIdPaymentsBillingsUnpaidGet_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsBillingsUnpaidGet_0(String id) throws ApiException {
        organisationsIdPaymentsBillingsUnpaidGet_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsBillingsUnpaidGet_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsBillingsUnpaidGet_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsBillingsUnpaidGet_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsBillingsUnpaidGet_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsDefaultGet_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultGet_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsDefaultGet_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultGet_0(Async)");
        }

        return organisationsIdPaymentsMethodsDefaultGet_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsDefaultGet_0(String id) throws ApiException {
        organisationsIdPaymentsMethodsDefaultGet_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsDefaultGet_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultGet_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultGet_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultGet_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsDefaultPut_0
     * @param id  (required)
     * @param paymentData  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultPut_0Call(String id, PaymentData paymentData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentData;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/default"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsDefaultPut_0ValidateBeforeCall(String id, PaymentData paymentData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsDefaultPut_0(Async)");
        }

        // verify the required parameter 'paymentData' is set
        if (paymentData == null) {
            throw new ApiException("Missing the required parameter 'paymentData' when calling organisationsIdPaymentsMethodsDefaultPut_0(Async)");
        }

        return organisationsIdPaymentsMethodsDefaultPut_0Call(id, paymentData, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsDefaultPut_0(String id, PaymentData paymentData) throws ApiException {
        organisationsIdPaymentsMethodsDefaultPut_0WithHttpInfo(id, paymentData);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsDefaultPut_0WithHttpInfo(String id, PaymentData paymentData) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultPut_0ValidateBeforeCall(id, paymentData, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param paymentData  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsDefaultPut_0Async(String id, PaymentData paymentData, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsDefaultPut_0ValidateBeforeCall(id, paymentData, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsGet_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsGet_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsGet_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsGet_0(Async)");
        }

        return organisationsIdPaymentsMethodsGet_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsGet_0(String id) throws ApiException {
        organisationsIdPaymentsMethodsGet_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsGet_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsGet_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsGet_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsGet_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsMIdDelete_0
     * @param mId  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsMIdDelete_0Call(String mId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods/{mId}"
            .replace("{" + "mId" + "}", localVarApiClient.escapeString(mId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsMIdDelete_0ValidateBeforeCall(String mId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mId' is set
        if (mId == null) {
            throw new ApiException("Missing the required parameter 'mId' when calling organisationsIdPaymentsMethodsMIdDelete_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsMIdDelete_0(Async)");
        }

        return organisationsIdPaymentsMethodsMIdDelete_0Call(mId, id, _callback);

    }

    /**
     * 
     * 
     * @param mId  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsMIdDelete_0(String mId, String id) throws ApiException {
        organisationsIdPaymentsMethodsMIdDelete_0WithHttpInfo(mId, id);
    }

    /**
     * 
     * 
     * @param mId  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsMIdDelete_0WithHttpInfo(String mId, String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsMIdDelete_0ValidateBeforeCall(mId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param mId  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsMIdDelete_0Async(String mId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsMIdDelete_0ValidateBeforeCall(mId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMethodsPost_0
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsPost_0Call(String id, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/methods"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMethodsPost_0ValidateBeforeCall(String id, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMethodsPost_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling organisationsIdPaymentsMethodsPost_0(Async)");
        }

        return organisationsIdPaymentsMethodsPost_0Call(id, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMethodsPost_0(String id, Body body) throws ApiException {
        organisationsIdPaymentsMethodsPost_0WithHttpInfo(id, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMethodsPost_0WithHttpInfo(String id, Body body) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsPost_0ValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMethodsPost_0Async(String id, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMethodsPost_0ValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMonthlyinvoiceGet_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGet_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/monthlyinvoice"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGet_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceGet_0(Async)");
        }

        return organisationsIdPaymentsMonthlyinvoiceGet_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMonthlyinvoiceGet_0(String id) throws ApiException {
        organisationsIdPaymentsMonthlyinvoiceGet_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMonthlyinvoiceGet_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceGet_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceGet_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceGet_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/monthlyinvoice/maxcredit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0(Async)");
        }

        return organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0(String id) throws ApiException {
        organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsMonthlyinvoiceMaxcreditPut_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organisationsIdPaymentsRecurringGet_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsRecurringGet_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/recurring"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organisationsIdPaymentsRecurringGet_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling organisationsIdPaymentsRecurringGet_0(Async)");
        }

        return organisationsIdPaymentsRecurringGet_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void organisationsIdPaymentsRecurringGet_0(String id) throws ApiException {
        organisationsIdPaymentsRecurringGet_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organisationsIdPaymentsRecurringGet_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = organisationsIdPaymentsRecurringGet_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organisationsIdPaymentsRecurringGet_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organisationsIdPaymentsRecurringGet_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdFeatures_0
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeatures_0Call(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeFeature;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/features"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0(Async)");
        }

        // verify the required parameter 'wannabeFeature' is set
        if (wannabeFeature == null) {
            throw new ApiException("Missing the required parameter 'wannabeFeature' when calling postOrganisationsIdAddonprovidersProviderIdFeatures_0(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdFeatures_0Call(id, providerId, wannabeFeature, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @return Feature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public Feature postOrganisationsIdAddonprovidersProviderIdFeatures_0(String id, String providerId, WannabeFeature wannabeFeature) throws ApiException {
        ApiResponse<Feature> localVarResp = postOrganisationsIdAddonprovidersProviderIdFeatures_0WithHttpInfo(id, providerId, wannabeFeature);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @return ApiResponse&lt;Feature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Feature> postOrganisationsIdAddonprovidersProviderIdFeatures_0WithHttpInfo(String id, String providerId, WannabeFeature wannabeFeature) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(id, providerId, wannabeFeature, null);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeFeature  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdFeatures_0Async(String id, String providerId, WannabeFeature wannabeFeature, final ApiCallback<Feature> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdFeatures_0ValidateBeforeCall(id, providerId, wannabeFeature, _callback);
        Type localVarReturnType = new TypeToken<Feature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdPlans_0
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlans_0Call(String id, String providerId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(String id, String providerId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling postOrganisationsIdAddonprovidersProviderIdPlans_0(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdPlans_0Call(id, providerId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan postOrganisationsIdAddonprovidersProviderIdPlans_0(String id, String providerId, WannabePlan wannabePlan) throws ApiException {
        ApiResponse<Plan> localVarResp = postOrganisationsIdAddonprovidersProviderIdPlans_0WithHttpInfo(id, providerId, wannabePlan);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> postOrganisationsIdAddonprovidersProviderIdPlans_0WithHttpInfo(String id, String providerId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(id, providerId, wannabePlan, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdPlans_0Async(String id, String providerId, WannabePlan wannabePlan, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdPlans_0ValidateBeforeCall(id, providerId, wannabePlan, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonprovidersProviderIdTesters_0
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTesters_0Call(String id, String providerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/testers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTesters_0ValidateBeforeCall(String id, String providerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonprovidersProviderIdTesters_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling postOrganisationsIdAddonprovidersProviderIdTesters_0(Async)");
        }

        return postOrganisationsIdAddonprovidersProviderIdTesters_0Call(id, providerId, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdAddonprovidersProviderIdTesters_0(String id, String providerId) throws ApiException {
        postOrganisationsIdAddonprovidersProviderIdTesters_0WithHttpInfo(id, providerId);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdAddonprovidersProviderIdTesters_0WithHttpInfo(String id, String providerId) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdTesters_0ValidateBeforeCall(id, providerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addBetaTester </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonprovidersProviderIdTesters_0Async(String id, String providerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonprovidersProviderIdTesters_0ValidateBeforeCall(id, providerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddonproviders_0
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonproviders_0Call(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonProvider;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddonproviders_0ValidateBeforeCall(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddonproviders_0(Async)");
        }

        // verify the required parameter 'wannabeAddonProvider' is set
        if (wannabeAddonProvider == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonProvider' when calling postOrganisationsIdAddonproviders_0(Async)");
        }

        return postOrganisationsIdAddonproviders_0Call(id, wannabeAddonProvider, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public Provider postOrganisationsIdAddonproviders_0(String id, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        ApiResponse<Provider> localVarResp = postOrganisationsIdAddonproviders_0WithHttpInfo(id, wannabeAddonProvider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> postOrganisationsIdAddonproviders_0WithHttpInfo(String id, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddonproviders_0ValidateBeforeCall(id, wannabeAddonProvider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddonproviders_0Async(String id, WannabeAddonProvider wannabeAddonProvider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddonproviders_0ValidateBeforeCall(id, wannabeAddonProvider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdAddons_1
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddons_1Call(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdAddons_1ValidateBeforeCall(String id, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdAddons_1(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling postOrganisationsIdAddons_1(Async)");
        }

        return postOrganisationsIdAddons_1Call(id, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public Addon postOrganisationsIdAddons_1(String id, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = postOrganisationsIdAddons_1WithHttpInfo(id, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> postOrganisationsIdAddons_1WithHttpInfo(String id, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdAddons_1ValidateBeforeCall(id, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> provisionAddon </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdAddons_1Async(String id, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdAddons_1ValidateBeforeCall(id, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdAddons_2
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_2Call(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/addons"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(String id, String appId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdAddons_2(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdAddons_2(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdApplicationsAppIdAddons_2(Async)");
        }

        return postOrganisationsIdApplicationsAppIdAddons_2Call(id, appId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdAddons_2(String id, String appId, Body body) throws ApiException {
        postOrganisationsIdApplicationsAppIdAddons_2WithHttpInfo(id, appId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdAddons_2WithHttpInfo(String id, String appId, Body body) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(id, appId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> linkAddonToApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdAddons_2Async(String id, String appId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdAddons_2ValidateBeforeCall(id, appId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplicationsAppIdInstances_1
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_1Call(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/instances"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(String id, String appId, String commit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling postOrganisationsIdApplicationsAppIdInstances_1(Async)");
        }

        return postOrganisationsIdApplicationsAppIdInstances_1Call(id, appId, commit, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdApplicationsAppIdInstances_1(String id, String appId, String commit) throws ApiException {
        postOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(id, appId, commit);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdApplicationsAppIdInstances_1WithHttpInfo(String id, String appId, String commit) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, commit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param commit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> redeployApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplicationsAppIdInstances_1Async(String id, String appId, String commit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplicationsAppIdInstances_1ValidateBeforeCall(id, appId, commit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdApplications_1
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplications_1Call(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdApplications_1ValidateBeforeCall(String id, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdApplications_1(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling postOrganisationsIdApplications_1(Async)");
        }

        return postOrganisationsIdApplications_1Call(id, wannabeApplication, _callback);

    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application postOrganisationsIdApplications_1(String id, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = postOrganisationsIdApplications_1WithHttpInfo(id, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> postOrganisationsIdApplications_1WithHttpInfo(String id, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdApplications_1ValidateBeforeCall(id, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an application. If you want to create a Github app, you need to replace the oauthApp field with what you will find here: https://github.com/CleverCloud/doc.clever-cloud.com/issues/179
     * @param id  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdApplications_1Async(String id, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdApplications_1ValidateBeforeCall(id, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdConsumers_0
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdConsumers_0Call(String id, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdConsumers_0ValidateBeforeCall(String id, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdConsumers_0(Async)");
        }

        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling postOrganisationsIdConsumers_0(Async)");
        }

        return postOrganisationsIdConsumers_0Call(id, wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdConsumers_0(String id, WannabeConsumer wannabeConsumer) throws ApiException {
        postOrganisationsIdConsumers_0WithHttpInfo(id, wannabeConsumer);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdConsumers_0WithHttpInfo(String id, WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdConsumers_0ValidateBeforeCall(id, wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createConsumer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdConsumers_0Async(String id, WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdConsumers_0ValidateBeforeCall(id, wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdMembers_0
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdMembers_0Call(String id, Schema2 body, String invitationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (invitationKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invitationKey", invitationKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdMembers_0ValidateBeforeCall(String id, Schema2 body, String invitationKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdMembers_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postOrganisationsIdMembers_0(Async)");
        }

        return postOrganisationsIdMembers_0Call(id, body, invitationKey, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdMembers_0(String id, Schema2 body, String invitationKey) throws ApiException {
        postOrganisationsIdMembers_0WithHttpInfo(id, body, invitationKey);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdMembers_0WithHttpInfo(String id, Schema2 body, String invitationKey) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdMembers_0ValidateBeforeCall(id, body, invitationKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param body  (required)
     * @param invitationKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdMembers_0Async(String id, Schema2 body, String invitationKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdMembers_0ValidateBeforeCall(id, body, invitationKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisationsIdPaymentsBillings_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdPaymentsBillings_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisationsIdPaymentsBillings_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postOrganisationsIdPaymentsBillings_0(Async)");
        }

        return postOrganisationsIdPaymentsBillings_0Call(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public void postOrganisationsIdPaymentsBillings_0(String id) throws ApiException {
        postOrganisationsIdPaymentsBillings_0WithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOrganisationsIdPaymentsBillings_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postOrganisationsIdPaymentsBillings_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> buyDrops </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisationsIdPaymentsBillings_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisationsIdPaymentsBillings_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOrganisations_0
     * @param wannabeOrganisation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisations_0Call(WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeOrganisation;

        // create path and map variables
        String localVarPath = "/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOrganisations_0ValidateBeforeCall(WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wannabeOrganisation' is set
        if (wannabeOrganisation == null) {
            throw new ApiException("Missing the required parameter 'wannabeOrganisation' when calling postOrganisations_0(Async)");
        }

        return postOrganisations_0Call(wannabeOrganisation, _callback);

    }

    /**
     * 
     * 
     * @param wannabeOrganisation  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation postOrganisations_0(WannabeOrganisation wannabeOrganisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = postOrganisations_0WithHttpInfo(wannabeOrganisation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param wannabeOrganisation  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> postOrganisations_0WithHttpInfo(WannabeOrganisation wannabeOrganisation) throws ApiException {
        okhttp3.Call localVarCall = postOrganisations_0ValidateBeforeCall(wannabeOrganisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param wannabeOrganisation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOrganisations_0Async(WannabeOrganisation wannabeOrganisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOrganisations_0ValidateBeforeCall(wannabeOrganisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Call(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlanFeature;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}/features/{featureName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        // verify the required parameter 'wannabePlanFeature' is set
        if (wannabePlanFeature == null) {
            throw new ApiException("Missing the required parameter 'wannabePlanFeature' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Call(id, featureName, providerId, planId, wannabePlanFeature, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature) throws ApiException {
        putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0WithHttpInfo(id, featureName, providerId, planId, wannabePlanFeature);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0WithHttpInfo(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(id, featureName, providerId, planId, wannabePlanFeature, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param featureName  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlanFeature  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlanFeature </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0Async(String id, String featureName, String providerId, String planId, WannabePlanFeature wannabePlanFeature, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanIdFeaturesFeatureName_0ValidateBeforeCall(id, featureName, providerId, planId, wannabePlanFeature, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabePlan;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}/plans/{planId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()))
            .replace("{" + "planId" + "}", localVarApiClient.escapeString(planId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        // verify the required parameter 'wannabePlan' is set
        if (wannabePlan == null) {
            throw new ApiException("Missing the required parameter 'wannabePlan' when calling putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Call(id, providerId, planId, wannabePlan, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @return Plan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public Plan putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0(String id, String providerId, String planId, WannabePlan wannabePlan) throws ApiException {
        ApiResponse<Plan> localVarResp = putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(id, providerId, planId, wannabePlan);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @return ApiResponse&lt;Plan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Plan> putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0WithHttpInfo(String id, String providerId, String planId, WannabePlan wannabePlan) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, wannabePlan, null);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param planId  (required)
     * @param wannabePlan  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editProviderPlan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0Async(String id, String providerId, String planId, WannabePlan wannabePlan, final ApiCallback<Plan> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderIdPlansPlanId_0ValidateBeforeCall(id, providerId, planId, wannabePlan, _callback);
        Type localVarReturnType = new TypeToken<Plan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonprovidersProviderId_0
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderId_0Call(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonProvider;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addonproviders/{providerId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "providerId" + "}", localVarApiClient.escapeString(providerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonprovidersProviderId_0(Async)");
        }

        // verify the required parameter 'providerId' is set
        if (providerId == null) {
            throw new ApiException("Missing the required parameter 'providerId' when calling putOrganisationsIdAddonprovidersProviderId_0(Async)");
        }

        // verify the required parameter 'wannabeAddonProvider' is set
        if (wannabeAddonProvider == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonProvider' when calling putOrganisationsIdAddonprovidersProviderId_0(Async)");
        }

        return putOrganisationsIdAddonprovidersProviderId_0Call(id, providerId, wannabeAddonProvider, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public Provider putOrganisationsIdAddonprovidersProviderId_0(String id, String providerId, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        ApiResponse<Provider> localVarResp = putOrganisationsIdAddonprovidersProviderId_0WithHttpInfo(id, providerId, wannabeAddonProvider);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> putOrganisationsIdAddonprovidersProviderId_0WithHttpInfo(String id, String providerId, WannabeAddonProvider wannabeAddonProvider) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(id, providerId, wannabeAddonProvider, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param providerId  (required)
     * @param wannabeAddonProvider  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProviderInfos </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonprovidersProviderId_0Async(String id, String providerId, WannabeAddonProvider wannabeAddonProvider, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonprovidersProviderId_0ValidateBeforeCall(id, providerId, wannabeAddonProvider, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonIdTagsTag_1
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_1Call(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(String id, String tag, String addonId, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdAddonsAddonIdTagsTag_1(Async)");
        }

        return putOrganisationsIdAddonsAddonIdTagsTag_1Call(id, tag, addonId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAddonsAddonIdTagsTag_1(String id, String tag, String addonId, Body body) throws ApiException {
        putOrganisationsIdAddonsAddonIdTagsTag_1WithHttpInfo(id, tag, addonId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAddonsAddonIdTagsTag_1WithHttpInfo(String id, String tag, String addonId, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(id, tag, addonId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param tag  (required)
     * @param addonId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addAddonTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonIdTagsTag_1Async(String id, String tag, String addonId, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonIdTagsTag_1ValidateBeforeCall(id, tag, addonId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAddonsAddonId_1
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonId_1Call(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddon;

        // create path and map variables
        String localVarPath = "/organisations/{id}/addons/{addonId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAddonsAddonId_1ValidateBeforeCall(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putOrganisationsIdAddonsAddonId_1(Async)");
        }

        // verify the required parameter 'wannabeAddon' is set
        if (wannabeAddon == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddon' when calling putOrganisationsIdAddonsAddonId_1(Async)");
        }

        return putOrganisationsIdAddonsAddonId_1Call(id, addonId, wannabeAddon, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return Addon
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public Addon putOrganisationsIdAddonsAddonId_1(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        ApiResponse<Addon> localVarResp = putOrganisationsIdAddonsAddonId_1WithHttpInfo(id, addonId, wannabeAddon);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @return ApiResponse&lt;Addon&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Addon> putOrganisationsIdAddonsAddonId_1WithHttpInfo(String id, String addonId, WannabeAddon wannabeAddon) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, wannabeAddon, null);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addonId  (required)
     * @param wannabeAddon  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update addon information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAddonsAddonId_1Async(String id, String addonId, WannabeAddon wannabeAddon, final ApiCallback<Addon> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAddonsAddonId_1ValidateBeforeCall(id, addonId, wannabeAddon, _callback);
        Type localVarReturnType = new TypeToken<Addon>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Call(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/dependencies/{dependencyId}"
            .replace("{" + "dependencyId" + "}", localVarApiClient.escapeString(dependencyId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(String dependencyId, String appId, String id, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dependencyId' is set
        if (dependencyId == null) {
            throw new ApiException("Missing the required parameter 'dependencyId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Call(dependencyId, appId, id, body, _callback);

    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1(String dependencyId, String appId, String id, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1WithHttpInfo(dependencyId, appId, id, body);
    }

    /**
     * 
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1WithHttpInfo(String dependencyId, String appId, String id, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(dependencyId, appId, id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param dependencyId  (required)
     * @param appId  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationDependency </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1Async(String dependencyId, String appId, String id, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdDependenciesDependencyId_1ValidateBeforeCall(dependencyId, appId, id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnvEnvName_1
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_1Call(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env/{envName}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "envName" + "}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnvEnvName_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnvEnvName_1Call(id, appId, envName, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnvEnvName_1(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnvEnvName_1WithHttpInfo(id, appId, envName, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnvEnvName_1WithHttpInfo(String id, String appId, String envName, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(id, appId, envName, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param envName  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnv </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnvEnvName_1Async(String id, String appId, String envName, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnvEnvName_1ValidateBeforeCall(id, appId, envName, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdEnv_1
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_1Call(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeEnv;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/env"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdEnv_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdEnv_1(Async)");
        }

        // verify the required parameter 'wannabeEnv' is set
        if (wannabeEnv == null) {
            throw new ApiException("Missing the required parameter 'wannabeEnv' when calling putOrganisationsIdApplicationsAppIdEnv_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdEnv_1Call(id, appId, wannabeEnv, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ListEnv
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ListEnv putOrganisationsIdApplicationsAppIdEnv_1(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        ApiResponse<ListEnv> localVarResp = putOrganisationsIdApplicationsAppIdEnv_1WithHttpInfo(id, appId, wannabeEnv);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @return ApiResponse&lt;ListEnv&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEnv> putOrganisationsIdApplicationsAppIdEnv_1WithHttpInfo(String id, String appId, WannabeEnv wannabeEnv) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(id, appId, wannabeEnv, null);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeEnv  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationEnvironment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdEnv_1Async(String id, String appId, WannabeEnv wannabeEnv, final ApiCallback<ListEnv> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdEnv_1ValidateBeforeCall(id, appId, wannabeEnv, _callback);
        Type localVarReturnType = new TypeToken<ListEnv>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdTagsTag_1
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_1Call(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/tags/{tag}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(String id, String appId, String tag, Body body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling putOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdApplicationsAppIdTagsTag_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdTagsTag_1Call(id, appId, tag, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdTagsTag_1(String id, String appId, String tag, Body body) throws ApiException {
        putOrganisationsIdApplicationsAppIdTagsTag_1WithHttpInfo(id, appId, tag, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdTagsTag_1WithHttpInfo(String id, String appId, String tag, Body body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(id, appId, tag, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param tag  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addApplicationTag </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdTagsTag_1Async(String id, String appId, String tag, Body body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdTagsTag_1ValidateBeforeCall(id, appId, tag, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsDomain_1
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_1Call(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/{domain}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(String id, String appId, String domain, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsDomain_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsDomain_1Call(id, appId, domain, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsDomain_1(String id, String appId, String domain, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsDomain_1WithHttpInfo(id, appId, domain, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsDomain_1WithHttpInfo(String id, String appId, String domain, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(id, appId, domain, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param domain  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsDomain_1Async(String id, String appId, String domain, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsDomain_1ValidateBeforeCall(id, appId, domain, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppIdVhostsFavourite_1
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vhost;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}/vhosts/favourite"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(String id, String appId, Vhost vhost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        // verify the required parameter 'vhost' is set
        if (vhost == null) {
            throw new ApiException("Missing the required parameter 'vhost' when calling putOrganisationsIdApplicationsAppIdVhostsFavourite_1(Async)");
        }

        return putOrganisationsIdApplicationsAppIdVhostsFavourite_1Call(id, appId, vhost, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdApplicationsAppIdVhostsFavourite_1(String id, String appId, Vhost vhost) throws ApiException {
        putOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(id, appId, vhost);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdApplicationsAppIdVhostsFavourite_1WithHttpInfo(String id, String appId, Vhost vhost) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, vhost, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param vhost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> markFavouriteVhost </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppIdVhostsFavourite_1Async(String id, String appId, Vhost vhost, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppIdVhostsFavourite_1ValidateBeforeCall(id, appId, vhost, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdApplicationsAppId_1
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppId_1Call(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeApplication;

        // create path and map variables
        String localVarPath = "/organisations/{id}/applications/{appId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdApplicationsAppId_1ValidateBeforeCall(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdApplicationsAppId_1(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling putOrganisationsIdApplicationsAppId_1(Async)");
        }

        // verify the required parameter 'wannabeApplication' is set
        if (wannabeApplication == null) {
            throw new ApiException("Missing the required parameter 'wannabeApplication' when calling putOrganisationsIdApplicationsAppId_1(Async)");
        }

        return putOrganisationsIdApplicationsAppId_1Call(id, appId, wannabeApplication, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return Application
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public Application putOrganisationsIdApplicationsAppId_1(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        ApiResponse<Application> localVarResp = putOrganisationsIdApplicationsAppId_1WithHttpInfo(id, appId, wannabeApplication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @return ApiResponse&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Application> putOrganisationsIdApplicationsAppId_1WithHttpInfo(String id, String appId, WannabeApplication wannabeApplication) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, wannabeApplication, null);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param appId  (required)
     * @param wannabeApplication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplication </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdApplicationsAppId_1Async(String id, String appId, WannabeApplication wannabeApplication, final ApiCallback<Application> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdApplicationsAppId_1ValidateBeforeCall(id, appId, wannabeApplication, _callback);
        Type localVarReturnType = new TypeToken<Application>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdAvatar_0
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAvatar_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/avatar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdAvatar_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdAvatar_0(Async)");
        }

        return putOrganisationsIdAvatar_0Call(id, _callback);

    }

    /**
     * 
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdAvatar_0(String id) throws ApiException {
        putOrganisationsIdAvatar_0WithHttpInfo(id);
    }

    /**
     * 
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdAvatar_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdAvatar_0ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * If you want to upload an image from your computer, send the image in the body of the request without anything else.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setOrgaAvatar setOrgaAvatarFromSource </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdAvatar_0Async(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdAvatar_0ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdConsumersKey_0
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdConsumersKey_0Call(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeConsumer;

        // create path and map variables
        String localVarPath = "/organisations/{id}/consumers/{key}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdConsumersKey_0ValidateBeforeCall(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdConsumersKey_0(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putOrganisationsIdConsumersKey_0(Async)");
        }

        // verify the required parameter 'wannabeConsumer' is set
        if (wannabeConsumer == null) {
            throw new ApiException("Missing the required parameter 'wannabeConsumer' when calling putOrganisationsIdConsumersKey_0(Async)");
        }

        return putOrganisationsIdConsumersKey_0Call(id, key, wannabeConsumer, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdConsumersKey_0(String id, String key, WannabeConsumer wannabeConsumer) throws ApiException {
        putOrganisationsIdConsumersKey_0WithHttpInfo(id, key, wannabeConsumer);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdConsumersKey_0WithHttpInfo(String id, String key, WannabeConsumer wannabeConsumer) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, wannabeConsumer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param key  (required)
     * @param wannabeConsumer  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PUT the same data as in POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdConsumersKey_0Async(String id, String key, WannabeConsumer wannabeConsumer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdConsumersKey_0ValidateBeforeCall(id, key, wannabeConsumer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdMembersUserId_0
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdMembersUserId_0Call(String id, String userId, Schema2 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/organisations/{id}/members/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdMembersUserId_0ValidateBeforeCall(String id, String userId, Schema2 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdMembersUserId_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putOrganisationsIdMembersUserId_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putOrganisationsIdMembersUserId_0(Async)");
        }

        return putOrganisationsIdMembersUserId_0Call(id, userId, body, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdMembersUserId_0(String id, String userId, Schema2 body) throws ApiException {
        putOrganisationsIdMembersUserId_0WithHttpInfo(id, userId, body);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdMembersUserId_0WithHttpInfo(String id, String userId, Schema2 body) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdMembersUserId_0ValidateBeforeCall(id, userId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param userId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisationMember </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdMembersUserId_0Async(String id, String userId, Schema2 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdMembersUserId_0ValidateBeforeCall(id, userId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsIdPaymentsBillingsBid_0
     * @param id  (required)
     * @param bid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdPaymentsBillingsBid_0Call(String id, String bid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organisations/{id}/payments/billings/{bid}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "bid" + "}", localVarApiClient.escapeString(bid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(String id, String bid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling putOrganisationsIdPaymentsBillingsBid_0(Async)");
        }

        return putOrganisationsIdPaymentsBillingsBid_0Call(id, bid, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public void putOrganisationsIdPaymentsBillingsBid_0(String id, String bid) throws ApiException {
        putOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(id, bid);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param bid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putOrganisationsIdPaymentsBillingsBid_0WithHttpInfo(String id, String bid) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param bid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> choosePaymentProvider </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsIdPaymentsBillingsBid_0Async(String id, String bid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsIdPaymentsBillingsBid_0ValidateBeforeCall(id, bid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putOrganisationsId_0
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsId_0Call(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeOrganisation;

        // create path and map variables
        String localVarPath = "/organisations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putOrganisationsId_0ValidateBeforeCall(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putOrganisationsId_0(Async)");
        }

        // verify the required parameter 'wannabeOrganisation' is set
        if (wannabeOrganisation == null) {
            throw new ApiException("Missing the required parameter 'wannabeOrganisation' when calling putOrganisationsId_0(Async)");
        }

        return putOrganisationsId_0Call(id, wannabeOrganisation, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public Organisation putOrganisationsId_0(String id, WannabeOrganisation wannabeOrganisation) throws ApiException {
        ApiResponse<Organisation> localVarResp = putOrganisationsId_0WithHttpInfo(id, wannabeOrganisation);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> putOrganisationsId_0WithHttpInfo(String id, WannabeOrganisation wannabeOrganisation) throws ApiException {
        okhttp3.Call localVarCall = putOrganisationsId_0ValidateBeforeCall(id, wannabeOrganisation, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param wannabeOrganisation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editOrganisation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putOrganisationsId_0Async(String id, WannabeOrganisation wannabeOrganisation, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = putOrganisationsId_0ValidateBeforeCall(id, wannabeOrganisation, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
