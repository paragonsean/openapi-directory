/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.SupernovaInstanceViewFlavor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupernovaInstanceView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SupernovaInstanceView {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_PORT = "appPort";
  @SerializedName(SERIALIZED_NAME_APP_PORT)
  private BigDecimal appPort;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private BigDecimal createdAt;

  public static final String SERIALIZED_NAME_DEPLOY_ID = "deployId";
  @SerializedName(SERIALIZED_NAME_DEPLOY_ID)
  private String deployId;

  public static final String SERIALIZED_NAME_DEPLOY_NUMBER = "deployNumber";
  @SerializedName(SERIALIZED_NAME_DEPLOY_NUMBER)
  private BigDecimal deployNumber;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FLAVOR = "flavor";
  @SerializedName(SERIALIZED_NAME_FLAVOR)
  private SupernovaInstanceViewFlavor flavor;

  public static final String SERIALIZED_NAME_HV = "hv";
  @SerializedName(SERIALIZED_NAME_HV)
  private String hv;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_INSTANCE_NUMBER = "instanceNumber";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NUMBER)
  private BigDecimal instanceNumber;

  public static final String SERIALIZED_NAME_INTERNAL_I_P = "internalIP";
  @SerializedName(SERIALIZED_NAME_INTERNAL_I_P)
  private String internalIP;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SSH_PORT = "sshPort";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private BigDecimal sshPort;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_ZABBIX_PORT = "zabbixPort";
  @SerializedName(SERIALIZED_NAME_ZABBIX_PORT)
  private BigDecimal zabbixPort;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public SupernovaInstanceView() {
  }

  public SupernovaInstanceView appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Identifier of running app/add-on
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public SupernovaInstanceView appPort(BigDecimal appPort) {
    this.appPort = appPort;
    return this;
  }

  /**
   * Port of the HV that&#39;s redirected to 8080 on VM
   * @return appPort
   */
  @javax.annotation.Nonnull
  public BigDecimal getAppPort() {
    return appPort;
  }

  public void setAppPort(BigDecimal appPort) {
    this.appPort = appPort;
  }


  public SupernovaInstanceView commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public SupernovaInstanceView createdAt(BigDecimal createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Integer unix timestamp
   * @return createdAt
   */
  @javax.annotation.Nullable
  public BigDecimal getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(BigDecimal createdAt) {
    this.createdAt = createdAt;
  }


  public SupernovaInstanceView deployId(String deployId) {
    this.deployId = deployId;
    return this;
  }

  /**
   * Get deployId
   * @return deployId
   */
  @javax.annotation.Nullable
  public String getDeployId() {
    return deployId;
  }

  public void setDeployId(String deployId) {
    this.deployId = deployId;
  }


  public SupernovaInstanceView deployNumber(BigDecimal deployNumber) {
    this.deployNumber = deployNumber;
    return this;
  }

  /**
   * Get deployNumber
   * @return deployNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getDeployNumber() {
    return deployNumber;
  }

  public void setDeployNumber(BigDecimal deployNumber) {
    this.deployNumber = deployNumber;
  }


  public SupernovaInstanceView displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Generated PokéName. This name is generated from the uuid.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SupernovaInstanceView flavor(SupernovaInstanceViewFlavor flavor) {
    this.flavor = flavor;
    return this;
  }

  /**
   * Get flavor
   * @return flavor
   */
  @javax.annotation.Nonnull
  public SupernovaInstanceViewFlavor getFlavor() {
    return flavor;
  }

  public void setFlavor(SupernovaInstanceViewFlavor flavor) {
    this.flavor = flavor;
  }


  public SupernovaInstanceView hv(String hv) {
    this.hv = hv;
    return this;
  }

  /**
   * String name of hv.
   * @return hv
   */
  @javax.annotation.Nonnull
  public String getHv() {
    return hv;
  }

  public void setHv(String hv) {
    this.hv = hv;
  }


  public SupernovaInstanceView image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Base system image. E.g. java-20181030, node-20180912…
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public SupernovaInstanceView instanceNumber(BigDecimal instanceNumber) {
    this.instanceNumber = instanceNumber;
    return this;
  }

  /**
   * Get instanceNumber
   * @return instanceNumber
   */
  @javax.annotation.Nullable
  public BigDecimal getInstanceNumber() {
    return instanceNumber;
  }

  public void setInstanceNumber(BigDecimal instanceNumber) {
    this.instanceNumber = instanceNumber;
  }


  public SupernovaInstanceView internalIP(String internalIP) {
    this.internalIP = internalIP;
    return this;
  }

  /**
   * Get internalIP
   * @return internalIP
   */
  @javax.annotation.Nullable
  public String getInternalIP() {
    return internalIP;
  }

  public void setInternalIP(String internalIP) {
    this.internalIP = internalIP;
  }


  public SupernovaInstanceView ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Public IP of the HV
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public SupernovaInstanceView ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Identifier of the owner of the app/add-on running
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public SupernovaInstanceView source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Who/what started this instance? E.g. \&quot;app\&quot;, \&quot;cli\&quot;
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public SupernovaInstanceView sshPort(BigDecimal sshPort) {
    this.sshPort = sshPort;
    return this;
  }

  /**
   * Port of the HV that&#39;s redirected to 22 on VM
   * @return sshPort
   */
  @javax.annotation.Nullable
  public BigDecimal getSshPort() {
    return sshPort;
  }

  public void setSshPort(BigDecimal sshPort) {
    this.sshPort = sshPort;
  }


  public SupernovaInstanceView state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public SupernovaInstanceView uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nonnull
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public SupernovaInstanceView zabbixPort(BigDecimal zabbixPort) {
    this.zabbixPort = zabbixPort;
    return this;
  }

  /**
   * Port of the HV that&#39;s redirected to 10050 on VM
   * @return zabbixPort
   */
  @javax.annotation.Nonnull
  public BigDecimal getZabbixPort() {
    return zabbixPort;
  }

  public void setZabbixPort(BigDecimal zabbixPort) {
    this.zabbixPort = zabbixPort;
  }


  public SupernovaInstanceView zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Get zone
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupernovaInstanceView supernovaInstanceView = (SupernovaInstanceView) o;
    return Objects.equals(this.appId, supernovaInstanceView.appId) &&
        Objects.equals(this.appPort, supernovaInstanceView.appPort) &&
        Objects.equals(this.commitId, supernovaInstanceView.commitId) &&
        Objects.equals(this.createdAt, supernovaInstanceView.createdAt) &&
        Objects.equals(this.deployId, supernovaInstanceView.deployId) &&
        Objects.equals(this.deployNumber, supernovaInstanceView.deployNumber) &&
        Objects.equals(this.displayName, supernovaInstanceView.displayName) &&
        Objects.equals(this.flavor, supernovaInstanceView.flavor) &&
        Objects.equals(this.hv, supernovaInstanceView.hv) &&
        Objects.equals(this.image, supernovaInstanceView.image) &&
        Objects.equals(this.instanceNumber, supernovaInstanceView.instanceNumber) &&
        Objects.equals(this.internalIP, supernovaInstanceView.internalIP) &&
        Objects.equals(this.ip, supernovaInstanceView.ip) &&
        Objects.equals(this.ownerId, supernovaInstanceView.ownerId) &&
        Objects.equals(this.source, supernovaInstanceView.source) &&
        Objects.equals(this.sshPort, supernovaInstanceView.sshPort) &&
        Objects.equals(this.state, supernovaInstanceView.state) &&
        Objects.equals(this.uuid, supernovaInstanceView.uuid) &&
        Objects.equals(this.zabbixPort, supernovaInstanceView.zabbixPort) &&
        Objects.equals(this.zone, supernovaInstanceView.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appPort, commitId, createdAt, deployId, deployNumber, displayName, flavor, hv, image, instanceNumber, internalIP, ip, ownerId, source, sshPort, state, uuid, zabbixPort, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupernovaInstanceView {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appPort: ").append(toIndentedString(appPort)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deployId: ").append(toIndentedString(deployId)).append("\n");
    sb.append("    deployNumber: ").append(toIndentedString(deployNumber)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    flavor: ").append(toIndentedString(flavor)).append("\n");
    sb.append("    hv: ").append(toIndentedString(hv)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    instanceNumber: ").append(toIndentedString(instanceNumber)).append("\n");
    sb.append("    internalIP: ").append(toIndentedString(internalIP)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    zabbixPort: ").append(toIndentedString(zabbixPort)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("appPort");
    openapiFields.add("commitId");
    openapiFields.add("createdAt");
    openapiFields.add("deployId");
    openapiFields.add("deployNumber");
    openapiFields.add("displayName");
    openapiFields.add("flavor");
    openapiFields.add("hv");
    openapiFields.add("image");
    openapiFields.add("instanceNumber");
    openapiFields.add("internalIP");
    openapiFields.add("ip");
    openapiFields.add("ownerId");
    openapiFields.add("source");
    openapiFields.add("sshPort");
    openapiFields.add("state");
    openapiFields.add("uuid");
    openapiFields.add("zabbixPort");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appPort");
    openapiRequiredFields.add("flavor");
    openapiRequiredFields.add("hv");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("uuid");
    openapiRequiredFields.add("zabbixPort");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupernovaInstanceView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupernovaInstanceView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupernovaInstanceView is not found in the empty JSON string", SupernovaInstanceView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupernovaInstanceView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupernovaInstanceView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SupernovaInstanceView.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("commitId") != null && !jsonObj.get("commitId").isJsonNull()) && !jsonObj.get("commitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitId").toString()));
      }
      if ((jsonObj.get("deployId") != null && !jsonObj.get("deployId").isJsonNull()) && !jsonObj.get("deployId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the required field `flavor`
      SupernovaInstanceViewFlavor.validateJsonElement(jsonObj.get("flavor"));
      if (!jsonObj.get("hv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hv").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("internalIP") != null && !jsonObj.get("internalIP").isJsonNull()) && !jsonObj.get("internalIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalIP").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupernovaInstanceView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupernovaInstanceView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupernovaInstanceView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupernovaInstanceView.class));

       return (TypeAdapter<T>) new TypeAdapter<SupernovaInstanceView>() {
           @Override
           public void write(JsonWriter out, SupernovaInstanceView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupernovaInstanceView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupernovaInstanceView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupernovaInstanceView
   * @throws IOException if the JSON string is invalid with respect to SupernovaInstanceView
   */
  public static SupernovaInstanceView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupernovaInstanceView.class);
  }

  /**
   * Convert an instance of SupernovaInstanceView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

