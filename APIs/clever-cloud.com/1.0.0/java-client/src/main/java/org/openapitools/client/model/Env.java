/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WannabeEnv;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Env
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Env {
  public static final String SERIALIZED_NAME_ADDON_ID = "addon_id";
  @SerializedName(SERIALIZED_NAME_ADDON_ID)
  private String addonId;

  public static final String SERIALIZED_NAME_ADDON_NAME = "addon_name";
  @SerializedName(SERIALIZED_NAME_ADDON_NAME)
  private String addonName;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private List<WannabeEnv> env = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_ID = "provider_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public Env() {
  }

  public Env addonId(String addonId) {
    this.addonId = addonId;
    return this;
  }

  /**
   * Get addonId
   * @return addonId
   */
  @javax.annotation.Nonnull
  public String getAddonId() {
    return addonId;
  }

  public void setAddonId(String addonId) {
    this.addonId = addonId;
  }


  public Env addonName(String addonName) {
    this.addonName = addonName;
    return this;
  }

  /**
   * Get addonName
   * @return addonName
   */
  @javax.annotation.Nonnull
  public String getAddonName() {
    return addonName;
  }

  public void setAddonName(String addonName) {
    this.addonName = addonName;
  }


  public Env env(List<WannabeEnv> env) {
    this.env = env;
    return this;
  }

  public Env addEnvItem(WannabeEnv envItem) {
    if (this.env == null) {
      this.env = new ArrayList<>();
    }
    this.env.add(envItem);
    return this;
  }

  /**
   * Get env
   * @return env
   */
  @javax.annotation.Nonnull
  public List<WannabeEnv> getEnv() {
    return env;
  }

  public void setEnv(List<WannabeEnv> env) {
    this.env = env;
  }


  public Env providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * Get providerId
   * @return providerId
   */
  @javax.annotation.Nonnull
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Env env = (Env) o;
    return Objects.equals(this.addonId, env.addonId) &&
        Objects.equals(this.addonName, env.addonName) &&
        Objects.equals(this.env, env.env) &&
        Objects.equals(this.providerId, env.providerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addonId, addonName, env, providerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Env {\n");
    sb.append("    addonId: ").append(toIndentedString(addonId)).append("\n");
    sb.append("    addonName: ").append(toIndentedString(addonName)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addon_id");
    openapiFields.add("addon_name");
    openapiFields.add("env");
    openapiFields.add("provider_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addon_id");
    openapiRequiredFields.add("addon_name");
    openapiRequiredFields.add("env");
    openapiRequiredFields.add("provider_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Env
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Env.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Env is not found in the empty JSON string", Env.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Env.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Env` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Env.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addon_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addon_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addon_id").toString()));
      }
      if (!jsonObj.get("addon_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addon_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addon_name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("env").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `env` to be an array in the JSON string but got `%s`", jsonObj.get("env").toString()));
      }

      JsonArray jsonArrayenv = jsonObj.getAsJsonArray("env");
      // validate the required field `env` (array)
      for (int i = 0; i < jsonArrayenv.size(); i++) {
        WannabeEnv.validateJsonElement(jsonArrayenv.get(i));
      };
      if (!jsonObj.get("provider_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Env.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Env' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Env> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Env.class));

       return (TypeAdapter<T>) new TypeAdapter<Env>() {
           @Override
           public void write(JsonWriter out, Env value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Env read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Env given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Env
   * @throws IOException if the JSON string is invalid with respect to Env
   */
  public static Env fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Env.class);
  }

  /**
   * Convert an instance of Env to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

