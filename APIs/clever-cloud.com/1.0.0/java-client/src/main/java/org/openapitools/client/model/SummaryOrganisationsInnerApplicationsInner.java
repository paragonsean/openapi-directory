/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SummaryOrganisationsInnerApplicationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SummaryOrganisationsInnerApplicationsInner {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = false;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private String commit;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_INSTANCE_VARIANT = "instanceVariant";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VARIANT)
  private String instanceVariant;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_VARIANT_SLUG = "variantSlug";
  @SerializedName(SERIALIZED_NAME_VARIANT_SLUG)
  private String variantSlug;

  public SummaryOrganisationsInnerApplicationsInner() {
  }

  public SummaryOrganisationsInnerApplicationsInner archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public SummaryOrganisationsInnerApplicationsInner commit(String commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  public String getCommit() {
    return commit;
  }

  public void setCommit(String commit) {
    this.commit = commit;
  }


  public SummaryOrganisationsInnerApplicationsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SummaryOrganisationsInnerApplicationsInner instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public SummaryOrganisationsInnerApplicationsInner instanceVariant(String instanceVariant) {
    this.instanceVariant = instanceVariant;
    return this;
  }

  /**
   * Get instanceVariant
   * @return instanceVariant
   */
  @javax.annotation.Nullable
  public String getInstanceVariant() {
    return instanceVariant;
  }

  public void setInstanceVariant(String instanceVariant) {
    this.instanceVariant = instanceVariant;
  }


  public SummaryOrganisationsInnerApplicationsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SummaryOrganisationsInnerApplicationsInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public SummaryOrganisationsInnerApplicationsInner variantSlug(String variantSlug) {
    this.variantSlug = variantSlug;
    return this;
  }

  /**
   * Get variantSlug
   * @return variantSlug
   */
  @javax.annotation.Nullable
  public String getVariantSlug() {
    return variantSlug;
  }

  public void setVariantSlug(String variantSlug) {
    this.variantSlug = variantSlug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SummaryOrganisationsInnerApplicationsInner summaryOrganisationsInnerApplicationsInner = (SummaryOrganisationsInnerApplicationsInner) o;
    return Objects.equals(this.archived, summaryOrganisationsInnerApplicationsInner.archived) &&
        Objects.equals(this.commit, summaryOrganisationsInnerApplicationsInner.commit) &&
        Objects.equals(this.id, summaryOrganisationsInnerApplicationsInner.id) &&
        Objects.equals(this.instanceType, summaryOrganisationsInnerApplicationsInner.instanceType) &&
        Objects.equals(this.instanceVariant, summaryOrganisationsInnerApplicationsInner.instanceVariant) &&
        Objects.equals(this.name, summaryOrganisationsInnerApplicationsInner.name) &&
        Objects.equals(this.state, summaryOrganisationsInnerApplicationsInner.state) &&
        Objects.equals(this.variantSlug, summaryOrganisationsInnerApplicationsInner.variantSlug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, commit, id, instanceType, instanceVariant, name, state, variantSlug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SummaryOrganisationsInnerApplicationsInner {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    instanceVariant: ").append(toIndentedString(instanceVariant)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    variantSlug: ").append(toIndentedString(variantSlug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("commit");
    openapiFields.add("id");
    openapiFields.add("instanceType");
    openapiFields.add("instanceVariant");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("variantSlug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SummaryOrganisationsInnerApplicationsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SummaryOrganisationsInnerApplicationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SummaryOrganisationsInnerApplicationsInner is not found in the empty JSON string", SummaryOrganisationsInnerApplicationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SummaryOrganisationsInnerApplicationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SummaryOrganisationsInnerApplicationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) && !jsonObj.get("commit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("instanceVariant") != null && !jsonObj.get("instanceVariant").isJsonNull()) && !jsonObj.get("instanceVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceVariant").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("variantSlug") != null && !jsonObj.get("variantSlug").isJsonNull()) && !jsonObj.get("variantSlug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantSlug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantSlug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SummaryOrganisationsInnerApplicationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SummaryOrganisationsInnerApplicationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SummaryOrganisationsInnerApplicationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SummaryOrganisationsInnerApplicationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SummaryOrganisationsInnerApplicationsInner>() {
           @Override
           public void write(JsonWriter out, SummaryOrganisationsInnerApplicationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SummaryOrganisationsInnerApplicationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SummaryOrganisationsInnerApplicationsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SummaryOrganisationsInnerApplicationsInner
   * @throws IOException if the JSON string is invalid with respect to SummaryOrganisationsInnerApplicationsInner
   */
  public static SummaryOrganisationsInnerApplicationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SummaryOrganisationsInnerApplicationsInner.class);
  }

  /**
   * Convert an instance of SummaryOrganisationsInnerApplicationsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

