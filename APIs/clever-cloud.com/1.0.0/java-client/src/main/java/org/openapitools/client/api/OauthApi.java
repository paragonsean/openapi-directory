/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Rights;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OauthApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOauthAuthorize_0
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthAuthorize_0Call(String oauthToken, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauthAuthorize_0ValidateBeforeCall(String oauthToken, String cookie, final ApiCallback _callback) throws ApiException {
        return getOauthAuthorize_0Call(oauthToken, cookie, _callback);

    }

    /**
     * 
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public void getOauthAuthorize_0(String oauthToken, String cookie) throws ApiException {
        getOauthAuthorize_0WithHttpInfo(oauthToken, cookie);
    }

    /**
     * 
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getOauthAuthorize_0WithHttpInfo(String oauthToken, String cookie) throws ApiException {
        okhttp3.Call localVarCall = getOauthAuthorize_0ValidateBeforeCall(oauthToken, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthToken  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeForm </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthAuthorize_0Async(String oauthToken, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauthAuthorize_0ValidateBeforeCall(oauthToken, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOauthRights_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthRights_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/rights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauthRights_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOauthRights_0Call(_callback);

    }

    /**
     * 
     * 
     * @return Rights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public Rights getOauthRights_0() throws ApiException {
        ApiResponse<Rights> localVarResp = getOauthRights_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Rights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rights> getOauthRights_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOauthRights_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Rights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAvailableRights </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOauthRights_0Async(final ApiCallback<Rights> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauthRights_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Rights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthAccessTokenQueryPost_0
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenQueryPost_0Call(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/access_token_query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthAccessTokenQueryPost_0ValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return oauthAccessTokenQueryPost_0Call(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void oauthAccessTokenQueryPost_0(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        oauthAccessTokenQueryPost_0WithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthAccessTokenQueryPost_0WithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = oauthAccessTokenQueryPost_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthAccessTokenQueryPost_0Async(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthAccessTokenQueryPost_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for oauthRequestTokenQueryPost_0
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenQueryPost_0Call(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/request_token_query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oauthRequestTokenQueryPost_0ValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return oauthRequestTokenQueryPost_0Call(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void oauthRequestTokenQueryPost_0(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        oauthRequestTokenQueryPost_0WithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> oauthRequestTokenQueryPost_0WithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = oauthRequestTokenQueryPost_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oauthRequestTokenQueryPost_0Async(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = oauthRequestTokenQueryPost_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthAccessToken_0
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAccessToken_0Call(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthAccessToken_0ValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return postOauthAccessToken_0Call(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthAccessToken_0(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        postOauthAccessToken_0WithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthAccessToken_0WithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = postOauthAccessToken_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postAccessTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAccessToken_0Async(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthAccessToken_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthAuthorize_0
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAuthorize_0Call(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (almighty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("almighty", almighty));
        }

        if (accessOrganisations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations", accessOrganisations));
        }

        if (manageOrganisations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations", manageOrganisations));
        }

        if (manageOrganisationsServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_services", manageOrganisationsServices));
        }

        if (manageOrganisationsApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_applications", manageOrganisationsApplications));
        }

        if (manageOrganisationsMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_organisations_members", manageOrganisationsMembers));
        }

        if (accessOrganisationsBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_bills", accessOrganisationsBills));
        }

        if (accessOrganisationsCreditCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_credit_count", accessOrganisationsCreditCount));
        }

        if (accessOrganisationsConsumptionStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_organisations_consumption_statistics", accessOrganisationsConsumptionStatistics));
        }

        if (accessPersonalInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_personal_information", accessPersonalInformation));
        }

        if (managePersonalInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_personal_information", managePersonalInformation));
        }

        if (manageSshKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_ssh_keys", manageSshKeys));
        }

        if (manageServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_services", manageServices));
        }

        if (manageApplications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manage_applications", manageApplications));
        }

        if (accessBills != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_bills", accessBills));
        }

        if (accessCreditCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_credit_count", accessCreditCount));
        }

        if (accessConsumptionStatistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_consumption_statistics", accessConsumptionStatistics));
        }

        if (cookie != null) {
            localVarHeaderParams.put("Cookie", localVarApiClient.parameterToString(cookie));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthAuthorize_0ValidateBeforeCall(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback _callback) throws ApiException {
        return postOauthAuthorize_0Call(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, _callback);

    }

    /**
     * 
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthAuthorize_0(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie) throws ApiException {
        postOauthAuthorize_0WithHttpInfo(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie);
    }

    /**
     * 
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthAuthorize_0WithHttpInfo(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie) throws ApiException {
        okhttp3.Call localVarCall = postOauthAuthorize_0ValidateBeforeCall(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param almighty  (optional)
     * @param accessOrganisations  (optional)
     * @param manageOrganisations  (optional)
     * @param manageOrganisationsServices  (optional)
     * @param manageOrganisationsApplications  (optional)
     * @param manageOrganisationsMembers  (optional)
     * @param accessOrganisationsBills  (optional)
     * @param accessOrganisationsCreditCount  (optional)
     * @param accessOrganisationsConsumptionStatistics  (optional)
     * @param accessPersonalInformation  (optional)
     * @param managePersonalInformation  (optional)
     * @param manageSshKeys  (optional)
     * @param manageServices  (optional)
     * @param manageApplications  (optional)
     * @param accessBills  (optional)
     * @param accessCreditCount  (optional)
     * @param accessConsumptionStatistics  (optional)
     * @param cookie  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authorizeToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthAuthorize_0Async(String almighty, String accessOrganisations, String manageOrganisations, String manageOrganisationsServices, String manageOrganisationsApplications, String manageOrganisationsMembers, String accessOrganisationsBills, String accessOrganisationsCreditCount, String accessOrganisationsConsumptionStatistics, String accessPersonalInformation, String managePersonalInformation, String manageSshKeys, String manageServices, String manageApplications, String accessBills, String accessCreditCount, String accessConsumptionStatistics, String cookie, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthAuthorize_0ValidateBeforeCall(almighty, accessOrganisations, manageOrganisations, manageOrganisationsServices, manageOrganisationsApplications, manageOrganisationsMembers, accessOrganisationsBills, accessOrganisationsCreditCount, accessOrganisationsConsumptionStatistics, accessPersonalInformation, managePersonalInformation, manageSshKeys, manageServices, manageApplications, accessBills, accessCreditCount, accessConsumptionStatistics, cookie, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postOauthRequestToken_0
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthRequestToken_0Call(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/request_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        if (oauthTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token_secret", oauthTokenSecret));
        }

        if (oauthCallbackConfirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback_confirmed", oauthCallbackConfirmed));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postOauthRequestToken_0ValidateBeforeCall(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback _callback) throws ApiException {
        return postOauthRequestToken_0Call(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);

    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public void postOauthRequestToken_0(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        postOauthRequestToken_0WithHttpInfo(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed);
    }

    /**
     * 
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postOauthRequestToken_0WithHttpInfo(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed) throws ApiException {
        okhttp3.Call localVarCall = postOauthRequestToken_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param oauthConsumerKey  (optional)
     * @param oauthToken  (optional)
     * @param oauthSignatureMethod  (optional)
     * @param oauthSignature  (optional)
     * @param oauthTimestamp  (optional)
     * @param oauthNonce  (optional)
     * @param oauthVersion  (optional)
     * @param oauthVerifier  (optional)
     * @param oauthCallback  (optional)
     * @param oauthTokenSecret  (optional)
     * @param oauthCallbackConfirmed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> postReqTokenRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postOauthRequestToken_0Async(String oauthConsumerKey, String oauthToken, String oauthSignatureMethod, String oauthSignature, String oauthTimestamp, String oauthNonce, String oauthVersion, String oauthVerifier, String oauthCallback, String oauthTokenSecret, String oauthCallbackConfirmed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postOauthRequestToken_0ValidateBeforeCall(oauthConsumerKey, oauthToken, oauthSignatureMethod, oauthSignature, oauthTimestamp, oauthNonce, oauthVersion, oauthVerifier, oauthCallback, oauthTokenSecret, oauthCallbackConfirmed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
