/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WannabeOauthApp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WannabeApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WannabeApplication {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived = false;

  public static final String SERIALIZED_NAME_CANCEL_ON_PUSH = "cancelOnPush";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_PUSH)
  private Boolean cancelOnPush = false;

  public static final String SERIALIZED_NAME_DEPLOY = "deploy";
  @SerializedName(SERIALIZED_NAME_DEPLOY)
  private String deploy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = false;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  private Boolean favourite = false;

  public static final String SERIALIZED_NAME_HOMOGENEOUS = "homogeneous";
  @SerializedName(SERIALIZED_NAME_HOMOGENEOUS)
  private Boolean homogeneous = false;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_INSTANCE_VARIANT = "instanceVariant";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VARIANT)
  private String instanceVariant;

  public static final String SERIALIZED_NAME_INSTANCE_VERSION = "instanceVersion";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VERSION)
  private String instanceVersion;

  public static final String SERIALIZED_NAME_MAX_FLAVOR = "maxFlavor";
  @SerializedName(SERIALIZED_NAME_MAX_FLAVOR)
  private String maxFlavor;

  public static final String SERIALIZED_NAME_MAX_INSTANCES = "maxInstances";
  @SerializedName(SERIALIZED_NAME_MAX_INSTANCES)
  private Integer maxInstances;

  public static final String SERIALIZED_NAME_MIN_FLAVOR = "minFlavor";
  @SerializedName(SERIALIZED_NAME_MIN_FLAVOR)
  private String minFlavor;

  public static final String SERIALIZED_NAME_MIN_INSTANCES = "minInstances";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCES)
  private Integer minInstances;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OAUTH_APP = "oauthApp";
  @SerializedName(SERIALIZED_NAME_OAUTH_APP)
  private WannabeOauthApp oauthApp;

  public static final String SERIALIZED_NAME_OAUTH_APP_ID = "oauthAppId";
  @SerializedName(SERIALIZED_NAME_OAUTH_APP_ID)
  private String oauthAppId;

  public static final String SERIALIZED_NAME_OAUTH_SERVICE = "oauthService";
  @SerializedName(SERIALIZED_NAME_OAUTH_SERVICE)
  private String oauthService;

  public static final String SERIALIZED_NAME_SEPARATE_BUILD = "separateBuild";
  @SerializedName(SERIALIZED_NAME_SEPARATE_BUILD)
  private Boolean separateBuild = false;

  public static final String SERIALIZED_NAME_SHUTDOWNABLE = "shutdownable";
  @SerializedName(SERIALIZED_NAME_SHUTDOWNABLE)
  private Boolean shutdownable = false;

  public static final String SERIALIZED_NAME_STICKY_SESSIONS = "stickySessions";
  @SerializedName(SERIALIZED_NAME_STICKY_SESSIONS)
  private Boolean stickySessions = false;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public WannabeApplication() {
  }

  public WannabeApplication archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public WannabeApplication cancelOnPush(Boolean cancelOnPush) {
    this.cancelOnPush = cancelOnPush;
    return this;
  }

  /**
   * Get cancelOnPush
   * @return cancelOnPush
   */
  @javax.annotation.Nullable
  public Boolean getCancelOnPush() {
    return cancelOnPush;
  }

  public void setCancelOnPush(Boolean cancelOnPush) {
    this.cancelOnPush = cancelOnPush;
  }


  public WannabeApplication deploy(String deploy) {
    this.deploy = deploy;
    return this;
  }

  /**
   * Get deploy
   * @return deploy
   */
  @javax.annotation.Nonnull
  public String getDeploy() {
    return deploy;
  }

  public void setDeploy(String deploy) {
    this.deploy = deploy;
  }


  public WannabeApplication description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WannabeApplication enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public WannabeApplication favourite(Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Get favourite
   * @return favourite
   */
  @javax.annotation.Nullable
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(Boolean favourite) {
    this.favourite = favourite;
  }


  public WannabeApplication homogeneous(Boolean homogeneous) {
    this.homogeneous = homogeneous;
    return this;
  }

  /**
   * Get homogeneous
   * @return homogeneous
   */
  @javax.annotation.Nullable
  public Boolean getHomogeneous() {
    return homogeneous;
  }

  public void setHomogeneous(Boolean homogeneous) {
    this.homogeneous = homogeneous;
  }


  public WannabeApplication instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public WannabeApplication instanceVariant(String instanceVariant) {
    this.instanceVariant = instanceVariant;
    return this;
  }

  /**
   * Get instanceVariant
   * @return instanceVariant
   */
  @javax.annotation.Nullable
  public String getInstanceVariant() {
    return instanceVariant;
  }

  public void setInstanceVariant(String instanceVariant) {
    this.instanceVariant = instanceVariant;
  }


  public WannabeApplication instanceVersion(String instanceVersion) {
    this.instanceVersion = instanceVersion;
    return this;
  }

  /**
   * Get instanceVersion
   * @return instanceVersion
   */
  @javax.annotation.Nullable
  public String getInstanceVersion() {
    return instanceVersion;
  }

  public void setInstanceVersion(String instanceVersion) {
    this.instanceVersion = instanceVersion;
  }


  public WannabeApplication maxFlavor(String maxFlavor) {
    this.maxFlavor = maxFlavor;
    return this;
  }

  /**
   * Get maxFlavor
   * @return maxFlavor
   */
  @javax.annotation.Nullable
  public String getMaxFlavor() {
    return maxFlavor;
  }

  public void setMaxFlavor(String maxFlavor) {
    this.maxFlavor = maxFlavor;
  }


  public WannabeApplication maxInstances(Integer maxInstances) {
    this.maxInstances = maxInstances;
    return this;
  }

  /**
   * Get maxInstances
   * @return maxInstances
   */
  @javax.annotation.Nonnull
  public Integer getMaxInstances() {
    return maxInstances;
  }

  public void setMaxInstances(Integer maxInstances) {
    this.maxInstances = maxInstances;
  }


  public WannabeApplication minFlavor(String minFlavor) {
    this.minFlavor = minFlavor;
    return this;
  }

  /**
   * Get minFlavor
   * @return minFlavor
   */
  @javax.annotation.Nullable
  public String getMinFlavor() {
    return minFlavor;
  }

  public void setMinFlavor(String minFlavor) {
    this.minFlavor = minFlavor;
  }


  public WannabeApplication minInstances(Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

  /**
   * Get minInstances
   * @return minInstances
   */
  @javax.annotation.Nonnull
  public Integer getMinInstances() {
    return minInstances;
  }

  public void setMinInstances(Integer minInstances) {
    this.minInstances = minInstances;
  }


  public WannabeApplication name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WannabeApplication oauthApp(WannabeOauthApp oauthApp) {
    this.oauthApp = oauthApp;
    return this;
  }

  /**
   * Get oauthApp
   * @return oauthApp
   */
  @javax.annotation.Nullable
  public WannabeOauthApp getOauthApp() {
    return oauthApp;
  }

  public void setOauthApp(WannabeOauthApp oauthApp) {
    this.oauthApp = oauthApp;
  }


  public WannabeApplication oauthAppId(String oauthAppId) {
    this.oauthAppId = oauthAppId;
    return this;
  }

  /**
   * Get oauthAppId
   * @return oauthAppId
   */
  @javax.annotation.Nullable
  public String getOauthAppId() {
    return oauthAppId;
  }

  public void setOauthAppId(String oauthAppId) {
    this.oauthAppId = oauthAppId;
  }


  public WannabeApplication oauthService(String oauthService) {
    this.oauthService = oauthService;
    return this;
  }

  /**
   * Get oauthService
   * @return oauthService
   */
  @javax.annotation.Nullable
  public String getOauthService() {
    return oauthService;
  }

  public void setOauthService(String oauthService) {
    this.oauthService = oauthService;
  }


  public WannabeApplication separateBuild(Boolean separateBuild) {
    this.separateBuild = separateBuild;
    return this;
  }

  /**
   * Get separateBuild
   * @return separateBuild
   */
  @javax.annotation.Nullable
  public Boolean getSeparateBuild() {
    return separateBuild;
  }

  public void setSeparateBuild(Boolean separateBuild) {
    this.separateBuild = separateBuild;
  }


  public WannabeApplication shutdownable(Boolean shutdownable) {
    this.shutdownable = shutdownable;
    return this;
  }

  /**
   * Get shutdownable
   * @return shutdownable
   */
  @javax.annotation.Nullable
  public Boolean getShutdownable() {
    return shutdownable;
  }

  public void setShutdownable(Boolean shutdownable) {
    this.shutdownable = shutdownable;
  }


  public WannabeApplication stickySessions(Boolean stickySessions) {
    this.stickySessions = stickySessions;
    return this;
  }

  /**
   * Get stickySessions
   * @return stickySessions
   */
  @javax.annotation.Nullable
  public Boolean getStickySessions() {
    return stickySessions;
  }

  public void setStickySessions(Boolean stickySessions) {
    this.stickySessions = stickySessions;
  }


  public WannabeApplication tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WannabeApplication addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public WannabeApplication zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Get zone
   * @return zone
   */
  @javax.annotation.Nonnull
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WannabeApplication wannabeApplication = (WannabeApplication) o;
    return Objects.equals(this.archived, wannabeApplication.archived) &&
        Objects.equals(this.cancelOnPush, wannabeApplication.cancelOnPush) &&
        Objects.equals(this.deploy, wannabeApplication.deploy) &&
        Objects.equals(this.description, wannabeApplication.description) &&
        Objects.equals(this.enabled, wannabeApplication.enabled) &&
        Objects.equals(this.favourite, wannabeApplication.favourite) &&
        Objects.equals(this.homogeneous, wannabeApplication.homogeneous) &&
        Objects.equals(this.instanceType, wannabeApplication.instanceType) &&
        Objects.equals(this.instanceVariant, wannabeApplication.instanceVariant) &&
        Objects.equals(this.instanceVersion, wannabeApplication.instanceVersion) &&
        Objects.equals(this.maxFlavor, wannabeApplication.maxFlavor) &&
        Objects.equals(this.maxInstances, wannabeApplication.maxInstances) &&
        Objects.equals(this.minFlavor, wannabeApplication.minFlavor) &&
        Objects.equals(this.minInstances, wannabeApplication.minInstances) &&
        Objects.equals(this.name, wannabeApplication.name) &&
        Objects.equals(this.oauthApp, wannabeApplication.oauthApp) &&
        Objects.equals(this.oauthAppId, wannabeApplication.oauthAppId) &&
        Objects.equals(this.oauthService, wannabeApplication.oauthService) &&
        Objects.equals(this.separateBuild, wannabeApplication.separateBuild) &&
        Objects.equals(this.shutdownable, wannabeApplication.shutdownable) &&
        Objects.equals(this.stickySessions, wannabeApplication.stickySessions) &&
        Objects.equals(this.tags, wannabeApplication.tags) &&
        Objects.equals(this.zone, wannabeApplication.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, cancelOnPush, deploy, description, enabled, favourite, homogeneous, instanceType, instanceVariant, instanceVersion, maxFlavor, maxInstances, minFlavor, minInstances, name, oauthApp, oauthAppId, oauthService, separateBuild, shutdownable, stickySessions, tags, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WannabeApplication {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    cancelOnPush: ").append(toIndentedString(cancelOnPush)).append("\n");
    sb.append("    deploy: ").append(toIndentedString(deploy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    homogeneous: ").append(toIndentedString(homogeneous)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    instanceVariant: ").append(toIndentedString(instanceVariant)).append("\n");
    sb.append("    instanceVersion: ").append(toIndentedString(instanceVersion)).append("\n");
    sb.append("    maxFlavor: ").append(toIndentedString(maxFlavor)).append("\n");
    sb.append("    maxInstances: ").append(toIndentedString(maxInstances)).append("\n");
    sb.append("    minFlavor: ").append(toIndentedString(minFlavor)).append("\n");
    sb.append("    minInstances: ").append(toIndentedString(minInstances)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oauthApp: ").append(toIndentedString(oauthApp)).append("\n");
    sb.append("    oauthAppId: ").append(toIndentedString(oauthAppId)).append("\n");
    sb.append("    oauthService: ").append(toIndentedString(oauthService)).append("\n");
    sb.append("    separateBuild: ").append(toIndentedString(separateBuild)).append("\n");
    sb.append("    shutdownable: ").append(toIndentedString(shutdownable)).append("\n");
    sb.append("    stickySessions: ").append(toIndentedString(stickySessions)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("cancelOnPush");
    openapiFields.add("deploy");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("favourite");
    openapiFields.add("homogeneous");
    openapiFields.add("instanceType");
    openapiFields.add("instanceVariant");
    openapiFields.add("instanceVersion");
    openapiFields.add("maxFlavor");
    openapiFields.add("maxInstances");
    openapiFields.add("minFlavor");
    openapiFields.add("minInstances");
    openapiFields.add("name");
    openapiFields.add("oauthApp");
    openapiFields.add("oauthAppId");
    openapiFields.add("oauthService");
    openapiFields.add("separateBuild");
    openapiFields.add("shutdownable");
    openapiFields.add("stickySessions");
    openapiFields.add("tags");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deploy");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("maxInstances");
    openapiRequiredFields.add("minInstances");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("zone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WannabeApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WannabeApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WannabeApplication is not found in the empty JSON string", WannabeApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WannabeApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WannabeApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WannabeApplication.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deploy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("instanceVariant") != null && !jsonObj.get("instanceVariant").isJsonNull()) && !jsonObj.get("instanceVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceVariant").toString()));
      }
      if ((jsonObj.get("instanceVersion") != null && !jsonObj.get("instanceVersion").isJsonNull()) && !jsonObj.get("instanceVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceVersion").toString()));
      }
      if ((jsonObj.get("maxFlavor") != null && !jsonObj.get("maxFlavor").isJsonNull()) && !jsonObj.get("maxFlavor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxFlavor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxFlavor").toString()));
      }
      if ((jsonObj.get("minFlavor") != null && !jsonObj.get("minFlavor").isJsonNull()) && !jsonObj.get("minFlavor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minFlavor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minFlavor").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `oauthApp`
      if (jsonObj.get("oauthApp") != null && !jsonObj.get("oauthApp").isJsonNull()) {
        WannabeOauthApp.validateJsonElement(jsonObj.get("oauthApp"));
      }
      if ((jsonObj.get("oauthAppId") != null && !jsonObj.get("oauthAppId").isJsonNull()) && !jsonObj.get("oauthAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthAppId").toString()));
      }
      if ((jsonObj.get("oauthService") != null && !jsonObj.get("oauthService").isJsonNull()) && !jsonObj.get("oauthService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthService").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WannabeApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WannabeApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WannabeApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WannabeApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<WannabeApplication>() {
           @Override
           public void write(JsonWriter out, WannabeApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WannabeApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WannabeApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WannabeApplication
   * @throws IOException if the JSON string is invalid with respect to WannabeApplication
   */
  public static WannabeApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WannabeApplication.class);
  }

  /**
   * Convert an instance of WannabeApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

