/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WannabeAddonProviderAPIUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WannabeAddonProviderAPI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:19.318125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WannabeAddonProviderAPI {
  public static final String SERIALIZED_NAME_CONFIG_VARS = "config_vars";
  @SerializedName(SERIALIZED_NAME_CONFIG_VARS)
  private List<String> configVars = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRODUCTION = "production";
  @SerializedName(SERIALIZED_NAME_PRODUCTION)
  private WannabeAddonProviderAPIUrl production;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSO_SALT = "sso_salt";
  @SerializedName(SERIALIZED_NAME_SSO_SALT)
  private String ssoSalt;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private WannabeAddonProviderAPIUrl test;

  public WannabeAddonProviderAPI() {
  }

  public WannabeAddonProviderAPI configVars(List<String> configVars) {
    this.configVars = configVars;
    return this;
  }

  public WannabeAddonProviderAPI addConfigVarsItem(String configVarsItem) {
    if (this.configVars == null) {
      this.configVars = new ArrayList<>();
    }
    this.configVars.add(configVarsItem);
    return this;
  }

  /**
   * Get configVars
   * @return configVars
   */
  @javax.annotation.Nonnull
  public List<String> getConfigVars() {
    return configVars;
  }

  public void setConfigVars(List<String> configVars) {
    this.configVars = configVars;
  }


  public WannabeAddonProviderAPI password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public WannabeAddonProviderAPI production(WannabeAddonProviderAPIUrl production) {
    this.production = production;
    return this;
  }

  /**
   * Get production
   * @return production
   */
  @javax.annotation.Nullable
  public WannabeAddonProviderAPIUrl getProduction() {
    return production;
  }

  public void setProduction(WannabeAddonProviderAPIUrl production) {
    this.production = production;
  }


  public WannabeAddonProviderAPI regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public WannabeAddonProviderAPI addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }


  public WannabeAddonProviderAPI ssoSalt(String ssoSalt) {
    this.ssoSalt = ssoSalt;
    return this;
  }

  /**
   * Get ssoSalt
   * @return ssoSalt
   */
  @javax.annotation.Nonnull
  public String getSsoSalt() {
    return ssoSalt;
  }

  public void setSsoSalt(String ssoSalt) {
    this.ssoSalt = ssoSalt;
  }


  public WannabeAddonProviderAPI test(WannabeAddonProviderAPIUrl test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public WannabeAddonProviderAPIUrl getTest() {
    return test;
  }

  public void setTest(WannabeAddonProviderAPIUrl test) {
    this.test = test;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WannabeAddonProviderAPI wannabeAddonProviderAPI = (WannabeAddonProviderAPI) o;
    return Objects.equals(this.configVars, wannabeAddonProviderAPI.configVars) &&
        Objects.equals(this.password, wannabeAddonProviderAPI.password) &&
        Objects.equals(this.production, wannabeAddonProviderAPI.production) &&
        Objects.equals(this.regions, wannabeAddonProviderAPI.regions) &&
        Objects.equals(this.ssoSalt, wannabeAddonProviderAPI.ssoSalt) &&
        Objects.equals(this.test, wannabeAddonProviderAPI.test);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configVars, password, production, regions, ssoSalt, test);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WannabeAddonProviderAPI {\n");
    sb.append("    configVars: ").append(toIndentedString(configVars)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    ssoSalt: ").append(toIndentedString(ssoSalt)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config_vars");
    openapiFields.add("password");
    openapiFields.add("production");
    openapiFields.add("regions");
    openapiFields.add("sso_salt");
    openapiFields.add("test");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("config_vars");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("sso_salt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WannabeAddonProviderAPI
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WannabeAddonProviderAPI.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WannabeAddonProviderAPI is not found in the empty JSON string", WannabeAddonProviderAPI.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WannabeAddonProviderAPI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WannabeAddonProviderAPI` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WannabeAddonProviderAPI.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("config_vars") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("config_vars").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_vars` to be an array in the JSON string but got `%s`", jsonObj.get("config_vars").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `production`
      if (jsonObj.get("production") != null && !jsonObj.get("production").isJsonNull()) {
        WannabeAddonProviderAPIUrl.validateJsonElement(jsonObj.get("production"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      if (!jsonObj.get("sso_salt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sso_salt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sso_salt").toString()));
      }
      // validate the optional field `test`
      if (jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) {
        WannabeAddonProviderAPIUrl.validateJsonElement(jsonObj.get("test"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WannabeAddonProviderAPI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WannabeAddonProviderAPI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WannabeAddonProviderAPI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WannabeAddonProviderAPI.class));

       return (TypeAdapter<T>) new TypeAdapter<WannabeAddonProviderAPI>() {
           @Override
           public void write(JsonWriter out, WannabeAddonProviderAPI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WannabeAddonProviderAPI read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WannabeAddonProviderAPI given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WannabeAddonProviderAPI
   * @throws IOException if the JSON string is invalid with respect to WannabeAddonProviderAPI
   */
  public static WannabeAddonProviderAPI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WannabeAddonProviderAPI.class);
  }

  /**
   * Convert an instance of WannabeAddonProviderAPI to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

