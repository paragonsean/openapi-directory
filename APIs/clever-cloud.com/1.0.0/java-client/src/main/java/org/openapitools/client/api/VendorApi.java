/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Application;
import org.openapitools.client.model.WannabeAddonBilling;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VendorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getVendorAppsAddonId_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsAddonId_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorAppsAddonId_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling getVendorAppsAddonId_0(Async)");
        }

        return getVendorAppsAddonId_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public void getVendorAppsAddonId_0(String addonId) throws ApiException {
        getVendorAppsAddonId_0WithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getVendorAppsAddonId_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = getVendorAppsAddonId_0ValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getApplicationInfo </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorAppsAddonId_0Async(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorAppsAddonId_0ValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVendorApps_0
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorApps_0Call(Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVendorApps_0ValidateBeforeCall(Integer offset, final ApiCallback _callback) throws ApiException {
        return getVendorApps_0Call(offset, _callback);

    }

    /**
     * 
     * 
     * @param offset  (optional)
     * @return List&lt;Application&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public List<Application> getVendorApps_0(Integer offset) throws ApiException {
        ApiResponse<List<Application>> localVarResp = getVendorApps_0WithHttpInfo(offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param offset  (optional)
     * @return ApiResponse&lt;List&lt;Application&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Application>> getVendorApps_0WithHttpInfo(Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getVendorApps_0ValidateBeforeCall(offset, null);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listApps </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVendorApps_0Async(Integer offset, final ApiCallback<List<Application>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVendorApps_0ValidateBeforeCall(offset, _callback);
        Type localVarReturnType = new TypeToken<List<Application>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postVendorBillingOwnerId_0
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVendorBillingOwnerId_0Call(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wannabeAddonBilling;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}/consumptions"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postVendorBillingOwnerId_0ValidateBeforeCall(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling postVendorBillingOwnerId_0(Async)");
        }

        // verify the required parameter 'wannabeAddonBilling' is set
        if (wannabeAddonBilling == null) {
            throw new ApiException("Missing the required parameter 'wannabeAddonBilling' when calling postVendorBillingOwnerId_0(Async)");
        }

        return postVendorBillingOwnerId_0Call(addonId, wannabeAddonBilling, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void postVendorBillingOwnerId_0(String addonId, WannabeAddonBilling wannabeAddonBilling) throws ApiException {
        postVendorBillingOwnerId_0WithHttpInfo(addonId, wannabeAddonBilling);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postVendorBillingOwnerId_0WithHttpInfo(String addonId, WannabeAddonBilling wannabeAddonBilling) throws ApiException {
        okhttp3.Call localVarCall = postVendorBillingOwnerId_0ValidateBeforeCall(addonId, wannabeAddonBilling, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param wannabeAddonBilling  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postVendorBillingOwnerId_0Async(String addonId, WannabeAddonBilling wannabeAddonBilling, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postVendorBillingOwnerId_0ValidateBeforeCall(addonId, wannabeAddonBilling, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVendorAppsAddonId_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVendorAppsAddonId_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVendorAppsAddonId_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling putVendorAppsAddonId_0(Async)");
        }

        return putVendorAppsAddonId_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public void putVendorAppsAddonId_0(String addonId) throws ApiException {
        putVendorAppsAddonId_0WithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putVendorAppsAddonId_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = putVendorAppsAddonId_0ValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> editApplicationConfiguration </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVendorAppsAddonId_0Async(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVendorAppsAddonId_0ValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAddonsPost_1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPost_1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor//addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAddonsPost_1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return vendorAddonsPost_1Call(_callback);

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAddonsPost_1() throws ApiException {
        vendorAddonsPost_1WithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAddonsPost_1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = vendorAddonsPost_1ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAddonsPost_1Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAddonsPost_1ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAppsAddonIdLogscollectorGet_0
     * @param addonId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdLogscollectorGet_0Call(String addonId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor//apps/{addonId}/logscollector"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAppsAddonIdLogscollectorGet_0ValidateBeforeCall(String addonId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling vendorAppsAddonIdLogscollectorGet_0(Async)");
        }

        return vendorAppsAddonIdLogscollectorGet_0Call(addonId, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAppsAddonIdLogscollectorGet_0(String addonId) throws ApiException {
        vendorAppsAddonIdLogscollectorGet_0WithHttpInfo(addonId);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAppsAddonIdLogscollectorGet_0WithHttpInfo(String addonId) throws ApiException {
        okhttp3.Call localVarCall = vendorAppsAddonIdLogscollectorGet_0ValidateBeforeCall(addonId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdLogscollectorGet_0Async(String addonId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAppsAddonIdLogscollectorGet_0ValidateBeforeCall(addonId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vendorAppsAddonIdMigrationCallbackPut_0
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdMigrationCallbackPut_0Call(String addonId, String planId, String region, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/apps/{addonId}/migration_callback"
            .replace("{" + "addonId" + "}", localVarApiClient.escapeString(addonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plan_id", planId));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorAppsAddonIdMigrationCallbackPut_0ValidateBeforeCall(String addonId, String planId, String region, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addonId' is set
        if (addonId == null) {
            throw new ApiException("Missing the required parameter 'addonId' when calling vendorAppsAddonIdMigrationCallbackPut_0(Async)");
        }

        return vendorAppsAddonIdMigrationCallbackPut_0Call(addonId, planId, region, _callback);

    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public void vendorAppsAddonIdMigrationCallbackPut_0(String addonId, String planId, String region) throws ApiException {
        vendorAppsAddonIdMigrationCallbackPut_0WithHttpInfo(addonId, planId, region);
    }

    /**
     * 
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vendorAppsAddonIdMigrationCallbackPut_0WithHttpInfo(String addonId, String planId, String region) throws ApiException {
        okhttp3.Call localVarCall = vendorAppsAddonIdMigrationCallbackPut_0ValidateBeforeCall(addonId, planId, region, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param addonId  (required)
     * @param planId  (optional)
     * @param region  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vendorAppsAddonIdMigrationCallbackPut_0Async(String addonId, String planId, String region, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorAppsAddonIdMigrationCallbackPut_0ValidateBeforeCall(addonId, planId, region, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
