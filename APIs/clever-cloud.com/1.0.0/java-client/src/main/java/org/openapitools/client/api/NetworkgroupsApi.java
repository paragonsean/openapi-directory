/*
 * Clever-Cloud API
 * Public API for managing Clever-Cloud data and products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Schema1;
import org.openapitools.client.model.Schema2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkgroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkgroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkgroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNetworkGroupExternalPeer_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeer_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupExternalPeer_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupExternalPeer_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupExternalPeer_1(Async)");
        }

        return createNetworkGroupExternalPeer_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroupExternalPeer_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroupExternalPeer_1WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Add external peer
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroupExternalPeer_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupExternalPeer_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add external peer (asynchronously)
     * Adds an external peer to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupExternalPeer_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupExternalPeer_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroupMember_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMember_1Call(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema2;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroupMember_1ValidateBeforeCall(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroupMember_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling createNetworkGroupMember_1(Async)");
        }

        return createNetworkGroupMember_1Call(ownerId, networkGroupId, schema2, _callback);

    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createNetworkGroupMember_1(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        createNetworkGroupMember_1WithHttpInfo(ownerId, networkGroupId, schema2);
    }

    /**
     * Add member
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createNetworkGroupMember_1WithHttpInfo(String ownerId, String networkGroupId, Schema2 schema2) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, schema2, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add member (asynchronously)
     * Adds a member to a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param schema2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroupMember_1Async(String ownerId, String networkGroupId, Schema2 schema2, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, schema2, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkGroup_1
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroup_1Call(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkGroup_1ValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling createNetworkGroup_1(Async)");
        }

        return createNetworkGroup_1Call(ownerId, body, _callback);

    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object createNetworkGroup_1(String ownerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = createNetworkGroup_1WithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * Create Network Group
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createNetworkGroup_1WithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = createNetworkGroup_1ValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Network Group (asynchronously)
     * Creates a Network Group.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkGroup_1Async(String ownerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkGroup_1ValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupExternalPeer_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeer_1Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupExternalPeer_1ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupExternalPeer_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupExternalPeer_1(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupExternalPeer_1(Async)");
        }

        return deleteNetworkGroupExternalPeer_1Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupExternalPeer_1(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupExternalPeer_1WithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove external peer
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupExternalPeer_1WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove external peer (asynchronously)
     * Removes an external peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupExternalPeer_1Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupExternalPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupMember_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMember_1Call(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupMember_1ValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupMember_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupMember_1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteNetworkGroupMember_1(Async)");
        }

        return deleteNetworkGroupMember_1Call(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupMember_1(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        deleteNetworkGroupMember_1WithHttpInfo(ownerId, networkGroupId, memberId, body);
    }

    /**
     * Remove member
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupMember_1WithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove member (asynchronously)
     * Removes a member from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupMember_1Async(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroupPeer_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeer_1Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroupPeer_1ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroupPeer_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroupPeer_1(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling deleteNetworkGroupPeer_1(Async)");
        }

        return deleteNetworkGroupPeer_1Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroupPeer_1(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        deleteNetworkGroupPeer_1WithHttpInfo(ownerId, networkGroupId, peerId, body);
    }

    /**
     * Remove peer
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroupPeer_1WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroupPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove peer (asynchronously)
     * Removes a peer from a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroupPeer_1Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroupPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkGroup_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroup_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkGroup_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling deleteNetworkGroup_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling deleteNetworkGroup_1(Async)");
        }

        return deleteNetworkGroup_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkGroup_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        deleteNetworkGroup_1WithHttpInfo(ownerId, networkGroupId, body);
    }

    /**
     * Delete Network Group
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkGroup_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkGroup_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Network Group (asynchronously)
     * Deletes a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkGroup_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkGroup_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupMember_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMember_1Call(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupMember_1ValidateBeforeCall(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupMember_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupMember_1(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling getNetworkGroupMember_1(Async)");
        }

        return getNetworkGroupMember_1Call(ownerId, networkGroupId, memberId, body, _callback);

    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return Schema1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Schema1 getNetworkGroupMember_1(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        ApiResponse<Schema1> localVarResp = getNetworkGroupMember_1WithHttpInfo(ownerId, networkGroupId, memberId, body);
        return localVarResp.getData();
    }

    /**
     * Get member
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema1> getNetworkGroupMember_1WithHttpInfo(String ownerId, String networkGroupId, String memberId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, memberId, body, null);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get member (asynchronously)
     * Gets details of a Network Group member.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param memberId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupMember_1Async(String ownerId, String networkGroupId, String memberId, Object body, final ApiCallback<Schema1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupMember_1ValidateBeforeCall(ownerId, networkGroupId, memberId, body, _callback);
        Type localVarReturnType = new TypeToken<Schema1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupPeer_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeer_1Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupPeer_1ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupPeer_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupPeer_1(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupPeer_1(Async)");
        }

        return getNetworkGroupPeer_1Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupPeer_1(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupPeer_1WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get peer
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupPeer_1WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get peer (asynchronously)
     * Gets details of a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupPeer_1Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupPeer_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupStream_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStream_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupStream_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupStream_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupStream_1(Async)");
        }

        return getNetworkGroupStream_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupStream_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupStream_1WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Network Group SSE
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupStream_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupStream_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Network Group SSE (asynchronously)
     * Retrieves the current Network Group details as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupStream_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupStream_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfigurationStream_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStream_1Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfigurationStream_1ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfigurationStream_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfigurationStream_1(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfigurationStream_1(Async)");
        }

        return getNetworkGroupWireGuardConfigurationStream_1Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfigurationStream_1(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfigurationStream_1WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfigurationStream_1WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStream_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer as a Server Sent Event.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfigurationStream_1Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfigurationStream_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroupWireGuardConfiguration_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfiguration_1Call(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()))
            .replace("{" + "peerId" + "}", localVarApiClient.escapeString(peerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroupWireGuardConfiguration_1ValidateBeforeCall(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroupWireGuardConfiguration_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroupWireGuardConfiguration_1(Async)");
        }

        // verify the required parameter 'peerId' is set
        if (peerId == null) {
            throw new ApiException("Missing the required parameter 'peerId' when calling getNetworkGroupWireGuardConfiguration_1(Async)");
        }

        return getNetworkGroupWireGuardConfiguration_1Call(ownerId, networkGroupId, peerId, body, _callback);

    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroupWireGuardConfiguration_1(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroupWireGuardConfiguration_1WithHttpInfo(ownerId, networkGroupId, peerId, body);
        return localVarResp.getData();
    }

    /**
     * Get WireGuard® configuration
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroupWireGuardConfiguration_1WithHttpInfo(String ownerId, String networkGroupId, String peerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfiguration_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get WireGuard® configuration (asynchronously)
     * Gets the current WireGuard® tunnel configuration file for a Network Group peer.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param peerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroupWireGuardConfiguration_1Async(String ownerId, String networkGroupId, String peerId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroupWireGuardConfiguration_1ValidateBeforeCall(ownerId, networkGroupId, peerId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworkGroup_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroup_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworkGroup_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling getNetworkGroup_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling getNetworkGroup_1(Async)");
        }

        return getNetworkGroup_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getNetworkGroup_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = getNetworkGroup_1WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * Get Network Group
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getNetworkGroup_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = getNetworkGroup_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Network Group (asynchronously)
     * Gets details of a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworkGroup_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworkGroup_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupMembers_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembers_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupMembers_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupMembers_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupMembers_1(Async)");
        }

        return listNetworkGroupMembers_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> listNetworkGroupMembers_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = listNetworkGroupMembers_1WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List members
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> listNetworkGroupMembers_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupMembers_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List members (asynchronously)
     * Lists members in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupMembers_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupMembers_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroupPeers_1
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeers_1Call(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()))
            .replace("{" + "networkGroupId" + "}", localVarApiClient.escapeString(networkGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroupPeers_1ValidateBeforeCall(String ownerId, String networkGroupId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroupPeers_1(Async)");
        }

        // verify the required parameter 'networkGroupId' is set
        if (networkGroupId == null) {
            throw new ApiException("Missing the required parameter 'networkGroupId' when calling listNetworkGroupPeers_1(Async)");
        }

        return listNetworkGroupPeers_1Call(ownerId, networkGroupId, body, _callback);

    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroupPeers_1(String ownerId, String networkGroupId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroupPeers_1WithHttpInfo(ownerId, networkGroupId, body);
        return localVarResp.getData();
    }

    /**
     * List peers
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroupPeers_1WithHttpInfo(String ownerId, String networkGroupId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroupPeers_1ValidateBeforeCall(ownerId, networkGroupId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List peers (asynchronously)
     * Lists peers in a Network Group.
     * @param ownerId Automatically added (required)
     * @param networkGroupId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroupPeers_1Async(String ownerId, String networkGroupId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroupPeers_1ValidateBeforeCall(ownerId, networkGroupId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkGroups_1
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroups_1Call(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v4/networkgroups/organisations/{ownerId}/networkgroups"
            .replace("{" + "ownerId" + "}", localVarApiClient.escapeString(ownerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkGroups_1ValidateBeforeCall(String ownerId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling listNetworkGroups_1(Async)");
        }

        return listNetworkGroups_1Call(ownerId, body, _callback);

    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> listNetworkGroups_1(String ownerId, Object body) throws ApiException {
        ApiResponse<List<Object>> localVarResp = listNetworkGroups_1WithHttpInfo(ownerId, body);
        return localVarResp.getData();
    }

    /**
     * List Network Groups
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> listNetworkGroups_1WithHttpInfo(String ownerId, Object body) throws ApiException {
        okhttp3.Call localVarCall = listNetworkGroups_1ValidateBeforeCall(ownerId, body, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Network Groups (asynchronously)
     * Lists Network Groups from an owner.
     * @param ownerId Automatically added (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkGroups_1Async(String ownerId, Object body, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkGroups_1ValidateBeforeCall(ownerId, body, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
