# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_rights import ConsumerRights
from openapi_server import util


class Consumer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: str=None, description: str=None, key: str=None, name: str=None, picture: str=None, rights: ConsumerRights=None, url: str=None):
        """Consumer - a model defined in OpenAPI

        :param base_url: The base_url of this Consumer.
        :param description: The description of this Consumer.
        :param key: The key of this Consumer.
        :param name: The name of this Consumer.
        :param picture: The picture of this Consumer.
        :param rights: The rights of this Consumer.
        :param url: The url of this Consumer.
        """
        self.openapi_types = {
            'base_url': str,
            'description': str,
            'key': str,
            'name': str,
            'picture': str,
            'rights': ConsumerRights,
            'url': str
        }

        self.attribute_map = {
            'base_url': 'baseUrl',
            'description': 'description',
            'key': 'key',
            'name': 'name',
            'picture': 'picture',
            'rights': 'rights',
            'url': 'url'
        }

        self._base_url = base_url
        self._description = description
        self._key = key
        self._name = name
        self._picture = picture
        self._rights = rights
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consumer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consumer of this Consumer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this Consumer.


        :return: The base_url of this Consumer.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Consumer.


        :param base_url: The base_url of this Consumer.
        :type base_url: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def description(self):
        """Gets the description of this Consumer.


        :return: The description of this Consumer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Consumer.


        :param description: The description of this Consumer.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def key(self):
        """Gets the key of this Consumer.


        :return: The key of this Consumer.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Consumer.


        :param key: The key of this Consumer.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this Consumer.


        :return: The name of this Consumer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Consumer.


        :param name: The name of this Consumer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this Consumer.


        :return: The picture of this Consumer.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Consumer.


        :param picture: The picture of this Consumer.
        :type picture: str
        """

        self._picture = picture

    @property
    def rights(self):
        """Gets the rights of this Consumer.


        :return: The rights of this Consumer.
        :rtype: ConsumerRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Consumer.


        :param rights: The rights of this Consumer.
        :type rights: ConsumerRights
        """
        if rights is None:
            raise ValueError("Invalid value for `rights`, must not be `None`")

        self._rights = rights

    @property
    def url(self):
        """Gets the url of this Consumer.


        :return: The url of this Consumer.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Consumer.


        :param url: The url of this Consumer.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
