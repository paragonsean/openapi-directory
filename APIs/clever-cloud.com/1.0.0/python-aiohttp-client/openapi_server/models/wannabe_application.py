# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wannabe_oauth_app import WannabeOauthApp
from openapi_server import util


class WannabeApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=False, cancel_on_push: bool=False, deploy: str=None, description: str=None, enabled: bool=False, favourite: bool=False, homogeneous: bool=False, instance_type: str=None, instance_variant: str=None, instance_version: str=None, max_flavor: str=None, max_instances: int=None, min_flavor: str=None, min_instances: int=None, name: str=None, oauth_app: WannabeOauthApp=None, oauth_app_id: str=None, oauth_service: str=None, separate_build: bool=False, shutdownable: bool=False, sticky_sessions: bool=False, tags: List[str]=None, zone: str=None):
        """WannabeApplication - a model defined in OpenAPI

        :param archived: The archived of this WannabeApplication.
        :param cancel_on_push: The cancel_on_push of this WannabeApplication.
        :param deploy: The deploy of this WannabeApplication.
        :param description: The description of this WannabeApplication.
        :param enabled: The enabled of this WannabeApplication.
        :param favourite: The favourite of this WannabeApplication.
        :param homogeneous: The homogeneous of this WannabeApplication.
        :param instance_type: The instance_type of this WannabeApplication.
        :param instance_variant: The instance_variant of this WannabeApplication.
        :param instance_version: The instance_version of this WannabeApplication.
        :param max_flavor: The max_flavor of this WannabeApplication.
        :param max_instances: The max_instances of this WannabeApplication.
        :param min_flavor: The min_flavor of this WannabeApplication.
        :param min_instances: The min_instances of this WannabeApplication.
        :param name: The name of this WannabeApplication.
        :param oauth_app: The oauth_app of this WannabeApplication.
        :param oauth_app_id: The oauth_app_id of this WannabeApplication.
        :param oauth_service: The oauth_service of this WannabeApplication.
        :param separate_build: The separate_build of this WannabeApplication.
        :param shutdownable: The shutdownable of this WannabeApplication.
        :param sticky_sessions: The sticky_sessions of this WannabeApplication.
        :param tags: The tags of this WannabeApplication.
        :param zone: The zone of this WannabeApplication.
        """
        self.openapi_types = {
            'archived': bool,
            'cancel_on_push': bool,
            'deploy': str,
            'description': str,
            'enabled': bool,
            'favourite': bool,
            'homogeneous': bool,
            'instance_type': str,
            'instance_variant': str,
            'instance_version': str,
            'max_flavor': str,
            'max_instances': int,
            'min_flavor': str,
            'min_instances': int,
            'name': str,
            'oauth_app': WannabeOauthApp,
            'oauth_app_id': str,
            'oauth_service': str,
            'separate_build': bool,
            'shutdownable': bool,
            'sticky_sessions': bool,
            'tags': List[str],
            'zone': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'cancel_on_push': 'cancelOnPush',
            'deploy': 'deploy',
            'description': 'description',
            'enabled': 'enabled',
            'favourite': 'favourite',
            'homogeneous': 'homogeneous',
            'instance_type': 'instanceType',
            'instance_variant': 'instanceVariant',
            'instance_version': 'instanceVersion',
            'max_flavor': 'maxFlavor',
            'max_instances': 'maxInstances',
            'min_flavor': 'minFlavor',
            'min_instances': 'minInstances',
            'name': 'name',
            'oauth_app': 'oauthApp',
            'oauth_app_id': 'oauthAppId',
            'oauth_service': 'oauthService',
            'separate_build': 'separateBuild',
            'shutdownable': 'shutdownable',
            'sticky_sessions': 'stickySessions',
            'tags': 'tags',
            'zone': 'zone'
        }

        self._archived = archived
        self._cancel_on_push = cancel_on_push
        self._deploy = deploy
        self._description = description
        self._enabled = enabled
        self._favourite = favourite
        self._homogeneous = homogeneous
        self._instance_type = instance_type
        self._instance_variant = instance_variant
        self._instance_version = instance_version
        self._max_flavor = max_flavor
        self._max_instances = max_instances
        self._min_flavor = min_flavor
        self._min_instances = min_instances
        self._name = name
        self._oauth_app = oauth_app
        self._oauth_app_id = oauth_app_id
        self._oauth_service = oauth_service
        self._separate_build = separate_build
        self._shutdownable = shutdownable
        self._sticky_sessions = sticky_sessions
        self._tags = tags
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeApplication of this WannabeApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this WannabeApplication.


        :return: The archived of this WannabeApplication.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this WannabeApplication.


        :param archived: The archived of this WannabeApplication.
        :type archived: bool
        """

        self._archived = archived

    @property
    def cancel_on_push(self):
        """Gets the cancel_on_push of this WannabeApplication.


        :return: The cancel_on_push of this WannabeApplication.
        :rtype: bool
        """
        return self._cancel_on_push

    @cancel_on_push.setter
    def cancel_on_push(self, cancel_on_push):
        """Sets the cancel_on_push of this WannabeApplication.


        :param cancel_on_push: The cancel_on_push of this WannabeApplication.
        :type cancel_on_push: bool
        """

        self._cancel_on_push = cancel_on_push

    @property
    def deploy(self):
        """Gets the deploy of this WannabeApplication.


        :return: The deploy of this WannabeApplication.
        :rtype: str
        """
        return self._deploy

    @deploy.setter
    def deploy(self, deploy):
        """Sets the deploy of this WannabeApplication.


        :param deploy: The deploy of this WannabeApplication.
        :type deploy: str
        """
        if deploy is None:
            raise ValueError("Invalid value for `deploy`, must not be `None`")

        self._deploy = deploy

    @property
    def description(self):
        """Gets the description of this WannabeApplication.


        :return: The description of this WannabeApplication.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WannabeApplication.


        :param description: The description of this WannabeApplication.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this WannabeApplication.


        :return: The enabled of this WannabeApplication.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WannabeApplication.


        :param enabled: The enabled of this WannabeApplication.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def favourite(self):
        """Gets the favourite of this WannabeApplication.


        :return: The favourite of this WannabeApplication.
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this WannabeApplication.


        :param favourite: The favourite of this WannabeApplication.
        :type favourite: bool
        """

        self._favourite = favourite

    @property
    def homogeneous(self):
        """Gets the homogeneous of this WannabeApplication.


        :return: The homogeneous of this WannabeApplication.
        :rtype: bool
        """
        return self._homogeneous

    @homogeneous.setter
    def homogeneous(self, homogeneous):
        """Sets the homogeneous of this WannabeApplication.


        :param homogeneous: The homogeneous of this WannabeApplication.
        :type homogeneous: bool
        """

        self._homogeneous = homogeneous

    @property
    def instance_type(self):
        """Gets the instance_type of this WannabeApplication.


        :return: The instance_type of this WannabeApplication.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this WannabeApplication.


        :param instance_type: The instance_type of this WannabeApplication.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def instance_variant(self):
        """Gets the instance_variant of this WannabeApplication.


        :return: The instance_variant of this WannabeApplication.
        :rtype: str
        """
        return self._instance_variant

    @instance_variant.setter
    def instance_variant(self, instance_variant):
        """Sets the instance_variant of this WannabeApplication.


        :param instance_variant: The instance_variant of this WannabeApplication.
        :type instance_variant: str
        """

        self._instance_variant = instance_variant

    @property
    def instance_version(self):
        """Gets the instance_version of this WannabeApplication.


        :return: The instance_version of this WannabeApplication.
        :rtype: str
        """
        return self._instance_version

    @instance_version.setter
    def instance_version(self, instance_version):
        """Sets the instance_version of this WannabeApplication.


        :param instance_version: The instance_version of this WannabeApplication.
        :type instance_version: str
        """

        self._instance_version = instance_version

    @property
    def max_flavor(self):
        """Gets the max_flavor of this WannabeApplication.


        :return: The max_flavor of this WannabeApplication.
        :rtype: str
        """
        return self._max_flavor

    @max_flavor.setter
    def max_flavor(self, max_flavor):
        """Sets the max_flavor of this WannabeApplication.


        :param max_flavor: The max_flavor of this WannabeApplication.
        :type max_flavor: str
        """

        self._max_flavor = max_flavor

    @property
    def max_instances(self):
        """Gets the max_instances of this WannabeApplication.


        :return: The max_instances of this WannabeApplication.
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this WannabeApplication.


        :param max_instances: The max_instances of this WannabeApplication.
        :type max_instances: int
        """
        if max_instances is None:
            raise ValueError("Invalid value for `max_instances`, must not be `None`")

        self._max_instances = max_instances

    @property
    def min_flavor(self):
        """Gets the min_flavor of this WannabeApplication.


        :return: The min_flavor of this WannabeApplication.
        :rtype: str
        """
        return self._min_flavor

    @min_flavor.setter
    def min_flavor(self, min_flavor):
        """Sets the min_flavor of this WannabeApplication.


        :param min_flavor: The min_flavor of this WannabeApplication.
        :type min_flavor: str
        """

        self._min_flavor = min_flavor

    @property
    def min_instances(self):
        """Gets the min_instances of this WannabeApplication.


        :return: The min_instances of this WannabeApplication.
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this WannabeApplication.


        :param min_instances: The min_instances of this WannabeApplication.
        :type min_instances: int
        """
        if min_instances is None:
            raise ValueError("Invalid value for `min_instances`, must not be `None`")

        self._min_instances = min_instances

    @property
    def name(self):
        """Gets the name of this WannabeApplication.


        :return: The name of this WannabeApplication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WannabeApplication.


        :param name: The name of this WannabeApplication.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def oauth_app(self):
        """Gets the oauth_app of this WannabeApplication.


        :return: The oauth_app of this WannabeApplication.
        :rtype: WannabeOauthApp
        """
        return self._oauth_app

    @oauth_app.setter
    def oauth_app(self, oauth_app):
        """Sets the oauth_app of this WannabeApplication.


        :param oauth_app: The oauth_app of this WannabeApplication.
        :type oauth_app: WannabeOauthApp
        """

        self._oauth_app = oauth_app

    @property
    def oauth_app_id(self):
        """Gets the oauth_app_id of this WannabeApplication.


        :return: The oauth_app_id of this WannabeApplication.
        :rtype: str
        """
        return self._oauth_app_id

    @oauth_app_id.setter
    def oauth_app_id(self, oauth_app_id):
        """Sets the oauth_app_id of this WannabeApplication.


        :param oauth_app_id: The oauth_app_id of this WannabeApplication.
        :type oauth_app_id: str
        """

        self._oauth_app_id = oauth_app_id

    @property
    def oauth_service(self):
        """Gets the oauth_service of this WannabeApplication.


        :return: The oauth_service of this WannabeApplication.
        :rtype: str
        """
        return self._oauth_service

    @oauth_service.setter
    def oauth_service(self, oauth_service):
        """Sets the oauth_service of this WannabeApplication.


        :param oauth_service: The oauth_service of this WannabeApplication.
        :type oauth_service: str
        """

        self._oauth_service = oauth_service

    @property
    def separate_build(self):
        """Gets the separate_build of this WannabeApplication.


        :return: The separate_build of this WannabeApplication.
        :rtype: bool
        """
        return self._separate_build

    @separate_build.setter
    def separate_build(self, separate_build):
        """Sets the separate_build of this WannabeApplication.


        :param separate_build: The separate_build of this WannabeApplication.
        :type separate_build: bool
        """

        self._separate_build = separate_build

    @property
    def shutdownable(self):
        """Gets the shutdownable of this WannabeApplication.


        :return: The shutdownable of this WannabeApplication.
        :rtype: bool
        """
        return self._shutdownable

    @shutdownable.setter
    def shutdownable(self, shutdownable):
        """Sets the shutdownable of this WannabeApplication.


        :param shutdownable: The shutdownable of this WannabeApplication.
        :type shutdownable: bool
        """

        self._shutdownable = shutdownable

    @property
    def sticky_sessions(self):
        """Gets the sticky_sessions of this WannabeApplication.


        :return: The sticky_sessions of this WannabeApplication.
        :rtype: bool
        """
        return self._sticky_sessions

    @sticky_sessions.setter
    def sticky_sessions(self, sticky_sessions):
        """Sets the sticky_sessions of this WannabeApplication.


        :param sticky_sessions: The sticky_sessions of this WannabeApplication.
        :type sticky_sessions: bool
        """

        self._sticky_sessions = sticky_sessions

    @property
    def tags(self):
        """Gets the tags of this WannabeApplication.


        :return: The tags of this WannabeApplication.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WannabeApplication.


        :param tags: The tags of this WannabeApplication.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def zone(self):
        """Gets the zone of this WannabeApplication.


        :return: The zone of this WannabeApplication.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this WannabeApplication.


        :param zone: The zone of this WannabeApplication.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")

        self._zone = zone
