# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WannabeConsumerRights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated: bool=False, right: str=None):
        """WannabeConsumerRights - a model defined in OpenAPI

        :param activated: The activated of this WannabeConsumerRights.
        :param right: The right of this WannabeConsumerRights.
        """
        self.openapi_types = {
            'activated': bool,
            'right': str
        }

        self.attribute_map = {
            'activated': 'activated',
            'right': 'right'
        }

        self._activated = activated
        self._right = right

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeConsumerRights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeConsumer_rights of this WannabeConsumerRights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated(self):
        """Gets the activated of this WannabeConsumerRights.


        :return: The activated of this WannabeConsumerRights.
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this WannabeConsumerRights.


        :param activated: The activated of this WannabeConsumerRights.
        :type activated: bool
        """
        if activated is None:
            raise ValueError("Invalid value for `activated`, must not be `None`")

        self._activated = activated

    @property
    def right(self):
        """Gets the right of this WannabeConsumerRights.


        :return: The right of this WannabeConsumerRights.
        :rtype: str
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this WannabeConsumerRights.


        :param right: The right of this WannabeConsumerRights.
        :type right: str
        """
        if right is None:
            raise ValueError("Invalid value for `right`, must not be `None`")

        self._right = right
