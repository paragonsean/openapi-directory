# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_data import PaymentData
from openapi_server import util


class WannabeAddon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, payment: PaymentData=None, plan: str=None, provider_id: str=None, region: str=None):
        """WannabeAddon - a model defined in OpenAPI

        :param name: The name of this WannabeAddon.
        :param payment: The payment of this WannabeAddon.
        :param plan: The plan of this WannabeAddon.
        :param provider_id: The provider_id of this WannabeAddon.
        :param region: The region of this WannabeAddon.
        """
        self.openapi_types = {
            'name': str,
            'payment': PaymentData,
            'plan': str,
            'provider_id': str,
            'region': str
        }

        self.attribute_map = {
            'name': 'name',
            'payment': 'payment',
            'plan': 'plan',
            'provider_id': 'providerId',
            'region': 'region'
        }

        self._name = name
        self._payment = payment
        self._plan = plan
        self._provider_id = provider_id
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeAddon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeAddon of this WannabeAddon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this WannabeAddon.


        :return: The name of this WannabeAddon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WannabeAddon.


        :param name: The name of this WannabeAddon.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def payment(self):
        """Gets the payment of this WannabeAddon.


        :return: The payment of this WannabeAddon.
        :rtype: PaymentData
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this WannabeAddon.


        :param payment: The payment of this WannabeAddon.
        :type payment: PaymentData
        """
        if payment is None:
            raise ValueError("Invalid value for `payment`, must not be `None`")

        self._payment = payment

    @property
    def plan(self):
        """Gets the plan of this WannabeAddon.


        :return: The plan of this WannabeAddon.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this WannabeAddon.


        :param plan: The plan of this WannabeAddon.
        :type plan: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def provider_id(self):
        """Gets the provider_id of this WannabeAddon.

        

        :return: The provider_id of this WannabeAddon.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this WannabeAddon.

        

        :param provider_id: The provider_id of this WannabeAddon.
        :type provider_id: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")

        self._provider_id = provider_id

    @property
    def region(self):
        """Gets the region of this WannabeAddon.


        :return: The region of this WannabeAddon.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this WannabeAddon.


        :param region: The region of this WannabeAddon.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
