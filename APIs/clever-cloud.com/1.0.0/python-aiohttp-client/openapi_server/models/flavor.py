# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Flavor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=False, cpus: int=None, disk: int=None, mem: int=None, microservice: bool=False, name: str=None, nice: float=None, price: float=None):
        """Flavor - a model defined in OpenAPI

        :param available: The available of this Flavor.
        :param cpus: The cpus of this Flavor.
        :param disk: The disk of this Flavor.
        :param mem: The mem of this Flavor.
        :param microservice: The microservice of this Flavor.
        :param name: The name of this Flavor.
        :param nice: The nice of this Flavor.
        :param price: The price of this Flavor.
        """
        self.openapi_types = {
            'available': bool,
            'cpus': int,
            'disk': int,
            'mem': int,
            'microservice': bool,
            'name': str,
            'nice': float,
            'price': float
        }

        self.attribute_map = {
            'available': 'available',
            'cpus': 'cpus',
            'disk': 'disk',
            'mem': 'mem',
            'microservice': 'microservice',
            'name': 'name',
            'nice': 'nice',
            'price': 'price'
        }

        self._available = available
        self._cpus = cpus
        self._disk = disk
        self._mem = mem
        self._microservice = microservice
        self._name = name
        self._nice = nice
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Flavor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Flavor of this Flavor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Flavor.


        :return: The available of this Flavor.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Flavor.


        :param available: The available of this Flavor.
        :type available: bool
        """

        self._available = available

    @property
    def cpus(self):
        """Gets the cpus of this Flavor.


        :return: The cpus of this Flavor.
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this Flavor.


        :param cpus: The cpus of this Flavor.
        :type cpus: int
        """
        if cpus is None:
            raise ValueError("Invalid value for `cpus`, must not be `None`")

        self._cpus = cpus

    @property
    def disk(self):
        """Gets the disk of this Flavor.


        :return: The disk of this Flavor.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Flavor.


        :param disk: The disk of this Flavor.
        :type disk: int
        """

        self._disk = disk

    @property
    def mem(self):
        """Gets the mem of this Flavor.


        :return: The mem of this Flavor.
        :rtype: int
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this Flavor.


        :param mem: The mem of this Flavor.
        :type mem: int
        """
        if mem is None:
            raise ValueError("Invalid value for `mem`, must not be `None`")

        self._mem = mem

    @property
    def microservice(self):
        """Gets the microservice of this Flavor.


        :return: The microservice of this Flavor.
        :rtype: bool
        """
        return self._microservice

    @microservice.setter
    def microservice(self, microservice):
        """Sets the microservice of this Flavor.


        :param microservice: The microservice of this Flavor.
        :type microservice: bool
        """

        self._microservice = microservice

    @property
    def name(self):
        """Gets the name of this Flavor.


        :return: The name of this Flavor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flavor.


        :param name: The name of this Flavor.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nice(self):
        """Gets the nice of this Flavor.


        :return: The nice of this Flavor.
        :rtype: float
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this Flavor.


        :param nice: The nice of this Flavor.
        :type nice: float
        """

        self._nice = nice

    @property
    def price(self):
        """Gets the price of this Flavor.


        :return: The price of this Flavor.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Flavor.


        :param price: The price of this Flavor.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price
