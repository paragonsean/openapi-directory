# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.credits_drop_price import CreditsDropPrice
from openapi_server import util


class Credits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, drop_price: CreditsDropPrice=None, owner_id: str=None):
        """Credits - a model defined in OpenAPI

        :param count: The count of this Credits.
        :param drop_price: The drop_price of this Credits.
        :param owner_id: The owner_id of this Credits.
        """
        self.openapi_types = {
            'count': float,
            'drop_price': CreditsDropPrice,
            'owner_id': str
        }

        self.attribute_map = {
            'count': 'count',
            'drop_price': 'dropPrice',
            'owner_id': 'ownerId'
        }

        self._count = count
        self._drop_price = drop_price
        self._owner_id = owner_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Credits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credits of this Credits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Credits.


        :return: The count of this Credits.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Credits.


        :param count: The count of this Credits.
        :type count: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def drop_price(self):
        """Gets the drop_price of this Credits.


        :return: The drop_price of this Credits.
        :rtype: CreditsDropPrice
        """
        return self._drop_price

    @drop_price.setter
    def drop_price(self, drop_price):
        """Sets the drop_price of this Credits.


        :param drop_price: The drop_price of this Credits.
        :type drop_price: CreditsDropPrice
        """
        if drop_price is None:
            raise ValueError("Invalid value for `drop_price`, must not be `None`")

        self._drop_price = drop_price

    @property
    def owner_id(self):
        """Gets the owner_id of this Credits.


        :return: The owner_id of this Credits.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Credits.


        :param owner_id: The owner_id of this Credits.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id
