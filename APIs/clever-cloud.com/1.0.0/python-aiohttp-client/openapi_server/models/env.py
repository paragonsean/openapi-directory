# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wannabe_env import WannabeEnv
from openapi_server import util


class Env(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addon_id: str=None, addon_name: str=None, env: List[WannabeEnv]=None, provider_id: str=None):
        """Env - a model defined in OpenAPI

        :param addon_id: The addon_id of this Env.
        :param addon_name: The addon_name of this Env.
        :param env: The env of this Env.
        :param provider_id: The provider_id of this Env.
        """
        self.openapi_types = {
            'addon_id': str,
            'addon_name': str,
            'env': List[WannabeEnv],
            'provider_id': str
        }

        self.attribute_map = {
            'addon_id': 'addon_id',
            'addon_name': 'addon_name',
            'env': 'env',
            'provider_id': 'provider_id'
        }

        self._addon_id = addon_id
        self._addon_name = addon_name
        self._env = env
        self._provider_id = provider_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Env':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Env of this Env.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addon_id(self):
        """Gets the addon_id of this Env.


        :return: The addon_id of this Env.
        :rtype: str
        """
        return self._addon_id

    @addon_id.setter
    def addon_id(self, addon_id):
        """Sets the addon_id of this Env.


        :param addon_id: The addon_id of this Env.
        :type addon_id: str
        """
        if addon_id is None:
            raise ValueError("Invalid value for `addon_id`, must not be `None`")

        self._addon_id = addon_id

    @property
    def addon_name(self):
        """Gets the addon_name of this Env.


        :return: The addon_name of this Env.
        :rtype: str
        """
        return self._addon_name

    @addon_name.setter
    def addon_name(self, addon_name):
        """Sets the addon_name of this Env.


        :param addon_name: The addon_name of this Env.
        :type addon_name: str
        """
        if addon_name is None:
            raise ValueError("Invalid value for `addon_name`, must not be `None`")

        self._addon_name = addon_name

    @property
    def env(self):
        """Gets the env of this Env.


        :return: The env of this Env.
        :rtype: List[WannabeEnv]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Env.


        :param env: The env of this Env.
        :type env: List[WannabeEnv]
        """
        if env is None:
            raise ValueError("Invalid value for `env`, must not be `None`")

        self._env = env

    @property
    def provider_id(self):
        """Gets the provider_id of this Env.


        :return: The provider_id of this Env.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Env.


        :param provider_id: The provider_id of this Env.
        :type provider_id: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")

        self._provider_id = provider_id
