# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.summary_organisations_inner_addons_inner import SummaryOrganisationsInnerAddonsInner
from openapi_server.models.summary_organisations_inner_applications_inner import SummaryOrganisationsInnerApplicationsInner
from openapi_server.models.summary_organisations_inner_consumers_inner import SummaryOrganisationsInnerConsumersInner
from openapi_server import util


class SummaryOrganisationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons: List[SummaryOrganisationsInnerAddonsInner]=None, applications: List[SummaryOrganisationsInnerApplicationsInner]=None, avatar: str=None, consumers: List[SummaryOrganisationsInnerConsumersInner]=None, id: str=None, name: str=None, providers: List[str]=None, role: str=None):
        """SummaryOrganisationsInner - a model defined in OpenAPI

        :param addons: The addons of this SummaryOrganisationsInner.
        :param applications: The applications of this SummaryOrganisationsInner.
        :param avatar: The avatar of this SummaryOrganisationsInner.
        :param consumers: The consumers of this SummaryOrganisationsInner.
        :param id: The id of this SummaryOrganisationsInner.
        :param name: The name of this SummaryOrganisationsInner.
        :param providers: The providers of this SummaryOrganisationsInner.
        :param role: The role of this SummaryOrganisationsInner.
        """
        self.openapi_types = {
            'addons': List[SummaryOrganisationsInnerAddonsInner],
            'applications': List[SummaryOrganisationsInnerApplicationsInner],
            'avatar': str,
            'consumers': List[SummaryOrganisationsInnerConsumersInner],
            'id': str,
            'name': str,
            'providers': List[str],
            'role': str
        }

        self.attribute_map = {
            'addons': 'addons',
            'applications': 'applications',
            'avatar': 'avatar',
            'consumers': 'consumers',
            'id': 'id',
            'name': 'name',
            'providers': 'providers',
            'role': 'role'
        }

        self._addons = addons
        self._applications = applications
        self._avatar = avatar
        self._consumers = consumers
        self._id = id
        self._name = name
        self._providers = providers
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SummaryOrganisationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary_organisations_inner of this SummaryOrganisationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons(self):
        """Gets the addons of this SummaryOrganisationsInner.


        :return: The addons of this SummaryOrganisationsInner.
        :rtype: List[SummaryOrganisationsInnerAddonsInner]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this SummaryOrganisationsInner.


        :param addons: The addons of this SummaryOrganisationsInner.
        :type addons: List[SummaryOrganisationsInnerAddonsInner]
        """

        self._addons = addons

    @property
    def applications(self):
        """Gets the applications of this SummaryOrganisationsInner.


        :return: The applications of this SummaryOrganisationsInner.
        :rtype: List[SummaryOrganisationsInnerApplicationsInner]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this SummaryOrganisationsInner.


        :param applications: The applications of this SummaryOrganisationsInner.
        :type applications: List[SummaryOrganisationsInnerApplicationsInner]
        """

        self._applications = applications

    @property
    def avatar(self):
        """Gets the avatar of this SummaryOrganisationsInner.


        :return: The avatar of this SummaryOrganisationsInner.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this SummaryOrganisationsInner.


        :param avatar: The avatar of this SummaryOrganisationsInner.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def consumers(self):
        """Gets the consumers of this SummaryOrganisationsInner.


        :return: The consumers of this SummaryOrganisationsInner.
        :rtype: List[SummaryOrganisationsInnerConsumersInner]
        """
        return self._consumers

    @consumers.setter
    def consumers(self, consumers):
        """Sets the consumers of this SummaryOrganisationsInner.


        :param consumers: The consumers of this SummaryOrganisationsInner.
        :type consumers: List[SummaryOrganisationsInnerConsumersInner]
        """

        self._consumers = consumers

    @property
    def id(self):
        """Gets the id of this SummaryOrganisationsInner.


        :return: The id of this SummaryOrganisationsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SummaryOrganisationsInner.


        :param id: The id of this SummaryOrganisationsInner.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SummaryOrganisationsInner.


        :return: The name of this SummaryOrganisationsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SummaryOrganisationsInner.


        :param name: The name of this SummaryOrganisationsInner.
        :type name: str
        """

        self._name = name

    @property
    def providers(self):
        """Gets the providers of this SummaryOrganisationsInner.


        :return: The providers of this SummaryOrganisationsInner.
        :rtype: List[str]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this SummaryOrganisationsInner.


        :param providers: The providers of this SummaryOrganisationsInner.
        :type providers: List[str]
        """

        self._providers = providers

    @property
    def role(self):
        """Gets the role of this SummaryOrganisationsInner.


        :return: The role of this SummaryOrganisationsInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SummaryOrganisationsInner.


        :param role: The role of this SummaryOrganisationsInner.
        :type role: str
        """

        self._role = role
