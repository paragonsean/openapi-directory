# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.summary_organisations_inner_addons_inner import SummaryOrganisationsInnerAddonsInner
from openapi_server.models.summary_organisations_inner_applications_inner import SummaryOrganisationsInnerApplicationsInner
from openapi_server.models.summary_organisations_inner_consumers_inner import SummaryOrganisationsInnerConsumersInner
from openapi_server import util


class SummaryUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addons: List[SummaryOrganisationsInnerAddonsInner]=None, admin: bool=False, applications: List[SummaryOrganisationsInnerApplicationsInner]=None, avatar: str=None, consumers: List[SummaryOrganisationsInnerConsumersInner]=None, id: str=None, lang: str=None, name: str=None):
        """SummaryUser - a model defined in OpenAPI

        :param addons: The addons of this SummaryUser.
        :param admin: The admin of this SummaryUser.
        :param applications: The applications of this SummaryUser.
        :param avatar: The avatar of this SummaryUser.
        :param consumers: The consumers of this SummaryUser.
        :param id: The id of this SummaryUser.
        :param lang: The lang of this SummaryUser.
        :param name: The name of this SummaryUser.
        """
        self.openapi_types = {
            'addons': List[SummaryOrganisationsInnerAddonsInner],
            'admin': bool,
            'applications': List[SummaryOrganisationsInnerApplicationsInner],
            'avatar': str,
            'consumers': List[SummaryOrganisationsInnerConsumersInner],
            'id': str,
            'lang': str,
            'name': str
        }

        self.attribute_map = {
            'addons': 'addons',
            'admin': 'admin',
            'applications': 'applications',
            'avatar': 'avatar',
            'consumers': 'consumers',
            'id': 'id',
            'lang': 'lang',
            'name': 'name'
        }

        self._addons = addons
        self._admin = admin
        self._applications = applications
        self._avatar = avatar
        self._consumers = consumers
        self._id = id
        self._lang = lang
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SummaryUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary_user of this SummaryUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addons(self):
        """Gets the addons of this SummaryUser.


        :return: The addons of this SummaryUser.
        :rtype: List[SummaryOrganisationsInnerAddonsInner]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this SummaryUser.


        :param addons: The addons of this SummaryUser.
        :type addons: List[SummaryOrganisationsInnerAddonsInner]
        """
        if addons is None:
            raise ValueError("Invalid value for `addons`, must not be `None`")

        self._addons = addons

    @property
    def admin(self):
        """Gets the admin of this SummaryUser.


        :return: The admin of this SummaryUser.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this SummaryUser.


        :param admin: The admin of this SummaryUser.
        :type admin: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")

        self._admin = admin

    @property
    def applications(self):
        """Gets the applications of this SummaryUser.


        :return: The applications of this SummaryUser.
        :rtype: List[SummaryOrganisationsInnerApplicationsInner]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this SummaryUser.


        :param applications: The applications of this SummaryUser.
        :type applications: List[SummaryOrganisationsInnerApplicationsInner]
        """
        if applications is None:
            raise ValueError("Invalid value for `applications`, must not be `None`")

        self._applications = applications

    @property
    def avatar(self):
        """Gets the avatar of this SummaryUser.


        :return: The avatar of this SummaryUser.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this SummaryUser.


        :param avatar: The avatar of this SummaryUser.
        :type avatar: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")

        self._avatar = avatar

    @property
    def consumers(self):
        """Gets the consumers of this SummaryUser.


        :return: The consumers of this SummaryUser.
        :rtype: List[SummaryOrganisationsInnerConsumersInner]
        """
        return self._consumers

    @consumers.setter
    def consumers(self, consumers):
        """Sets the consumers of this SummaryUser.


        :param consumers: The consumers of this SummaryUser.
        :type consumers: List[SummaryOrganisationsInnerConsumersInner]
        """

        self._consumers = consumers

    @property
    def id(self):
        """Gets the id of this SummaryUser.


        :return: The id of this SummaryUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SummaryUser.


        :param id: The id of this SummaryUser.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lang(self):
        """Gets the lang of this SummaryUser.


        :return: The lang of this SummaryUser.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this SummaryUser.


        :param lang: The lang of this SummaryUser.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")

        self._lang = lang

    @property
    def name(self):
        """Gets the name of this SummaryUser.


        :return: The name of this SummaryUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SummaryUser.


        :param name: The name of this SummaryUser.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
