# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flavor import Flavor
from openapi_server import util


class AppInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_port: int=None, commit: str=None, deploy_number: int=None, flavor: Flavor=None, id: str=None, ip: str=None, state: str=None):
        """AppInstance - a model defined in OpenAPI

        :param app_id: The app_id of this AppInstance.
        :param app_port: The app_port of this AppInstance.
        :param commit: The commit of this AppInstance.
        :param deploy_number: The deploy_number of this AppInstance.
        :param flavor: The flavor of this AppInstance.
        :param id: The id of this AppInstance.
        :param ip: The ip of this AppInstance.
        :param state: The state of this AppInstance.
        """
        self.openapi_types = {
            'app_id': str,
            'app_port': int,
            'commit': str,
            'deploy_number': int,
            'flavor': Flavor,
            'id': str,
            'ip': str,
            'state': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_port': 'appPort',
            'commit': 'commit',
            'deploy_number': 'deployNumber',
            'flavor': 'flavor',
            'id': 'id',
            'ip': 'ip',
            'state': 'state'
        }

        self._app_id = app_id
        self._app_port = app_port
        self._commit = commit
        self._deploy_number = deploy_number
        self._flavor = flavor
        self._id = id
        self._ip = ip
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppInstance of this AppInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AppInstance.


        :return: The app_id of this AppInstance.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AppInstance.


        :param app_id: The app_id of this AppInstance.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_port(self):
        """Gets the app_port of this AppInstance.


        :return: The app_port of this AppInstance.
        :rtype: int
        """
        return self._app_port

    @app_port.setter
    def app_port(self, app_port):
        """Sets the app_port of this AppInstance.


        :param app_port: The app_port of this AppInstance.
        :type app_port: int
        """

        self._app_port = app_port

    @property
    def commit(self):
        """Gets the commit of this AppInstance.


        :return: The commit of this AppInstance.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this AppInstance.


        :param commit: The commit of this AppInstance.
        :type commit: str
        """

        self._commit = commit

    @property
    def deploy_number(self):
        """Gets the deploy_number of this AppInstance.


        :return: The deploy_number of this AppInstance.
        :rtype: int
        """
        return self._deploy_number

    @deploy_number.setter
    def deploy_number(self, deploy_number):
        """Sets the deploy_number of this AppInstance.


        :param deploy_number: The deploy_number of this AppInstance.
        :type deploy_number: int
        """

        self._deploy_number = deploy_number

    @property
    def flavor(self):
        """Gets the flavor of this AppInstance.


        :return: The flavor of this AppInstance.
        :rtype: Flavor
        """
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        """Sets the flavor of this AppInstance.


        :param flavor: The flavor of this AppInstance.
        :type flavor: Flavor
        """

        self._flavor = flavor

    @property
    def id(self):
        """Gets the id of this AppInstance.


        :return: The id of this AppInstance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppInstance.


        :param id: The id of this AppInstance.
        :type id: str
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this AppInstance.


        :return: The ip of this AppInstance.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AppInstance.


        :param ip: The ip of this AppInstance.
        :type ip: str
        """

        self._ip = ip

    @property
    def state(self):
        """Gets the state of this AppInstance.


        :return: The state of this AppInstance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AppInstance.


        :param state: The state of this AppInstance.
        :type state: str
        """

        self._state = state
