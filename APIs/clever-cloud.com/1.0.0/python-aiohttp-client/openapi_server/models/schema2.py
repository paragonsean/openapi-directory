# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Schema2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, job: str=None, role: str=None):
        """Schema2 - a model defined in OpenAPI

        :param email: The email of this Schema2.
        :param job: The job of this Schema2.
        :param role: The role of this Schema2.
        """
        self.openapi_types = {
            'email': str,
            'job': str,
            'role': str
        }

        self.attribute_map = {
            'email': 'email',
            'job': 'job',
            'role': 'role'
        }

        self._email = email
        self._job = job
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Schema2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The schema2 of this Schema2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Schema2.


        :return: The email of this Schema2.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Schema2.


        :param email: The email of this Schema2.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def job(self):
        """Gets the job of this Schema2.


        :return: The job of this Schema2.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Schema2.


        :param job: The job of this Schema2.
        :type job: str
        """

        self._job = job

    @property
    def role(self):
        """Gets the role of this Schema2.


        :return: The role of this Schema2.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Schema2.


        :param role: The role of this Schema2.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
