# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sso(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: str=None, nav_data: str=None, timestamp: date=None, token: str=None, url: str=None):
        """Sso - a model defined in OpenAPI

        :param email: The email of this Sso.
        :param id: The id of this Sso.
        :param nav_data: The nav_data of this Sso.
        :param timestamp: The timestamp of this Sso.
        :param token: The token of this Sso.
        :param url: The url of this Sso.
        """
        self.openapi_types = {
            'email': str,
            'id': str,
            'nav_data': str,
            'timestamp': date,
            'token': str,
            'url': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'nav_data': 'nav-data',
            'timestamp': 'timestamp',
            'token': 'token',
            'url': 'url'
        }

        self._email = email
        self._id = id
        self._nav_data = nav_data
        self._timestamp = timestamp
        self._token = token
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sso':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sso of this Sso.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Sso.


        :return: The email of this Sso.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Sso.


        :param email: The email of this Sso.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this Sso.


        :return: The id of this Sso.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sso.


        :param id: The id of this Sso.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def nav_data(self):
        """Gets the nav_data of this Sso.


        :return: The nav_data of this Sso.
        :rtype: str
        """
        return self._nav_data

    @nav_data.setter
    def nav_data(self, nav_data):
        """Sets the nav_data of this Sso.


        :param nav_data: The nav_data of this Sso.
        :type nav_data: str
        """
        if nav_data is None:
            raise ValueError("Invalid value for `nav_data`, must not be `None`")

        self._nav_data = nav_data

    @property
    def timestamp(self):
        """Gets the timestamp of this Sso.


        :return: The timestamp of this Sso.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Sso.


        :param timestamp: The timestamp of this Sso.
        :type timestamp: date
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this Sso.


        :return: The token of this Sso.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Sso.


        :param token: The token of this Sso.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def url(self):
        """Gets the url of this Sso.


        :return: The url of this Sso.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Sso.


        :param url: The url of this Sso.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
