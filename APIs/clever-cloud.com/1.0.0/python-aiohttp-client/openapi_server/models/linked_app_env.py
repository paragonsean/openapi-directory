# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.wannabe_env import WannabeEnv
from openapi_server import util


class LinkedAppEnv(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_name: str=None, env: List[WannabeEnv]=None):
        """LinkedAppEnv - a model defined in OpenAPI

        :param app_id: The app_id of this LinkedAppEnv.
        :param app_name: The app_name of this LinkedAppEnv.
        :param env: The env of this LinkedAppEnv.
        """
        self.openapi_types = {
            'app_id': str,
            'app_name': str,
            'env': List[WannabeEnv]
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'app_name': 'app_name',
            'env': 'env'
        }

        self._app_id = app_id
        self._app_name = app_name
        self._env = env

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedAppEnv':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedAppEnv of this LinkedAppEnv.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this LinkedAppEnv.


        :return: The app_id of this LinkedAppEnv.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this LinkedAppEnv.


        :param app_id: The app_id of this LinkedAppEnv.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this LinkedAppEnv.


        :return: The app_name of this LinkedAppEnv.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this LinkedAppEnv.


        :param app_name: The app_name of this LinkedAppEnv.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def env(self):
        """Gets the env of this LinkedAppEnv.


        :return: The env of this LinkedAppEnv.
        :rtype: List[WannabeEnv]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this LinkedAppEnv.


        :param env: The env of this LinkedAppEnv.
        :type env: List[WannabeEnv]
        """
        if env is None:
            raise ValueError("Invalid value for `env`, must not be `None`")

        self._env = env
