# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature import Feature
from openapi_server.models.plan import Plan
from openapi_server import util


class Provider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_id: str=None, can_upgrade: bool=False, features: List[Feature]=None, google_plus_name: str=None, id: str=None, logo_url: str=None, long_desc: str=None, name: str=None, open_in_new_tab: bool=False, plans: List[Plan]=None, regions: List[str]=None, short_desc: str=None, status: str=None, support_email: str=None, twitter_name: str=None, website: str=None):
        """Provider - a model defined in OpenAPI

        :param analytics_id: The analytics_id of this Provider.
        :param can_upgrade: The can_upgrade of this Provider.
        :param features: The features of this Provider.
        :param google_plus_name: The google_plus_name of this Provider.
        :param id: The id of this Provider.
        :param logo_url: The logo_url of this Provider.
        :param long_desc: The long_desc of this Provider.
        :param name: The name of this Provider.
        :param open_in_new_tab: The open_in_new_tab of this Provider.
        :param plans: The plans of this Provider.
        :param regions: The regions of this Provider.
        :param short_desc: The short_desc of this Provider.
        :param status: The status of this Provider.
        :param support_email: The support_email of this Provider.
        :param twitter_name: The twitter_name of this Provider.
        :param website: The website of this Provider.
        """
        self.openapi_types = {
            'analytics_id': str,
            'can_upgrade': bool,
            'features': List[Feature],
            'google_plus_name': str,
            'id': str,
            'logo_url': str,
            'long_desc': str,
            'name': str,
            'open_in_new_tab': bool,
            'plans': List[Plan],
            'regions': List[str],
            'short_desc': str,
            'status': str,
            'support_email': str,
            'twitter_name': str,
            'website': str
        }

        self.attribute_map = {
            'analytics_id': 'analyticsId',
            'can_upgrade': 'canUpgrade',
            'features': 'features',
            'google_plus_name': 'googlePlusName',
            'id': 'id',
            'logo_url': 'logoUrl',
            'long_desc': 'longDesc',
            'name': 'name',
            'open_in_new_tab': 'openInNewTab',
            'plans': 'plans',
            'regions': 'regions',
            'short_desc': 'shortDesc',
            'status': 'status',
            'support_email': 'supportEmail',
            'twitter_name': 'twitterName',
            'website': 'website'
        }

        self._analytics_id = analytics_id
        self._can_upgrade = can_upgrade
        self._features = features
        self._google_plus_name = google_plus_name
        self._id = id
        self._logo_url = logo_url
        self._long_desc = long_desc
        self._name = name
        self._open_in_new_tab = open_in_new_tab
        self._plans = plans
        self._regions = regions
        self._short_desc = short_desc
        self._status = status
        self._support_email = support_email
        self._twitter_name = twitter_name
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Provider of this Provider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_id(self):
        """Gets the analytics_id of this Provider.

        The id of the analytics page link to this addon

        :return: The analytics_id of this Provider.
        :rtype: str
        """
        return self._analytics_id

    @analytics_id.setter
    def analytics_id(self, analytics_id):
        """Sets the analytics_id of this Provider.

        The id of the analytics page link to this addon

        :param analytics_id: The analytics_id of this Provider.
        :type analytics_id: str
        """
        if analytics_id is None:
            raise ValueError("Invalid value for `analytics_id`, must not be `None`")

        self._analytics_id = analytics_id

    @property
    def can_upgrade(self):
        """Gets the can_upgrade of this Provider.

        Can the addon be upgraded

        :return: The can_upgrade of this Provider.
        :rtype: bool
        """
        return self._can_upgrade

    @can_upgrade.setter
    def can_upgrade(self, can_upgrade):
        """Sets the can_upgrade of this Provider.

        Can the addon be upgraded

        :param can_upgrade: The can_upgrade of this Provider.
        :type can_upgrade: bool
        """
        if can_upgrade is None:
            raise ValueError("Invalid value for `can_upgrade`, must not be `None`")

        self._can_upgrade = can_upgrade

    @property
    def features(self):
        """Gets the features of this Provider.


        :return: The features of this Provider.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Provider.


        :param features: The features of this Provider.
        :type features: List[Feature]
        """

        self._features = features

    @property
    def google_plus_name(self):
        """Gets the google_plus_name of this Provider.

        The name of the google + page link to this addon (could be empty)

        :return: The google_plus_name of this Provider.
        :rtype: str
        """
        return self._google_plus_name

    @google_plus_name.setter
    def google_plus_name(self, google_plus_name):
        """Sets the google_plus_name of this Provider.

        The name of the google + page link to this addon (could be empty)

        :param google_plus_name: The google_plus_name of this Provider.
        :type google_plus_name: str
        """
        if google_plus_name is None:
            raise ValueError("Invalid value for `google_plus_name`, must not be `None`")

        self._google_plus_name = google_plus_name

    @property
    def id(self):
        """Gets the id of this Provider.

        The id of the provider

        :return: The id of this Provider.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Provider.

        The id of the provider

        :param id: The id of this Provider.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this Provider.

        The url of the addon's logo

        :return: The logo_url of this Provider.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Provider.

        The url of the addon's logo

        :param logo_url: The logo_url of this Provider.
        :type logo_url: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")

        self._logo_url = logo_url

    @property
    def long_desc(self):
        """Gets the long_desc of this Provider.

        A less concise description of the addon

        :return: The long_desc of this Provider.
        :rtype: str
        """
        return self._long_desc

    @long_desc.setter
    def long_desc(self, long_desc):
        """Sets the long_desc of this Provider.

        A less concise description of the addon

        :param long_desc: The long_desc of this Provider.
        :type long_desc: str
        """
        if long_desc is None:
            raise ValueError("Invalid value for `long_desc`, must not be `None`")

        self._long_desc = long_desc

    @property
    def name(self):
        """Gets the name of this Provider.


        :return: The name of this Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Provider.


        :param name: The name of this Provider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def open_in_new_tab(self):
        """Gets the open_in_new_tab of this Provider.

        Does the addon panel need to be open in a new tab

        :return: The open_in_new_tab of this Provider.
        :rtype: bool
        """
        return self._open_in_new_tab

    @open_in_new_tab.setter
    def open_in_new_tab(self, open_in_new_tab):
        """Sets the open_in_new_tab of this Provider.

        Does the addon panel need to be open in a new tab

        :param open_in_new_tab: The open_in_new_tab of this Provider.
        :type open_in_new_tab: bool
        """
        if open_in_new_tab is None:
            raise ValueError("Invalid value for `open_in_new_tab`, must not be `None`")

        self._open_in_new_tab = open_in_new_tab

    @property
    def plans(self):
        """Gets the plans of this Provider.


        :return: The plans of this Provider.
        :rtype: List[Plan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans):
        """Sets the plans of this Provider.


        :param plans: The plans of this Provider.
        :type plans: List[Plan]
        """

        self._plans = plans

    @property
    def regions(self):
        """Gets the regions of this Provider.

        The differents regions where the addon is available

        :return: The regions of this Provider.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Provider.

        The differents regions where the addon is available

        :param regions: The regions of this Provider.
        :type regions: List[str]
        """
        if regions is None:
            raise ValueError("Invalid value for `regions`, must not be `None`")

        self._regions = regions

    @property
    def short_desc(self):
        """Gets the short_desc of this Provider.

        A short description of the addon

        :return: The short_desc of this Provider.
        :rtype: str
        """
        return self._short_desc

    @short_desc.setter
    def short_desc(self, short_desc):
        """Sets the short_desc of this Provider.

        A short description of the addon

        :param short_desc: The short_desc of this Provider.
        :type short_desc: str
        """
        if short_desc is None:
            raise ValueError("Invalid value for `short_desc`, must not be `None`")

        self._short_desc = short_desc

    @property
    def status(self):
        """Gets the status of this Provider.

        The status of this addon (RELEASE, BETA, ...)

        :return: The status of this Provider.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Provider.

        The status of this addon (RELEASE, BETA, ...)

        :param status: The status of this Provider.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def support_email(self):
        """Gets the support_email of this Provider.

        The mail to contact in case of issue with this addon

        :return: The support_email of this Provider.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this Provider.

        The mail to contact in case of issue with this addon

        :param support_email: The support_email of this Provider.
        :type support_email: str
        """
        if support_email is None:
            raise ValueError("Invalid value for `support_email`, must not be `None`")

        self._support_email = support_email

    @property
    def twitter_name(self):
        """Gets the twitter_name of this Provider.

        The name of the user to contact on twitter for this addon (could be empty)

        :return: The twitter_name of this Provider.
        :rtype: str
        """
        return self._twitter_name

    @twitter_name.setter
    def twitter_name(self, twitter_name):
        """Sets the twitter_name of this Provider.

        The name of the user to contact on twitter for this addon (could be empty)

        :param twitter_name: The twitter_name of this Provider.
        :type twitter_name: str
        """
        if twitter_name is None:
            raise ValueError("Invalid value for `twitter_name`, must not be `None`")

        self._twitter_name = twitter_name

    @property
    def website(self):
        """Gets the website of this Provider.

        The website of the provider. If the addon is developped by clever-cloud, the site is \"http://www.clever-cloud.com/\"

        :return: The website of this Provider.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Provider.

        The website of the provider. If the addon is developped by clever-cloud, the site is \"http://www.clever-cloud.com/\"

        :param website: The website of this Provider.
        :type website: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")

        self._website = website
