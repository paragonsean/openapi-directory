# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan import Plan
from openapi_server.models.provider import Provider
from openapi_server import util


class Addon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_keys: List[str]=None, creation_date: date=None, id: str=None, name: str=None, plan: Plan=None, provider: Provider=None, real_id: str=None, region: str=None):
        """Addon - a model defined in OpenAPI

        :param config_keys: The config_keys of this Addon.
        :param creation_date: The creation_date of this Addon.
        :param id: The id of this Addon.
        :param name: The name of this Addon.
        :param plan: The plan of this Addon.
        :param provider: The provider of this Addon.
        :param real_id: The real_id of this Addon.
        :param region: The region of this Addon.
        """
        self.openapi_types = {
            'config_keys': List[str],
            'creation_date': date,
            'id': str,
            'name': str,
            'plan': Plan,
            'provider': Provider,
            'real_id': str,
            'region': str
        }

        self.attribute_map = {
            'config_keys': 'configKeys',
            'creation_date': 'creationDate',
            'id': 'id',
            'name': 'name',
            'plan': 'plan',
            'provider': 'provider',
            'real_id': 'realId',
            'region': 'region'
        }

        self._config_keys = config_keys
        self._creation_date = creation_date
        self._id = id
        self._name = name
        self._plan = plan
        self._provider = provider
        self._real_id = real_id
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Addon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Addon of this Addon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_keys(self):
        """Gets the config_keys of this Addon.

        Environments variables link to the addon.

        :return: The config_keys of this Addon.
        :rtype: List[str]
        """
        return self._config_keys

    @config_keys.setter
    def config_keys(self, config_keys):
        """Sets the config_keys of this Addon.

        Environments variables link to the addon.

        :param config_keys: The config_keys of this Addon.
        :type config_keys: List[str]
        """
        if config_keys is None:
            raise ValueError("Invalid value for `config_keys`, must not be `None`")

        self._config_keys = config_keys

    @property
    def creation_date(self):
        """Gets the creation_date of this Addon.

        The creation timestamp of the addon

        :return: The creation_date of this Addon.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Addon.

        The creation timestamp of the addon

        :param creation_date: The creation_date of this Addon.
        :type creation_date: date
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this Addon.

        `addon_${uuid}`

        :return: The id of this Addon.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Addon.

        `addon_${uuid}`

        :param id: The id of this Addon.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Addon.


        :return: The name of this Addon.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Addon.


        :param name: The name of this Addon.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this Addon.


        :return: The plan of this Addon.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Addon.


        :param plan: The plan of this Addon.
        :type plan: Plan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def provider(self):
        """Gets the provider of this Addon.


        :return: The provider of this Addon.
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Addon.


        :param provider: The provider of this Addon.
        :type provider: Provider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def real_id(self):
        """Gets the real_id of this Addon.

        `${provider}_${uuid2}`

        :return: The real_id of this Addon.
        :rtype: str
        """
        return self._real_id

    @real_id.setter
    def real_id(self, real_id):
        """Sets the real_id of this Addon.

        `${provider}_${uuid2}`

        :param real_id: The real_id of this Addon.
        :type real_id: str
        """
        if real_id is None:
            raise ValueError("Invalid value for `real_id`, must not be `None`")

        self._real_id = real_id

    @property
    def region(self):
        """Gets the region of this Addon.


        :return: The region of this Addon.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Addon.


        :param region: The region of this Addon.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region
