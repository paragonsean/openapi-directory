# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WannabeUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country: str=None, email: str=None, lang: str=None, name: str=None, password: str=None, phone: str=None, terms: bool=False, zipcode: str=None):
        """WannabeUser - a model defined in OpenAPI

        :param address: The address of this WannabeUser.
        :param city: The city of this WannabeUser.
        :param country: The country of this WannabeUser.
        :param email: The email of this WannabeUser.
        :param lang: The lang of this WannabeUser.
        :param name: The name of this WannabeUser.
        :param password: The password of this WannabeUser.
        :param phone: The phone of this WannabeUser.
        :param terms: The terms of this WannabeUser.
        :param zipcode: The zipcode of this WannabeUser.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country': str,
            'email': str,
            'lang': str,
            'name': str,
            'password': str,
            'phone': str,
            'terms': bool,
            'zipcode': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country': 'country',
            'email': 'email',
            'lang': 'lang',
            'name': 'name',
            'password': 'password',
            'phone': 'phone',
            'terms': 'terms',
            'zipcode': 'zipcode'
        }

        self._address = address
        self._city = city
        self._country = country
        self._email = email
        self._lang = lang
        self._name = name
        self._password = password
        self._phone = phone
        self._terms = terms
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeUser of this WannabeUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this WannabeUser.


        :return: The address of this WannabeUser.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WannabeUser.


        :param address: The address of this WannabeUser.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this WannabeUser.


        :return: The city of this WannabeUser.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WannabeUser.


        :param city: The city of this WannabeUser.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this WannabeUser.


        :return: The country of this WannabeUser.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WannabeUser.


        :param country: The country of this WannabeUser.
        :type country: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this WannabeUser.

        

        :return: The email of this WannabeUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this WannabeUser.

        

        :param email: The email of this WannabeUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def lang(self):
        """Gets the lang of this WannabeUser.


        :return: The lang of this WannabeUser.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this WannabeUser.


        :param lang: The lang of this WannabeUser.
        :type lang: str
        """

        self._lang = lang

    @property
    def name(self):
        """Gets the name of this WannabeUser.


        :return: The name of this WannabeUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WannabeUser.


        :param name: The name of this WannabeUser.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this WannabeUser.


        :return: The password of this WannabeUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WannabeUser.


        :param password: The password of this WannabeUser.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this WannabeUser.


        :return: The phone of this WannabeUser.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this WannabeUser.


        :param phone: The phone of this WannabeUser.
        :type phone: str
        """

        self._phone = phone

    @property
    def terms(self):
        """Gets the terms of this WannabeUser.


        :return: The terms of this WannabeUser.
        :rtype: bool
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this WannabeUser.


        :param terms: The terms of this WannabeUser.
        :type terms: bool
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")

        self._terms = terms

    @property
    def zipcode(self):
        """Gets the zipcode of this WannabeUser.


        :return: The zipcode of this WannabeUser.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this WannabeUser.


        :param zipcode: The zipcode of this WannabeUser.
        :type zipcode: str
        """

        self._zipcode = zipcode
