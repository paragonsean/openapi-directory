# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_view_author import DeploymentViewAuthor
from openapi_server import util


class DeploymentView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, author: DeploymentViewAuthor=None, cause: str=None, commit: str=None, _date: date=None, id: int=None, instances: int=None, state: str=None, uuid: str=None):
        """DeploymentView - a model defined in OpenAPI

        :param action: The action of this DeploymentView.
        :param author: The author of this DeploymentView.
        :param cause: The cause of this DeploymentView.
        :param commit: The commit of this DeploymentView.
        :param _date: The _date of this DeploymentView.
        :param id: The id of this DeploymentView.
        :param instances: The instances of this DeploymentView.
        :param state: The state of this DeploymentView.
        :param uuid: The uuid of this DeploymentView.
        """
        self.openapi_types = {
            'action': str,
            'author': DeploymentViewAuthor,
            'cause': str,
            'commit': str,
            '_date': date,
            'id': int,
            'instances': int,
            'state': str,
            'uuid': str
        }

        self.attribute_map = {
            'action': 'action',
            'author': 'author',
            'cause': 'cause',
            'commit': 'commit',
            '_date': 'date',
            'id': 'id',
            'instances': 'instances',
            'state': 'state',
            'uuid': 'uuid'
        }

        self._action = action
        self._author = author
        self._cause = cause
        self._commit = commit
        self.__date = _date
        self._id = id
        self._instances = instances
        self._state = state
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentView of this DeploymentView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DeploymentView.


        :return: The action of this DeploymentView.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DeploymentView.


        :param action: The action of this DeploymentView.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def author(self):
        """Gets the author of this DeploymentView.


        :return: The author of this DeploymentView.
        :rtype: DeploymentViewAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this DeploymentView.


        :param author: The author of this DeploymentView.
        :type author: DeploymentViewAuthor
        """

        self._author = author

    @property
    def cause(self):
        """Gets the cause of this DeploymentView.


        :return: The cause of this DeploymentView.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this DeploymentView.


        :param cause: The cause of this DeploymentView.
        :type cause: str
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")

        self._cause = cause

    @property
    def commit(self):
        """Gets the commit of this DeploymentView.


        :return: The commit of this DeploymentView.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this DeploymentView.


        :param commit: The commit of this DeploymentView.
        :type commit: str
        """
        if commit is None:
            raise ValueError("Invalid value for `commit`, must not be `None`")

        self._commit = commit

    @property
    def _date(self):
        """Gets the _date of this DeploymentView.


        :return: The _date of this DeploymentView.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DeploymentView.


        :param _date: The _date of this DeploymentView.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this DeploymentView.


        :return: The id of this DeploymentView.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentView.


        :param id: The id of this DeploymentView.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instances(self):
        """Gets the instances of this DeploymentView.


        :return: The instances of this DeploymentView.
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this DeploymentView.


        :param instances: The instances of this DeploymentView.
        :type instances: int
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")

        self._instances = instances

    @property
    def state(self):
        """Gets the state of this DeploymentView.


        :return: The state of this DeploymentView.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DeploymentView.


        :param state: The state of this DeploymentView.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def uuid(self):
        """Gets the uuid of this DeploymentView.


        :return: The uuid of this DeploymentView.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeploymentView.


        :param uuid: The uuid of this DeploymentView.
        :type uuid: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")

        self._uuid = uuid
