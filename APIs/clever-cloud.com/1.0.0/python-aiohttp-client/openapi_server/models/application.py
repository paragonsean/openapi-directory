# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment import Deployment
from openapi_server.models.flavor import Flavor
from openapi_server.models.instance import Instance
from openapi_server.models.vhost import Vhost
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=False, branch: str=None, build_flavor: Flavor=None, cancel_on_push: bool=False, commit_id: str=None, creation_date: date=None, deploy_url: str=None, deployment: Deployment=None, description: str=None, favourite: bool=False, homogeneous: bool=False, id: str=None, instance: Instance=None, last_deploy: int=None, name: str=None, owner_id: str=None, separate_build: bool=False, state: str=None, sticky_sessions: bool=False, vhosts: List[Vhost]=None, webhook_secret: str=None, webhook_url: str=None, zone: str=None):
        """Application - a model defined in OpenAPI

        :param archived: The archived of this Application.
        :param branch: The branch of this Application.
        :param build_flavor: The build_flavor of this Application.
        :param cancel_on_push: The cancel_on_push of this Application.
        :param commit_id: The commit_id of this Application.
        :param creation_date: The creation_date of this Application.
        :param deploy_url: The deploy_url of this Application.
        :param deployment: The deployment of this Application.
        :param description: The description of this Application.
        :param favourite: The favourite of this Application.
        :param homogeneous: The homogeneous of this Application.
        :param id: The id of this Application.
        :param instance: The instance of this Application.
        :param last_deploy: The last_deploy of this Application.
        :param name: The name of this Application.
        :param owner_id: The owner_id of this Application.
        :param separate_build: The separate_build of this Application.
        :param state: The state of this Application.
        :param sticky_sessions: The sticky_sessions of this Application.
        :param vhosts: The vhosts of this Application.
        :param webhook_secret: The webhook_secret of this Application.
        :param webhook_url: The webhook_url of this Application.
        :param zone: The zone of this Application.
        """
        self.openapi_types = {
            'archived': bool,
            'branch': str,
            'build_flavor': Flavor,
            'cancel_on_push': bool,
            'commit_id': str,
            'creation_date': date,
            'deploy_url': str,
            'deployment': Deployment,
            'description': str,
            'favourite': bool,
            'homogeneous': bool,
            'id': str,
            'instance': Instance,
            'last_deploy': int,
            'name': str,
            'owner_id': str,
            'separate_build': bool,
            'state': str,
            'sticky_sessions': bool,
            'vhosts': List[Vhost],
            'webhook_secret': str,
            'webhook_url': str,
            'zone': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'branch': 'branch',
            'build_flavor': 'buildFlavor',
            'cancel_on_push': 'cancelOnPush',
            'commit_id': 'commitId',
            'creation_date': 'creationDate',
            'deploy_url': 'deployUrl',
            'deployment': 'deployment',
            'description': 'description',
            'favourite': 'favourite',
            'homogeneous': 'homogeneous',
            'id': 'id',
            'instance': 'instance',
            'last_deploy': 'last_deploy',
            'name': 'name',
            'owner_id': 'ownerId',
            'separate_build': 'separateBuild',
            'state': 'state',
            'sticky_sessions': 'stickySessions',
            'vhosts': 'vhosts',
            'webhook_secret': 'webhookSecret',
            'webhook_url': 'webhookUrl',
            'zone': 'zone'
        }

        self._archived = archived
        self._branch = branch
        self._build_flavor = build_flavor
        self._cancel_on_push = cancel_on_push
        self._commit_id = commit_id
        self._creation_date = creation_date
        self._deploy_url = deploy_url
        self._deployment = deployment
        self._description = description
        self._favourite = favourite
        self._homogeneous = homogeneous
        self._id = id
        self._instance = instance
        self._last_deploy = last_deploy
        self._name = name
        self._owner_id = owner_id
        self._separate_build = separate_build
        self._state = state
        self._sticky_sessions = sticky_sessions
        self._vhosts = vhosts
        self._webhook_secret = webhook_secret
        self._webhook_url = webhook_url
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Application.


        :return: The archived of this Application.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Application.


        :param archived: The archived of this Application.
        :type archived: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def branch(self):
        """Gets the branch of this Application.


        :return: The branch of this Application.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this Application.


        :param branch: The branch of this Application.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def build_flavor(self):
        """Gets the build_flavor of this Application.


        :return: The build_flavor of this Application.
        :rtype: Flavor
        """
        return self._build_flavor

    @build_flavor.setter
    def build_flavor(self, build_flavor):
        """Sets the build_flavor of this Application.


        :param build_flavor: The build_flavor of this Application.
        :type build_flavor: Flavor
        """
        if build_flavor is None:
            raise ValueError("Invalid value for `build_flavor`, must not be `None`")

        self._build_flavor = build_flavor

    @property
    def cancel_on_push(self):
        """Gets the cancel_on_push of this Application.


        :return: The cancel_on_push of this Application.
        :rtype: bool
        """
        return self._cancel_on_push

    @cancel_on_push.setter
    def cancel_on_push(self, cancel_on_push):
        """Sets the cancel_on_push of this Application.


        :param cancel_on_push: The cancel_on_push of this Application.
        :type cancel_on_push: bool
        """
        if cancel_on_push is None:
            raise ValueError("Invalid value for `cancel_on_push`, must not be `None`")

        self._cancel_on_push = cancel_on_push

    @property
    def commit_id(self):
        """Gets the commit_id of this Application.


        :return: The commit_id of this Application.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this Application.


        :param commit_id: The commit_id of this Application.
        :type commit_id: str
        """
        if commit_id is None:
            raise ValueError("Invalid value for `commit_id`, must not be `None`")

        self._commit_id = commit_id

    @property
    def creation_date(self):
        """Gets the creation_date of this Application.


        :return: The creation_date of this Application.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Application.


        :param creation_date: The creation_date of this Application.
        :type creation_date: date
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def deploy_url(self):
        """Gets the deploy_url of this Application.


        :return: The deploy_url of this Application.
        :rtype: str
        """
        return self._deploy_url

    @deploy_url.setter
    def deploy_url(self, deploy_url):
        """Sets the deploy_url of this Application.


        :param deploy_url: The deploy_url of this Application.
        :type deploy_url: str
        """
        if deploy_url is None:
            raise ValueError("Invalid value for `deploy_url`, must not be `None`")

        self._deploy_url = deploy_url

    @property
    def deployment(self):
        """Gets the deployment of this Application.


        :return: The deployment of this Application.
        :rtype: Deployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this Application.


        :param deployment: The deployment of this Application.
        :type deployment: Deployment
        """
        if deployment is None:
            raise ValueError("Invalid value for `deployment`, must not be `None`")

        self._deployment = deployment

    @property
    def description(self):
        """Gets the description of this Application.


        :return: The description of this Application.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Application.


        :param description: The description of this Application.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def favourite(self):
        """Gets the favourite of this Application.


        :return: The favourite of this Application.
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this Application.


        :param favourite: The favourite of this Application.
        :type favourite: bool
        """
        if favourite is None:
            raise ValueError("Invalid value for `favourite`, must not be `None`")

        self._favourite = favourite

    @property
    def homogeneous(self):
        """Gets the homogeneous of this Application.


        :return: The homogeneous of this Application.
        :rtype: bool
        """
        return self._homogeneous

    @homogeneous.setter
    def homogeneous(self, homogeneous):
        """Sets the homogeneous of this Application.


        :param homogeneous: The homogeneous of this Application.
        :type homogeneous: bool
        """
        if homogeneous is None:
            raise ValueError("Invalid value for `homogeneous`, must not be `None`")

        self._homogeneous = homogeneous

    @property
    def id(self):
        """Gets the id of this Application.


        :return: The id of this Application.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.


        :param id: The id of this Application.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instance(self):
        """Gets the instance of this Application.


        :return: The instance of this Application.
        :rtype: Instance
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Application.


        :param instance: The instance of this Application.
        :type instance: Instance
        """
        if instance is None:
            raise ValueError("Invalid value for `instance`, must not be `None`")

        self._instance = instance

    @property
    def last_deploy(self):
        """Gets the last_deploy of this Application.


        :return: The last_deploy of this Application.
        :rtype: int
        """
        return self._last_deploy

    @last_deploy.setter
    def last_deploy(self, last_deploy):
        """Sets the last_deploy of this Application.


        :param last_deploy: The last_deploy of this Application.
        :type last_deploy: int
        """
        if last_deploy is None:
            raise ValueError("Invalid value for `last_deploy`, must not be `None`")

        self._last_deploy = last_deploy

    @property
    def name(self):
        """Gets the name of this Application.


        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.


        :param name: The name of this Application.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Application.


        :return: The owner_id of this Application.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Application.


        :param owner_id: The owner_id of this Application.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")

        self._owner_id = owner_id

    @property
    def separate_build(self):
        """Gets the separate_build of this Application.


        :return: The separate_build of this Application.
        :rtype: bool
        """
        return self._separate_build

    @separate_build.setter
    def separate_build(self, separate_build):
        """Sets the separate_build of this Application.


        :param separate_build: The separate_build of this Application.
        :type separate_build: bool
        """
        if separate_build is None:
            raise ValueError("Invalid value for `separate_build`, must not be `None`")

        self._separate_build = separate_build

    @property
    def state(self):
        """Gets the state of this Application.


        :return: The state of this Application.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Application.


        :param state: The state of this Application.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def sticky_sessions(self):
        """Gets the sticky_sessions of this Application.


        :return: The sticky_sessions of this Application.
        :rtype: bool
        """
        return self._sticky_sessions

    @sticky_sessions.setter
    def sticky_sessions(self, sticky_sessions):
        """Sets the sticky_sessions of this Application.


        :param sticky_sessions: The sticky_sessions of this Application.
        :type sticky_sessions: bool
        """
        if sticky_sessions is None:
            raise ValueError("Invalid value for `sticky_sessions`, must not be `None`")

        self._sticky_sessions = sticky_sessions

    @property
    def vhosts(self):
        """Gets the vhosts of this Application.


        :return: The vhosts of this Application.
        :rtype: List[Vhost]
        """
        return self._vhosts

    @vhosts.setter
    def vhosts(self, vhosts):
        """Sets the vhosts of this Application.


        :param vhosts: The vhosts of this Application.
        :type vhosts: List[Vhost]
        """
        if vhosts is None:
            raise ValueError("Invalid value for `vhosts`, must not be `None`")

        self._vhosts = vhosts

    @property
    def webhook_secret(self):
        """Gets the webhook_secret of this Application.


        :return: The webhook_secret of this Application.
        :rtype: str
        """
        return self._webhook_secret

    @webhook_secret.setter
    def webhook_secret(self, webhook_secret):
        """Sets the webhook_secret of this Application.


        :param webhook_secret: The webhook_secret of this Application.
        :type webhook_secret: str
        """
        if webhook_secret is None:
            raise ValueError("Invalid value for `webhook_secret`, must not be `None`")

        self._webhook_secret = webhook_secret

    @property
    def webhook_url(self):
        """Gets the webhook_url of this Application.


        :return: The webhook_url of this Application.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this Application.


        :param webhook_url: The webhook_url of this Application.
        :type webhook_url: str
        """
        if webhook_url is None:
            raise ValueError("Invalid value for `webhook_url`, must not be `None`")

        self._webhook_url = webhook_url

    @property
    def zone(self):
        """Gets the zone of this Application.

        `par` ou `mtl`

        :return: The zone of this Application.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Application.

        `par` ou `mtl`

        :param zone: The zone of this Application.
        :type zone: str
        """
        if zone is None:
            raise ValueError("Invalid value for `zone`, must not be `None`")

        self._zone = zone
