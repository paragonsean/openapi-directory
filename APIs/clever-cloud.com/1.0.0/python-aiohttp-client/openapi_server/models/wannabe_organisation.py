# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WannabeOrganisation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vat: str=None, address: str=None, city: str=None, company: str=None, country: str=None, description: str=None, name: str=None, zipcode: str=None):
        """WannabeOrganisation - a model defined in OpenAPI

        :param vat: The vat of this WannabeOrganisation.
        :param address: The address of this WannabeOrganisation.
        :param city: The city of this WannabeOrganisation.
        :param company: The company of this WannabeOrganisation.
        :param country: The country of this WannabeOrganisation.
        :param description: The description of this WannabeOrganisation.
        :param name: The name of this WannabeOrganisation.
        :param zipcode: The zipcode of this WannabeOrganisation.
        """
        self.openapi_types = {
            'vat': str,
            'address': str,
            'city': str,
            'company': str,
            'country': str,
            'description': str,
            'name': str,
            'zipcode': str
        }

        self.attribute_map = {
            'vat': 'VAT',
            'address': 'address',
            'city': 'city',
            'company': 'company',
            'country': 'country',
            'description': 'description',
            'name': 'name',
            'zipcode': 'zipcode'
        }

        self._vat = vat
        self._address = address
        self._city = city
        self._company = company
        self._country = country
        self._description = description
        self._name = name
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeOrganisation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeOrganisation of this WannabeOrganisation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vat(self):
        """Gets the vat of this WannabeOrganisation.


        :return: The vat of this WannabeOrganisation.
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this WannabeOrganisation.


        :param vat: The vat of this WannabeOrganisation.
        :type vat: str
        """

        self._vat = vat

    @property
    def address(self):
        """Gets the address of this WannabeOrganisation.

        The address of the organisation.

        :return: The address of this WannabeOrganisation.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WannabeOrganisation.

        The address of the organisation.

        :param address: The address of this WannabeOrganisation.
        :type address: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this WannabeOrganisation.

        The city of the organisation.

        :return: The city of this WannabeOrganisation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WannabeOrganisation.

        The city of the organisation.

        :param city: The city of this WannabeOrganisation.
        :type city: str
        """

        self._city = city

    @property
    def company(self):
        """Gets the company of this WannabeOrganisation.

        The company's name of the organisation.

        :return: The company of this WannabeOrganisation.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this WannabeOrganisation.

        The company's name of the organisation.

        :param company: The company of this WannabeOrganisation.
        :type company: str
        """

        self._company = company

    @property
    def country(self):
        """Gets the country of this WannabeOrganisation.

        The country of the organisation.

        :return: The country of this WannabeOrganisation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WannabeOrganisation.

        The country of the organisation.

        :param country: The country of this WannabeOrganisation.
        :type country: str
        """

        self._country = country

    @property
    def description(self):
        """Gets the description of this WannabeOrganisation.

        The description of the organisation.

        :return: The description of this WannabeOrganisation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WannabeOrganisation.

        The description of the organisation.

        :param description: The description of this WannabeOrganisation.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this WannabeOrganisation.

        The name of the organisation.

        :return: The name of this WannabeOrganisation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WannabeOrganisation.

        The name of the organisation.

        :param name: The name of this WannabeOrganisation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def zipcode(self):
        """Gets the zipcode of this WannabeOrganisation.

        The zipcode of the city's organisation.

        :return: The zipcode of this WannabeOrganisation.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this WannabeOrganisation.

        The zipcode of the city's organisation.

        :param zipcode: The zipcode of this WannabeOrganisation.
        :type zipcode: str
        """

        self._zipcode = zipcode
