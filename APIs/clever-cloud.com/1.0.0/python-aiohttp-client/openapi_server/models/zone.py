# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Zone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corresponding_region: str=None, internal: bool=False, name: str=None):
        """Zone - a model defined in OpenAPI

        :param corresponding_region: The corresponding_region of this Zone.
        :param internal: The internal of this Zone.
        :param name: The name of this Zone.
        """
        self.openapi_types = {
            'corresponding_region': str,
            'internal': bool,
            'name': str
        }

        self.attribute_map = {
            'corresponding_region': 'correspondingRegion',
            'internal': 'internal',
            'name': 'name'
        }

        self._corresponding_region = corresponding_region
        self._internal = internal
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Zone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Zone of this Zone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corresponding_region(self):
        """Gets the corresponding_region of this Zone.


        :return: The corresponding_region of this Zone.
        :rtype: str
        """
        return self._corresponding_region

    @corresponding_region.setter
    def corresponding_region(self, corresponding_region):
        """Sets the corresponding_region of this Zone.


        :param corresponding_region: The corresponding_region of this Zone.
        :type corresponding_region: str
        """
        if corresponding_region is None:
            raise ValueError("Invalid value for `corresponding_region`, must not be `None`")

        self._corresponding_region = corresponding_region

    @property
    def internal(self):
        """Gets the internal of this Zone.


        :return: The internal of this Zone.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this Zone.


        :param internal: The internal of this Zone.
        :type internal: bool
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")

        self._internal = internal

    @property
    def name(self):
        """Gets the name of this Zone.


        :return: The name of this Zone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Zone.


        :param name: The name of this Zone.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
