# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.summary_organisations_inner import SummaryOrganisationsInner
from openapi_server.models.summary_user import SummaryUser
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organisations: List[SummaryOrganisationsInner]=None, user: SummaryUser=None):
        """Summary - a model defined in OpenAPI

        :param organisations: The organisations of this Summary.
        :param user: The user of this Summary.
        """
        self.openapi_types = {
            'organisations': List[SummaryOrganisationsInner],
            'user': SummaryUser
        }

        self.attribute_map = {
            'organisations': 'organisations',
            'user': 'user'
        }

        self._organisations = organisations
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organisations(self):
        """Gets the organisations of this Summary.


        :return: The organisations of this Summary.
        :rtype: List[SummaryOrganisationsInner]
        """
        return self._organisations

    @organisations.setter
    def organisations(self, organisations):
        """Sets the organisations of this Summary.


        :param organisations: The organisations of this Summary.
        :type organisations: List[SummaryOrganisationsInner]
        """
        if organisations is None:
            raise ValueError("Invalid value for `organisations`, must not be `None`")

        self._organisations = organisations

    @property
    def user(self):
        """Gets the user of this Summary.


        :return: The user of this Summary.
        :rtype: SummaryUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Summary.


        :param user: The user of this Summary.
        :type user: SummaryUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
