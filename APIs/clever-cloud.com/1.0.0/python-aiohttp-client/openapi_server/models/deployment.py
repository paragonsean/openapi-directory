# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Deployment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_url: str=None, repo_state: str=None, shutdownable: bool=False, type: str=None, url: str=None):
        """Deployment - a model defined in OpenAPI

        :param http_url: The http_url of this Deployment.
        :param repo_state: The repo_state of this Deployment.
        :param shutdownable: The shutdownable of this Deployment.
        :param type: The type of this Deployment.
        :param url: The url of this Deployment.
        """
        self.openapi_types = {
            'http_url': str,
            'repo_state': str,
            'shutdownable': bool,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'http_url': 'httpUrl',
            'repo_state': 'repoState',
            'shutdownable': 'shutdownable',
            'type': 'type',
            'url': 'url'
        }

        self._http_url = http_url
        self._repo_state = repo_state
        self._shutdownable = shutdownable
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deployment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deployment of this Deployment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_url(self):
        """Gets the http_url of this Deployment.


        :return: The http_url of this Deployment.
        :rtype: str
        """
        return self._http_url

    @http_url.setter
    def http_url(self, http_url):
        """Sets the http_url of this Deployment.


        :param http_url: The http_url of this Deployment.
        :type http_url: str
        """

        self._http_url = http_url

    @property
    def repo_state(self):
        """Gets the repo_state of this Deployment.


        :return: The repo_state of this Deployment.
        :rtype: str
        """
        return self._repo_state

    @repo_state.setter
    def repo_state(self, repo_state):
        """Sets the repo_state of this Deployment.


        :param repo_state: The repo_state of this Deployment.
        :type repo_state: str
        """
        if repo_state is None:
            raise ValueError("Invalid value for `repo_state`, must not be `None`")

        self._repo_state = repo_state

    @property
    def shutdownable(self):
        """Gets the shutdownable of this Deployment.


        :return: The shutdownable of this Deployment.
        :rtype: bool
        """
        return self._shutdownable

    @shutdownable.setter
    def shutdownable(self, shutdownable):
        """Sets the shutdownable of this Deployment.


        :param shutdownable: The shutdownable of this Deployment.
        :type shutdownable: bool
        """
        if shutdownable is None:
            raise ValueError("Invalid value for `shutdownable`, must not be `None`")

        self._shutdownable = shutdownable

    @property
    def type(self):
        """Gets the type of this Deployment.


        :return: The type of this Deployment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Deployment.


        :param type: The type of this Deployment.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this Deployment.


        :return: The url of this Deployment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Deployment.


        :param url: The url of this Deployment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
