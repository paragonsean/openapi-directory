# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_data: str=None, token: str=None, type: str=None):
        """PaymentData - a model defined in OpenAPI

        :param device_data: The device_data of this PaymentData.
        :param token: The token of this PaymentData.
        :param type: The type of this PaymentData.
        """
        self.openapi_types = {
            'device_data': str,
            'token': str,
            'type': str
        }

        self.attribute_map = {
            'device_data': 'deviceData',
            'token': 'token',
            'type': 'type'
        }

        self._device_data = device_data
        self._token = token
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentData of this PaymentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_data(self):
        """Gets the device_data of this PaymentData.


        :return: The device_data of this PaymentData.
        :rtype: str
        """
        return self._device_data

    @device_data.setter
    def device_data(self, device_data):
        """Sets the device_data of this PaymentData.


        :param device_data: The device_data of this PaymentData.
        :type device_data: str
        """

        self._device_data = device_data

    @property
    def token(self):
        """Gets the token of this PaymentData.


        :return: The token of this PaymentData.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentData.


        :param token: The token of this PaymentData.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def type(self):
        """Gets the type of this PaymentData.


        :return: The type of this PaymentData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentData.


        :param type: The type of this PaymentData.
        :type type: str
        """
        allowed_values = ["NEW_CARD", "EXISTING_CARD"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
