# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, admin: bool=False, avatar: str=None, can_pay: bool=False, city: str=None, country: str=None, creation_date: int=None, email: str=None, email_validated: bool=False, has_password: bool=False, id: str=None, lang: str=None, name: str=None, oauth_apps: List[str]=None, phone: str=None, preferred_mfa: str=None, zipcode: str=None):
        """User - a model defined in OpenAPI

        :param address: The address of this User.
        :param admin: The admin of this User.
        :param avatar: The avatar of this User.
        :param can_pay: The can_pay of this User.
        :param city: The city of this User.
        :param country: The country of this User.
        :param creation_date: The creation_date of this User.
        :param email: The email of this User.
        :param email_validated: The email_validated of this User.
        :param has_password: The has_password of this User.
        :param id: The id of this User.
        :param lang: The lang of this User.
        :param name: The name of this User.
        :param oauth_apps: The oauth_apps of this User.
        :param phone: The phone of this User.
        :param preferred_mfa: The preferred_mfa of this User.
        :param zipcode: The zipcode of this User.
        """
        self.openapi_types = {
            'address': str,
            'admin': bool,
            'avatar': str,
            'can_pay': bool,
            'city': str,
            'country': str,
            'creation_date': int,
            'email': str,
            'email_validated': bool,
            'has_password': bool,
            'id': str,
            'lang': str,
            'name': str,
            'oauth_apps': List[str],
            'phone': str,
            'preferred_mfa': str,
            'zipcode': str
        }

        self.attribute_map = {
            'address': 'address',
            'admin': 'admin',
            'avatar': 'avatar',
            'can_pay': 'canPay',
            'city': 'city',
            'country': 'country',
            'creation_date': 'creationDate',
            'email': 'email',
            'email_validated': 'emailValidated',
            'has_password': 'hasPassword',
            'id': 'id',
            'lang': 'lang',
            'name': 'name',
            'oauth_apps': 'oauthApps',
            'phone': 'phone',
            'preferred_mfa': 'preferredMFA',
            'zipcode': 'zipcode'
        }

        self._address = address
        self._admin = admin
        self._avatar = avatar
        self._can_pay = can_pay
        self._city = city
        self._country = country
        self._creation_date = creation_date
        self._email = email
        self._email_validated = email_validated
        self._has_password = has_password
        self._id = id
        self._lang = lang
        self._name = name
        self._oauth_apps = oauth_apps
        self._phone = phone
        self._preferred_mfa = preferred_mfa
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this User.

        The address of the user

        :return: The address of this User.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this User.

        The address of the user

        :param address: The address of this User.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def admin(self):
        """Gets the admin of this User.

        Is the user an administrator ?

        :return: The admin of this User.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this User.

        Is the user an administrator ?

        :param admin: The admin of this User.
        :type admin: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")

        self._admin = admin

    @property
    def avatar(self):
        """Gets the avatar of this User.

        The location of the user's avatar

        :return: The avatar of this User.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this User.

        The location of the user's avatar

        :param avatar: The avatar of this User.
        :type avatar: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")

        self._avatar = avatar

    @property
    def can_pay(self):
        """Gets the can_pay of this User.

        Does the user can pay ?

        :return: The can_pay of this User.
        :rtype: bool
        """
        return self._can_pay

    @can_pay.setter
    def can_pay(self, can_pay):
        """Sets the can_pay of this User.

        Does the user can pay ?

        :param can_pay: The can_pay of this User.
        :type can_pay: bool
        """
        if can_pay is None:
            raise ValueError("Invalid value for `can_pay`, must not be `None`")

        self._can_pay = can_pay

    @property
    def city(self):
        """Gets the city of this User.

        The city of the user

        :return: The city of this User.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this User.

        The city of the user

        :param city: The city of this User.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this User.

        The country of the user

        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this User.

        The country of the user

        :param country: The country of this User.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def creation_date(self):
        """Gets the creation_date of this User.

        The creation timestamp of the user

        :return: The creation_date of this User.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this User.

        The creation timestamp of the user

        :param creation_date: The creation_date of this User.
        :type creation_date: int
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def email(self):
        """Gets the email of this User.

        The email of the user

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        The email of the user

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email_validated(self):
        """Gets the email_validated of this User.

        Does the user email is validate

        :return: The email_validated of this User.
        :rtype: bool
        """
        return self._email_validated

    @email_validated.setter
    def email_validated(self, email_validated):
        """Sets the email_validated of this User.

        Does the user email is validate

        :param email_validated: The email_validated of this User.
        :type email_validated: bool
        """
        if email_validated is None:
            raise ValueError("Invalid value for `email_validated`, must not be `None`")

        self._email_validated = email_validated

    @property
    def has_password(self):
        """Gets the has_password of this User.


        :return: The has_password of this User.
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this User.


        :param has_password: The has_password of this User.
        :type has_password: bool
        """

        self._has_password = has_password

    @property
    def id(self):
        """Gets the id of this User.

        The id of the user : `user_${uuid}`

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The id of the user : `user_${uuid}`

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lang(self):
        """Gets the lang of this User.

        The lang of the user

        :return: The lang of this User.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this User.

        The lang of the user

        :param lang: The lang of this User.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")

        self._lang = lang

    @property
    def name(self):
        """Gets the name of this User.

        The name of the user

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the user

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def oauth_apps(self):
        """Gets the oauth_apps of this User.

        The list of token oauth

        :return: The oauth_apps of this User.
        :rtype: List[str]
        """
        return self._oauth_apps

    @oauth_apps.setter
    def oauth_apps(self, oauth_apps):
        """Sets the oauth_apps of this User.

        The list of token oauth

        :param oauth_apps: The oauth_apps of this User.
        :type oauth_apps: List[str]
        """
        if oauth_apps is None:
            raise ValueError("Invalid value for `oauth_apps`, must not be `None`")

        self._oauth_apps = oauth_apps

    @property
    def phone(self):
        """Gets the phone of this User.

        The phone of the user

        :return: The phone of this User.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        The phone of the user

        :param phone: The phone of this User.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def preferred_mfa(self):
        """Gets the preferred_mfa of this User.


        :return: The preferred_mfa of this User.
        :rtype: str
        """
        return self._preferred_mfa

    @preferred_mfa.setter
    def preferred_mfa(self, preferred_mfa):
        """Sets the preferred_mfa of this User.


        :param preferred_mfa: The preferred_mfa of this User.
        :type preferred_mfa: str
        """

        self._preferred_mfa = preferred_mfa

    @property
    def zipcode(self):
        """Gets the zipcode of this User.

        The zipcode of the user

        :return: The zipcode of this User.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this User.

        The zipcode of the user

        :param zipcode: The zipcode of this User.
        :type zipcode: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")

        self._zipcode = zipcode
