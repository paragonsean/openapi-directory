# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flavor import Flavor
from openapi_server.models.variant import Variant
from openapi_server import util


class Instance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_flavor: Flavor=None, coming_soon: bool=False, default_env: object=None, default_flavor: Flavor=None, deployments: List[str]=None, description: str=None, enabled: bool=False, flavors: List[Flavor]=None, instance_and_version: str=None, max_allowed_instances: int=None, max_flavor: Flavor=None, max_instances: int=None, min_flavor: Flavor=None, min_instances: int=None, name: str=None, tags: List[str]=None, type: str=None, variant: Variant=None, version: str=None):
        """Instance - a model defined in OpenAPI

        :param build_flavor: The build_flavor of this Instance.
        :param coming_soon: The coming_soon of this Instance.
        :param default_env: The default_env of this Instance.
        :param default_flavor: The default_flavor of this Instance.
        :param deployments: The deployments of this Instance.
        :param description: The description of this Instance.
        :param enabled: The enabled of this Instance.
        :param flavors: The flavors of this Instance.
        :param instance_and_version: The instance_and_version of this Instance.
        :param max_allowed_instances: The max_allowed_instances of this Instance.
        :param max_flavor: The max_flavor of this Instance.
        :param max_instances: The max_instances of this Instance.
        :param min_flavor: The min_flavor of this Instance.
        :param min_instances: The min_instances of this Instance.
        :param name: The name of this Instance.
        :param tags: The tags of this Instance.
        :param type: The type of this Instance.
        :param variant: The variant of this Instance.
        :param version: The version of this Instance.
        """
        self.openapi_types = {
            'build_flavor': Flavor,
            'coming_soon': bool,
            'default_env': object,
            'default_flavor': Flavor,
            'deployments': List[str],
            'description': str,
            'enabled': bool,
            'flavors': List[Flavor],
            'instance_and_version': str,
            'max_allowed_instances': int,
            'max_flavor': Flavor,
            'max_instances': int,
            'min_flavor': Flavor,
            'min_instances': int,
            'name': str,
            'tags': List[str],
            'type': str,
            'variant': Variant,
            'version': str
        }

        self.attribute_map = {
            'build_flavor': 'buildFlavor',
            'coming_soon': 'comingSoon',
            'default_env': 'defaultEnv',
            'default_flavor': 'defaultFlavor',
            'deployments': 'deployments',
            'description': 'description',
            'enabled': 'enabled',
            'flavors': 'flavors',
            'instance_and_version': 'instanceAndVersion',
            'max_allowed_instances': 'maxAllowedInstances',
            'max_flavor': 'maxFlavor',
            'max_instances': 'maxInstances',
            'min_flavor': 'minFlavor',
            'min_instances': 'minInstances',
            'name': 'name',
            'tags': 'tags',
            'type': 'type',
            'variant': 'variant',
            'version': 'version'
        }

        self._build_flavor = build_flavor
        self._coming_soon = coming_soon
        self._default_env = default_env
        self._default_flavor = default_flavor
        self._deployments = deployments
        self._description = description
        self._enabled = enabled
        self._flavors = flavors
        self._instance_and_version = instance_and_version
        self._max_allowed_instances = max_allowed_instances
        self._max_flavor = max_flavor
        self._max_instances = max_instances
        self._min_flavor = min_flavor
        self._min_instances = min_instances
        self._name = name
        self._tags = tags
        self._type = type
        self._variant = variant
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instance of this Instance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_flavor(self):
        """Gets the build_flavor of this Instance.


        :return: The build_flavor of this Instance.
        :rtype: Flavor
        """
        return self._build_flavor

    @build_flavor.setter
    def build_flavor(self, build_flavor):
        """Sets the build_flavor of this Instance.


        :param build_flavor: The build_flavor of this Instance.
        :type build_flavor: Flavor
        """

        self._build_flavor = build_flavor

    @property
    def coming_soon(self):
        """Gets the coming_soon of this Instance.


        :return: The coming_soon of this Instance.
        :rtype: bool
        """
        return self._coming_soon

    @coming_soon.setter
    def coming_soon(self, coming_soon):
        """Sets the coming_soon of this Instance.


        :param coming_soon: The coming_soon of this Instance.
        :type coming_soon: bool
        """

        self._coming_soon = coming_soon

    @property
    def default_env(self):
        """Gets the default_env of this Instance.


        :return: The default_env of this Instance.
        :rtype: object
        """
        return self._default_env

    @default_env.setter
    def default_env(self, default_env):
        """Sets the default_env of this Instance.


        :param default_env: The default_env of this Instance.
        :type default_env: object
        """
        if default_env is None:
            raise ValueError("Invalid value for `default_env`, must not be `None`")

        self._default_env = default_env

    @property
    def default_flavor(self):
        """Gets the default_flavor of this Instance.


        :return: The default_flavor of this Instance.
        :rtype: Flavor
        """
        return self._default_flavor

    @default_flavor.setter
    def default_flavor(self, default_flavor):
        """Sets the default_flavor of this Instance.


        :param default_flavor: The default_flavor of this Instance.
        :type default_flavor: Flavor
        """

        self._default_flavor = default_flavor

    @property
    def deployments(self):
        """Gets the deployments of this Instance.


        :return: The deployments of this Instance.
        :rtype: List[str]
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """Sets the deployments of this Instance.


        :param deployments: The deployments of this Instance.
        :type deployments: List[str]
        """

        self._deployments = deployments

    @property
    def description(self):
        """Gets the description of this Instance.


        :return: The description of this Instance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instance.


        :param description: The description of this Instance.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this Instance.


        :return: The enabled of this Instance.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Instance.


        :param enabled: The enabled of this Instance.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def flavors(self):
        """Gets the flavors of this Instance.


        :return: The flavors of this Instance.
        :rtype: List[Flavor]
        """
        return self._flavors

    @flavors.setter
    def flavors(self, flavors):
        """Sets the flavors of this Instance.


        :param flavors: The flavors of this Instance.
        :type flavors: List[Flavor]
        """
        if flavors is None:
            raise ValueError("Invalid value for `flavors`, must not be `None`")

        self._flavors = flavors

    @property
    def instance_and_version(self):
        """Gets the instance_and_version of this Instance.


        :return: The instance_and_version of this Instance.
        :rtype: str
        """
        return self._instance_and_version

    @instance_and_version.setter
    def instance_and_version(self, instance_and_version):
        """Sets the instance_and_version of this Instance.


        :param instance_and_version: The instance_and_version of this Instance.
        :type instance_and_version: str
        """
        if instance_and_version is None:
            raise ValueError("Invalid value for `instance_and_version`, must not be `None`")

        self._instance_and_version = instance_and_version

    @property
    def max_allowed_instances(self):
        """Gets the max_allowed_instances of this Instance.


        :return: The max_allowed_instances of this Instance.
        :rtype: int
        """
        return self._max_allowed_instances

    @max_allowed_instances.setter
    def max_allowed_instances(self, max_allowed_instances):
        """Sets the max_allowed_instances of this Instance.


        :param max_allowed_instances: The max_allowed_instances of this Instance.
        :type max_allowed_instances: int
        """
        if max_allowed_instances is None:
            raise ValueError("Invalid value for `max_allowed_instances`, must not be `None`")

        self._max_allowed_instances = max_allowed_instances

    @property
    def max_flavor(self):
        """Gets the max_flavor of this Instance.


        :return: The max_flavor of this Instance.
        :rtype: Flavor
        """
        return self._max_flavor

    @max_flavor.setter
    def max_flavor(self, max_flavor):
        """Sets the max_flavor of this Instance.


        :param max_flavor: The max_flavor of this Instance.
        :type max_flavor: Flavor
        """
        if max_flavor is None:
            raise ValueError("Invalid value for `max_flavor`, must not be `None`")

        self._max_flavor = max_flavor

    @property
    def max_instances(self):
        """Gets the max_instances of this Instance.


        :return: The max_instances of this Instance.
        :rtype: int
        """
        return self._max_instances

    @max_instances.setter
    def max_instances(self, max_instances):
        """Sets the max_instances of this Instance.


        :param max_instances: The max_instances of this Instance.
        :type max_instances: int
        """
        if max_instances is None:
            raise ValueError("Invalid value for `max_instances`, must not be `None`")

        self._max_instances = max_instances

    @property
    def min_flavor(self):
        """Gets the min_flavor of this Instance.


        :return: The min_flavor of this Instance.
        :rtype: Flavor
        """
        return self._min_flavor

    @min_flavor.setter
    def min_flavor(self, min_flavor):
        """Sets the min_flavor of this Instance.


        :param min_flavor: The min_flavor of this Instance.
        :type min_flavor: Flavor
        """
        if min_flavor is None:
            raise ValueError("Invalid value for `min_flavor`, must not be `None`")

        self._min_flavor = min_flavor

    @property
    def min_instances(self):
        """Gets the min_instances of this Instance.


        :return: The min_instances of this Instance.
        :rtype: int
        """
        return self._min_instances

    @min_instances.setter
    def min_instances(self, min_instances):
        """Sets the min_instances of this Instance.


        :param min_instances: The min_instances of this Instance.
        :type min_instances: int
        """
        if min_instances is None:
            raise ValueError("Invalid value for `min_instances`, must not be `None`")

        self._min_instances = min_instances

    @property
    def name(self):
        """Gets the name of this Instance.


        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.


        :param name: The name of this Instance.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this Instance.


        :return: The tags of this Instance.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Instance.


        :param tags: The tags of this Instance.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Instance.


        :return: The type of this Instance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Instance.


        :param type: The type of this Instance.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def variant(self):
        """Gets the variant of this Instance.


        :return: The variant of this Instance.
        :rtype: Variant
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this Instance.


        :param variant: The variant of this Instance.
        :type variant: Variant
        """
        if variant is None:
            raise ValueError("Invalid value for `variant`, must not be `None`")

        self._variant = variant

    @property
    def version(self):
        """Gets the version of this Instance.


        :return: The version of this Instance.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Instance.


        :param version: The version of this Instance.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
