# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url import URL
from openapi_server.models.wannabe_consumer_rights import WannabeConsumerRights
from openapi_server import util


class WannabeConsumer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_url: URL=None, description: str=None, name: str=None, picture: str=None, rights: WannabeConsumerRights=None, url: URL=None):
        """WannabeConsumer - a model defined in OpenAPI

        :param base_url: The base_url of this WannabeConsumer.
        :param description: The description of this WannabeConsumer.
        :param name: The name of this WannabeConsumer.
        :param picture: The picture of this WannabeConsumer.
        :param rights: The rights of this WannabeConsumer.
        :param url: The url of this WannabeConsumer.
        """
        self.openapi_types = {
            'base_url': URL,
            'description': str,
            'name': str,
            'picture': str,
            'rights': WannabeConsumerRights,
            'url': URL
        }

        self.attribute_map = {
            'base_url': 'baseUrl',
            'description': 'description',
            'name': 'name',
            'picture': 'picture',
            'rights': 'rights',
            'url': 'url'
        }

        self._base_url = base_url
        self._description = description
        self._name = name
        self._picture = picture
        self._rights = rights
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WannabeConsumer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WannabeConsumer of this WannabeConsumer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_url(self):
        """Gets the base_url of this WannabeConsumer.


        :return: The base_url of this WannabeConsumer.
        :rtype: URL
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this WannabeConsumer.


        :param base_url: The base_url of this WannabeConsumer.
        :type base_url: URL
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def description(self):
        """Gets the description of this WannabeConsumer.


        :return: The description of this WannabeConsumer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WannabeConsumer.


        :param description: The description of this WannabeConsumer.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this WannabeConsumer.


        :return: The name of this WannabeConsumer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WannabeConsumer.


        :param name: The name of this WannabeConsumer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this WannabeConsumer.

        

        :return: The picture of this WannabeConsumer.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this WannabeConsumer.

        

        :param picture: The picture of this WannabeConsumer.
        :type picture: str
        """

        self._picture = picture

    @property
    def rights(self):
        """Gets the rights of this WannabeConsumer.


        :return: The rights of this WannabeConsumer.
        :rtype: WannabeConsumerRights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this WannabeConsumer.


        :param rights: The rights of this WannabeConsumer.
        :type rights: WannabeConsumerRights
        """
        if rights is None:
            raise ValueError("Invalid value for `rights`, must not be `None`")

        self._rights = rights

    @property
    def url(self):
        """Gets the url of this WannabeConsumer.


        :return: The url of this WannabeConsumer.
        :rtype: URL
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WannabeConsumer.


        :param url: The url of this WannabeConsumer.
        :type url: URL
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
