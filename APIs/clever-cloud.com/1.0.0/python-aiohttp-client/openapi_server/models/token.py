# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer import Consumer
from openapi_server.models.rights import Rights
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer: Consumer=None, creation_date: int=None, last_utilisation: str=None, rights: Rights=None, token: str=None):
        """Token - a model defined in OpenAPI

        :param consumer: The consumer of this Token.
        :param creation_date: The creation_date of this Token.
        :param last_utilisation: The last_utilisation of this Token.
        :param rights: The rights of this Token.
        :param token: The token of this Token.
        """
        self.openapi_types = {
            'consumer': Consumer,
            'creation_date': int,
            'last_utilisation': str,
            'rights': Rights,
            'token': str
        }

        self.attribute_map = {
            'consumer': 'consumer',
            'creation_date': 'creationDate',
            'last_utilisation': 'lastUtilisation',
            'rights': 'rights',
            'token': 'token'
        }

        self._consumer = consumer
        self._creation_date = creation_date
        self._last_utilisation = last_utilisation
        self._rights = rights
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer(self):
        """Gets the consumer of this Token.


        :return: The consumer of this Token.
        :rtype: Consumer
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this Token.


        :param consumer: The consumer of this Token.
        :type consumer: Consumer
        """
        if consumer is None:
            raise ValueError("Invalid value for `consumer`, must not be `None`")

        self._consumer = consumer

    @property
    def creation_date(self):
        """Gets the creation_date of this Token.


        :return: The creation_date of this Token.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Token.


        :param creation_date: The creation_date of this Token.
        :type creation_date: int
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def last_utilisation(self):
        """Gets the last_utilisation of this Token.


        :return: The last_utilisation of this Token.
        :rtype: str
        """
        return self._last_utilisation

    @last_utilisation.setter
    def last_utilisation(self, last_utilisation):
        """Sets the last_utilisation of this Token.


        :param last_utilisation: The last_utilisation of this Token.
        :type last_utilisation: str
        """
        if last_utilisation is None:
            raise ValueError("Invalid value for `last_utilisation`, must not be `None`")

        self._last_utilisation = last_utilisation

    @property
    def rights(self):
        """Gets the rights of this Token.


        :return: The rights of this Token.
        :rtype: Rights
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Token.


        :param rights: The rights of this Token.
        :type rights: Rights
        """
        if rights is None:
            raise ValueError("Invalid value for `rights`, must not be `None`")

        self._rights = rights

    @property
    def token(self):
        """Gets the token of this Token.


        :return: The token of this Token.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Token.


        :param token: The token of this Token.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
