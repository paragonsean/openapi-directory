# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Organisation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vat: str=None, address: str=None, avatar: str=None, city: str=None, company: str=None, country: str=None, description: str=None, id: str=None, name: str=None, vat_state: str=None, zipcode: str=None):
        """Organisation - a model defined in OpenAPI

        :param vat: The vat of this Organisation.
        :param address: The address of this Organisation.
        :param avatar: The avatar of this Organisation.
        :param city: The city of this Organisation.
        :param company: The company of this Organisation.
        :param country: The country of this Organisation.
        :param description: The description of this Organisation.
        :param id: The id of this Organisation.
        :param name: The name of this Organisation.
        :param vat_state: The vat_state of this Organisation.
        :param zipcode: The zipcode of this Organisation.
        """
        self.openapi_types = {
            'vat': str,
            'address': str,
            'avatar': str,
            'city': str,
            'company': str,
            'country': str,
            'description': str,
            'id': str,
            'name': str,
            'vat_state': str,
            'zipcode': str
        }

        self.attribute_map = {
            'vat': 'VAT',
            'address': 'address',
            'avatar': 'avatar',
            'city': 'city',
            'company': 'company',
            'country': 'country',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'vat_state': 'vatState',
            'zipcode': 'zipcode'
        }

        self._vat = vat
        self._address = address
        self._avatar = avatar
        self._city = city
        self._company = company
        self._country = country
        self._description = description
        self._id = id
        self._name = name
        self._vat_state = vat_state
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organisation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organisation of this Organisation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vat(self):
        """Gets the vat of this Organisation.


        :return: The vat of this Organisation.
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this Organisation.


        :param vat: The vat of this Organisation.
        :type vat: str
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")

        self._vat = vat

    @property
    def address(self):
        """Gets the address of this Organisation.


        :return: The address of this Organisation.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organisation.


        :param address: The address of this Organisation.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def avatar(self):
        """Gets the avatar of this Organisation.


        :return: The avatar of this Organisation.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Organisation.


        :param avatar: The avatar of this Organisation.
        :type avatar: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")

        self._avatar = avatar

    @property
    def city(self):
        """Gets the city of this Organisation.


        :return: The city of this Organisation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organisation.


        :param city: The city of this Organisation.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def company(self):
        """Gets the company of this Organisation.


        :return: The company of this Organisation.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Organisation.


        :param company: The company of this Organisation.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def country(self):
        """Gets the country of this Organisation.


        :return: The country of this Organisation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Organisation.


        :param country: The country of this Organisation.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def description(self):
        """Gets the description of this Organisation.


        :return: The description of this Organisation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Organisation.


        :param description: The description of this Organisation.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Organisation.


        :return: The id of this Organisation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organisation.


        :param id: The id of this Organisation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organisation.


        :return: The name of this Organisation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organisation.


        :param name: The name of this Organisation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def vat_state(self):
        """Gets the vat_state of this Organisation.


        :return: The vat_state of this Organisation.
        :rtype: str
        """
        return self._vat_state

    @vat_state.setter
    def vat_state(self, vat_state):
        """Sets the vat_state of this Organisation.


        :param vat_state: The vat_state of this Organisation.
        :type vat_state: str
        """
        if vat_state is None:
            raise ValueError("Invalid value for `vat_state`, must not be `None`")

        self._vat_state = vat_state

    @property
    def zipcode(self):
        """Gets the zipcode of this Organisation.


        :return: The zipcode of this Organisation.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this Organisation.


        :param zipcode: The zipcode of this Organisation.
        :type zipcode: str
        """
        if zipcode is None:
            raise ValueError("Invalid value for `zipcode`, must not be `None`")

        self._zipcode = zipcode
