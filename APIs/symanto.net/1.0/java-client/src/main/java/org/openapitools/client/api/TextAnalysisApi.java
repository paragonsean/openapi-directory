/*
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LanguageDetection;
import org.openapitools.client.model.LanguagePredicted;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.PostPredicted;
import org.openapitools.client.model.TopicSentimentOutput;
import org.openapitools.client.model.ValidationErrors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TextAnalysisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TextAnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TextAnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for communication
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/communication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communicationValidateBeforeCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        return communicationCall(all, post, _callback);

    }

    /**
     * Communication &amp; Tonality
     * Identify the purpose and writing style of a written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels: * action-seeking * fact-oriented * information-seeking * self-revealing
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return List&lt;PostPredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PostPredicted> communication(Boolean all, List<Post> post) throws ApiException {
        ApiResponse<List<PostPredicted>> localVarResp = communicationWithHttpInfo(all, post);
        return localVarResp.getData();
    }

    /**
     * Communication &amp; Tonality
     * Identify the purpose and writing style of a written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels: * action-seeking * fact-oriented * information-seeking * self-revealing
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;PostPredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PostPredicted>> communicationWithHttpInfo(Boolean all, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = communicationValidateBeforeCall(all, post, null);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Communication &amp; Tonality (asynchronously)
     * Identify the purpose and writing style of a written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels: * action-seeking * fact-oriented * information-seeking * self-revealing
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communicationAsync(Boolean all, List<Post> post, final ApiCallback<List<PostPredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = communicationValidateBeforeCall(all, post, _callback);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ekmanEmotion
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ekmanEmotionCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/ekman-emotion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ekmanEmotionValidateBeforeCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        return ekmanEmotionCall(all, post, _callback);

    }

    /**
     * Emotion Analysis
     * Detect the emotions of the text based on Ekman.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * disgust * fear * joy * sadness * surprise * no-emotion
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return List&lt;PostPredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PostPredicted> ekmanEmotion(Boolean all, List<Post> post) throws ApiException {
        ApiResponse<List<PostPredicted>> localVarResp = ekmanEmotionWithHttpInfo(all, post);
        return localVarResp.getData();
    }

    /**
     * Emotion Analysis
     * Detect the emotions of the text based on Ekman.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * disgust * fear * joy * sadness * surprise * no-emotion
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;PostPredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PostPredicted>> ekmanEmotionWithHttpInfo(Boolean all, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = ekmanEmotionValidateBeforeCall(all, post, null);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Emotion Analysis (asynchronously)
     * Detect the emotions of the text based on Ekman.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * disgust * fear * joy * sadness * surprise * no-emotion
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ekmanEmotionAsync(Boolean all, List<Post> post, final ApiCallback<List<PostPredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ekmanEmotionValidateBeforeCall(all, post, _callback);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for emotion
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emotionCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/emotion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emotionValidateBeforeCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        return emotionCall(all, post, _callback);

    }

    /**
     * Emotion Analysis
     * Detect the emotions of the text.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * joy * love * sadness * surprise * uncategorized
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return List&lt;PostPredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PostPredicted> emotion(Boolean all, List<Post> post) throws ApiException {
        ApiResponse<List<PostPredicted>> localVarResp = emotionWithHttpInfo(all, post);
        return localVarResp.getData();
    }

    /**
     * Emotion Analysis
     * Detect the emotions of the text.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * joy * love * sadness * surprise * uncategorized
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;PostPredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PostPredicted>> emotionWithHttpInfo(Boolean all, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = emotionValidateBeforeCall(all, post, null);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Emotion Analysis (asynchronously)
     * Detect the emotions of the text.  Supported Langauges: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * anger * joy * love * sadness * surprise * uncategorized
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call emotionAsync(Boolean all, List<Post> post, final ApiCallback<List<PostPredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = emotionValidateBeforeCall(all, post, _callback);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languageDetection
     * @param languageDetection  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languageDetectionCall(List<LanguageDetection> languageDetection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = languageDetection;

        // create path and map variables
        String localVarPath = "/language-detection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languageDetectionValidateBeforeCall(List<LanguageDetection> languageDetection, final ApiCallback _callback) throws ApiException {
        return languageDetectionCall(languageDetection, _callback);

    }

    /**
     * Language Detection
     * Identifies what language a text is written in. Only languages that our API supports can be analyzed.  Returned labels: * language_code of the detected language
     * @param languageDetection  (optional)
     * @return List&lt;LanguagePredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<LanguagePredicted> languageDetection(List<LanguageDetection> languageDetection) throws ApiException {
        ApiResponse<List<LanguagePredicted>> localVarResp = languageDetectionWithHttpInfo(languageDetection);
        return localVarResp.getData();
    }

    /**
     * Language Detection
     * Identifies what language a text is written in. Only languages that our API supports can be analyzed.  Returned labels: * language_code of the detected language
     * @param languageDetection  (optional)
     * @return ApiResponse&lt;List&lt;LanguagePredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LanguagePredicted>> languageDetectionWithHttpInfo(List<LanguageDetection> languageDetection) throws ApiException {
        okhttp3.Call localVarCall = languageDetectionValidateBeforeCall(languageDetection, null);
        Type localVarReturnType = new TypeToken<List<LanguagePredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Language Detection (asynchronously)
     * Identifies what language a text is written in. Only languages that our API supports can be analyzed.  Returned labels: * language_code of the detected language
     * @param languageDetection  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languageDetectionAsync(List<LanguageDetection> languageDetection, final ApiCallback<List<LanguagePredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = languageDetectionValidateBeforeCall(languageDetection, _callback);
        Type localVarReturnType = new TypeToken<List<LanguagePredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for personality
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call personalityCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/personality";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call personalityValidateBeforeCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        return personalityCall(all, post, _callback);

    }

    /**
     * Personality Traits
     * Predict the personality trait of author of any written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels:  * emotional * rational
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return List&lt;PostPredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PostPredicted> personality(Boolean all, List<Post> post) throws ApiException {
        ApiResponse<List<PostPredicted>> localVarResp = personalityWithHttpInfo(all, post);
        return localVarResp.getData();
    }

    /**
     * Personality Traits
     * Predict the personality trait of author of any written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels:  * emotional * rational
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;PostPredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PostPredicted>> personalityWithHttpInfo(Boolean all, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = personalityValidateBeforeCall(all, post, null);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Personality Traits (asynchronously)
     * Predict the personality trait of author of any written text.  Supported Languages: [&#x60;ar&#x60;, &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;nl&#x60;, &#x60;pt&#x60;, &#x60;ru&#x60;, &#x60;tr&#x60;, &#x60;zh&#x60;]  Returned labels:  * emotional * rational
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call personalityAsync(Boolean all, List<Post> post, final ApiCallback<List<PostPredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = personalityValidateBeforeCall(all, post, _callback);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentiment
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/sentiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentimentValidateBeforeCall(Boolean all, List<Post> post, final ApiCallback _callback) throws ApiException {
        return sentimentCall(all, post, _callback);

    }

    /**
     * Sentiment Analysis
     * Evaluate the overall tonality of the text.  Supported Languages: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * positive * negative
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return List&lt;PostPredicted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PostPredicted> sentiment(Boolean all, List<Post> post) throws ApiException {
        ApiResponse<List<PostPredicted>> localVarResp = sentimentWithHttpInfo(all, post);
        return localVarResp.getData();
    }

    /**
     * Sentiment Analysis
     * Evaluate the overall tonality of the text.  Supported Languages: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * positive * negative
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;PostPredicted&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PostPredicted>> sentimentWithHttpInfo(Boolean all, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = sentimentValidateBeforeCall(all, post, null);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sentiment Analysis (asynchronously)
     * Evaluate the overall tonality of the text.  Supported Languages: [&#x60;en&#x60;, &#x60;de&#x60;, &#x60;es&#x60;]  Returned labels: * positive * negative
     * @param all  (optional, default to false)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentAsync(Boolean all, List<Post> post, final ApiCallback<List<PostPredicted>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentimentValidateBeforeCall(all, post, _callback);
        Type localVarReturnType = new TypeToken<List<PostPredicted>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicSentiment
     * @param domain Provide analysis domain for better extraction (optional) (optional)
     * @param post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicSentimentCall(String domain, List<Post> post, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = post;

        // create path and map variables
        String localVarPath = "/topic-sentiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicSentimentValidateBeforeCall(String domain, List<Post> post, final ApiCallback _callback) throws ApiException {
        return topicSentimentCall(domain, post, _callback);

    }

    /**
     * Extracts topics and sentiments and relates them.
     * 
     * @param domain Provide analysis domain for better extraction (optional) (optional)
     * @param post  (optional)
     * @return List&lt;TopicSentimentOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TopicSentimentOutput> topicSentiment(String domain, List<Post> post) throws ApiException {
        ApiResponse<List<TopicSentimentOutput>> localVarResp = topicSentimentWithHttpInfo(domain, post);
        return localVarResp.getData();
    }

    /**
     * Extracts topics and sentiments and relates them.
     * 
     * @param domain Provide analysis domain for better extraction (optional) (optional)
     * @param post  (optional)
     * @return ApiResponse&lt;List&lt;TopicSentimentOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TopicSentimentOutput>> topicSentimentWithHttpInfo(String domain, List<Post> post) throws ApiException {
        okhttp3.Call localVarCall = topicSentimentValidateBeforeCall(domain, post, null);
        Type localVarReturnType = new TypeToken<List<TopicSentimentOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extracts topics and sentiments and relates them. (asynchronously)
     * 
     * @param domain Provide analysis domain for better extraction (optional) (optional)
     * @param post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicSentimentAsync(String domain, List<Post> post, final ApiCallback<List<TopicSentimentOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicSentimentValidateBeforeCall(domain, post, _callback);
        Type localVarReturnType = new TypeToken<List<TopicSentimentOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
