/*
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:14.714889-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sentiment {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_NEGATION_TERM = "negationTerm";
  @SerializedName(SERIALIZED_NAME_NEGATION_TERM)
  private String negationTerm;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY = "parentCategory";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY)
  private String parentCategory;

  public static final String SERIALIZED_NAME_POSITIVE = "positive";
  @SerializedName(SERIALIZED_NAME_POSITIVE)
  private Boolean positive;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Double scale;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public Sentiment() {
  }

  public Sentiment category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Sentiment end(Integer end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public Sentiment negationTerm(String negationTerm) {
    this.negationTerm = negationTerm;
    return this;
  }

  /**
   * Get negationTerm
   * @return negationTerm
   */
  @javax.annotation.Nullable
  public String getNegationTerm() {
    return negationTerm;
  }

  public void setNegationTerm(String negationTerm) {
    this.negationTerm = negationTerm;
  }


  public Sentiment parentCategory(String parentCategory) {
    this.parentCategory = parentCategory;
    return this;
  }

  /**
   * Get parentCategory
   * @return parentCategory
   */
  @javax.annotation.Nullable
  public String getParentCategory() {
    return parentCategory;
  }

  public void setParentCategory(String parentCategory) {
    this.parentCategory = parentCategory;
  }


  public Sentiment positive(Boolean positive) {
    this.positive = positive;
    return this;
  }

  /**
   * Get positive
   * @return positive
   */
  @javax.annotation.Nullable
  public Boolean getPositive() {
    return positive;
  }

  public void setPositive(Boolean positive) {
    this.positive = positive;
  }


  public Sentiment scale(Double scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Get scale
   * @return scale
   */
  @javax.annotation.Nullable
  public Double getScale() {
    return scale;
  }

  public void setScale(Double scale) {
    this.scale = scale;
  }


  public Sentiment start(Integer start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }


  public Sentiment text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sentiment sentiment = (Sentiment) o;
    return Objects.equals(this.category, sentiment.category) &&
        Objects.equals(this.end, sentiment.end) &&
        Objects.equals(this.negationTerm, sentiment.negationTerm) &&
        Objects.equals(this.parentCategory, sentiment.parentCategory) &&
        Objects.equals(this.positive, sentiment.positive) &&
        Objects.equals(this.scale, sentiment.scale) &&
        Objects.equals(this.start, sentiment.start) &&
        Objects.equals(this.text, sentiment.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, end, negationTerm, parentCategory, positive, scale, start, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sentiment {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    negationTerm: ").append(toIndentedString(negationTerm)).append("\n");
    sb.append("    parentCategory: ").append(toIndentedString(parentCategory)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("end");
    openapiFields.add("negationTerm");
    openapiFields.add("parentCategory");
    openapiFields.add("positive");
    openapiFields.add("scale");
    openapiFields.add("start");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sentiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sentiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sentiment is not found in the empty JSON string", Sentiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sentiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sentiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("negationTerm") != null && !jsonObj.get("negationTerm").isJsonNull()) && !jsonObj.get("negationTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `negationTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("negationTerm").toString()));
      }
      if ((jsonObj.get("parentCategory") != null && !jsonObj.get("parentCategory").isJsonNull()) && !jsonObj.get("parentCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentCategory").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sentiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sentiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sentiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sentiment.class));

       return (TypeAdapter<T>) new TypeAdapter<Sentiment>() {
           @Override
           public void write(JsonWriter out, Sentiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sentiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sentiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sentiment
   * @throws IOException if the JSON string is invalid with respect to Sentiment
   */
  public static Sentiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sentiment.class);
  }

  /**
   * Convert an instance of Sentiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

