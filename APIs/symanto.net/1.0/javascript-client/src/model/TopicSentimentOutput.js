/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Sentiment from './Sentiment';
import Topic from './Topic';
import TopicSentiment from './TopicSentiment';

/**
 * The TopicSentimentOutput model module.
 * @module model/TopicSentimentOutput
 * @version 1.0
 */
class TopicSentimentOutput {
    /**
     * Constructs a new <code>TopicSentimentOutput</code>.
     * @alias module:model/TopicSentimentOutput
     */
    constructor() { 
        
        TopicSentimentOutput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopicSentimentOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopicSentimentOutput} obj Optional instance to populate.
     * @return {module:model/TopicSentimentOutput} The populated <code>TopicSentimentOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopicSentimentOutput();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('sentiments')) {
                obj['sentiments'] = ApiClient.convertToType(data['sentiments'], [Sentiment]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('topicSentiments')) {
                obj['topicSentiments'] = ApiClient.convertToType(data['topicSentiments'], [TopicSentiment]);
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], [Topic]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopicSentimentOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopicSentimentOutput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        if (data['sentiments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sentiments'])) {
                throw new Error("Expected the field `sentiments` to be an array in the JSON data but got " + data['sentiments']);
            }
            // validate the optional field `sentiments` (array)
            for (const item of data['sentiments']) {
                Sentiment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['topicSentiments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topicSentiments'])) {
                throw new Error("Expected the field `topicSentiments` to be an array in the JSON data but got " + data['topicSentiments']);
            }
            // validate the optional field `topicSentiments` (array)
            for (const item of data['topicSentiments']) {
                TopicSentiment.validateJSON(item);
            };
        }
        if (data['topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topics'])) {
                throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
            }
            // validate the optional field `topics` (array)
            for (const item of data['topics']) {
                Topic.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
TopicSentimentOutput.prototype['id'] = undefined;

/**
 * @member {String} language
 */
TopicSentimentOutput.prototype['language'] = undefined;

/**
 * @member {Array.<module:model/Sentiment>} sentiments
 */
TopicSentimentOutput.prototype['sentiments'] = undefined;

/**
 * @member {String} text
 */
TopicSentimentOutput.prototype['text'] = undefined;

/**
 * @member {Array.<module:model/TopicSentiment>} topicSentiments
 */
TopicSentimentOutput.prototype['topicSentiments'] = undefined;

/**
 * @member {Array.<module:model/Topic>} topics
 */
TopicSentimentOutput.prototype['topics'] = undefined;






export default TopicSentimentOutput;

