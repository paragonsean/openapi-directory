/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LanguageDetection from '../model/LanguageDetection';
import LanguagePredicted from '../model/LanguagePredicted';
import Post from '../model/Post';
import PostPredicted from '../model/PostPredicted';
import TopicSentimentOutput from '../model/TopicSentimentOutput';
import ValidationErrors from '../model/ValidationErrors';

/**
* TextAnalysis service.
* @module api/TextAnalysisApi
* @version 1.0
*/
export default class TextAnalysisApi {

    /**
    * Constructs a new TextAnalysisApi. 
    * @alias module:api/TextAnalysisApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the communication operation.
     * @callback module:api/TextAnalysisApi~communicationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostPredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Communication & Tonality
     * Identify the purpose and writing style of a written text.  Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]  Returned labels: * action-seeking * fact-oriented * information-seeking * self-revealing
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all = false)] 
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~communicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostPredicted>}
     */
    communication(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostPredicted];
      return this.apiClient.callApi(
        '/communication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ekmanEmotion operation.
     * @callback module:api/TextAnalysisApi~ekmanEmotionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostPredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emotion Analysis
     * Detect the emotions of the text based on Ekman.  Supported Langauges: [`en`, `de`, `es`]  Returned labels: * anger * disgust * fear * joy * sadness * surprise * no-emotion
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all = false)] 
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~ekmanEmotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostPredicted>}
     */
    ekmanEmotion(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostPredicted];
      return this.apiClient.callApi(
        '/ekman-emotion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emotion operation.
     * @callback module:api/TextAnalysisApi~emotionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostPredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emotion Analysis
     * Detect the emotions of the text.  Supported Langauges: [`en`, `de`, `es`]  Returned labels: * anger * joy * love * sadness * surprise * uncategorized
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all = false)] 
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~emotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostPredicted>}
     */
    emotion(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostPredicted];
      return this.apiClient.callApi(
        '/emotion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languageDetection operation.
     * @callback module:api/TextAnalysisApi~languageDetectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LanguagePredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Language Detection
     * Identifies what language a text is written in. Only languages that our API supports can be analyzed.  Returned labels: * language_code of the detected language
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/LanguageDetection>} [languageDetection] 
     * @param {module:api/TextAnalysisApi~languageDetectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LanguagePredicted>}
     */
    languageDetection(opts, callback) {
      opts = opts || {};
      let postBody = opts['languageDetection'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [LanguagePredicted];
      return this.apiClient.callApi(
        '/language-detection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personality operation.
     * @callback module:api/TextAnalysisApi~personalityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostPredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Personality Traits
     * Predict the personality trait of author of any written text.  Supported Languages: [`ar`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pt`, `ru`, `tr`, `zh`]  Returned labels:  * emotional * rational
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all = false)] 
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~personalityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostPredicted>}
     */
    personality(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostPredicted];
      return this.apiClient.callApi(
        '/personality', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentiment operation.
     * @callback module:api/TextAnalysisApi~sentimentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostPredicted>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sentiment Analysis
     * Evaluate the overall tonality of the text.  Supported Languages: [`en`, `de`, `es`]  Returned labels: * positive * negative
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all = false)] 
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~sentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostPredicted>}
     */
    sentiment(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PostPredicted];
      return this.apiClient.callApi(
        '/sentiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicSentiment operation.
     * @callback module:api/TextAnalysisApi~topicSentimentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopicSentimentOutput>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extracts topics and sentiments and relates them.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [domain] Provide analysis domain for better extraction (optional)
     * @param {Array.<module:model/Post>} [post] 
     * @param {module:api/TextAnalysisApi~topicSentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopicSentimentOutput>}
     */
    topicSentiment(opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];

      let pathParams = {
      };
      let queryParams = {
        'domain': opts['domain']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TopicSentimentOutput];
      return this.apiClient.callApi(
        '/topic-sentiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
