# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, end: int=None, polarity: float=None, start: int=None, text: str=None, topic: str=None):
        """Topic - a model defined in OpenAPI

        :param category: The category of this Topic.
        :param end: The end of this Topic.
        :param polarity: The polarity of this Topic.
        :param start: The start of this Topic.
        :param text: The text of this Topic.
        :param topic: The topic of this Topic.
        """
        self.openapi_types = {
            'category': str,
            'end': int,
            'polarity': float,
            'start': int,
            'text': str,
            'topic': str
        }

        self.attribute_map = {
            'category': 'category',
            'end': 'end',
            'polarity': 'polarity',
            'start': 'start',
            'text': 'text',
            'topic': 'topic'
        }

        self._category = category
        self._end = end
        self._polarity = polarity
        self._start = start
        self._text = text
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Topic.


        :return: The category of this Topic.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Topic.


        :param category: The category of this Topic.
        :type category: str
        """

        self._category = category

    @property
    def end(self):
        """Gets the end of this Topic.


        :return: The end of this Topic.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Topic.


        :param end: The end of this Topic.
        :type end: int
        """

        self._end = end

    @property
    def polarity(self):
        """Gets the polarity of this Topic.


        :return: The polarity of this Topic.
        :rtype: float
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity):
        """Sets the polarity of this Topic.


        :param polarity: The polarity of this Topic.
        :type polarity: float
        """

        self._polarity = polarity

    @property
    def start(self):
        """Gets the start of this Topic.


        :return: The start of this Topic.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Topic.


        :param start: The start of this Topic.
        :type start: int
        """

        self._start = start

    @property
    def text(self):
        """Gets the text of this Topic.


        :return: The text of this Topic.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Topic.


        :param text: The text of this Topic.
        :type text: str
        """

        self._text = text

    @property
    def topic(self):
        """Gets the topic of this Topic.


        :return: The topic of this Topic.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Topic.


        :param topic: The topic of this Topic.
        :type topic: str
        """

        self._topic = topic
