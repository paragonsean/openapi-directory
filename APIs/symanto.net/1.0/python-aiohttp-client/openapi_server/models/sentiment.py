# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, end: int=None, negation_term: str=None, parent_category: str=None, positive: bool=None, scale: float=None, start: int=None, text: str=None):
        """Sentiment - a model defined in OpenAPI

        :param category: The category of this Sentiment.
        :param end: The end of this Sentiment.
        :param negation_term: The negation_term of this Sentiment.
        :param parent_category: The parent_category of this Sentiment.
        :param positive: The positive of this Sentiment.
        :param scale: The scale of this Sentiment.
        :param start: The start of this Sentiment.
        :param text: The text of this Sentiment.
        """
        self.openapi_types = {
            'category': str,
            'end': int,
            'negation_term': str,
            'parent_category': str,
            'positive': bool,
            'scale': float,
            'start': int,
            'text': str
        }

        self.attribute_map = {
            'category': 'category',
            'end': 'end',
            'negation_term': 'negationTerm',
            'parent_category': 'parentCategory',
            'positive': 'positive',
            'scale': 'scale',
            'start': 'start',
            'text': 'text'
        }

        self._category = category
        self._end = end
        self._negation_term = negation_term
        self._parent_category = parent_category
        self._positive = positive
        self._scale = scale
        self._start = start
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sentiment of this Sentiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Sentiment.


        :return: The category of this Sentiment.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Sentiment.


        :param category: The category of this Sentiment.
        :type category: str
        """

        self._category = category

    @property
    def end(self):
        """Gets the end of this Sentiment.


        :return: The end of this Sentiment.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Sentiment.


        :param end: The end of this Sentiment.
        :type end: int
        """

        self._end = end

    @property
    def negation_term(self):
        """Gets the negation_term of this Sentiment.


        :return: The negation_term of this Sentiment.
        :rtype: str
        """
        return self._negation_term

    @negation_term.setter
    def negation_term(self, negation_term):
        """Sets the negation_term of this Sentiment.


        :param negation_term: The negation_term of this Sentiment.
        :type negation_term: str
        """

        self._negation_term = negation_term

    @property
    def parent_category(self):
        """Gets the parent_category of this Sentiment.


        :return: The parent_category of this Sentiment.
        :rtype: str
        """
        return self._parent_category

    @parent_category.setter
    def parent_category(self, parent_category):
        """Sets the parent_category of this Sentiment.


        :param parent_category: The parent_category of this Sentiment.
        :type parent_category: str
        """

        self._parent_category = parent_category

    @property
    def positive(self):
        """Gets the positive of this Sentiment.


        :return: The positive of this Sentiment.
        :rtype: bool
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this Sentiment.


        :param positive: The positive of this Sentiment.
        :type positive: bool
        """

        self._positive = positive

    @property
    def scale(self):
        """Gets the scale of this Sentiment.


        :return: The scale of this Sentiment.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Sentiment.


        :param scale: The scale of this Sentiment.
        :type scale: float
        """

        self._scale = scale

    @property
    def start(self):
        """Gets the start of this Sentiment.


        :return: The start of this Sentiment.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Sentiment.


        :param start: The start of this Sentiment.
        :type start: int
        """

        self._start = start

    @property
    def text(self):
        """Gets the text of this Sentiment.


        :return: The text of this Sentiment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Sentiment.


        :param text: The text of this Sentiment.
        :type text: str
        """

        self._text = text
