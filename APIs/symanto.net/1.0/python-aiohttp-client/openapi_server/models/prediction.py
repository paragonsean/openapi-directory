# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prediction: str=None, probability: float=None):
        """Prediction - a model defined in OpenAPI

        :param prediction: The prediction of this Prediction.
        :param probability: The probability of this Prediction.
        """
        self.openapi_types = {
            'prediction': str,
            'probability': float
        }

        self.attribute_map = {
            'prediction': 'prediction',
            'probability': 'probability'
        }

        self._prediction = prediction
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction of this Prediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prediction(self):
        """Gets the prediction of this Prediction.

        the predicted label.

        :return: The prediction of this Prediction.
        :rtype: str
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this Prediction.

        the predicted label.

        :param prediction: The prediction of this Prediction.
        :type prediction: str
        """
        if prediction is None:
            raise ValueError("Invalid value for `prediction`, must not be `None`")

        self._prediction = prediction

    @property
    def probability(self):
        """Gets the probability of this Prediction.

        the probability of the predicted label.

        :return: The probability of this Prediction.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this Prediction.

        the probability of the predicted label.

        :param probability: The probability of this Prediction.
        :type probability: float
        """
        if probability is None:
            raise ValueError("Invalid value for `probability`, must not be `None`")

        self._probability = probability
