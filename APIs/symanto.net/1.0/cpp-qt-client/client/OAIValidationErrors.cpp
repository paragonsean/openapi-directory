/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationErrors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationErrors::OAIValidationErrors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationErrors::OAIValidationErrors() {
    this->initializeModel();
}

OAIValidationErrors::~OAIValidationErrors() {}

void OAIValidationErrors::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;
}

void OAIValidationErrors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationErrors::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;
}

QString OAIValidationErrors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationErrors::asJsonObject() const {
    QJsonObject obj;
    if (m_detail.size() > 0) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    return obj;
}

QList<OAIValidationError> OAIValidationErrors::getDetail() const {
    return m_detail;
}
void OAIValidationErrors::setDetail(const QList<OAIValidationError> &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIValidationErrors::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIValidationErrors::is_detail_Valid() const{
    return m_detail_isValid;
}

bool OAIValidationErrors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationErrors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
