/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrediction::OAIPrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrediction::OAIPrediction() {
    this->initializeModel();
}

OAIPrediction::~OAIPrediction() {}

void OAIPrediction::initializeModel() {

    m_prediction_isSet = false;
    m_prediction_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;
}

void OAIPrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrediction::fromJsonObject(QJsonObject json) {

    m_prediction_isValid = ::OpenAPI::fromJsonValue(m_prediction, json[QString("prediction")]);
    m_prediction_isSet = !json[QString("prediction")].isNull() && m_prediction_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;
}

QString OAIPrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_prediction_isSet) {
        obj.insert(QString("prediction"), ::OpenAPI::toJsonValue(m_prediction));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    return obj;
}

QString OAIPrediction::getPrediction() const {
    return m_prediction;
}
void OAIPrediction::setPrediction(const QString &prediction) {
    m_prediction = prediction;
    m_prediction_isSet = true;
}

bool OAIPrediction::is_prediction_Set() const{
    return m_prediction_isSet;
}

bool OAIPrediction::is_prediction_Valid() const{
    return m_prediction_isValid;
}

double OAIPrediction::getProbability() const {
    return m_probability;
}
void OAIPrediction::setProbability(const double &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIPrediction::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIPrediction::is_probability_Valid() const{
    return m_probability_isValid;
}

bool OAIPrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prediction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prediction_isValid && m_probability_isValid && true;
}

} // namespace OpenAPI
