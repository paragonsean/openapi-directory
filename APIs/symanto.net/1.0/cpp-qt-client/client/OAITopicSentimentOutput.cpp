/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicSentimentOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicSentimentOutput::OAITopicSentimentOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicSentimentOutput::OAITopicSentimentOutput() {
    this->initializeModel();
}

OAITopicSentimentOutput::~OAITopicSentimentOutput() {}

void OAITopicSentimentOutput::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_sentiments_isSet = false;
    m_sentiments_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_topic_sentiments_isSet = false;
    m_topic_sentiments_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAITopicSentimentOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicSentimentOutput::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_sentiments_isValid = ::OpenAPI::fromJsonValue(m_sentiments, json[QString("sentiments")]);
    m_sentiments_isSet = !json[QString("sentiments")].isNull() && m_sentiments_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_topic_sentiments_isValid = ::OpenAPI::fromJsonValue(m_topic_sentiments, json[QString("topicSentiments")]);
    m_topic_sentiments_isSet = !json[QString("topicSentiments")].isNull() && m_topic_sentiments_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAITopicSentimentOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicSentimentOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_sentiments.size() > 0) {
        obj.insert(QString("sentiments"), ::OpenAPI::toJsonValue(m_sentiments));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_topic_sentiments.size() > 0) {
        obj.insert(QString("topicSentiments"), ::OpenAPI::toJsonValue(m_topic_sentiments));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

QString OAITopicSentimentOutput::getId() const {
    return m_id;
}
void OAITopicSentimentOutput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITopicSentimentOutput::is_id_Set() const{
    return m_id_isSet;
}

bool OAITopicSentimentOutput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITopicSentimentOutput::getLanguage() const {
    return m_language;
}
void OAITopicSentimentOutput::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAITopicSentimentOutput::is_language_Set() const{
    return m_language_isSet;
}

bool OAITopicSentimentOutput::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAISentiment> OAITopicSentimentOutput::getSentiments() const {
    return m_sentiments;
}
void OAITopicSentimentOutput::setSentiments(const QList<OAISentiment> &sentiments) {
    m_sentiments = sentiments;
    m_sentiments_isSet = true;
}

bool OAITopicSentimentOutput::is_sentiments_Set() const{
    return m_sentiments_isSet;
}

bool OAITopicSentimentOutput::is_sentiments_Valid() const{
    return m_sentiments_isValid;
}

QString OAITopicSentimentOutput::getText() const {
    return m_text;
}
void OAITopicSentimentOutput::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITopicSentimentOutput::is_text_Set() const{
    return m_text_isSet;
}

bool OAITopicSentimentOutput::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAITopicSentiment> OAITopicSentimentOutput::getTopicSentiments() const {
    return m_topic_sentiments;
}
void OAITopicSentimentOutput::setTopicSentiments(const QList<OAITopicSentiment> &topic_sentiments) {
    m_topic_sentiments = topic_sentiments;
    m_topic_sentiments_isSet = true;
}

bool OAITopicSentimentOutput::is_topic_sentiments_Set() const{
    return m_topic_sentiments_isSet;
}

bool OAITopicSentimentOutput::is_topic_sentiments_Valid() const{
    return m_topic_sentiments_isValid;
}

QList<OAITopic> OAITopicSentimentOutput::getTopics() const {
    return m_topics;
}
void OAITopicSentimentOutput::setTopics(const QList<OAITopic> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAITopicSentimentOutput::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAITopicSentimentOutput::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAITopicSentimentOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_sentiments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicSentimentOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
