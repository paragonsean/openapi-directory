/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentiment::OAISentiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentiment::OAISentiment() {
    this->initializeModel();
}

OAISentiment::~OAISentiment() {}

void OAISentiment::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_negation_term_isSet = false;
    m_negation_term_isValid = false;

    m_parent_category_isSet = false;
    m_parent_category_isValid = false;

    m_positive_isSet = false;
    m_positive_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISentiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentiment::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_negation_term_isValid = ::OpenAPI::fromJsonValue(m_negation_term, json[QString("negationTerm")]);
    m_negation_term_isSet = !json[QString("negationTerm")].isNull() && m_negation_term_isValid;

    m_parent_category_isValid = ::OpenAPI::fromJsonValue(m_parent_category, json[QString("parentCategory")]);
    m_parent_category_isSet = !json[QString("parentCategory")].isNull() && m_parent_category_isValid;

    m_positive_isValid = ::OpenAPI::fromJsonValue(m_positive, json[QString("positive")]);
    m_positive_isSet = !json[QString("positive")].isNull() && m_positive_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAISentiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentiment::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_negation_term_isSet) {
        obj.insert(QString("negationTerm"), ::OpenAPI::toJsonValue(m_negation_term));
    }
    if (m_parent_category_isSet) {
        obj.insert(QString("parentCategory"), ::OpenAPI::toJsonValue(m_parent_category));
    }
    if (m_positive_isSet) {
        obj.insert(QString("positive"), ::OpenAPI::toJsonValue(m_positive));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAISentiment::getCategory() const {
    return m_category;
}
void OAISentiment::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISentiment::is_category_Set() const{
    return m_category_isSet;
}

bool OAISentiment::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAISentiment::getEnd() const {
    return m_end;
}
void OAISentiment::setEnd(const qint32 &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAISentiment::is_end_Set() const{
    return m_end_isSet;
}

bool OAISentiment::is_end_Valid() const{
    return m_end_isValid;
}

QString OAISentiment::getNegationTerm() const {
    return m_negation_term;
}
void OAISentiment::setNegationTerm(const QString &negation_term) {
    m_negation_term = negation_term;
    m_negation_term_isSet = true;
}

bool OAISentiment::is_negation_term_Set() const{
    return m_negation_term_isSet;
}

bool OAISentiment::is_negation_term_Valid() const{
    return m_negation_term_isValid;
}

QString OAISentiment::getParentCategory() const {
    return m_parent_category;
}
void OAISentiment::setParentCategory(const QString &parent_category) {
    m_parent_category = parent_category;
    m_parent_category_isSet = true;
}

bool OAISentiment::is_parent_category_Set() const{
    return m_parent_category_isSet;
}

bool OAISentiment::is_parent_category_Valid() const{
    return m_parent_category_isValid;
}

bool OAISentiment::isPositive() const {
    return m_positive;
}
void OAISentiment::setPositive(const bool &positive) {
    m_positive = positive;
    m_positive_isSet = true;
}

bool OAISentiment::is_positive_Set() const{
    return m_positive_isSet;
}

bool OAISentiment::is_positive_Valid() const{
    return m_positive_isValid;
}

double OAISentiment::getScale() const {
    return m_scale;
}
void OAISentiment::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAISentiment::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAISentiment::is_scale_Valid() const{
    return m_scale_isValid;
}

qint32 OAISentiment::getStart() const {
    return m_start;
}
void OAISentiment::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISentiment::is_start_Set() const{
    return m_start_isSet;
}

bool OAISentiment::is_start_Valid() const{
    return m_start_isValid;
}

QString OAISentiment::getText() const {
    return m_text;
}
void OAISentiment::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISentiment::is_text_Set() const{
    return m_text_isSet;
}

bool OAISentiment::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISentiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negation_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
