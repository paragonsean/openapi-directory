/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost::OAIPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost::OAIPost() {
    this->initializeModel();
}

OAIPost::~OAIPost() {}

void OAIPost::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPost::getId() const {
    return m_id;
}
void OAIPost::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPost::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPost::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPost::getLanguage() const {
    return m_language;
}
void OAIPost::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPost::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPost::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIPost::getText() const {
    return m_text;
}
void OAIPost::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPost::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPost::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
