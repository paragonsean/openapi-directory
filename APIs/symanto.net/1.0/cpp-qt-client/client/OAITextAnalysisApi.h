/**
 * Psycholinguistic Text Analytics
 * We aim to provide the deepest understanding of people through psychology & AI
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@symanto.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextAnalysisApi_H
#define OAI_OAITextAnalysisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILanguageDetection.h"
#include "OAILanguagePredicted.h"
#include "OAIPost.h"
#include "OAIPostPredicted.h"
#include "OAITopicSentimentOutput.h"
#include "OAIValidationErrors.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextAnalysisApi : public QObject {
    Q_OBJECT

public:
    OAITextAnalysisApi(const int timeOut = 0);
    ~OAITextAnalysisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void communication(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());

    /**
    * @param[in]  all bool [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void ekmanEmotion(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());

    /**
    * @param[in]  all bool [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void emotion(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());

    /**
    * @param[in]  oai_language_detection QList<OAILanguageDetection> [optional]
    */
    virtual void languageDetection(const ::OpenAPI::OptionalParam<QList<OAILanguageDetection>> &oai_language_detection = ::OpenAPI::OptionalParam<QList<OAILanguageDetection>>());

    /**
    * @param[in]  all bool [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void personality(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());

    /**
    * @param[in]  all bool [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void sentiment(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());

    /**
    * @param[in]  domain QString [optional]
    * @param[in]  oai_post QList<OAIPost> [optional]
    */
    virtual void topicSentiment(const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIPost>> &oai_post = ::OpenAPI::OptionalParam<QList<OAIPost>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void communicationCallback(OAIHttpRequestWorker *worker);
    void ekmanEmotionCallback(OAIHttpRequestWorker *worker);
    void emotionCallback(OAIHttpRequestWorker *worker);
    void languageDetectionCallback(OAIHttpRequestWorker *worker);
    void personalityCallback(OAIHttpRequestWorker *worker);
    void sentimentCallback(OAIHttpRequestWorker *worker);
    void topicSentimentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void communicationSignal(QList<OAIPostPredicted> summary);
    void ekmanEmotionSignal(QList<OAIPostPredicted> summary);
    void emotionSignal(QList<OAIPostPredicted> summary);
    void languageDetectionSignal(QList<OAILanguagePredicted> summary);
    void personalitySignal(QList<OAIPostPredicted> summary);
    void sentimentSignal(QList<OAIPostPredicted> summary);
    void topicSentimentSignal(QList<OAITopicSentimentOutput> summary);


    void communicationSignalFull(OAIHttpRequestWorker *worker, QList<OAIPostPredicted> summary);
    void ekmanEmotionSignalFull(OAIHttpRequestWorker *worker, QList<OAIPostPredicted> summary);
    void emotionSignalFull(OAIHttpRequestWorker *worker, QList<OAIPostPredicted> summary);
    void languageDetectionSignalFull(OAIHttpRequestWorker *worker, QList<OAILanguagePredicted> summary);
    void personalitySignalFull(OAIHttpRequestWorker *worker, QList<OAIPostPredicted> summary);
    void sentimentSignalFull(OAIHttpRequestWorker *worker, QList<OAIPostPredicted> summary);
    void topicSentimentSignalFull(OAIHttpRequestWorker *worker, QList<OAITopicSentimentOutput> summary);

    Q_DECL_DEPRECATED_X("Use communicationSignalError() instead")
    void communicationSignalE(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationSignalError(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ekmanEmotionSignalError() instead")
    void ekmanEmotionSignalE(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ekmanEmotionSignalError(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emotionSignalError() instead")
    void emotionSignalE(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emotionSignalError(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languageDetectionSignalError() instead")
    void languageDetectionSignalE(QList<OAILanguagePredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languageDetectionSignalError(QList<OAILanguagePredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personalitySignalError() instead")
    void personalitySignalE(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void personalitySignalError(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentSignalError() instead")
    void sentimentSignalE(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentSignalError(QList<OAIPostPredicted> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicSentimentSignalError() instead")
    void topicSentimentSignalE(QList<OAITopicSentimentOutput> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicSentimentSignalError(QList<OAITopicSentimentOutput> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use communicationSignalErrorFull() instead")
    void communicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void communicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ekmanEmotionSignalErrorFull() instead")
    void ekmanEmotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ekmanEmotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emotionSignalErrorFull() instead")
    void emotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languageDetectionSignalErrorFull() instead")
    void languageDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languageDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use personalitySignalErrorFull() instead")
    void personalitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void personalitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentSignalErrorFull() instead")
    void sentimentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicSentimentSignalErrorFull() instead")
    void topicSentimentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicSentimentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
