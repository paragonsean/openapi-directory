/**
 * Groundhog Day API
 * This API returns all of North Americaâ€™s prognosticating animals and their yearly weather predictions.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: hello@groundhog-day.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGroundhog.h
 *
 * An animal that makes an annual prediction on Groundhog Day.
 */

#ifndef OAIGroundhog_H
#define OAIGroundhog_H

#include <QJsonObject>

#include "OAIPrediction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrediction;

class OAIGroundhog : public OAIObject {
public:
    OAIGroundhog();
    OAIGroundhog(QString json);
    ~OAIGroundhog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActive() const;
    void setActive(const qint32 &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getContact() const;
    void setContact(const QString &contact);
    bool is_contact_Set() const;
    bool is_contact_Valid() const;

    QString getCoordinates() const;
    void setCoordinates(const QString &coordinates);
    bool is_coordinates_Set() const;
    bool is_coordinates_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getCurrentPrediction() const;
    void setCurrentPrediction(const QString &current_prediction);
    bool is_current_prediction_Set() const;
    bool is_current_prediction_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImage() const;
    void setImage(const QString &image);
    bool is_image_Set() const;
    bool is_image_Valid() const;

    qint32 getIsGroundhog() const;
    void setIsGroundhog(const qint32 &is_groundhog);
    bool is_is_groundhog_Set() const;
    bool is_is_groundhog_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPrediction> getPredictions() const;
    void setPredictions(const QList<OAIPrediction> &predictions);
    bool is_predictions_Set() const;
    bool is_predictions_Valid() const;

    qint32 getPredictionsCount() const;
    void setPredictionsCount(const qint32 &predictions_count);
    bool is_predictions_count_Set() const;
    bool is_predictions_count_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getShortname() const;
    void setShortname(const QString &shortname);
    bool is_shortname_Set() const;
    bool is_shortname_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_contact;
    bool m_contact_isSet;
    bool m_contact_isValid;

    QString m_coordinates;
    bool m_coordinates_isSet;
    bool m_coordinates_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_current_prediction;
    bool m_current_prediction_isSet;
    bool m_current_prediction_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_image;
    bool m_image_isSet;
    bool m_image_isValid;

    qint32 m_is_groundhog;
    bool m_is_groundhog_isSet;
    bool m_is_groundhog_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPrediction> m_predictions;
    bool m_predictions_isSet;
    bool m_predictions_isValid;

    qint32 m_predictions_count;
    bool m_predictions_count_isSet;
    bool m_predictions_count_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_shortname;
    bool m_shortname_isSet;
    bool m_shortname_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGroundhog)

#endif // OAIGroundhog_H
