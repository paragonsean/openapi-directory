/**
 * Groundhog Day API
 * This API returns all of North Americaâ€™s prognosticating animals and their yearly weather predictions.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: hello@groundhog-day.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoot_200_response__links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoot_200_response__links::OAIRoot_200_response__links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoot_200_response__links::OAIRoot_200_response__links() {
    this->initializeModel();
}

OAIRoot_200_response__links::~OAIRoot_200_response__links() {}

void OAIRoot_200_response__links::initializeModel() {

    m_groundhog_isSet = false;
    m_groundhog_isValid = false;

    m_groundhogs_isSet = false;
    m_groundhogs_isValid = false;

    m_predictions_isSet = false;
    m_predictions_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIRoot_200_response__links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoot_200_response__links::fromJsonObject(QJsonObject json) {

    m_groundhog_isValid = ::OpenAPI::fromJsonValue(m_groundhog, json[QString("groundhog")]);
    m_groundhog_isSet = !json[QString("groundhog")].isNull() && m_groundhog_isValid;

    m_groundhogs_isValid = ::OpenAPI::fromJsonValue(m_groundhogs, json[QString("groundhogs")]);
    m_groundhogs_isSet = !json[QString("groundhogs")].isNull() && m_groundhogs_isValid;

    m_predictions_isValid = ::OpenAPI::fromJsonValue(m_predictions, json[QString("predictions")]);
    m_predictions_isSet = !json[QString("predictions")].isNull() && m_predictions_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIRoot_200_response__links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoot_200_response__links::asJsonObject() const {
    QJsonObject obj;
    if (m_groundhog.isSet()) {
        obj.insert(QString("groundhog"), ::OpenAPI::toJsonValue(m_groundhog));
    }
    if (m_groundhogs.isSet()) {
        obj.insert(QString("groundhogs"), ::OpenAPI::toJsonValue(m_groundhogs));
    }
    if (m_predictions.isSet()) {
        obj.insert(QString("predictions"), ::OpenAPI::toJsonValue(m_predictions));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

OAIRoot_200_response__links_groundhog OAIRoot_200_response__links::getGroundhog() const {
    return m_groundhog;
}
void OAIRoot_200_response__links::setGroundhog(const OAIRoot_200_response__links_groundhog &groundhog) {
    m_groundhog = groundhog;
    m_groundhog_isSet = true;
}

bool OAIRoot_200_response__links::is_groundhog_Set() const{
    return m_groundhog_isSet;
}

bool OAIRoot_200_response__links::is_groundhog_Valid() const{
    return m_groundhog_isValid;
}

OAIRoot_200_response__links_groundhog OAIRoot_200_response__links::getGroundhogs() const {
    return m_groundhogs;
}
void OAIRoot_200_response__links::setGroundhogs(const OAIRoot_200_response__links_groundhog &groundhogs) {
    m_groundhogs = groundhogs;
    m_groundhogs_isSet = true;
}

bool OAIRoot_200_response__links::is_groundhogs_Set() const{
    return m_groundhogs_isSet;
}

bool OAIRoot_200_response__links::is_groundhogs_Valid() const{
    return m_groundhogs_isValid;
}

OAIRoot_200_response__links_groundhog OAIRoot_200_response__links::getPredictions() const {
    return m_predictions;
}
void OAIRoot_200_response__links::setPredictions(const OAIRoot_200_response__links_groundhog &predictions) {
    m_predictions = predictions;
    m_predictions_isSet = true;
}

bool OAIRoot_200_response__links::is_predictions_Set() const{
    return m_predictions_isSet;
}

bool OAIRoot_200_response__links::is_predictions_Valid() const{
    return m_predictions_isValid;
}

OAIRoot_200_response__links_groundhog OAIRoot_200_response__links::getSelf() const {
    return m_self;
}
void OAIRoot_200_response__links::setSelf(const OAIRoot_200_response__links_groundhog &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIRoot_200_response__links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIRoot_200_response__links::is_self_Valid() const{
    return m_self_isValid;
}

OAIRoot_200_response__links_groundhog OAIRoot_200_response__links::getSpec() const {
    return m_spec;
}
void OAIRoot_200_response__links::setSpec(const OAIRoot_200_response__links_groundhog &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIRoot_200_response__links::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIRoot_200_response__links::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIRoot_200_response__links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groundhog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groundhogs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoot_200_response__links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
