# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.groundhog import Groundhog
from openapi_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, groundhog: Groundhog=None, shadow: int=None, year: int=None):
        """Prediction - a model defined in OpenAPI

        :param details: The details of this Prediction.
        :param groundhog: The groundhog of this Prediction.
        :param shadow: The shadow of this Prediction.
        :param year: The year of this Prediction.
        """
        self.openapi_types = {
            'details': str,
            'groundhog': Groundhog,
            'shadow': int,
            'year': int
        }

        self.attribute_map = {
            'details': 'details',
            'groundhog': 'groundhog',
            'shadow': 'shadow',
            'year': 'year'
        }

        self._details = details
        self._groundhog = groundhog
        self._shadow = shadow
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction of this Prediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Prediction.


        :return: The details of this Prediction.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Prediction.


        :param details: The details of this Prediction.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def groundhog(self):
        """Gets the groundhog of this Prediction.


        :return: The groundhog of this Prediction.
        :rtype: Groundhog
        """
        return self._groundhog

    @groundhog.setter
    def groundhog(self, groundhog):
        """Sets the groundhog of this Prediction.


        :param groundhog: The groundhog of this Prediction.
        :type groundhog: Groundhog
        """

        self._groundhog = groundhog

    @property
    def shadow(self):
        """Gets the shadow of this Prediction.


        :return: The shadow of this Prediction.
        :rtype: int
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this Prediction.


        :param shadow: The shadow of this Prediction.
        :type shadow: int
        """
        if shadow is None:
            raise ValueError("Invalid value for `shadow`, must not be `None`")
        if shadow is not None and shadow > 1:
            raise ValueError("Invalid value for `shadow`, must be a value less than or equal to `1`")
        if shadow is not None and shadow < 0:
            raise ValueError("Invalid value for `shadow`, must be a value greater than or equal to `0`")

        self._shadow = shadow

    @property
    def year(self):
        """Gets the year of this Prediction.


        :return: The year of this Prediction.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Prediction.


        :param year: The year of this Prediction.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        if year is not None and year < 1886:
            raise ValueError("Invalid value for `year`, must be a value greater than or equal to `1886`")

        self._year = year
