# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction import Prediction
from openapi_server import util


class Groundhog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, city: str=None, contact: str=None, coordinates: str=None, country: str=None, current_prediction: str=None, description: str=None, id: int=None, image: str=None, is_groundhog: int=None, name: str=None, predictions: List[Prediction]=None, predictions_count: int=None, region: str=None, shortname: str=None, slug: str=None, source: str=None, type: str=None):
        """Groundhog - a model defined in OpenAPI

        :param active: The active of this Groundhog.
        :param city: The city of this Groundhog.
        :param contact: The contact of this Groundhog.
        :param coordinates: The coordinates of this Groundhog.
        :param country: The country of this Groundhog.
        :param current_prediction: The current_prediction of this Groundhog.
        :param description: The description of this Groundhog.
        :param id: The id of this Groundhog.
        :param image: The image of this Groundhog.
        :param is_groundhog: The is_groundhog of this Groundhog.
        :param name: The name of this Groundhog.
        :param predictions: The predictions of this Groundhog.
        :param predictions_count: The predictions_count of this Groundhog.
        :param region: The region of this Groundhog.
        :param shortname: The shortname of this Groundhog.
        :param slug: The slug of this Groundhog.
        :param source: The source of this Groundhog.
        :param type: The type of this Groundhog.
        """
        self.openapi_types = {
            'active': int,
            'city': str,
            'contact': str,
            'coordinates': str,
            'country': str,
            'current_prediction': str,
            'description': str,
            'id': int,
            'image': str,
            'is_groundhog': int,
            'name': str,
            'predictions': List[Prediction],
            'predictions_count': int,
            'region': str,
            'shortname': str,
            'slug': str,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'city': 'city',
            'contact': 'contact',
            'coordinates': 'coordinates',
            'country': 'country',
            'current_prediction': 'currentPrediction',
            'description': 'description',
            'id': 'id',
            'image': 'image',
            'is_groundhog': 'isGroundhog',
            'name': 'name',
            'predictions': 'predictions',
            'predictions_count': 'predictionsCount',
            'region': 'region',
            'shortname': 'shortname',
            'slug': 'slug',
            'source': 'source',
            'type': 'type'
        }

        self._active = active
        self._city = city
        self._contact = contact
        self._coordinates = coordinates
        self._country = country
        self._current_prediction = current_prediction
        self._description = description
        self._id = id
        self._image = image
        self._is_groundhog = is_groundhog
        self._name = name
        self._predictions = predictions
        self._predictions_count = predictions_count
        self._region = region
        self._shortname = shortname
        self._slug = slug
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Groundhog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Groundhog of this Groundhog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Groundhog.


        :return: The active of this Groundhog.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Groundhog.


        :param active: The active of this Groundhog.
        :type active: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if active not in allowed_values:
            raise ValueError(
                "Invalid value for `active` ({0}), must be one of {1}"
                .format(active, allowed_values)
            )

        self._active = active

    @property
    def city(self):
        """Gets the city of this Groundhog.


        :return: The city of this Groundhog.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Groundhog.


        :param city: The city of this Groundhog.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def contact(self):
        """Gets the contact of this Groundhog.


        :return: The contact of this Groundhog.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Groundhog.


        :param contact: The contact of this Groundhog.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def coordinates(self):
        """Gets the coordinates of this Groundhog.


        :return: The coordinates of this Groundhog.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Groundhog.


        :param coordinates: The coordinates of this Groundhog.
        :type coordinates: str
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")

        self._coordinates = coordinates

    @property
    def country(self):
        """Gets the country of this Groundhog.


        :return: The country of this Groundhog.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Groundhog.


        :param country: The country of this Groundhog.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def current_prediction(self):
        """Gets the current_prediction of this Groundhog.


        :return: The current_prediction of this Groundhog.
        :rtype: str
        """
        return self._current_prediction

    @current_prediction.setter
    def current_prediction(self, current_prediction):
        """Sets the current_prediction of this Groundhog.


        :param current_prediction: The current_prediction of this Groundhog.
        :type current_prediction: str
        """
        if current_prediction is None:
            raise ValueError("Invalid value for `current_prediction`, must not be `None`")

        self._current_prediction = current_prediction

    @property
    def description(self):
        """Gets the description of this Groundhog.


        :return: The description of this Groundhog.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Groundhog.


        :param description: The description of this Groundhog.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Groundhog.


        :return: The id of this Groundhog.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Groundhog.


        :param id: The id of this Groundhog.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this Groundhog.


        :return: The image of this Groundhog.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Groundhog.


        :param image: The image of this Groundhog.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def is_groundhog(self):
        """Gets the is_groundhog of this Groundhog.


        :return: The is_groundhog of this Groundhog.
        :rtype: int
        """
        return self._is_groundhog

    @is_groundhog.setter
    def is_groundhog(self, is_groundhog):
        """Sets the is_groundhog of this Groundhog.


        :param is_groundhog: The is_groundhog of this Groundhog.
        :type is_groundhog: int
        """
        if is_groundhog is None:
            raise ValueError("Invalid value for `is_groundhog`, must not be `None`")
        if is_groundhog is not None and is_groundhog > 1:
            raise ValueError("Invalid value for `is_groundhog`, must be a value less than or equal to `1`")
        if is_groundhog is not None and is_groundhog < 0:
            raise ValueError("Invalid value for `is_groundhog`, must be a value greater than or equal to `0`")

        self._is_groundhog = is_groundhog

    @property
    def name(self):
        """Gets the name of this Groundhog.


        :return: The name of this Groundhog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Groundhog.


        :param name: The name of this Groundhog.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def predictions(self):
        """Gets the predictions of this Groundhog.


        :return: The predictions of this Groundhog.
        :rtype: List[Prediction]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this Groundhog.


        :param predictions: The predictions of this Groundhog.
        :type predictions: List[Prediction]
        """

        self._predictions = predictions

    @property
    def predictions_count(self):
        """Gets the predictions_count of this Groundhog.

        All predictions, excluding nulls.

        :return: The predictions_count of this Groundhog.
        :rtype: int
        """
        return self._predictions_count

    @predictions_count.setter
    def predictions_count(self, predictions_count):
        """Sets the predictions_count of this Groundhog.

        All predictions, excluding nulls.

        :param predictions_count: The predictions_count of this Groundhog.
        :type predictions_count: int
        """
        if predictions_count is not None and predictions_count < 1:
            raise ValueError("Invalid value for `predictions_count`, must be a value greater than or equal to `1`")

        self._predictions_count = predictions_count

    @property
    def region(self):
        """Gets the region of this Groundhog.


        :return: The region of this Groundhog.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Groundhog.


        :param region: The region of this Groundhog.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def shortname(self):
        """Gets the shortname of this Groundhog.


        :return: The shortname of this Groundhog.
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this Groundhog.


        :param shortname: The shortname of this Groundhog.
        :type shortname: str
        """
        if shortname is None:
            raise ValueError("Invalid value for `shortname`, must not be `None`")

        self._shortname = shortname

    @property
    def slug(self):
        """Gets the slug of this Groundhog.


        :return: The slug of this Groundhog.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Groundhog.


        :param slug: The slug of this Groundhog.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def source(self):
        """Gets the source of this Groundhog.


        :return: The source of this Groundhog.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Groundhog.


        :param source: The source of this Groundhog.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def type(self):
        """Gets the type of this Groundhog.


        :return: The type of this Groundhog.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Groundhog.


        :param type: The type of this Groundhog.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
