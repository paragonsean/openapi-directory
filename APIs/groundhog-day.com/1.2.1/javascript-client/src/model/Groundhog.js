/**
 * Groundhog Day API
 * This API returns all of North Americaâ€™s prognosticating animals and their yearly weather predictions.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: hello@groundhog-day.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Prediction from './Prediction';

/**
 * The Groundhog model module.
 * @module model/Groundhog
 * @version 1.2.1
 */
class Groundhog {
    /**
     * Constructs a new <code>Groundhog</code>.
     * An animal that makes an annual prediction on Groundhog Day.
     * @alias module:model/Groundhog
     * @param active {module:model/Groundhog.ActiveEnum} 
     * @param city {String} 
     * @param contact {String} 
     * @param coordinates {String} 
     * @param country {String} 
     * @param currentPrediction {String} 
     * @param description {String} 
     * @param id {Number} 
     * @param image {String} 
     * @param isGroundhog {Number} 
     * @param name {String} 
     * @param region {String} 
     * @param shortname {String} 
     * @param slug {String} 
     * @param source {String} 
     * @param type {String} 
     */
    constructor(active, city, contact, coordinates, country, currentPrediction, description, id, image, isGroundhog, name, region, shortname, slug, source, type) { 
        
        Groundhog.initialize(this, active, city, contact, coordinates, country, currentPrediction, description, id, image, isGroundhog, name, region, shortname, slug, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, city, contact, coordinates, country, currentPrediction, description, id, image, isGroundhog, name, region, shortname, slug, source, type) { 
        obj['active'] = active;
        obj['city'] = city;
        obj['contact'] = contact;
        obj['coordinates'] = coordinates;
        obj['country'] = country;
        obj['currentPrediction'] = currentPrediction;
        obj['description'] = description;
        obj['id'] = id;
        obj['image'] = image;
        obj['isGroundhog'] = isGroundhog;
        obj['name'] = name;
        obj['region'] = region;
        obj['shortname'] = shortname;
        obj['slug'] = slug;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Groundhog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Groundhog} obj Optional instance to populate.
     * @return {module:model/Groundhog} The populated <code>Groundhog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Groundhog();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = ApiClient.convertToType(data['coordinates'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('currentPrediction')) {
                obj['currentPrediction'] = ApiClient.convertToType(data['currentPrediction'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('isGroundhog')) {
                obj['isGroundhog'] = ApiClient.convertToType(data['isGroundhog'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('predictions')) {
                obj['predictions'] = ApiClient.convertToType(data['predictions'], [Prediction]);
            }
            if (data.hasOwnProperty('predictionsCount')) {
                obj['predictionsCount'] = ApiClient.convertToType(data['predictionsCount'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('shortname')) {
                obj['shortname'] = ApiClient.convertToType(data['shortname'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Groundhog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Groundhog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Groundhog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['coordinates'] && !(typeof data['coordinates'] === 'string' || data['coordinates'] instanceof String)) {
            throw new Error("Expected the field `coordinates` to be a primitive type in the JSON string but got " + data['coordinates']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['currentPrediction'] && !(typeof data['currentPrediction'] === 'string' || data['currentPrediction'] instanceof String)) {
            throw new Error("Expected the field `currentPrediction` to be a primitive type in the JSON string but got " + data['currentPrediction']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['predictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['predictions'])) {
                throw new Error("Expected the field `predictions` to be an array in the JSON data but got " + data['predictions']);
            }
            // validate the optional field `predictions` (array)
            for (const item of data['predictions']) {
                Prediction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['shortname'] && !(typeof data['shortname'] === 'string' || data['shortname'] instanceof String)) {
            throw new Error("Expected the field `shortname` to be a primitive type in the JSON string but got " + data['shortname']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Groundhog.RequiredProperties = ["active", "city", "contact", "coordinates", "country", "currentPrediction", "description", "id", "image", "isGroundhog", "name", "region", "shortname", "slug", "source", "type"];

/**
 * @member {module:model/Groundhog.ActiveEnum} active
 */
Groundhog.prototype['active'] = undefined;

/**
 * @member {String} city
 */
Groundhog.prototype['city'] = undefined;

/**
 * @member {String} contact
 */
Groundhog.prototype['contact'] = undefined;

/**
 * @member {String} coordinates
 */
Groundhog.prototype['coordinates'] = undefined;

/**
 * @member {String} country
 */
Groundhog.prototype['country'] = undefined;

/**
 * @member {String} currentPrediction
 */
Groundhog.prototype['currentPrediction'] = undefined;

/**
 * @member {String} description
 */
Groundhog.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
Groundhog.prototype['id'] = undefined;

/**
 * @member {String} image
 */
Groundhog.prototype['image'] = undefined;

/**
 * @member {Number} isGroundhog
 */
Groundhog.prototype['isGroundhog'] = undefined;

/**
 * @member {String} name
 */
Groundhog.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Prediction>} predictions
 */
Groundhog.prototype['predictions'] = undefined;

/**
 * All predictions, excluding nulls.
 * @member {Number} predictionsCount
 */
Groundhog.prototype['predictionsCount'] = undefined;

/**
 * @member {String} region
 */
Groundhog.prototype['region'] = undefined;

/**
 * @member {String} shortname
 */
Groundhog.prototype['shortname'] = undefined;

/**
 * @member {String} slug
 */
Groundhog.prototype['slug'] = undefined;

/**
 * @member {String} source
 */
Groundhog.prototype['source'] = undefined;

/**
 * @member {String} type
 */
Groundhog.prototype['type'] = undefined;





/**
 * Allowed values for the <code>active</code> property.
 * @enum {Number}
 * @readonly
 */
Groundhog['ActiveEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default Groundhog;

