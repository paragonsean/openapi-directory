/**
 * Groundhog Day API
 * This API returns all of North Americaâ€™s prognosticating animals and their yearly weather predictions.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: hello@groundhog-day.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Root200ResponseLinks from './Root200ResponseLinks';

/**
 * The Root200Response model module.
 * @module model/Root200Response
 * @version 1.2.1
 */
class Root200Response {
    /**
     * Constructs a new <code>Root200Response</code>.
     * @alias module:model/Root200Response
     * @param message {String} 
     */
    constructor(message) { 
        
        Root200Response.initialize(this, message);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message) { 
        obj['message'] = message;
    }

    /**
     * Constructs a <code>Root200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Root200Response} obj Optional instance to populate.
     * @return {module:model/Root200Response} The populated <code>Root200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Root200Response();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = Root200ResponseLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Root200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Root200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Root200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          Root200ResponseLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}

Root200Response.RequiredProperties = ["message"];

/**
 * @member {module:model/Root200ResponseLinks} _links
 */
Root200Response.prototype['_links'] = undefined;

/**
 * @member {String} message
 */
Root200Response.prototype['message'] = undefined;






export default Root200Response;

