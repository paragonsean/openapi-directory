/**
 * Groundhog Day API
 * This API returns all of North Americaâ€™s prognosticating animals and their yearly weather predictions.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: hello@groundhog-day.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Groundhog from './Groundhog';

/**
 * The Prediction model module.
 * @module model/Prediction
 * @version 1.2.1
 */
class Prediction {
    /**
     * Constructs a new <code>Prediction</code>.
     * An annual prediction of an early spring or a longer winter.
     * @alias module:model/Prediction
     * @param details {String} 
     * @param shadow {Number} 
     * @param year {Number} 
     */
    constructor(details, shadow, year) { 
        
        Prediction.initialize(this, details, shadow, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, details, shadow, year) { 
        obj['details'] = details;
        obj['shadow'] = shadow;
        obj['year'] = year;
    }

    /**
     * Constructs a <code>Prediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Prediction} obj Optional instance to populate.
     * @return {module:model/Prediction} The populated <code>Prediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Prediction();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('groundhog')) {
                obj['groundhog'] = Groundhog.constructFromObject(data['groundhog']);
            }
            if (data.hasOwnProperty('shadow')) {
                obj['shadow'] = ApiClient.convertToType(data['shadow'], 'Number');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Prediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Prediction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Prediction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // validate the optional field `groundhog`
        if (data['groundhog']) { // data not null
          Groundhog.validateJSON(data['groundhog']);
        }

        return true;
    }


}

Prediction.RequiredProperties = ["details", "shadow", "year"];

/**
 * @member {String} details
 */
Prediction.prototype['details'] = undefined;

/**
 * @member {module:model/Groundhog} groundhog
 */
Prediction.prototype['groundhog'] = undefined;

/**
 * @member {Number} shadow
 */
Prediction.prototype['shadow'] = undefined;

/**
 * @member {Number} year
 */
Prediction.prototype['year'] = undefined;






export default Prediction;

