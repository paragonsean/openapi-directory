/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IoEIoTApiToCreateEndUserApplications);
  }
}(this, function(expect, IoEIoTApiToCreateEndUserApplications) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IoEIoTApiToCreateEndUserApplications.FunctionalityApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FunctionalityApi', function() {
    describe('deviceAddFunctionality_0', function() {
      it('should call deviceAddFunctionality_0 successfully', function(done) {
        //uncomment below and update the code to test deviceAddFunctionality_0
        //instance.deviceAddFunctionality_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalitiesGet', function() {
      it('should call functionalitiesGet successfully', function(done) {
        //uncomment below and update the code to test functionalitiesGet
        //instance.functionalitiesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityGetMetadata', function() {
      it('should call functionalityGetMetadata successfully', function(done) {
        //uncomment below and update the code to test functionalityGetMetadata
        //instance.functionalityGetMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityGetTags', function() {
      it('should call functionalityGetTags successfully', function(done) {
        //uncomment below and update the code to test functionalityGetTags
        //instance.functionalityGetTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityPatch', function() {
      it('should call functionalityPatch successfully', function(done) {
        //uncomment below and update the code to test functionalityPatch
        //instance.functionalityPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityPatchMetadata', function() {
      it('should call functionalityPatchMetadata successfully', function(done) {
        //uncomment below and update the code to test functionalityPatchMetadata
        //instance.functionalityPatchMetadata(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityPatchTags', function() {
      it('should call functionalityPatchTags successfully', function(done) {
        //uncomment below and update the code to test functionalityPatchTags
        //instance.functionalityPatchTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalitySet', function() {
      it('should call functionalitySet successfully', function(done) {
        //uncomment below and update the code to test functionalitySet
        //instance.functionalitySet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityValue', function() {
      it('should call functionalityValue successfully', function(done) {
        //uncomment below and update the code to test functionalityValue
        //instance.functionalityValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('functionalityValues', function() {
      it('should call functionalityValues successfully', function(done) {
        //uncomment below and update the code to test functionalityValues
        //instance.functionalityValues(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('placeFunctionalities', function() {
      it('should call placeFunctionalities successfully', function(done) {
        //uncomment below and update the code to test placeFunctionalities
        //instance.placeFunctionalities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
