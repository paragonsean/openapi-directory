/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusItem from '../model/BusItem';
import BusPairing from '../model/BusPairing';
import DefaultError from '../model/DefaultError';
import ErrorEntity from '../model/ErrorEntity';
import ErrorSubEntity from '../model/ErrorSubEntity';
import MetadataPatch from '../model/MetadataPatch';
import Place from '../model/Place';
import PlacePatch from '../model/PlacePatch';

/**
* Place service.
* @module api/PlaceApi
* @version 3.0.0
*/
export default class PlaceApi {

    /**
    * Constructs a new PlaceApi. 
    * @alias module:api/PlaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the placeBuses operation.
     * @callback module:api/PlaceApi~placeBusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Buses
     * Get the list of *Buses* available on the gateway of this *Place*. If `withPairing` is `true`, return only buses that allow device pairing (see `/places/{placeId}/buses/{busId}/pairing`).
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withPairing = false)] Filter out buses that have no pairing window
     * @param {module:api/PlaceApi~placeBusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusItem>}
     */
    placeBuses(placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeBuses");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'withPairing': opts['withPairing']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BusItem];
      return this.apiClient.callApi(
        '/places/{placeId}/buses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeGetMetadata operation.
     * @callback module:api/PlaceApi~placeGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:api/PlaceApi~placeGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    placeGetMetadata(placeId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeGetMetadata");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/places/{placeId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeOpenPairing operation.
     * @callback module:api/PlaceApi~placeOpenPairingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusPairing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open/Close the pairing window
     * Open/Close the pairing window.  **Note**: requires full access to the *Account*. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {String} busId Unique identifier of a *Bus*.
     * @param {module:model/BusPairing} pairing 
     * @param {module:api/PlaceApi~placeOpenPairingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusPairing}
     */
    placeOpenPairing(placeId, busId, pairing, callback) {
      let postBody = pairing;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeOpenPairing");
      }
      // verify the required parameter 'busId' is set
      if (busId === undefined || busId === null) {
        throw new Error("Missing the required parameter 'busId' when calling placeOpenPairing");
      }
      // verify the required parameter 'pairing' is set
      if (pairing === undefined || pairing === null) {
        throw new Error("Missing the required parameter 'pairing' when calling placeOpenPairing");
      }

      let pathParams = {
        'placeId': placeId,
        'busId': busId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BusPairing;
      return this.apiClient.callApi(
        '/places/{placeId}/buses/{busId}/pairing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placePairing operation.
     * @callback module:api/PlaceApi~placePairingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusPairing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * State of the pairing window
     * Get the state of the pairing window of the *Bus*.  **Note**: requires full access to the *Account*. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {String} busId Unique identifier of a *Bus*.
     * @param {module:api/PlaceApi~placePairingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusPairing}
     */
    placePairing(placeId, busId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placePairing");
      }
      // verify the required parameter 'busId' is set
      if (busId === undefined || busId === null) {
        throw new Error("Missing the required parameter 'busId' when calling placePairing");
      }

      let pathParams = {
        'placeId': placeId,
        'busId': busId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BusPairing;
      return this.apiClient.callApi(
        '/places/{placeId}/buses/{busId}/pairing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placePatch operation.
     * @callback module:api/PlaceApi~placePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Place
     * Change information about a *Place*.  **Note**: requires full access to the *Account*. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:model/PlacePatch} placePatch 
     * @param {module:api/PlaceApi~placePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    placePatch(placeId, placePatch, callback) {
      let postBody = placePatch;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placePatch");
      }
      // verify the required parameter 'placePatch' is set
      if (placePatch === undefined || placePatch === null) {
        throw new Error("Missing the required parameter 'placePatch' when calling placePatch");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/places/{placeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placePatchMetadata operation.
     * @callback module:api/PlaceApi~placePatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/PlaceApi~placePatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    placePatchMetadata(placeId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placePatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling placePatchMetadata");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/places/{placeId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placesGet operation.
     * @callback module:api/PlaceApi~placesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Place} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a Place
     * Get information about a *Place*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:api/PlaceApi~placesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Place}
     */
    placesGet(placeId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placesGet");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Place;
      return this.apiClient.callApi(
        '/places/{placeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
