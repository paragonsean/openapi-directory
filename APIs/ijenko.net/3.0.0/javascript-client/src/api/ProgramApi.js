/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import ErrorEntity from '../model/ErrorEntity';
import MetadataPatch from '../model/MetadataPatch';
import Program from '../model/Program';
import ProgramCreated from '../model/ProgramCreated';
import ProgramItem from '../model/ProgramItem';
import ProgramLog from '../model/ProgramLog';
import ProgramNew from '../model/ProgramNew';
import ProgramPatch from '../model/ProgramPatch';

/**
* Program service.
* @module api/ProgramApi
* @version 3.0.0
*/
export default class ProgramApi {

    /**
    * Constructs a new ProgramApi. 
    * @alias module:api/ProgramApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the placeNewProgram operation.
     * @callback module:api/ProgramApi~placeNewProgramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProgramCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Program
     * Create a new *Program*.  **Note**: requires full access to the *Account*. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:model/ProgramNew} programInfo 
     * @param {module:api/ProgramApi~placeNewProgramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProgramCreated}
     */
    placeNewProgram(placeId, programInfo, callback) {
      let postBody = programInfo;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeNewProgram");
      }
      // verify the required parameter 'programInfo' is set
      if (programInfo === undefined || programInfo === null) {
        throw new Error("Missing the required parameter 'programInfo' when calling placeNewProgram");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProgramCreated;
      return this.apiClient.callApi(
        '/places/{placeId}/programs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placePrograms operation.
     * @callback module:api/ProgramApi~placeProgramsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProgramItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Programs
     * Get the list of *Programs* available in this *Place*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/ProgramApi~placeProgramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProgramItem>}
     */
    placePrograms(placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placePrograms");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProgramItem];
      return this.apiClient.callApi(
        '/places/{placeId}/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programDelete operation.
     * @callback module:api/ProgramApi~programDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Program
     * Delete a *Program*.  **Note**: requires full access to the *Account*. 
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:api/ProgramApi~programDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    programDelete(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programDelete");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/programs/{programId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programGetMetadata operation.
     * @callback module:api/ProgramApi~programGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata of the *Program*.
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:api/ProgramApi~programGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    programGetMetadata(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programGetMetadata");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/programs/{programId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programLog operation.
     * @callback module:api/ProgramApi~programLogCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProgramLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History of executions of a Program
     * Get the execution history list of this *Program*.
     * @param {String} programId Unique identifier of a *Program*.
     * @param {Date} from Beginning of the time interval.
     * @param {Object} opts Optional parameters
     * @param {Date} [to] End of the interval. Default: now. 
     * @param {module:api/ProgramApi~programLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProgramLog>}
     */
    programLog(programId, from, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programLog");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling programLog");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
        'from': from,
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProgramLog];
      return this.apiClient.callApi(
        '/programs/{programId}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programPatch operation.
     * @callback module:api/ProgramApi~programPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a Program
     * Modify a *Program*: - name - status (enabled/disabled) - code  **Note**: requires full access to the *Account*. 
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:model/ProgramPatch} programPatch 
     * @param {module:api/ProgramApi~programPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    programPatch(programId, programPatch, callback) {
      let postBody = programPatch;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programPatch");
      }
      // verify the required parameter 'programPatch' is set
      if (programPatch === undefined || programPatch === null) {
        throw new Error("Missing the required parameter 'programPatch' when calling programPatch");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/programs/{programId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programPatchMetadata operation.
     * @callback module:api/ProgramApi~programPatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata of a Program
     * Modify the metadata of a *Program*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/ProgramApi~programPatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    programPatchMetadata(programId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programPatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling programPatchMetadata");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/programs/{programId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programRun operation.
     * @callback module:api/ProgramApi~programRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run the Program
     * Launch the *Program*. The result will be available later in the run history.
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:api/ProgramApi~programRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    programRun(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programRun");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/programs/{programId}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the programsGet operation.
     * @callback module:api/ProgramApi~programsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Program} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a Program
     * Get information about a *Program*. 
     * @param {String} programId Unique identifier of a *Program*.
     * @param {module:api/ProgramApi~programsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Program}
     */
    programsGet(programId, callback) {
      let postBody = null;
      // verify the required parameter 'programId' is set
      if (programId === undefined || programId === null) {
        throw new Error("Missing the required parameter 'programId' when calling programsGet");
      }

      let pathParams = {
        'programId': programId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Program;
      return this.apiClient.callApi(
        '/programs/{programId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
