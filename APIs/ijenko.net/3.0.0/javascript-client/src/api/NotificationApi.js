/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import ErrorEntity from '../model/ErrorEntity';
import MetadataPatch from '../model/MetadataPatch';
import Notification from '../model/Notification';
import NotificationCreated from '../model/NotificationCreated';
import NotificationItem from '../model/NotificationItem';
import NotificationNew from '../model/NotificationNew';
import NotificationPatch from '../model/NotificationPatch';

/**
* Notification service.
* @module api/NotificationApi
* @version 3.0.0
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationDelete operation.
     * @callback module:api/NotificationApi~notificationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification
     * Delete a *Notification*. 
     * @param {String} notificationId Unique identifier of a *Notification*.
     * @param {module:api/NotificationApi~notificationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationDelete(notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationDelete");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{notificationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationGetMetadata operation.
     * @callback module:api/NotificationApi~notificationGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata of the *Notification*.
     * @param {String} notificationId Unique identifier of a *Notification*.
     * @param {module:api/NotificationApi~notificationGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    notificationGetMetadata(notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationGetMetadata");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/notifications/{notificationId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationPatch operation.
     * @callback module:api/NotificationApi~notificationPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a Notification
     * Modify a *Notification*. 
     * @param {String} notificationId Unique identifier of a *Notification*.
     * @param {module:model/NotificationPatch} notificationPatch 
     * @param {module:api/NotificationApi~notificationPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationPatch(notificationId, notificationPatch, callback) {
      let postBody = notificationPatch;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationPatch");
      }
      // verify the required parameter 'notificationPatch' is set
      if (notificationPatch === undefined || notificationPatch === null) {
        throw new Error("Missing the required parameter 'notificationPatch' when calling notificationPatch");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{notificationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationPatchMetadata operation.
     * @callback module:api/NotificationApi~notificationPatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata of a Notification
     * Modify the metadata of a *Notification*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} notificationId Unique identifier of a *Notification*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/NotificationApi~notificationPatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    notificationPatchMetadata(notificationId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationPatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling notificationPatchMetadata");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/notifications/{notificationId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsGet operation.
     * @callback module:api/NotificationApi~notificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a Notification
     * Get information about a *Notification*. 
     * @param {String} notificationId Unique identifier of a *Notification*.
     * @param {module:api/NotificationApi~notificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    notificationsGet(notificationId, callback) {
      let postBody = null;
      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling notificationsGet");
      }

      let pathParams = {
        'notificationId': notificationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Notification;
      return this.apiClient.callApi(
        '/notifications/{notificationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeNewNotification operation.
     * @callback module:api/NotificationApi~placeNewNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification
     * Create a new *Notification*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:model/NotificationNew} notification 
     * @param {module:api/NotificationApi~placeNewNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationCreated}
     */
    placeNewNotification(placeId, notification, callback) {
      let postBody = notification;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeNewNotification");
      }
      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling placeNewNotification");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationCreated;
      return this.apiClient.callApi(
        '/places/{placeId}/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeNotifications operation.
     * @callback module:api/NotificationApi~placeNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Notifications
     * Get the list of *Notifications* available in this *Place*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/NotificationApi~placeNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationItem>}
     */
    placeNotifications(placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeNotifications");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NotificationItem];
      return this.apiClient.callApi(
        '/places/{placeId}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
