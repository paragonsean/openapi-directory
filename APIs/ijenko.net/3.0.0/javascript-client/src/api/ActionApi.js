/**
 * IoE² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionResult from '../model/ActionResult';
import DefaultError from '../model/DefaultError';
import ErrorGatewayUnreachable from '../model/ErrorGatewayUnreachable';

/**
* Action service.
* @module api/ActionApi
* @version 3.0.0
*/
export default class ActionApi {

    /**
    * Constructs a new ActionApi. 
    * @alias module:api/ActionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceRun operation.
     * @callback module:api/ActionApi~deviceRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple Functionalities selected with tags. 
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {String} action Identifier of an *Action* inside a *Functionality*.
     * @param {String} functionalities Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as « OR ». 
     * @param {Array.<Object>} _arguments 
     * @param {module:api/ActionApi~deviceRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionResult>}
     */
    deviceRun(deviceId, action, functionalities, _arguments, callback) {
      let postBody = _arguments;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceRun");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deviceRun");
      }
      // verify the required parameter 'functionalities' is set
      if (functionalities === undefined || functionalities === null) {
        throw new Error("Missing the required parameter 'functionalities' when calling deviceRun");
      }
      // verify the required parameter '_arguments' is set
      if (_arguments === undefined || _arguments === null) {
        throw new Error("Missing the required parameter '_arguments' when calling deviceRun");
      }

      let pathParams = {
        'deviceId': deviceId,
        'action': action
      };
      let queryParams = {
        'functionalities': functionalities
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ActionResult];
      return this.apiClient.callApi(
        '/devices/{deviceId}/run/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityRun operation.
     * @callback module:api/ActionApi~functionalityRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an action
     * Run an action on the Functionality. 
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {String} action Identifier of an *Action* inside a *Functionality*.
     * @param {Array.<Object>} _arguments 
     * @param {module:api/ActionApi~functionalityRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionResult}
     */
    functionalityRun(functionalityId, action, _arguments, callback) {
      let postBody = _arguments;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityRun");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling functionalityRun");
      }
      // verify the required parameter '_arguments' is set
      if (_arguments === undefined || _arguments === null) {
        throw new Error("Missing the required parameter '_arguments' when calling functionalityRun");
      }

      let pathParams = {
        'functionalityId': functionalityId,
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionResult;
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/run/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeRun operation.
     * @callback module:api/ActionApi~placeRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple *Functionalities* selected with tags.  *Device* and *Functionality* selection are combined with « AND ».  If no functionality is matched by the device/functionality selection, an empty array is returned. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {String} action Identifier of an *Action* inside a *Functionality*.
     * @param {String} devices Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as « OR ».
     * @param {String} functionalities Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as « OR ». 
     * @param {Array.<Object>} _arguments 
     * @param {module:api/ActionApi~placeRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionResult>}
     */
    placeRun(placeId, action, devices, functionalities, _arguments, callback) {
      let postBody = _arguments;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeRun");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling placeRun");
      }
      // verify the required parameter 'devices' is set
      if (devices === undefined || devices === null) {
        throw new Error("Missing the required parameter 'devices' when calling placeRun");
      }
      // verify the required parameter 'functionalities' is set
      if (functionalities === undefined || functionalities === null) {
        throw new Error("Missing the required parameter 'functionalities' when calling placeRun");
      }
      // verify the required parameter '_arguments' is set
      if (_arguments === undefined || _arguments === null) {
        throw new Error("Missing the required parameter '_arguments' when calling placeRun");
      }

      let pathParams = {
        'placeId': placeId,
        'action': action
      };
      let queryParams = {
        'devices': devices,
        'functionalities': functionalities
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ActionResult];
      return this.apiClient.callApi(
        '/places/{placeId}/run/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
