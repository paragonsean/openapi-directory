/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthLogin from '../model/AuthLogin';
import AuthRefresh from '../model/AuthRefresh';
import AuthResetPassword from '../model/AuthResetPassword';
import AuthTokens from '../model/AuthTokens';
import DefaultError from '../model/DefaultError';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 3.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authAccountLogin operation.
     * @callback module:api/AuthenticationApi~authAccountLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a token using login+password
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an `Access-Token` HTTP header or in a `token` URL query parameter in requests that require authentication.  The *refresh token* can be used with `/auth/refresh` when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the `appId` used. The `ttl` input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use `/auth/revoke`. 
     * @param {module:model/AuthLogin} loginInfo Login information.
     * @param {module:api/AuthenticationApi~authAccountLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthTokens}
     */
    authAccountLogin(loginInfo, callback) {
      let postBody = loginInfo;
      // verify the required parameter 'loginInfo' is set
      if (loginInfo === undefined || loginInfo === null) {
        throw new Error("Missing the required parameter 'loginInfo' when calling authAccountLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthTokens;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRefreshToken operation.
     * @callback module:api/AuthenticationApi~authRefreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a token
     * Get a new *access token* using a valid *refresh token*.  This is a **replacement** of the *access token*: if an existing *access token* was still not expired, it is invalidated. 
     * @param {module:model/AuthRefresh} refreshInfo Refresh token information.
     * @param {module:api/AuthenticationApi~authRefreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthTokens}
     */
    authRefreshToken(refreshInfo, callback) {
      let postBody = refreshInfo;
      // verify the required parameter 'refreshInfo' is set
      if (refreshInfo === undefined || refreshInfo === null) {
        throw new Error("Missing the required parameter 'refreshInfo' when calling authRefreshToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthTokens;
      return this.apiClient.callApi(
        '/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authResetPassword operation.
     * @callback module:api/AuthenticationApi~authResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask for a new password
     * Trigger the request of a new password.  The account administrator will receive an e-mail with an URL pointing to a form to allow him/her to enter a new password. The old password is still functional until a new one is submitted.  Either the login or e-mail of the account must be given. 
     * @param {module:model/AuthResetPassword} resetPasswordInfo Account identification information
     * @param {module:api/AuthenticationApi~authResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authResetPassword(resetPasswordInfo, callback) {
      let postBody = resetPasswordInfo;
      // verify the required parameter 'resetPasswordInfo' is set
      if (resetPasswordInfo === undefined || resetPasswordInfo === null) {
        throw new Error("Missing the required parameter 'resetPasswordInfo' when calling authResetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authRevokeToken operation.
     * @callback module:api/AuthenticationApi~authRevokeTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a token
     * Invalidate the authentication used for the request. The access token and the refresh token will be invalid after this request. This request is typically called to implement logout. 
     * @param {module:api/AuthenticationApi~authRevokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authRevokeToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
