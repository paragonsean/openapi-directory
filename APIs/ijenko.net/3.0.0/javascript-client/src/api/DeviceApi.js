/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import Device from '../model/Device';
import DeviceItem from '../model/DeviceItem';
import DevicePatch from '../model/DevicePatch';
import ErrorEntity from '../model/ErrorEntity';
import FunctionalityCreated from '../model/FunctionalityCreated';
import FunctionalityNew from '../model/FunctionalityNew';
import MetadataPatch from '../model/MetadataPatch';
import TagsPatch from '../model/TagsPatch';

/**
* Device service.
* @module api/DeviceApi
* @version 3.0.0
*/
export default class DeviceApi {

    /**
    * Constructs a new DeviceApi. 
    * @alias module:api/DeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceAddFunctionality operation.
     * @callback module:api/DeviceApi~deviceAddFunctionalityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionalityCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add dynamically a functionality
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:model/FunctionalityNew} functionalityInfo 
     * @param {module:api/DeviceApi~deviceAddFunctionalityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionalityCreated}
     */
    deviceAddFunctionality(deviceId, functionalityInfo, callback) {
      let postBody = functionalityInfo;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceAddFunctionality");
      }
      // verify the required parameter 'functionalityInfo' is set
      if (functionalityInfo === undefined || functionalityInfo === null) {
        throw new Error("Missing the required parameter 'functionalityInfo' when calling deviceAddFunctionality");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionalityCreated;
      return this.apiClient.callApi(
        '/devices/{deviceId}/functionalities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceGetMetadata operation.
     * @callback module:api/DeviceApi~deviceGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata.
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:api/DeviceApi~deviceGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    deviceGetMetadata(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceGetMetadata");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{deviceId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceGetTags operation.
     * @callback module:api/DeviceApi~deviceGetTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * Get the tags of a *Device*.
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:api/DeviceApi~deviceGetTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    deviceGetTags(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceGetTags");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/devices/{deviceId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicePatchMetadata operation.
     * @callback module:api/DeviceApi~devicePatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/DeviceApi~devicePatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    devicePatchMetadata(deviceId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicePatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling devicePatchMetadata");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/devices/{deviceId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicePatchTags operation.
     * @callback module:api/DeviceApi~devicePatchTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify tags
     * Modify the tags of a *Device*.
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:model/TagsPatch} tagsPatch Modifications to apply to the tags list of the resource. 
     * @param {module:api/DeviceApi~devicePatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    devicePatchTags(deviceId, tagsPatch, callback) {
      let postBody = tagsPatch;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicePatchTags");
      }
      // verify the required parameter 'tagsPatch' is set
      if (tagsPatch === undefined || tagsPatch === null) {
        throw new Error("Missing the required parameter 'tagsPatch' when calling devicePatchTags");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/devices/{deviceId}/tags', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGet operation.
     * @callback module:api/DeviceApi~devicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a Device
     * Get information about a *Device*.
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:api/DeviceApi~devicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    devicesGet(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesGet");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/devices/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesPatch operation.
     * @callback module:api/DeviceApi~devicesPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Device
     * Modify information about a *Device*: its name. 
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:model/DevicePatch} devicePatch 
     * @param {module:api/DeviceApi~devicesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesPatch(deviceId, devicePatch, callback) {
      let postBody = devicePatch;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling devicesPatch");
      }
      // verify the required parameter 'devicePatch' is set
      if (devicePatch === undefined || devicePatch === null) {
        throw new Error("Missing the required parameter 'devicePatch' when calling devicesPatch");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/devices/{deviceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeDevices operation.
     * @callback module:api/DeviceApi~placeDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Devices
     * Get the list of *Devices* available in this *Place*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Object} opts Optional parameters
     * @param {String} [devices] Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/DeviceApi~placeDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceItem>}
     */
    placeDevices(placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeDevices");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'devices': opts['devices'],
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceItem];
      return this.apiClient.callApi(
        '/places/{placeId}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
