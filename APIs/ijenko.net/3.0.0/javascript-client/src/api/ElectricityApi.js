/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultError from '../model/DefaultError';
import ElectricityAutonomy from '../model/ElectricityAutonomy';
import ElectricityFlows from '../model/ElectricityFlows';
import ElectricityFlowsSetup from '../model/ElectricityFlowsSetup';
import ElectricitySelfConsumption from '../model/ElectricitySelfConsumption';

/**
* Electricity service.
* @module api/ElectricityApi
* @version 3.0.0
*/
export default class ElectricityApi {

    /**
    * Constructs a new ElectricityApi. 
    * @alias module:api/ElectricityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the placeElectricityAutonomy operation.
     * @callback module:api/ElectricityApi~placeElectricityAutonomyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectricityAutonomy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get autonomy rate of the place
     * Compute the autonomy rate of the *Place* on a time period.  `autonomy = 1 - (elec_drawn / elec_total_usage)` 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Date} when A time part of the time span.
     * @param {module:model/String} span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)
     * @param {module:api/ElectricityApi~placeElectricityAutonomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectricityAutonomy}
     */
    placeElectricityAutonomy(placeId, when, span, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeElectricityAutonomy");
      }
      // verify the required parameter 'when' is set
      if (when === undefined || when === null) {
        throw new Error("Missing the required parameter 'when' when calling placeElectricityAutonomy");
      }
      // verify the required parameter 'span' is set
      if (span === undefined || span === null) {
        throw new Error("Missing the required parameter 'span' when calling placeElectricityAutonomy");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'when': when,
        'span': span
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectricityAutonomy;
      return this.apiClient.callApi(
        '/places/{placeId}/electricity/autonomy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeElectricityGetFlows operation.
     * @callback module:api/ElectricityApi~placeElectricityGetFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectricityFlows} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get electricity virtual flows
     * Get the mapping of virtual electricity flows to functionalities.  Some rules are applied to expand the virtual flows using the concrete flows available.  The `factor` tells how each energy value coming from a functionality must be added with values from other functionality to compute the energy of the virtual flow. Factors are usually `1` or `-1`.  The `code` property gives the result which may be partial: - If all flows are available, `200000` is returned. - If no flows are available (indicating that the place has no   electricity functionality or that no functionality has been attached   to a flow), the `code` is `200001`. The `missing` property contains   all the requested flows. - If some flows are missing, the `code` is `200002` and the `missing`   property lists them. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Array.<module:model/String>} flows Names of the flows requested
     * @param {module:api/ElectricityApi~placeElectricityGetFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectricityFlows}
     */
    placeElectricityGetFlows(placeId, flows, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeElectricityGetFlows");
      }
      // verify the required parameter 'flows' is set
      if (flows === undefined || flows === null) {
        throw new Error("Missing the required parameter 'flows' when calling placeElectricityGetFlows");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'flows': this.apiClient.buildCollectionParam(flows, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectricityFlows;
      return this.apiClient.callApi(
        '/places/{placeId}/electricity/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeElectricityGetFlowsSetup operation.
     * @callback module:api/ElectricityApi~placeElectricityGetFlowsSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectricityFlowsSetup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get electricity flows setup
     * Get the mapping of functionalities to electricity flows.  A functionality is attached to *at most* one flow. 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {module:api/ElectricityApi~placeElectricityGetFlowsSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectricityFlowsSetup}
     */
    placeElectricityGetFlowsSetup(placeId, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeElectricityGetFlowsSetup");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectricityFlowsSetup;
      return this.apiClient.callApi(
        '/places/{placeId}/electricity/flows/setup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeElectricitySelfConsumption operation.
     * @callback module:api/ElectricityApi~placeElectricitySelfConsumptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElectricitySelfConsumption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get self-consumption rate of the place
     * Compute the self-consumption rate of the *Place* on a time period.  `selfConsumption = 1 - (elec_feed_in / elec_total_usage)` 
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Date} when A time part of the time span.
     * @param {module:model/String} span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year)
     * @param {module:api/ElectricityApi~placeElectricitySelfConsumptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElectricitySelfConsumption}
     */
    placeElectricitySelfConsumption(placeId, when, span, callback) {
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeElectricitySelfConsumption");
      }
      // verify the required parameter 'when' is set
      if (when === undefined || when === null) {
        throw new Error("Missing the required parameter 'when' when calling placeElectricitySelfConsumption");
      }
      // verify the required parameter 'span' is set
      if (span === undefined || span === null) {
        throw new Error("Missing the required parameter 'span' when calling placeElectricitySelfConsumption");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'when': when,
        'span': span
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElectricitySelfConsumption;
      return this.apiClient.callApi(
        '/places/{placeId}/electricity/self-consumption', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
