/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthLogin from '../model/AuthLogin';
import AuthTokens from '../model/AuthTokens';
import DefaultError from '../model/DefaultError';
import PlaceItem from '../model/PlaceItem';
import UserMe from '../model/UserMe';
import UserMePatch from '../model/UserMePatch';

/**
* EntryPoints service.
* @module api/EntryPointsApi
* @version 3.0.0
*/
export default class EntryPointsApi {

    /**
    * Constructs a new EntryPointsApi. 
    * @alias module:api/EntryPointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authAccountLogin_0 operation.
     * @callback module:api/EntryPointsApi~authAccountLogin_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokens} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a token using login+password
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an `Access-Token` HTTP header or in a `token` URL query parameter in requests that require authentication.  The *refresh token* can be used with `/auth/refresh` when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the `appId` used. The `ttl` input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use `/auth/revoke`. 
     * @param {module:model/AuthLogin} loginInfo Login information.
     * @param {module:api/EntryPointsApi~authAccountLogin_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthTokens}
     */
    authAccountLogin_0(loginInfo, callback) {
      let postBody = loginInfo;
      // verify the required parameter 'loginInfo' is set
      if (loginInfo === undefined || loginInfo === null) {
        throw new Error("Missing the required parameter 'loginInfo' when calling authAccountLogin_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthTokens;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meGet operation.
     * @callback module:api/EntryPointsApi~meGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserMe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about the User
     * Get information on the authenticated *User* who does the request.  The *login* property is returned only if the *User* is the administrator of the *Account*. 
     * @param {module:api/EntryPointsApi~meGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserMe}
     */
    meGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserMe;
      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mePatch operation.
     * @callback module:api/EntryPointsApi~mePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User information
     * Update *User* information (locale). 
     * @param {module:model/UserMePatch} userPatch Updated user info.
     * @param {module:api/EntryPointsApi~mePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mePatch(userPatch, callback) {
      let postBody = userPatch;
      // verify the required parameter 'userPatch' is set
      if (userPatch === undefined || userPatch === null) {
        throw new Error("Missing the required parameter 'userPatch' when calling mePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mePlaces operation.
     * @callback module:api/EntryPointsApi~mePlacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accessible Places
     * List the *Places* to which the *Token* has access.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/EntryPointsApi~mePlacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaceItem>}
     */
    mePlaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlaceItem];
      return this.apiClient.callApi(
        '/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
