/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthChangePassword from '../model/AuthChangePassword';
import DefaultError from '../model/DefaultError';
import ErrorEntity from '../model/ErrorEntity';
import MetadataPatch from '../model/MetadataPatch';
import PlaceCreated from '../model/PlaceCreated';
import PlaceItem from '../model/PlaceItem';
import PlaceNew from '../model/PlaceNew';
import User from '../model/User';
import UserCreated from '../model/UserCreated';
import UserItem from '../model/UserItem';
import UserNew from '../model/UserNew';
import UserPatch from '../model/UserPatch';
import UserTokenItem from '../model/UserTokenItem';

/**
* Account service.
* @module api/AccountApi
* @version 3.0.0
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountChangePassword operation.
     * @callback module:api/AccountApi~accountChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the password
     * Set a new password for the account.  **Note**: requires full access to the *Account*. 
     * @param {module:model/AuthChangePassword} changePasswordInfo Old and new password
     * @param {module:api/AccountApi~accountChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountChangePassword(changePasswordInfo, callback) {
      let postBody = changePasswordInfo;
      // verify the required parameter 'changePasswordInfo' is set
      if (changePasswordInfo === undefined || changePasswordInfo === null) {
        throw new Error("Missing the required parameter 'changePasswordInfo' when calling accountChangePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDeleteUser operation.
     * @callback module:api/AccountApi~accountDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User
     * Delete a *User* from this *Account*, and revoke all his/her *Tokens*.  **Note**: requires full access to the *Account*. 
     * @param {String} userId Unique identifier of a *User*.
     * @param {module:api/AccountApi~accountDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountDeleteUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling accountDeleteUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetUser operation.
     * @callback module:api/AccountApi~accountGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a User
     * Get information about a *User* in the same *Account*.
     * @param {String} userId Unique identifier of a *User*.
     * @param {module:api/AccountApi~accountGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountGetUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling accountGetUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountNewPlace operation.
     * @callback module:api/AccountApi~accountNewPlaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Place
     * Create a new *Place*.  A *Device* (`class`: `MINT`, `address`: `0`) is automatically created and attached to the new *Place*.  **Note:** requires full access to the *Account*. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaceNew} [place] 
     * @param {module:api/AccountApi~accountNewPlaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceCreated}
     */
    accountNewPlace(opts, callback) {
      opts = opts || {};
      let postBody = opts['place'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaceCreated;
      return this.apiClient.callApi(
        '/account/places', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountNewUser operation.
     * @callback module:api/AccountApi~accountNewUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * New User
     * Add a *User*.  **Note**: requires full access to the *Account*. 
     * @param {module:model/UserNew} userInfo 
     * @param {module:api/AccountApi~accountNewUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCreated}
     */
    accountNewUser(userInfo, callback) {
      let postBody = userInfo;
      // verify the required parameter 'userInfo' is set
      if (userInfo === undefined || userInfo === null) {
        throw new Error("Missing the required parameter 'userInfo' when calling accountNewUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCreated;
      return this.apiClient.callApi(
        '/account/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPatchUser operation.
     * @callback module:api/AccountApi~accountPatchUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a User
     * Modify a *User*.  **Note**: requires full access to the *Account*. 
     * @param {String} userId Unique identifier of a *User*.
     * @param {module:model/UserPatch} userPatch 
     * @param {module:api/AccountApi~accountPatchUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountPatchUser(userId, userPatch, callback) {
      let postBody = userPatch;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling accountPatchUser");
      }
      // verify the required parameter 'userPatch' is set
      if (userPatch === undefined || userPatch === null) {
        throw new Error("Missing the required parameter 'userPatch' when calling accountPatchUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountPlaces operation.
     * @callback module:api/AccountApi~accountPlacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlaceItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Places of the Account
     * List the *Places* of the account.  **Note:** requires full access to the *Account*. 
     * @param {module:api/AccountApi~accountPlacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlaceItem>}
     */
    accountPlaces(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PlaceItem];
      return this.apiClient.callApi(
        '/account/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountRevokeToken operation.
     * @callback module:api/AccountApi~accountRevokeTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke a Token
     * Revoke the given *Token*.  **Note:** requires full access to the *Account*. 
     * @param {String} tokenId Identifier of the token
     * @param {module:api/AccountApi~accountRevokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountRevokeToken(tokenId, callback) {
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling accountRevokeToken");
      }

      let pathParams = {
        'tokenId': tokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/tokens/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountTokens operation.
     * @callback module:api/AccountApi~accountTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserTokenItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List active Tokens of the Account
     * List the active *Tokens* on the account.  **Note:** requires full access to the *Account*. 
     * @param {module:api/AccountApi~accountTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserTokenItem>}
     */
    accountTokens(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserTokenItem];
      return this.apiClient.callApi(
        '/account/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUsers operation.
     * @callback module:api/AccountApi~accountUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users of the Account
     * Get the list of *Users* of this *Account*.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/AccountApi~accountUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserItem>}
     */
    accountUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserItem];
      return this.apiClient.callApi(
        '/account/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetMetadata operation.
     * @callback module:api/AccountApi~userGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata.
     * @param {String} userId Unique identifier of a *User*.
     * @param {module:api/AccountApi~userGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    userGetMetadata(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userGetMetadata");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/account/users/{userId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userPatchMetadata operation.
     * @callback module:api/AccountApi~userPatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} userId Unique identifier of a *User*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/AccountApi~userPatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    userPatchMetadata(userId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userPatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling userPatchMetadata");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/account/users/{userId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
