/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeValue from '../model/AttributeValue';
import DefaultError from '../model/DefaultError';
import ErrorEntity from '../model/ErrorEntity';
import ErrorSubEntity from '../model/ErrorSubEntity';
import Functionality from '../model/Functionality';
import FunctionalityCreated from '../model/FunctionalityCreated';
import FunctionalityItem from '../model/FunctionalityItem';
import FunctionalityNew from '../model/FunctionalityNew';
import FunctionalityPatch from '../model/FunctionalityPatch';
import MetadataPatch from '../model/MetadataPatch';
import TagsPatch from '../model/TagsPatch';

/**
* Functionality service.
* @module api/FunctionalityApi
* @version 3.0.0
*/
export default class FunctionalityApi {

    /**
    * Constructs a new FunctionalityApi. 
    * @alias module:api/FunctionalityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceAddFunctionality_0 operation.
     * @callback module:api/FunctionalityApi~deviceAddFunctionality_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionalityCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add dynamically a functionality
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     * @param {String} deviceId Unique identifier of a *Device*.
     * @param {module:model/FunctionalityNew} functionalityInfo 
     * @param {module:api/FunctionalityApi~deviceAddFunctionality_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionalityCreated}
     */
    deviceAddFunctionality_0(deviceId, functionalityInfo, callback) {
      let postBody = functionalityInfo;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceAddFunctionality_0");
      }
      // verify the required parameter 'functionalityInfo' is set
      if (functionalityInfo === undefined || functionalityInfo === null) {
        throw new Error("Missing the required parameter 'functionalityInfo' when calling deviceAddFunctionality_0");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionalityCreated;
      return this.apiClient.callApi(
        '/devices/{deviceId}/functionalities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalitiesGet operation.
     * @callback module:api/FunctionalityApi~functionalitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Functionality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about a Functionality
     * Get the *Functionality*.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:api/FunctionalityApi~functionalitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Functionality}
     */
    functionalitiesGet(functionalityId, callback) {
      let postBody = null;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalitiesGet");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Functionality;
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityGetMetadata operation.
     * @callback module:api/FunctionalityApi~functionalityGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List metadata
     * Get the metadata.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:api/FunctionalityApi~functionalityGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    functionalityGetMetadata(functionalityId, callback) {
      let postBody = null;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityGetMetadata");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityGetTags operation.
     * @callback module:api/FunctionalityApi~functionalityGetTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tags
     * Get the tags of a *Functionality*.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:api/FunctionalityApi~functionalityGetTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    functionalityGetTags(functionalityId, callback) {
      let postBody = null;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityGetTags");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityPatch operation.
     * @callback module:api/FunctionalityApi~functionalityPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify a Functionality
     * Modify information about a *Functionality*: its name. 
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:model/FunctionalityPatch} functionalityPatch 
     * @param {module:api/FunctionalityApi~functionalityPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    functionalityPatch(functionalityId, functionalityPatch, callback) {
      let postBody = functionalityPatch;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityPatch");
      }
      // verify the required parameter 'functionalityPatch' is set
      if (functionalityPatch === undefined || functionalityPatch === null) {
        throw new Error("Missing the required parameter 'functionalityPatch' when calling functionalityPatch");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityPatchMetadata operation.
     * @callback module:api/FunctionalityApi~functionalityPatchMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:model/MetadataPatch} metadataPatch Modifications to apply to the metadata of the resource. 
     * @param {module:api/FunctionalityApi~functionalityPatchMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    functionalityPatchMetadata(functionalityId, metadataPatch, callback) {
      let postBody = metadataPatch;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityPatchMetadata");
      }
      // verify the required parameter 'metadataPatch' is set
      if (metadataPatch === undefined || metadataPatch === null) {
        throw new Error("Missing the required parameter 'metadataPatch' when calling functionalityPatchMetadata");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/metadata', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityPatchTags operation.
     * @callback module:api/FunctionalityApi~functionalityPatchTagsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify tags
     * Modify the tags of a *Functionality*.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {module:model/TagsPatch} tagsPatch Modifications to apply to the tags list of the resource. 
     * @param {module:api/FunctionalityApi~functionalityPatchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    functionalityPatchTags(functionalityId, tagsPatch, callback) {
      let postBody = tagsPatch;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityPatchTags");
      }
      // verify the required parameter 'tagsPatch' is set
      if (tagsPatch === undefined || tagsPatch === null) {
        throw new Error("Missing the required parameter 'tagsPatch' when calling functionalityPatchTags");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/tags', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalitySet operation.
     * @callback module:api/FunctionalityApi~functionalitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify an Attribute value
     * Modify the value of the *Attribute*.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {String} attributeName Identifier of an *Attribute* inside a *Functionality*.
     * @param {Object.<String, Object>} value New value for the *Attribute*.
     * @param {module:api/FunctionalityApi~functionalitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    functionalitySet(functionalityId, attributeName, value, callback) {
      let postBody = value;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalitySet");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling functionalitySet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling functionalitySet");
      }

      let pathParams = {
        'functionalityId': functionalityId,
        'attributeName': attributeName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/attributes/{attributeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityValue operation.
     * @callback module:api/FunctionalityApi~functionalityValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Attribute value
     * Get the *Attribute* value and the last time when it changed.
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {String} attributeName Identifier of an *Attribute* inside a *Functionality*.
     * @param {module:api/FunctionalityApi~functionalityValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeValue}
     */
    functionalityValue(functionalityId, attributeName, callback) {
      let postBody = null;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityValue");
      }
      // verify the required parameter 'attributeName' is set
      if (attributeName === undefined || attributeName === null) {
        throw new Error("Missing the required parameter 'attributeName' when calling functionalityValue");
      }

      let pathParams = {
        'functionalityId': functionalityId,
        'attributeName': attributeName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeValue;
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/attributes/{attributeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionalityValues operation.
     * @callback module:api/FunctionalityApi~functionalityValuesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [AttributeValue]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get history of multiple attributes
     * Get the values of multiple *Attributes* and their history.  If the `names` parameter is not given, all the attributes of the *Functionality* are returned. As the list may be huge, this must be avoided.  If the `to` parameter is set, `from` must also be set.  If `from` is not set, only the last value is returned.  The `surround` parameter allows to ask also for one value beyond each interval boundaries.  The request may fail if too many values are asked. 
     * @param {String} functionalityId Unique identifier of a *Functionality*.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [names] One or multiple *Attribute* names separated by commas
     * @param {Date} [from] Beginning of the time interval.
     * @param {Date} [to] End of the interval. Default: now. 
     * @param {Boolean} [surround] If true, return also one value before from and one value after to
     * @param {module:api/FunctionalityApi~functionalityValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [AttributeValue]}>}
     */
    functionalityValues(functionalityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'functionalityId' is set
      if (functionalityId === undefined || functionalityId === null) {
        throw new Error("Missing the required parameter 'functionalityId' when calling functionalityValues");
      }

      let pathParams = {
        'functionalityId': functionalityId
      };
      let queryParams = {
        'names': this.apiClient.buildCollectionParam(opts['names'], 'csv'),
        'from': opts['from'],
        'to': opts['to'],
        'surround': opts['surround']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': [AttributeValue]};
      return this.apiClient.callApi(
        '/functionalities/{functionalityId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeFunctionalities operation.
     * @callback module:api/FunctionalityApi~placeFunctionalitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionalityItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Functionalities
     * Get the list of *Functionalities* available in this *Place*.
     * @param {String} placeId Unique identifier of a *Place*.
     * @param {Object} opts Optional parameters
     * @param {String} [devices] Devices selector. Device tags or device classes or device ids or '*' for any. Multiple values are separated by '|' and interpreted as Â« OR Â».
     * @param {String} [functionalities] Functionality selector: Functionality tags or functionality class (optionally, '@' followed by a endpoint in decimal) or '*' for all. Multiple values are separated by '|' and are interpreted as Â« OR Â». 
     * @param {Array.<String>} [embedMetadata] Request to include the given keys of metadata in the response. If a key doesn't exist on the resource it is ignored. **Note:** This only applies to the top level resources. 
     * @param {module:api/FunctionalityApi~placeFunctionalitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionalityItem>}
     */
    placeFunctionalities(placeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'placeId' is set
      if (placeId === undefined || placeId === null) {
        throw new Error("Missing the required parameter 'placeId' when calling placeFunctionalities");
      }

      let pathParams = {
        'placeId': placeId
      };
      let queryParams = {
        'devices': opts['devices'],
        'functionalities': opts['functionalities'],
        'embed-metadata': this.apiClient.buildCollectionParam(opts['embedMetadata'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token in query', 'Token in Access-Token header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FunctionalityItem];
      return this.apiClient.callApi(
        '/places/{placeId}/functionalities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
