/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceItem model module.
 * @module model/DeviceItem
 * @version 3.0.0
 */
class DeviceItem {
    /**
     * Constructs a new <code>DeviceItem</code>.
     * @alias module:model/DeviceItem
     * @param address {String} 
     * @param _class {String} 
     * @param id {String} Unique identifier of the *Device*
     * @param isOnline {Boolean} 
     * @param place {String} Unique identifier of the *Place*
     * @param tags {Array.<String>} 
     */
    constructor(address, _class, id, isOnline, place, tags) { 
        
        DeviceItem.initialize(this, address, _class, id, isOnline, place, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, _class, id, isOnline, place, tags) { 
        obj['address'] = address;
        obj['class'] = _class;
        obj['id'] = id;
        obj['isOnline'] = isOnline;
        obj['place'] = place;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>DeviceItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceItem} obj Optional instance to populate.
     * @return {module:model/DeviceItem} The populated <code>DeviceItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceItem();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isOnline')) {
                obj['isOnline'] = ApiClient.convertToType(data['isOnline'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = ApiClient.convertToType(data['place'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['place'] && !(typeof data['place'] === 'string' || data['place'] instanceof String)) {
            throw new Error("Expected the field `place` to be a primitive type in the JSON string but got " + data['place']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

DeviceItem.RequiredProperties = ["address", "class", "id", "isOnline", "place", "tags"];

/**
 * @member {String} address
 */
DeviceItem.prototype['address'] = undefined;

/**
 * @member {String} class
 */
DeviceItem.prototype['class'] = undefined;

/**
 * Unique identifier of the *Device*
 * @member {String} id
 */
DeviceItem.prototype['id'] = undefined;

/**
 * @member {Boolean} isOnline
 */
DeviceItem.prototype['isOnline'] = undefined;

/**
 * Subset of metadata attached to the resource selected using the 'embed-metadata' parameter
 * @member {Object.<String, Object>} metadata
 */
DeviceItem.prototype['metadata'] = undefined;

/**
 * Name of the *Device* as defined by the user. Can be used for user interfaces.
 * @member {String} name
 */
DeviceItem.prototype['name'] = undefined;

/**
 * Unique identifier of the *Place*
 * @member {String} place
 */
DeviceItem.prototype['place'] = undefined;

/**
 * @member {Array.<String>} tags
 */
DeviceItem.prototype['tags'] = undefined;






export default DeviceItem;

