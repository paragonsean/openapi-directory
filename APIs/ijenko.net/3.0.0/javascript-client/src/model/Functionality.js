/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Functionality model module.
 * @module model/Functionality
 * @version 3.0.0
 */
class Functionality {
    /**
     * Constructs a new <code>Functionality</code>.
     * @alias module:model/Functionality
     * @param attributes {Array.<String>} 
     * @param _class {String} 
     * @param device {String} Unique identifier of the *Device*
     * @param endpoint {Number} 
     * @param tags {Array.<String>} 
     */
    constructor(attributes, _class, device, endpoint, tags) { 
        
        Functionality.initialize(this, attributes, _class, device, endpoint, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, _class, device, endpoint, tags) { 
        obj['attributes'] = attributes;
        obj['class'] = _class;
        obj['device'] = device;
        obj['endpoint'] = endpoint;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>Functionality</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Functionality} obj Optional instance to populate.
     * @return {module:model/Functionality} The populated <code>Functionality</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Functionality();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Functionality</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Functionality</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Functionality.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attributes'])) {
            throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

Functionality.RequiredProperties = ["attributes", "class", "device", "endpoint", "tags"];

/**
 * @member {Array.<String>} actions
 */
Functionality.prototype['actions'] = undefined;

/**
 * @member {Array.<String>} attributes
 */
Functionality.prototype['attributes'] = undefined;

/**
 * @member {String} class
 */
Functionality.prototype['class'] = undefined;

/**
 * Unique identifier of the *Device*
 * @member {String} device
 */
Functionality.prototype['device'] = undefined;

/**
 * @member {Number} endpoint
 */
Functionality.prototype['endpoint'] = undefined;

/**
 * Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.
 * @member {Object.<String, Object>} metadata
 */
Functionality.prototype['metadata'] = undefined;

/**
 * Free functionality name
 * @member {String} name
 */
Functionality.prototype['name'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Functionality.prototype['tags'] = undefined;






export default Functionality;

