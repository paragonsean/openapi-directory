/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElectricityFlowFunctionality from './ElectricityFlowFunctionality';

/**
 * The ElectricityVirtualFlows model module.
 * @module model/ElectricityVirtualFlows
 * @version 3.0.0
 */
class ElectricityVirtualFlows {
    /**
     * Constructs a new <code>ElectricityVirtualFlows</code>.
     * @alias module:model/ElectricityVirtualFlows
     */
    constructor() { 
        
        ElectricityVirtualFlows.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElectricityVirtualFlows</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElectricityVirtualFlows} obj Optional instance to populate.
     * @return {module:model/ElectricityVirtualFlows} The populated <code>ElectricityVirtualFlows</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElectricityVirtualFlows();

            if (data.hasOwnProperty('battery_charge')) {
                obj['battery_charge'] = ApiClient.convertToType(data['battery_charge'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('battery_discharge')) {
                obj['battery_discharge'] = ApiClient.convertToType(data['battery_discharge'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('battery_grid')) {
                obj['battery_grid'] = ApiClient.convertToType(data['battery_grid'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_drawn')) {
                obj['elec_drawn'] = ApiClient.convertToType(data['elec_drawn'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_feed_in')) {
                obj['elec_feed_in'] = ApiClient.convertToType(data['elec_feed_in'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_from_household')) {
                obj['elec_from_household'] = ApiClient.convertToType(data['elec_from_household'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_local')) {
                obj['elec_local'] = ApiClient.convertToType(data['elec_local'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_to_pv')) {
                obj['elec_to_pv'] = ApiClient.convertToType(data['elec_to_pv'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_total_gen')) {
                obj['elec_total_gen'] = ApiClient.convertToType(data['elec_total_gen'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_total_usage')) {
                obj['elec_total_usage'] = ApiClient.convertToType(data['elec_total_usage'], [ElectricityFlowFunctionality]);
            }
            if (data.hasOwnProperty('elec_usage')) {
                obj['elec_usage'] = ApiClient.convertToType(data['elec_usage'], [ElectricityFlowFunctionality]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElectricityVirtualFlows</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElectricityVirtualFlows</code>.
     */
    static validateJSON(data) {
        if (data['battery_charge']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['battery_charge'])) {
                throw new Error("Expected the field `battery_charge` to be an array in the JSON data but got " + data['battery_charge']);
            }
            // validate the optional field `battery_charge` (array)
            for (const item of data['battery_charge']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['battery_discharge']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['battery_discharge'])) {
                throw new Error("Expected the field `battery_discharge` to be an array in the JSON data but got " + data['battery_discharge']);
            }
            // validate the optional field `battery_discharge` (array)
            for (const item of data['battery_discharge']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['battery_grid']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['battery_grid'])) {
                throw new Error("Expected the field `battery_grid` to be an array in the JSON data but got " + data['battery_grid']);
            }
            // validate the optional field `battery_grid` (array)
            for (const item of data['battery_grid']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_drawn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_drawn'])) {
                throw new Error("Expected the field `elec_drawn` to be an array in the JSON data but got " + data['elec_drawn']);
            }
            // validate the optional field `elec_drawn` (array)
            for (const item of data['elec_drawn']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_feed_in']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_feed_in'])) {
                throw new Error("Expected the field `elec_feed_in` to be an array in the JSON data but got " + data['elec_feed_in']);
            }
            // validate the optional field `elec_feed_in` (array)
            for (const item of data['elec_feed_in']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_from_household']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_from_household'])) {
                throw new Error("Expected the field `elec_from_household` to be an array in the JSON data but got " + data['elec_from_household']);
            }
            // validate the optional field `elec_from_household` (array)
            for (const item of data['elec_from_household']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_local']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_local'])) {
                throw new Error("Expected the field `elec_local` to be an array in the JSON data but got " + data['elec_local']);
            }
            // validate the optional field `elec_local` (array)
            for (const item of data['elec_local']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_to_pv']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_to_pv'])) {
                throw new Error("Expected the field `elec_to_pv` to be an array in the JSON data but got " + data['elec_to_pv']);
            }
            // validate the optional field `elec_to_pv` (array)
            for (const item of data['elec_to_pv']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_total_gen']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_total_gen'])) {
                throw new Error("Expected the field `elec_total_gen` to be an array in the JSON data but got " + data['elec_total_gen']);
            }
            // validate the optional field `elec_total_gen` (array)
            for (const item of data['elec_total_gen']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_total_usage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_total_usage'])) {
                throw new Error("Expected the field `elec_total_usage` to be an array in the JSON data but got " + data['elec_total_usage']);
            }
            // validate the optional field `elec_total_usage` (array)
            for (const item of data['elec_total_usage']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }
        if (data['elec_usage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elec_usage'])) {
                throw new Error("Expected the field `elec_usage` to be an array in the JSON data but got " + data['elec_usage']);
            }
            // validate the optional field `elec_usage` (array)
            for (const item of data['elec_usage']) {
                ElectricityFlowFunctionality.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} battery_charge
 */
ElectricityVirtualFlows.prototype['battery_charge'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} battery_discharge
 */
ElectricityVirtualFlows.prototype['battery_discharge'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} battery_grid
 */
ElectricityVirtualFlows.prototype['battery_grid'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_drawn
 */
ElectricityVirtualFlows.prototype['elec_drawn'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_feed_in
 */
ElectricityVirtualFlows.prototype['elec_feed_in'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_from_household
 */
ElectricityVirtualFlows.prototype['elec_from_household'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_local
 */
ElectricityVirtualFlows.prototype['elec_local'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_to_pv
 */
ElectricityVirtualFlows.prototype['elec_to_pv'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_total_gen
 */
ElectricityVirtualFlows.prototype['elec_total_gen'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_total_usage
 */
ElectricityVirtualFlows.prototype['elec_total_usage'] = undefined;

/**
 * @member {Array.<module:model/ElectricityFlowFunctionality>} elec_usage
 */
ElectricityVirtualFlows.prototype['elec_usage'] = undefined;






export default ElectricityVirtualFlows;

