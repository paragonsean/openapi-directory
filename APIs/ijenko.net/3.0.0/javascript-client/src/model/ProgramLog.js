/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionResult from './ActionResult';

/**
 * The ProgramLog model module.
 * @module model/ProgramLog
 * @version 3.0.0
 */
class ProgramLog {
    /**
     * Constructs a new <code>ProgramLog</code>.
     * @alias module:model/ProgramLog
     * @param when {Date} 
     */
    constructor(when) { 
        
        ProgramLog.initialize(this, when);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, when) { 
        obj['when'] = when;
    }

    /**
     * Constructs a <code>ProgramLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProgramLog} obj Optional instance to populate.
     * @return {module:model/ProgramLog} The populated <code>ProgramLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProgramLog();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [ActionResult]);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], ['String']);
            }
            if (data.hasOwnProperty('when')) {
                obj['when'] = ApiClient.convertToType(data['when'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProgramLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProgramLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProgramLog.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                ActionResult.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notifications'])) {
            throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
        }

        return true;
    }


}

ProgramLog.RequiredProperties = ["when"];

/**
 * @member {Array.<module:model/ActionResult>} actions
 */
ProgramLog.prototype['actions'] = undefined;

/**
 * @member {Array.<String>} errors
 */
ProgramLog.prototype['errors'] = undefined;

/**
 * @member {Array.<String>} notifications
 */
ProgramLog.prototype['notifications'] = undefined;

/**
 * @member {Date} when
 */
ProgramLog.prototype['when'] = undefined;






export default ProgramLog;

