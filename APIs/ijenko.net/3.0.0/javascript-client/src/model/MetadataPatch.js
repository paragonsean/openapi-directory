/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetadataPatch model module.
 * @module model/MetadataPatch
 * @version 3.0.0
 */
class MetadataPatch {
    /**
     * Constructs a new <code>MetadataPatch</code>.
     * @alias module:model/MetadataPatch
     */
    constructor() { 
        
        MetadataPatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataPatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataPatch} obj Optional instance to populate.
     * @return {module:model/MetadataPatch} The populated <code>MetadataPatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataPatch();

            if (data.hasOwnProperty('add')) {
                obj['add'] = ApiClient.convertToType(data['add'], {'String': Object});
            }
            if (data.hasOwnProperty('remove')) {
                obj['remove'] = ApiClient.convertToType(data['remove'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataPatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataPatch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['remove'])) {
            throw new Error("Expected the field `remove` to be an array in the JSON data but got " + data['remove']);
        }

        return true;
    }


}



/**
 * list of pairs key/value to add/replace
 * @member {Object.<String, Object>} add
 */
MetadataPatch.prototype['add'] = undefined;

/**
 * list of keys to remove
 * @member {Array.<String>} remove
 */
MetadataPatch.prototype['remove'] = undefined;






export default MetadataPatch;

