/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaceItem from './PlaceItem';
import UserItem from './UserItem';

/**
 * The UserTokenItem model module.
 * @module model/UserTokenItem
 * @version 3.0.0
 */
class UserTokenItem {
    /**
     * Constructs a new <code>UserTokenItem</code>.
     * Token for User API access
     * @alias module:model/UserTokenItem
     * @param appName {String} Application name
     * @param id {String} 
     * @param user {module:model/UserItem} 
     */
    constructor(appName, id, user) { 
        
        UserTokenItem.initialize(this, appName, id, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appName, id, user) { 
        obj['appName'] = appName;
        obj['id'] = id;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>UserTokenItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserTokenItem} obj Optional instance to populate.
     * @return {module:model/UserTokenItem} The populated <code>UserTokenItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserTokenItem();

            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastUse')) {
                obj['lastUse'] = ApiClient.convertToType(data['lastUse'], 'Date');
            }
            if (data.hasOwnProperty('places')) {
                obj['places'] = ApiClient.convertToType(data['places'], [PlaceItem]);
            }
            if (data.hasOwnProperty('refreshTokenExpires')) {
                obj['refreshTokenExpires'] = ApiClient.convertToType(data['refreshTokenExpires'], 'Date');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserItem.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserTokenItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserTokenItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserTokenItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['places']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['places'])) {
                throw new Error("Expected the field `places` to be an array in the JSON data but got " + data['places']);
            }
            // validate the optional field `places` (array)
            for (const item of data['places']) {
                PlaceItem.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserItem.validateJSON(data['user']);
        }

        return true;
    }


}

UserTokenItem.RequiredProperties = ["appName", "id", "user"];

/**
 * Application name
 * @member {String} appName
 */
UserTokenItem.prototype['appName'] = undefined;

/**
 * @member {String} id
 */
UserTokenItem.prototype['id'] = undefined;

/**
 * Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.
 * @member {Date} lastUse
 */
UserTokenItem.prototype['lastUse'] = undefined;

/**
 * List of Places to which the User has access. If absent, it means any Place of the account are allowed.
 * @member {Array.<module:model/PlaceItem>} places
 */
UserTokenItem.prototype['places'] = undefined;

/**
 * If absent, infinite validity.
 * @member {Date} refreshTokenExpires
 */
UserTokenItem.prototype['refreshTokenExpires'] = undefined;

/**
 * True if this token is the one used for this API request
 * @member {Boolean} self
 */
UserTokenItem.prototype['self'] = undefined;

/**
 * @member {module:model/UserItem} user
 */
UserTokenItem.prototype['user'] = undefined;






export default UserTokenItem;

