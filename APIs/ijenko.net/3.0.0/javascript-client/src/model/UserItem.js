/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserItem model module.
 * @module model/UserItem
 * @version 3.0.0
 */
class UserItem {
    /**
     * Constructs a new <code>UserItem</code>.
     * @alias module:model/UserItem
     * @param email {String} 
     * @param id {String} Unique identifier of the *User*
     * @param locale {String} Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 
     * @param name {String} 
     */
    constructor(email, id, locale, name) { 
        
        UserItem.initialize(this, email, id, locale, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, id, locale, name) { 
        obj['canLogin'] = false;
        obj['email'] = email;
        obj['id'] = id;
        obj['locale'] = locale;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>UserItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserItem} obj Optional instance to populate.
     * @return {module:model/UserItem} The populated <code>UserItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserItem();

            if (data.hasOwnProperty('canLogin')) {
                obj['canLogin'] = ApiClient.convertToType(data['canLogin'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}

UserItem.RequiredProperties = ["email", "id", "locale", "name"];

/**
 * true if the user owning the account (can get tokens with /auth/login)
 * @member {Boolean} canLogin
 * @default false
 */
UserItem.prototype['canLogin'] = false;

/**
 * @member {String} email
 */
UserItem.prototype['email'] = undefined;

/**
 * Unique identifier of the *User*
 * @member {String} id
 */
UserItem.prototype['id'] = undefined;

/**
 * Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 
 * @member {String} locale
 */
UserItem.prototype['locale'] = undefined;

/**
 * Subset of metadata attached to the resource selected using the 'embed-metadata' parameter
 * @member {Object.<String, Object>} metadata
 */
UserItem.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
UserItem.prototype['name'] = undefined;

/**
 * Phone number of the *User* in international format, for SMS notifications.
 * @member {String} phoneNumber
 */
UserItem.prototype['phoneNumber'] = undefined;






export default UserItem;

