/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActionResult model module.
 * @module model/ActionResult
 * @version 3.0.0
 */
class ActionResult {
    /**
     * Constructs a new <code>ActionResult</code>.
     * @alias module:model/ActionResult
     * @param status {Number} Return code (HTTP status code)
     */
    constructor(status) { 
        
        ActionResult.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>ActionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionResult} obj Optional instance to populate.
     * @return {module:model/ActionResult} The populated <code>ActionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionResult();

            if (data.hasOwnProperty('functionality')) {
                obj['functionality'] = ApiClient.convertToType(data['functionality'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], [Object]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActionResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['functionality'] && !(typeof data['functionality'] === 'string' || data['functionality'] instanceof String)) {
            throw new Error("Expected the field `functionality` to be a primitive type in the JSON string but got " + data['functionality']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['result'])) {
            throw new Error("Expected the field `result` to be an array in the JSON data but got " + data['result']);
        }

        return true;
    }


}

ActionResult.RequiredProperties = ["status"];

/**
 * Unique identifier of the *Functionality*
 * @member {String} functionality
 */
ActionResult.prototype['functionality'] = undefined;

/**
 * @member {Array.<Object>} result
 */
ActionResult.prototype['result'] = undefined;

/**
 * Return code (HTTP status code)
 * @member {Number} status
 */
ActionResult.prototype['status'] = undefined;






export default ActionResult;

