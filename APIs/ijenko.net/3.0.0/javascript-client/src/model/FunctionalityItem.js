/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FunctionalityItem model module.
 * @module model/FunctionalityItem
 * @version 3.0.0
 */
class FunctionalityItem {
    /**
     * Constructs a new <code>FunctionalityItem</code>.
     * @alias module:model/FunctionalityItem
     * @param _class {String} 
     * @param device {String} Unique identifier of the *Device*
     * @param endpoint {Number} 
     * @param id {String} Unique identifier of the *Functionality*
     */
    constructor(_class, device, endpoint, id) { 
        
        FunctionalityItem.initialize(this, _class, device, endpoint, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _class, device, endpoint, id) { 
        obj['class'] = _class;
        obj['device'] = device;
        obj['endpoint'] = endpoint;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>FunctionalityItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FunctionalityItem} obj Optional instance to populate.
     * @return {module:model/FunctionalityItem} The populated <code>FunctionalityItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FunctionalityItem();

            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FunctionalityItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FunctionalityItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FunctionalityItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

FunctionalityItem.RequiredProperties = ["class", "device", "endpoint", "id"];

/**
 * @member {String} class
 */
FunctionalityItem.prototype['class'] = undefined;

/**
 * Unique identifier of the *Device*
 * @member {String} device
 */
FunctionalityItem.prototype['device'] = undefined;

/**
 * @member {Number} endpoint
 */
FunctionalityItem.prototype['endpoint'] = undefined;

/**
 * Unique identifier of the *Functionality*
 * @member {String} id
 */
FunctionalityItem.prototype['id'] = undefined;

/**
 * Subset of metadata attached to the resource selected using the 'embed-metadata' parameter
 * @member {Object.<String, Object>} metadata
 */
FunctionalityItem.prototype['metadata'] = undefined;

/**
 * Free functionality name
 * @member {String} name
 */
FunctionalityItem.prototype['name'] = undefined;

/**
 * @member {Array.<String>} tags
 */
FunctionalityItem.prototype['tags'] = undefined;






export default FunctionalityItem;

