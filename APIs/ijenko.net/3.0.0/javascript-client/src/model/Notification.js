/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Notification model module.
 * @module model/Notification
 * @version 3.0.0
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * @alias module:model/Notification
     * @param name {String} 
     * @param place {String} Unique identifier of the *Place*
     */
    constructor(name, place) { 
        
        Notification.initialize(this, name, place);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, place) { 
        obj['name'] = name;
        obj['place'] = place;
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = ApiClient.convertToType(data['place'], 'String');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = ApiClient.convertToType(data['routing'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Notification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['place'] && !(typeof data['place'] === 'string' || data['place'] instanceof String)) {
            throw new Error("Expected the field `place` to be a primitive type in the JSON string but got " + data['place']);
        }
        // ensure the json data is a string
        if (data['routing'] && !(typeof data['routing'] === 'string' || data['routing'] instanceof String)) {
            throw new Error("Expected the field `routing` to be a primitive type in the JSON string but got " + data['routing']);
        }

        return true;
    }


}

Notification.RequiredProperties = ["name", "place"];

/**
 * @member {Object} data
 */
Notification.prototype['data'] = undefined;

/**
 * Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.
 * @member {Object.<String, Object>} metadata
 */
Notification.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
Notification.prototype['name'] = undefined;

/**
 * Unique identifier of the *Place*
 * @member {String} place
 */
Notification.prototype['place'] = undefined;

/**
 * @member {String} routing
 */
Notification.prototype['routing'] = undefined;






export default Notification;

