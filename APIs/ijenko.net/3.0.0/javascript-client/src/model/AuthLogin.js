/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthLogin model module.
 * @module model/AuthLogin
 * @version 3.0.0
 */
class AuthLogin {
    /**
     * Constructs a new <code>AuthLogin</code>.
     * @alias module:model/AuthLogin
     * @param appId {String} 
     * @param login {String} 
     * @param password {String} 
     */
    constructor(appId, login, password) { 
        
        AuthLogin.initialize(this, appId, login, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, login, password) { 
        obj['appId'] = appId;
        obj['login'] = login;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>AuthLogin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthLogin} obj Optional instance to populate.
     * @return {module:model/AuthLogin} The populated <code>AuthLogin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthLogin();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthLogin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthLogin</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthLogin.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

AuthLogin.RequiredProperties = ["appId", "login", "password"];

/**
 * @member {String} appId
 */
AuthLogin.prototype['appId'] = undefined;

/**
 * @member {String} login
 */
AuthLogin.prototype['login'] = undefined;

/**
 * @member {String} password
 */
AuthLogin.prototype['password'] = undefined;

/**
 * Desired maximum life-time in seconds for the refresh token
 * @member {Number} ttl
 */
AuthLogin.prototype['ttl'] = undefined;






export default AuthLogin;

