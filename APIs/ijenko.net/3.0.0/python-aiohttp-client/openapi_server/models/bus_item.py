# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class BusItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functionality: str=None, id: str=None, protocol: str=None):
        """BusItem - a model defined in OpenAPI

        :param functionality: The functionality of this BusItem.
        :param id: The id of this BusItem.
        :param protocol: The protocol of this BusItem.
        """
        self.openapi_types = {
            'functionality': str,
            'id': str,
            'protocol': str
        }

        self.attribute_map = {
            'functionality': 'functionality',
            'id': 'id',
            'protocol': 'protocol'
        }

        self._functionality = functionality
        self._id = id
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusItem of this BusItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functionality(self):
        """Gets the functionality of this BusItem.

        Unique identifier of the *Functionality*

        :return: The functionality of this BusItem.
        :rtype: str
        """
        return self._functionality

    @functionality.setter
    def functionality(self, functionality):
        """Sets the functionality of this BusItem.

        Unique identifier of the *Functionality*

        :param functionality: The functionality of this BusItem.
        :type functionality: str
        """
        if functionality is None:
            raise ValueError("Invalid value for `functionality`, must not be `None`")
        if functionality is not None and len(functionality) > 22:
            raise ValueError("Invalid value for `functionality`, length must be less than or equal to `22`")
        if functionality is not None and len(functionality) < 22:
            raise ValueError("Invalid value for `functionality`, length must be greater than or equal to `22`")
        if functionality is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', functionality):
            raise ValueError("Invalid value for `functionality`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._functionality = functionality

    @property
    def id(self):
        """Gets the id of this BusItem.


        :return: The id of this BusItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusItem.


        :param id: The id of this BusItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 3:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")

        self._id = id

    @property
    def protocol(self):
        """Gets the protocol of this BusItem.


        :return: The protocol of this BusItem.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this BusItem.


        :param protocol: The protocol of this BusItem.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")
        if protocol is not None and len(protocol) < 1:
            raise ValueError("Invalid value for `protocol`, length must be greater than or equal to `1`")

        self._protocol = protocol
