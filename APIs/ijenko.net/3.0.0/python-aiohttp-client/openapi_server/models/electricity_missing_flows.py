# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElectricityMissingFlows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, battery_charge: bool=None, battery_discharge: bool=None, battery_grid: bool=None, elec_drawn: bool=None, elec_feed_in: bool=None, elec_from_household: bool=None, elec_local: bool=None, elec_to_pv: bool=None, elec_total_gen: bool=None, elec_total_usage: bool=None, elec_usage: bool=None):
        """ElectricityMissingFlows - a model defined in OpenAPI

        :param battery_charge: The battery_charge of this ElectricityMissingFlows.
        :param battery_discharge: The battery_discharge of this ElectricityMissingFlows.
        :param battery_grid: The battery_grid of this ElectricityMissingFlows.
        :param elec_drawn: The elec_drawn of this ElectricityMissingFlows.
        :param elec_feed_in: The elec_feed_in of this ElectricityMissingFlows.
        :param elec_from_household: The elec_from_household of this ElectricityMissingFlows.
        :param elec_local: The elec_local of this ElectricityMissingFlows.
        :param elec_to_pv: The elec_to_pv of this ElectricityMissingFlows.
        :param elec_total_gen: The elec_total_gen of this ElectricityMissingFlows.
        :param elec_total_usage: The elec_total_usage of this ElectricityMissingFlows.
        :param elec_usage: The elec_usage of this ElectricityMissingFlows.
        """
        self.openapi_types = {
            'battery_charge': bool,
            'battery_discharge': bool,
            'battery_grid': bool,
            'elec_drawn': bool,
            'elec_feed_in': bool,
            'elec_from_household': bool,
            'elec_local': bool,
            'elec_to_pv': bool,
            'elec_total_gen': bool,
            'elec_total_usage': bool,
            'elec_usage': bool
        }

        self.attribute_map = {
            'battery_charge': 'battery_charge',
            'battery_discharge': 'battery_discharge',
            'battery_grid': 'battery_grid',
            'elec_drawn': 'elec_drawn',
            'elec_feed_in': 'elec_feed_in',
            'elec_from_household': 'elec_from_household',
            'elec_local': 'elec_local',
            'elec_to_pv': 'elec_to_pv',
            'elec_total_gen': 'elec_total_gen',
            'elec_total_usage': 'elec_total_usage',
            'elec_usage': 'elec_usage'
        }

        self._battery_charge = battery_charge
        self._battery_discharge = battery_discharge
        self._battery_grid = battery_grid
        self._elec_drawn = elec_drawn
        self._elec_feed_in = elec_feed_in
        self._elec_from_household = elec_from_household
        self._elec_local = elec_local
        self._elec_to_pv = elec_to_pv
        self._elec_total_gen = elec_total_gen
        self._elec_total_usage = elec_total_usage
        self._elec_usage = elec_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectricityMissingFlows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectricityMissingFlows of this ElectricityMissingFlows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def battery_charge(self):
        """Gets the battery_charge of this ElectricityMissingFlows.


        :return: The battery_charge of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._battery_charge

    @battery_charge.setter
    def battery_charge(self, battery_charge):
        """Sets the battery_charge of this ElectricityMissingFlows.


        :param battery_charge: The battery_charge of this ElectricityMissingFlows.
        :type battery_charge: bool
        """

        self._battery_charge = battery_charge

    @property
    def battery_discharge(self):
        """Gets the battery_discharge of this ElectricityMissingFlows.


        :return: The battery_discharge of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._battery_discharge

    @battery_discharge.setter
    def battery_discharge(self, battery_discharge):
        """Sets the battery_discharge of this ElectricityMissingFlows.


        :param battery_discharge: The battery_discharge of this ElectricityMissingFlows.
        :type battery_discharge: bool
        """

        self._battery_discharge = battery_discharge

    @property
    def battery_grid(self):
        """Gets the battery_grid of this ElectricityMissingFlows.


        :return: The battery_grid of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._battery_grid

    @battery_grid.setter
    def battery_grid(self, battery_grid):
        """Sets the battery_grid of this ElectricityMissingFlows.


        :param battery_grid: The battery_grid of this ElectricityMissingFlows.
        :type battery_grid: bool
        """

        self._battery_grid = battery_grid

    @property
    def elec_drawn(self):
        """Gets the elec_drawn of this ElectricityMissingFlows.


        :return: The elec_drawn of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_drawn

    @elec_drawn.setter
    def elec_drawn(self, elec_drawn):
        """Sets the elec_drawn of this ElectricityMissingFlows.


        :param elec_drawn: The elec_drawn of this ElectricityMissingFlows.
        :type elec_drawn: bool
        """

        self._elec_drawn = elec_drawn

    @property
    def elec_feed_in(self):
        """Gets the elec_feed_in of this ElectricityMissingFlows.


        :return: The elec_feed_in of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_feed_in

    @elec_feed_in.setter
    def elec_feed_in(self, elec_feed_in):
        """Sets the elec_feed_in of this ElectricityMissingFlows.


        :param elec_feed_in: The elec_feed_in of this ElectricityMissingFlows.
        :type elec_feed_in: bool
        """

        self._elec_feed_in = elec_feed_in

    @property
    def elec_from_household(self):
        """Gets the elec_from_household of this ElectricityMissingFlows.


        :return: The elec_from_household of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_from_household

    @elec_from_household.setter
    def elec_from_household(self, elec_from_household):
        """Sets the elec_from_household of this ElectricityMissingFlows.


        :param elec_from_household: The elec_from_household of this ElectricityMissingFlows.
        :type elec_from_household: bool
        """

        self._elec_from_household = elec_from_household

    @property
    def elec_local(self):
        """Gets the elec_local of this ElectricityMissingFlows.


        :return: The elec_local of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_local

    @elec_local.setter
    def elec_local(self, elec_local):
        """Sets the elec_local of this ElectricityMissingFlows.


        :param elec_local: The elec_local of this ElectricityMissingFlows.
        :type elec_local: bool
        """

        self._elec_local = elec_local

    @property
    def elec_to_pv(self):
        """Gets the elec_to_pv of this ElectricityMissingFlows.


        :return: The elec_to_pv of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_to_pv

    @elec_to_pv.setter
    def elec_to_pv(self, elec_to_pv):
        """Sets the elec_to_pv of this ElectricityMissingFlows.


        :param elec_to_pv: The elec_to_pv of this ElectricityMissingFlows.
        :type elec_to_pv: bool
        """

        self._elec_to_pv = elec_to_pv

    @property
    def elec_total_gen(self):
        """Gets the elec_total_gen of this ElectricityMissingFlows.


        :return: The elec_total_gen of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_total_gen

    @elec_total_gen.setter
    def elec_total_gen(self, elec_total_gen):
        """Sets the elec_total_gen of this ElectricityMissingFlows.


        :param elec_total_gen: The elec_total_gen of this ElectricityMissingFlows.
        :type elec_total_gen: bool
        """

        self._elec_total_gen = elec_total_gen

    @property
    def elec_total_usage(self):
        """Gets the elec_total_usage of this ElectricityMissingFlows.


        :return: The elec_total_usage of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_total_usage

    @elec_total_usage.setter
    def elec_total_usage(self, elec_total_usage):
        """Sets the elec_total_usage of this ElectricityMissingFlows.


        :param elec_total_usage: The elec_total_usage of this ElectricityMissingFlows.
        :type elec_total_usage: bool
        """

        self._elec_total_usage = elec_total_usage

    @property
    def elec_usage(self):
        """Gets the elec_usage of this ElectricityMissingFlows.


        :return: The elec_usage of this ElectricityMissingFlows.
        :rtype: bool
        """
        return self._elec_usage

    @elec_usage.setter
    def elec_usage(self, elec_usage):
        """Sets the elec_usage of this ElectricityMissingFlows.


        :param elec_usage: The elec_usage of this ElectricityMissingFlows.
        :type elec_usage: bool
        """

        self._elec_usage = elec_usage
