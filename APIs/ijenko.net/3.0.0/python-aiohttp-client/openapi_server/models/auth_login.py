# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthLogin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, login: str=None, password: str=None, ttl: int=None):
        """AuthLogin - a model defined in OpenAPI

        :param app_id: The app_id of this AuthLogin.
        :param login: The login of this AuthLogin.
        :param password: The password of this AuthLogin.
        :param ttl: The ttl of this AuthLogin.
        """
        self.openapi_types = {
            'app_id': str,
            'login': str,
            'password': str,
            'ttl': int
        }

        self.attribute_map = {
            'app_id': 'appId',
            'login': 'login',
            'password': 'password',
            'ttl': 'ttl'
        }

        self._app_id = app_id
        self._login = login
        self._password = password
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthLogin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthLogin of this AuthLogin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AuthLogin.


        :return: The app_id of this AuthLogin.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AuthLogin.


        :param app_id: The app_id of this AuthLogin.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")
        if app_id is not None and len(app_id) < 1:
            raise ValueError("Invalid value for `app_id`, length must be greater than or equal to `1`")

        self._app_id = app_id

    @property
    def login(self):
        """Gets the login of this AuthLogin.


        :return: The login of this AuthLogin.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this AuthLogin.


        :param login: The login of this AuthLogin.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")
        if login is not None and len(login) < 1:
            raise ValueError("Invalid value for `login`, length must be greater than or equal to `1`")

        self._login = login

    @property
    def password(self):
        """Gets the password of this AuthLogin.


        :return: The password of this AuthLogin.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AuthLogin.


        :param password: The password of this AuthLogin.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) < 5:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `5`")

        self._password = password

    @property
    def ttl(self):
        """Gets the ttl of this AuthLogin.

        Desired maximum life-time in seconds for the refresh token

        :return: The ttl of this AuthLogin.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this AuthLogin.

        Desired maximum life-time in seconds for the refresh token

        :param ttl: The ttl of this AuthLogin.
        :type ttl: int
        """
        if ttl is not None and ttl < 0:
            raise ValueError("Invalid value for `ttl`, must be a value greater than or equal to `0`")

        self._ttl = ttl
