# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserMePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locale: str=None):
        """UserMePatch - a model defined in OpenAPI

        :param locale: The locale of this UserMePatch.
        """
        self.openapi_types = {
            'locale': str
        }

        self.attribute_map = {
            'locale': 'locale'
        }

        self._locale = locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMePatch of this UserMePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locale(self):
        """Gets the locale of this UserMePatch.

        Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 

        :return: The locale of this UserMePatch.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserMePatch.

        Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 

        :param locale: The locale of this UserMePatch.
        :type locale: str
        """
        if locale is not None and len(locale) < 2:
            raise ValueError("Invalid value for `locale`, length must be greater than or equal to `2`")
        if locale is not None and not re.search(r'^[a-z]{2}[A-Za-z0-9-]*$', locale):
            raise ValueError("Invalid value for `locale`, must be a follow pattern or equal to `/^[a-z]{2}[A-Za-z0-9-]*$/`")

        self._locale = locale
