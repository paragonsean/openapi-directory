# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.electricity_flow_name import ElectricityFlowName
import re
from openapi_server import util


class ElectricityFlowFunctionality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, factor: int=None, flow: ElectricityFlowName=None, id: str=None):
        """ElectricityFlowFunctionality - a model defined in OpenAPI

        :param _class: The _class of this ElectricityFlowFunctionality.
        :param factor: The factor of this ElectricityFlowFunctionality.
        :param flow: The flow of this ElectricityFlowFunctionality.
        :param id: The id of this ElectricityFlowFunctionality.
        """
        self.openapi_types = {
            '_class': str,
            'factor': int,
            'flow': ElectricityFlowName,
            'id': str
        }

        self.attribute_map = {
            '_class': 'class',
            'factor': 'factor',
            'flow': 'flow',
            'id': 'id'
        }

        self.__class = _class
        self._factor = factor
        self._flow = flow
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectricityFlowFunctionality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectricityFlowFunctionality of this ElectricityFlowFunctionality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this ElectricityFlowFunctionality.


        :return: The _class of this ElectricityFlowFunctionality.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ElectricityFlowFunctionality.


        :param _class: The _class of this ElectricityFlowFunctionality.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")
        if _class is not None and len(_class) < 2:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `2`")
        if _class is not None and not re.search(r'^[A-Z][A-Za-z0-9]+$', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/^[A-Z][A-Za-z0-9]+$/`")

        self.__class = _class

    @property
    def factor(self):
        """Gets the factor of this ElectricityFlowFunctionality.


        :return: The factor of this ElectricityFlowFunctionality.
        :rtype: int
        """
        return self._factor

    @factor.setter
    def factor(self, factor):
        """Sets the factor of this ElectricityFlowFunctionality.


        :param factor: The factor of this ElectricityFlowFunctionality.
        :type factor: int
        """
        if factor is None:
            raise ValueError("Invalid value for `factor`, must not be `None`")

        self._factor = factor

    @property
    def flow(self):
        """Gets the flow of this ElectricityFlowFunctionality.


        :return: The flow of this ElectricityFlowFunctionality.
        :rtype: ElectricityFlowName
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this ElectricityFlowFunctionality.


        :param flow: The flow of this ElectricityFlowFunctionality.
        :type flow: ElectricityFlowName
        """
        if flow is None:
            raise ValueError("Invalid value for `flow`, must not be `None`")

        self._flow = flow

    @property
    def id(self):
        """Gets the id of this ElectricityFlowFunctionality.

        Unique identifier of the *Functionality*

        :return: The id of this ElectricityFlowFunctionality.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElectricityFlowFunctionality.

        Unique identifier of the *Functionality*

        :param id: The id of this ElectricityFlowFunctionality.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id
