# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_result import ActionResult
from openapi_server import util


class ProgramLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[ActionResult]=None, errors: List[str]=None, notifications: list[str]=None, when: datetime=None):
        """ProgramLog - a model defined in OpenAPI

        :param actions: The actions of this ProgramLog.
        :param errors: The errors of this ProgramLog.
        :param notifications: The notifications of this ProgramLog.
        :param when: The when of this ProgramLog.
        """
        self.openapi_types = {
            'actions': List[ActionResult],
            'errors': List[str],
            'notifications': list[str],
            'when': datetime
        }

        self.attribute_map = {
            'actions': 'actions',
            'errors': 'errors',
            'notifications': 'notifications',
            'when': 'when'
        }

        self._actions = actions
        self._errors = errors
        self._notifications = notifications
        self._when = when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgramLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgramLog of this ProgramLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ProgramLog.


        :return: The actions of this ProgramLog.
        :rtype: List[ActionResult]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ProgramLog.


        :param actions: The actions of this ProgramLog.
        :type actions: List[ActionResult]
        """

        self._actions = actions

    @property
    def errors(self):
        """Gets the errors of this ProgramLog.


        :return: The errors of this ProgramLog.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ProgramLog.


        :param errors: The errors of this ProgramLog.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def notifications(self):
        """Gets the notifications of this ProgramLog.


        :return: The notifications of this ProgramLog.
        :rtype: list[str]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ProgramLog.


        :param notifications: The notifications of this ProgramLog.
        :type notifications: list[str]
        """

        self._notifications = notifications

    @property
    def when(self):
        """Gets the when of this ProgramLog.


        :return: The when of this ProgramLog.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this ProgramLog.


        :param when: The when of this ProgramLog.
        :type when: datetime
        """
        if when is None:
            raise ValueError("Invalid value for `when`, must not be `None`")

        self._when = when
