# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.functionality_item import FunctionalityItem
import re
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, attributes: Dict[str, Dict[str, object]]=None, _class: str=None, functionalities: list[FunctionalityItem]=None, is_online: bool=None, manufacturer: str=None, metadata: Dict[str, object]=None, model: str=None, name: str=None, place: str=None, protocol: str=None, tags: list[str]=None):
        """Device - a model defined in OpenAPI

        :param address: The address of this Device.
        :param attributes: The attributes of this Device.
        :param _class: The _class of this Device.
        :param functionalities: The functionalities of this Device.
        :param is_online: The is_online of this Device.
        :param manufacturer: The manufacturer of this Device.
        :param metadata: The metadata of this Device.
        :param model: The model of this Device.
        :param name: The name of this Device.
        :param place: The place of this Device.
        :param protocol: The protocol of this Device.
        :param tags: The tags of this Device.
        """
        self.openapi_types = {
            'address': str,
            'attributes': Dict[str, Dict[str, object]],
            '_class': str,
            'functionalities': list[FunctionalityItem],
            'is_online': bool,
            'manufacturer': str,
            'metadata': Dict[str, object],
            'model': str,
            'name': str,
            'place': str,
            'protocol': str,
            'tags': list[str]
        }

        self.attribute_map = {
            'address': 'address',
            'attributes': 'attributes',
            '_class': 'class',
            'functionalities': 'functionalities',
            'is_online': 'isOnline',
            'manufacturer': 'manufacturer',
            'metadata': 'metadata',
            'model': 'model',
            'name': 'name',
            'place': 'place',
            'protocol': 'protocol',
            'tags': 'tags'
        }

        self._address = address
        self._attributes = attributes
        self.__class = _class
        self._functionalities = functionalities
        self._is_online = is_online
        self._manufacturer = manufacturer
        self._metadata = metadata
        self._model = model
        self._name = name
        self._place = place
        self._protocol = protocol
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Device.


        :return: The address of this Device.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Device.


        :param address: The address of this Device.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")
        if address is not None and not re.search(r'^[A-Z0-9]{1,32}$', address):
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^[A-Z0-9]{1,32}$/`")

        self._address = address

    @property
    def attributes(self):
        """Gets the attributes of this Device.

        Each key is <FunctionalityClass>@<Endpoint>

        :return: The attributes of this Device.
        :rtype: Dict[str, Dict[str, object]]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Device.

        Each key is <FunctionalityClass>@<Endpoint>

        :param attributes: The attributes of this Device.
        :type attributes: Dict[str, Dict[str, object]]
        """

        self._attributes = attributes

    @property
    def _class(self):
        """Gets the _class of this Device.


        :return: The _class of this Device.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Device.


        :param _class: The _class of this Device.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")
        if _class is not None and len(_class) > 4:
            raise ValueError("Invalid value for `_class`, length must be less than or equal to `4`")
        if _class is not None and len(_class) < 4:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `4`")
        if _class is not None and not re.search(r'^[A-Z][A-Z0-9]{3}$', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/^[A-Z][A-Z0-9]{3}$/`")

        self.__class = _class

    @property
    def functionalities(self):
        """Gets the functionalities of this Device.


        :return: The functionalities of this Device.
        :rtype: list[FunctionalityItem]
        """
        return self._functionalities

    @functionalities.setter
    def functionalities(self, functionalities):
        """Sets the functionalities of this Device.


        :param functionalities: The functionalities of this Device.
        :type functionalities: list[FunctionalityItem]
        """
        if functionalities is None:
            raise ValueError("Invalid value for `functionalities`, must not be `None`")

        self._functionalities = functionalities

    @property
    def is_online(self):
        """Gets the is_online of this Device.


        :return: The is_online of this Device.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this Device.


        :param is_online: The is_online of this Device.
        :type is_online: bool
        """
        if is_online is None:
            raise ValueError("Invalid value for `is_online`, must not be `None`")

        self._is_online = is_online

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Device.


        :return: The manufacturer of this Device.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Device.


        :param manufacturer: The manufacturer of this Device.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def metadata(self):
        """Gets the metadata of this Device.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :return: The metadata of this Device.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Device.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :param metadata: The metadata of this Device.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def model(self):
        """Gets the model of this Device.


        :return: The model of this Device.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.


        :param model: The model of this Device.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this Device.

        Name of the device. User defined.

        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.

        Name of the device. User defined.

        :param name: The name of this Device.
        :type name: str
        """
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")

        self._name = name

    @property
    def place(self):
        """Gets the place of this Device.

        Unique identifier of the *Place*

        :return: The place of this Device.
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this Device.

        Unique identifier of the *Place*

        :param place: The place of this Device.
        :type place: str
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")
        if place is not None and len(place) > 22:
            raise ValueError("Invalid value for `place`, length must be less than or equal to `22`")
        if place is not None and len(place) < 22:
            raise ValueError("Invalid value for `place`, length must be greater than or equal to `22`")
        if place is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', place):
            raise ValueError("Invalid value for `place`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._place = place

    @property
    def protocol(self):
        """Gets the protocol of this Device.


        :return: The protocol of this Device.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Device.


        :param protocol: The protocol of this Device.
        :type protocol: str
        """
        if protocol is not None and len(protocol) < 1:
            raise ValueError("Invalid value for `protocol`, length must be greater than or equal to `1`")

        self._protocol = protocol

    @property
    def tags(self):
        """Gets the tags of this Device.


        :return: The tags of this Device.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Device.


        :param tags: The tags of this Device.
        :type tags: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
