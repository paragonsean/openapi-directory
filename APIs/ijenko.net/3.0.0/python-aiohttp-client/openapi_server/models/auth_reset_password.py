# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthResetPassword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, email: str=None, login: str=None):
        """AuthResetPassword - a model defined in OpenAPI

        :param app_id: The app_id of this AuthResetPassword.
        :param email: The email of this AuthResetPassword.
        :param login: The login of this AuthResetPassword.
        """
        self.openapi_types = {
            'app_id': str,
            'email': str,
            'login': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'email': 'email',
            'login': 'login'
        }

        self._app_id = app_id
        self._email = email
        self._login = login

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthResetPassword':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthResetPassword of this AuthResetPassword.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this AuthResetPassword.


        :return: The app_id of this AuthResetPassword.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AuthResetPassword.


        :param app_id: The app_id of this AuthResetPassword.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")
        if app_id is not None and len(app_id) < 1:
            raise ValueError("Invalid value for `app_id`, length must be greater than or equal to `1`")

        self._app_id = app_id

    @property
    def email(self):
        """Gets the email of this AuthResetPassword.


        :return: The email of this AuthResetPassword.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AuthResetPassword.


        :param email: The email of this AuthResetPassword.
        :type email: str
        """
        if email is not None and len(email) < 6:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `6`")

        self._email = email

    @property
    def login(self):
        """Gets the login of this AuthResetPassword.


        :return: The login of this AuthResetPassword.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this AuthResetPassword.


        :param login: The login of this AuthResetPassword.
        :type login: str
        """
        if login is not None and len(login) < 1:
            raise ValueError("Invalid value for `login`, length must be greater than or equal to `1`")

        self._login = login
