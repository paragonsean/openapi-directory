# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationNew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, metadata: Dict[str, object]=None, name: str=None, routing: str=None):
        """NotificationNew - a model defined in OpenAPI

        :param data: The data of this NotificationNew.
        :param metadata: The metadata of this NotificationNew.
        :param name: The name of this NotificationNew.
        :param routing: The routing of this NotificationNew.
        """
        self.openapi_types = {
            'data': object,
            'metadata': Dict[str, object],
            'name': str,
            'routing': str
        }

        self.attribute_map = {
            'data': 'data',
            'metadata': 'metadata',
            'name': 'name',
            'routing': 'routing'
        }

        self._data = data
        self._metadata = metadata
        self._name = name
        self._routing = routing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationNew of this NotificationNew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this NotificationNew.


        :return: The data of this NotificationNew.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this NotificationNew.


        :param data: The data of this NotificationNew.
        :type data: object
        """

        self._data = data

    @property
    def metadata(self):
        """Gets the metadata of this NotificationNew.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :return: The metadata of this NotificationNew.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NotificationNew.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :param metadata: The metadata of this NotificationNew.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this NotificationNew.


        :return: The name of this NotificationNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationNew.


        :param name: The name of this NotificationNew.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def routing(self):
        """Gets the routing of this NotificationNew.


        :return: The routing of this NotificationNew.
        :rtype: str
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this NotificationNew.


        :param routing: The routing of this NotificationNew.
        :type routing: str
        """

        self._routing = routing
