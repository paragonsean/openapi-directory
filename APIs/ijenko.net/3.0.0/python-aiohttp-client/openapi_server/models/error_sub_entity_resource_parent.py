# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorSubEntityResourceParent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: str=None, id: str=None):
        """ErrorSubEntityResourceParent - a model defined in OpenAPI

        :param entity: The entity of this ErrorSubEntityResourceParent.
        :param id: The id of this ErrorSubEntityResourceParent.
        """
        self.openapi_types = {
            'entity': str,
            'id': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'id': 'id'
        }

        self._entity = entity
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorSubEntityResourceParent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorSubEntity_resource_parent of this ErrorSubEntityResourceParent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this ErrorSubEntityResourceParent.


        :return: The entity of this ErrorSubEntityResourceParent.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ErrorSubEntityResourceParent.


        :param entity: The entity of this ErrorSubEntityResourceParent.
        :type entity: str
        """
        allowed_values = ["Place", "Functionality"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def id(self):
        """Gets the id of this ErrorSubEntityResourceParent.


        :return: The id of this ErrorSubEntityResourceParent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorSubEntityResourceParent.


        :param id: The id of this ErrorSubEntityResourceParent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id
