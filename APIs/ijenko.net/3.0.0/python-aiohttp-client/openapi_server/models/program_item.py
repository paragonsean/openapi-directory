# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ProgramItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, id: str=None, metadata: Dict[str, object]=None, name: str=None):
        """ProgramItem - a model defined in OpenAPI

        :param enabled: The enabled of this ProgramItem.
        :param id: The id of this ProgramItem.
        :param metadata: The metadata of this ProgramItem.
        :param name: The name of this ProgramItem.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'metadata': Dict[str, object],
            'name': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._enabled = enabled
        self._id = id
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgramItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgramItem of this ProgramItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this ProgramItem.


        :return: The enabled of this ProgramItem.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ProgramItem.


        :param enabled: The enabled of this ProgramItem.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this ProgramItem.

        Unique identifier of the *Program*

        :return: The id of this ProgramItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProgramItem.

        Unique identifier of the *Program*

        :param id: The id of this ProgramItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this ProgramItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :return: The metadata of this ProgramItem.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProgramItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :param metadata: The metadata of this ProgramItem.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ProgramItem.


        :return: The name of this ProgramItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProgramItem.


        :param name: The name of this ProgramItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
