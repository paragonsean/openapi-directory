# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Functionality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: list[str]=None, attributes: list[str]=None, _class: str=None, device: str=None, endpoint: int=None, metadata: Dict[str, object]=None, name: str=None, tags: list[str]=None):
        """Functionality - a model defined in OpenAPI

        :param actions: The actions of this Functionality.
        :param attributes: The attributes of this Functionality.
        :param _class: The _class of this Functionality.
        :param device: The device of this Functionality.
        :param endpoint: The endpoint of this Functionality.
        :param metadata: The metadata of this Functionality.
        :param name: The name of this Functionality.
        :param tags: The tags of this Functionality.
        """
        self.openapi_types = {
            'actions': list[str],
            'attributes': list[str],
            '_class': str,
            'device': str,
            'endpoint': int,
            'metadata': Dict[str, object],
            'name': str,
            'tags': list[str]
        }

        self.attribute_map = {
            'actions': 'actions',
            'attributes': 'attributes',
            '_class': 'class',
            'device': 'device',
            'endpoint': 'endpoint',
            'metadata': 'metadata',
            'name': 'name',
            'tags': 'tags'
        }

        self._actions = actions
        self._attributes = attributes
        self.__class = _class
        self._device = device
        self._endpoint = endpoint
        self._metadata = metadata
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Functionality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Functionality of this Functionality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Functionality.


        :return: The actions of this Functionality.
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Functionality.


        :param actions: The actions of this Functionality.
        :type actions: list[str]
        """

        self._actions = actions

    @property
    def attributes(self):
        """Gets the attributes of this Functionality.


        :return: The attributes of this Functionality.
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Functionality.


        :param attributes: The attributes of this Functionality.
        :type attributes: list[str]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def _class(self):
        """Gets the _class of this Functionality.


        :return: The _class of this Functionality.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Functionality.


        :param _class: The _class of this Functionality.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")
        if _class is not None and len(_class) < 2:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `2`")
        if _class is not None and not re.search(r'^[A-Z][A-Za-z0-9]+$', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/^[A-Z][A-Za-z0-9]+$/`")

        self.__class = _class

    @property
    def device(self):
        """Gets the device of this Functionality.

        Unique identifier of the *Device*

        :return: The device of this Functionality.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Functionality.

        Unique identifier of the *Device*

        :param device: The device of this Functionality.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")
        if device is not None and len(device) > 22:
            raise ValueError("Invalid value for `device`, length must be less than or equal to `22`")
        if device is not None and len(device) < 22:
            raise ValueError("Invalid value for `device`, length must be greater than or equal to `22`")
        if device is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', device):
            raise ValueError("Invalid value for `device`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._device = device

    @property
    def endpoint(self):
        """Gets the endpoint of this Functionality.


        :return: The endpoint of this Functionality.
        :rtype: int
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Functionality.


        :param endpoint: The endpoint of this Functionality.
        :type endpoint: int
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")
        if endpoint is not None and endpoint > 255:
            raise ValueError("Invalid value for `endpoint`, must be a value less than or equal to `255`")
        if endpoint is not None and endpoint < 0:
            raise ValueError("Invalid value for `endpoint`, must be a value greater than or equal to `0`")

        self._endpoint = endpoint

    @property
    def metadata(self):
        """Gets the metadata of this Functionality.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :return: The metadata of this Functionality.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Functionality.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :param metadata: The metadata of this Functionality.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Functionality.

        Free functionality name

        :return: The name of this Functionality.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Functionality.

        Free functionality name

        :param name: The name of this Functionality.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this Functionality.


        :return: The tags of this Functionality.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Functionality.


        :param tags: The tags of this Functionality.
        :type tags: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
