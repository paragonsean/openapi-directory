# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ProgramResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: str=None, href: str=None, id: str=None):
        """ProgramResource - a model defined in OpenAPI

        :param entity: The entity of this ProgramResource.
        :param href: The href of this ProgramResource.
        :param id: The id of this ProgramResource.
        """
        self.openapi_types = {
            'entity': str,
            'href': str,
            'id': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'href': 'href',
            'id': 'id'
        }

        self._entity = entity
        self._href = href
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgramResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgramResource of this ProgramResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this ProgramResource.


        :return: The entity of this ProgramResource.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ProgramResource.


        :param entity: The entity of this ProgramResource.
        :type entity: str
        """
        allowed_values = ["Program"]  # noqa: E501
        if entity not in allowed_values:
            raise ValueError(
                "Invalid value for `entity` ({0}), must be one of {1}"
                .format(entity, allowed_values)
            )

        self._entity = entity

    @property
    def href(self):
        """Gets the href of this ProgramResource.


        :return: The href of this ProgramResource.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ProgramResource.


        :param href: The href of this ProgramResource.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")
        if href is not None and len(href) < 1:
            raise ValueError("Invalid value for `href`, length must be greater than or equal to `1`")

        self._href = href

    @property
    def id(self):
        """Gets the id of this ProgramResource.

        Unique identifier of the *Program*

        :return: The id of this ProgramResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProgramResource.

        Unique identifier of the *Program*

        :param id: The id of this ProgramResource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id
