# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeviceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, _class: str=None, id: str=None, is_online: bool=None, metadata: Dict[str, object]=None, name: str=None, place: str=None, tags: list[str]=None):
        """DeviceItem - a model defined in OpenAPI

        :param address: The address of this DeviceItem.
        :param _class: The _class of this DeviceItem.
        :param id: The id of this DeviceItem.
        :param is_online: The is_online of this DeviceItem.
        :param metadata: The metadata of this DeviceItem.
        :param name: The name of this DeviceItem.
        :param place: The place of this DeviceItem.
        :param tags: The tags of this DeviceItem.
        """
        self.openapi_types = {
            'address': str,
            '_class': str,
            'id': str,
            'is_online': bool,
            'metadata': Dict[str, object],
            'name': str,
            'place': str,
            'tags': list[str]
        }

        self.attribute_map = {
            'address': 'address',
            '_class': 'class',
            'id': 'id',
            'is_online': 'isOnline',
            'metadata': 'metadata',
            'name': 'name',
            'place': 'place',
            'tags': 'tags'
        }

        self._address = address
        self.__class = _class
        self._id = id
        self._is_online = is_online
        self._metadata = metadata
        self._name = name
        self._place = place
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceItem of this DeviceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this DeviceItem.


        :return: The address of this DeviceItem.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DeviceItem.


        :param address: The address of this DeviceItem.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")
        if address is not None and not re.search(r'^[A-Z0-9]{1,32}$', address):
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^[A-Z0-9]{1,32}$/`")

        self._address = address

    @property
    def _class(self):
        """Gets the _class of this DeviceItem.


        :return: The _class of this DeviceItem.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this DeviceItem.


        :param _class: The _class of this DeviceItem.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")
        if _class is not None and len(_class) > 4:
            raise ValueError("Invalid value for `_class`, length must be less than or equal to `4`")
        if _class is not None and len(_class) < 4:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `4`")
        if _class is not None and not re.search(r'^[A-Z][A-Z0-9]{3}$', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/^[A-Z][A-Z0-9]{3}$/`")

        self.__class = _class

    @property
    def id(self):
        """Gets the id of this DeviceItem.

        Unique identifier of the *Device*

        :return: The id of this DeviceItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceItem.

        Unique identifier of the *Device*

        :param id: The id of this DeviceItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id

    @property
    def is_online(self):
        """Gets the is_online of this DeviceItem.


        :return: The is_online of this DeviceItem.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this DeviceItem.


        :param is_online: The is_online of this DeviceItem.
        :type is_online: bool
        """
        if is_online is None:
            raise ValueError("Invalid value for `is_online`, must not be `None`")

        self._is_online = is_online

    @property
    def metadata(self):
        """Gets the metadata of this DeviceItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :return: The metadata of this DeviceItem.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DeviceItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :param metadata: The metadata of this DeviceItem.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this DeviceItem.

        Name of the *Device* as defined by the user. Can be used for user interfaces.

        :return: The name of this DeviceItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceItem.

        Name of the *Device* as defined by the user. Can be used for user interfaces.

        :param name: The name of this DeviceItem.
        :type name: str
        """
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")

        self._name = name

    @property
    def place(self):
        """Gets the place of this DeviceItem.

        Unique identifier of the *Place*

        :return: The place of this DeviceItem.
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this DeviceItem.

        Unique identifier of the *Place*

        :param place: The place of this DeviceItem.
        :type place: str
        """
        if place is None:
            raise ValueError("Invalid value for `place`, must not be `None`")
        if place is not None and len(place) > 22:
            raise ValueError("Invalid value for `place`, length must be less than or equal to `22`")
        if place is not None and len(place) < 22:
            raise ValueError("Invalid value for `place`, length must be greater than or equal to `22`")
        if place is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', place):
            raise ValueError("Invalid value for `place`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._place = place

    @property
    def tags(self):
        """Gets the tags of this DeviceItem.


        :return: The tags of this DeviceItem.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DeviceItem.


        :param tags: The tags of this DeviceItem.
        :type tags: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
