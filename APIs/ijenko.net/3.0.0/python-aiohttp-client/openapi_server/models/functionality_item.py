# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class FunctionalityItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, device: str=None, endpoint: int=None, id: str=None, metadata: Dict[str, object]=None, name: str=None, tags: list[str]=None):
        """FunctionalityItem - a model defined in OpenAPI

        :param _class: The _class of this FunctionalityItem.
        :param device: The device of this FunctionalityItem.
        :param endpoint: The endpoint of this FunctionalityItem.
        :param id: The id of this FunctionalityItem.
        :param metadata: The metadata of this FunctionalityItem.
        :param name: The name of this FunctionalityItem.
        :param tags: The tags of this FunctionalityItem.
        """
        self.openapi_types = {
            '_class': str,
            'device': str,
            'endpoint': int,
            'id': str,
            'metadata': Dict[str, object],
            'name': str,
            'tags': list[str]
        }

        self.attribute_map = {
            '_class': 'class',
            'device': 'device',
            'endpoint': 'endpoint',
            'id': 'id',
            'metadata': 'metadata',
            'name': 'name',
            'tags': 'tags'
        }

        self.__class = _class
        self._device = device
        self._endpoint = endpoint
        self._id = id
        self._metadata = metadata
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionalityItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FunctionalityItem of this FunctionalityItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this FunctionalityItem.


        :return: The _class of this FunctionalityItem.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this FunctionalityItem.


        :param _class: The _class of this FunctionalityItem.
        :type _class: str
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")
        if _class is not None and len(_class) < 2:
            raise ValueError("Invalid value for `_class`, length must be greater than or equal to `2`")
        if _class is not None and not re.search(r'^[A-Z][A-Za-z0-9]+$', _class):
            raise ValueError("Invalid value for `_class`, must be a follow pattern or equal to `/^[A-Z][A-Za-z0-9]+$/`")

        self.__class = _class

    @property
    def device(self):
        """Gets the device of this FunctionalityItem.

        Unique identifier of the *Device*

        :return: The device of this FunctionalityItem.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this FunctionalityItem.

        Unique identifier of the *Device*

        :param device: The device of this FunctionalityItem.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")
        if device is not None and len(device) > 22:
            raise ValueError("Invalid value for `device`, length must be less than or equal to `22`")
        if device is not None and len(device) < 22:
            raise ValueError("Invalid value for `device`, length must be greater than or equal to `22`")
        if device is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', device):
            raise ValueError("Invalid value for `device`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._device = device

    @property
    def endpoint(self):
        """Gets the endpoint of this FunctionalityItem.


        :return: The endpoint of this FunctionalityItem.
        :rtype: int
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this FunctionalityItem.


        :param endpoint: The endpoint of this FunctionalityItem.
        :type endpoint: int
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")
        if endpoint is not None and endpoint > 255:
            raise ValueError("Invalid value for `endpoint`, must be a value less than or equal to `255`")
        if endpoint is not None and endpoint < 0:
            raise ValueError("Invalid value for `endpoint`, must be a value greater than or equal to `0`")

        self._endpoint = endpoint

    @property
    def id(self):
        """Gets the id of this FunctionalityItem.

        Unique identifier of the *Functionality*

        :return: The id of this FunctionalityItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FunctionalityItem.

        Unique identifier of the *Functionality*

        :param id: The id of this FunctionalityItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this FunctionalityItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :return: The metadata of this FunctionalityItem.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this FunctionalityItem.

        Subset of metadata attached to the resource selected using the 'embed-metadata' parameter

        :param metadata: The metadata of this FunctionalityItem.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this FunctionalityItem.

        Free functionality name

        :return: The name of this FunctionalityItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FunctionalityItem.

        Free functionality name

        :param name: The name of this FunctionalityItem.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this FunctionalityItem.


        :return: The tags of this FunctionalityItem.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FunctionalityItem.


        :param tags: The tags of this FunctionalityItem.
        :type tags: list[str]
        """

        self._tags = tags
