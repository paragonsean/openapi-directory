# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, country: str=None, metadata: Dict[str, object]=None, name: str=None, time_zone: str=None, zip_code: str=None):
        """Place - a model defined in OpenAPI

        :param account: The account of this Place.
        :param country: The country of this Place.
        :param metadata: The metadata of this Place.
        :param name: The name of this Place.
        :param time_zone: The time_zone of this Place.
        :param zip_code: The zip_code of this Place.
        """
        self.openapi_types = {
            'account': str,
            'country': str,
            'metadata': Dict[str, object],
            'name': str,
            'time_zone': str,
            'zip_code': str
        }

        self.attribute_map = {
            'account': 'account',
            'country': 'country',
            'metadata': 'metadata',
            'name': 'name',
            'time_zone': 'timeZone',
            'zip_code': 'zipCode'
        }

        self._account = account
        self._country = country
        self._metadata = metadata
        self._name = name
        self._time_zone = time_zone
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Place.

        Unique identifier of the *Account*

        :return: The account of this Place.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Place.

        Unique identifier of the *Account*

        :param account: The account of this Place.
        :type account: str
        """
        if account is not None and len(account) > 22:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `22`")
        if account is not None and len(account) < 22:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `22`")
        if account is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', account):
            raise ValueError("Invalid value for `account`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._account = account

    @property
    def country(self):
        """Gets the country of this Place.

        Country code (ISO 3166-1 alpha-2)

        :return: The country of this Place.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Place.

        Country code (ISO 3166-1 alpha-2)

        :param country: The country of this Place.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")
        if country is not None and not re.search(r'^[A-Z][A-Z]$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z][A-Z]$/`")

        self._country = country

    @property
    def metadata(self):
        """Gets the metadata of this Place.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :return: The metadata of this Place.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Place.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :param metadata: The metadata of this Place.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this Place.


        :return: The name of this Place.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Place.


        :param name: The name of this Place.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def time_zone(self):
        """Gets the time_zone of this Place.

        A time zone name from the Time Zone Database at https://www.iana.org/time-zones

        :return: The time_zone of this Place.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Place.

        A time zone name from the Time Zone Database at https://www.iana.org/time-zones

        :param time_zone: The time_zone of this Place.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")
        if time_zone is not None and len(time_zone) < 2:
            raise ValueError("Invalid value for `time_zone`, length must be greater than or equal to `2`")
        if time_zone is not None and not re.search(r'^[A-Z][A-Za-z0-9-_+]+(?:\/[A-Z][A-Za-z0-9-_+]+)*$', time_zone):
            raise ValueError("Invalid value for `time_zone`, must be a follow pattern or equal to `/^[A-Z][A-Za-z0-9-_+]+(?:\/[A-Z][A-Za-z0-9-_+]+)*$/`")

        self._time_zone = time_zone

    @property
    def zip_code(self):
        """Gets the zip_code of this Place.

        Postal code

        :return: The zip_code of this Place.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Place.

        Postal code

        :param zip_code: The zip_code of this Place.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")
        if zip_code is not None and len(zip_code) > 10:
            raise ValueError("Invalid value for `zip_code`, length must be less than or equal to `10`")
        if zip_code is not None and len(zip_code) < 0:
            raise ValueError("Invalid value for `zip_code`, length must be greater than or equal to `0`")
        if zip_code is not None and not re.search(r'^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$', zip_code):
            raise ValueError("Invalid value for `zip_code`, must be a follow pattern or equal to `/^(?:[A-Z0-9](?:[A-Z0-9][- ]?)*[A-Z0-9])?$/`")

        self._zip_code = zip_code
