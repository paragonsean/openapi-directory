# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_item import PlaceItem
from openapi_server.models.user_item import UserItem
from openapi_server import util


class UserTokenItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_name: str=None, id: str=None, last_use: datetime=None, places: list[PlaceItem]=None, refresh_token_expires: datetime=None, _self: bool=None, user: UserItem=None):
        """UserTokenItem - a model defined in OpenAPI

        :param app_name: The app_name of this UserTokenItem.
        :param id: The id of this UserTokenItem.
        :param last_use: The last_use of this UserTokenItem.
        :param places: The places of this UserTokenItem.
        :param refresh_token_expires: The refresh_token_expires of this UserTokenItem.
        :param _self: The _self of this UserTokenItem.
        :param user: The user of this UserTokenItem.
        """
        self.openapi_types = {
            'app_name': str,
            'id': str,
            'last_use': datetime,
            'places': list[PlaceItem],
            'refresh_token_expires': datetime,
            '_self': bool,
            'user': UserItem
        }

        self.attribute_map = {
            'app_name': 'appName',
            'id': 'id',
            'last_use': 'lastUse',
            'places': 'places',
            'refresh_token_expires': 'refreshTokenExpires',
            '_self': 'self',
            'user': 'user'
        }

        self._app_name = app_name
        self._id = id
        self._last_use = last_use
        self._places = places
        self._refresh_token_expires = refresh_token_expires
        self.__self = _self
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserTokenItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserTokenItem of this UserTokenItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_name(self):
        """Gets the app_name of this UserTokenItem.

        Application name

        :return: The app_name of this UserTokenItem.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this UserTokenItem.

        Application name

        :param app_name: The app_name of this UserTokenItem.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def id(self):
        """Gets the id of this UserTokenItem.


        :return: The id of this UserTokenItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserTokenItem.


        :param id: The id of this UserTokenItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def last_use(self):
        """Gets the last_use of this UserTokenItem.

        Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.

        :return: The last_use of this UserTokenItem.
        :rtype: datetime
        """
        return self._last_use

    @last_use.setter
    def last_use(self, last_use):
        """Sets the last_use of this UserTokenItem.

        Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.

        :param last_use: The last_use of this UserTokenItem.
        :type last_use: datetime
        """

        self._last_use = last_use

    @property
    def places(self):
        """Gets the places of this UserTokenItem.

        List of Places to which the User has access. If absent, it means any Place of the account are allowed.

        :return: The places of this UserTokenItem.
        :rtype: list[PlaceItem]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this UserTokenItem.

        List of Places to which the User has access. If absent, it means any Place of the account are allowed.

        :param places: The places of this UserTokenItem.
        :type places: list[PlaceItem]
        """

        self._places = places

    @property
    def refresh_token_expires(self):
        """Gets the refresh_token_expires of this UserTokenItem.

        If absent, infinite validity.

        :return: The refresh_token_expires of this UserTokenItem.
        :rtype: datetime
        """
        return self._refresh_token_expires

    @refresh_token_expires.setter
    def refresh_token_expires(self, refresh_token_expires):
        """Sets the refresh_token_expires of this UserTokenItem.

        If absent, infinite validity.

        :param refresh_token_expires: The refresh_token_expires of this UserTokenItem.
        :type refresh_token_expires: datetime
        """

        self._refresh_token_expires = refresh_token_expires

    @property
    def _self(self):
        """Gets the _self of this UserTokenItem.

        True if this token is the one used for this API request

        :return: The _self of this UserTokenItem.
        :rtype: bool
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UserTokenItem.

        True if this token is the one used for this API request

        :param _self: The _self of this UserTokenItem.
        :type _self: bool
        """

        self.__self = _self

    @property
    def user(self):
        """Gets the user of this UserTokenItem.


        :return: The user of this UserTokenItem.
        :rtype: UserItem
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserTokenItem.


        :param user: The user of this UserTokenItem.
        :type user: UserItem
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
