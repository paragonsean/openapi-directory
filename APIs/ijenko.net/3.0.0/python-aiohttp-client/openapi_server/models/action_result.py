# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ActionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functionality: str=None, result: List[object]=None, status: int=None):
        """ActionResult - a model defined in OpenAPI

        :param functionality: The functionality of this ActionResult.
        :param result: The result of this ActionResult.
        :param status: The status of this ActionResult.
        """
        self.openapi_types = {
            'functionality': str,
            'result': List[object],
            'status': int
        }

        self.attribute_map = {
            'functionality': 'functionality',
            'result': 'result',
            'status': 'status'
        }

        self._functionality = functionality
        self._result = result
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionResult of this ActionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functionality(self):
        """Gets the functionality of this ActionResult.

        Unique identifier of the *Functionality*

        :return: The functionality of this ActionResult.
        :rtype: str
        """
        return self._functionality

    @functionality.setter
    def functionality(self, functionality):
        """Sets the functionality of this ActionResult.

        Unique identifier of the *Functionality*

        :param functionality: The functionality of this ActionResult.
        :type functionality: str
        """
        if functionality is not None and len(functionality) > 22:
            raise ValueError("Invalid value for `functionality`, length must be less than or equal to `22`")
        if functionality is not None and len(functionality) < 22:
            raise ValueError("Invalid value for `functionality`, length must be greater than or equal to `22`")
        if functionality is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', functionality):
            raise ValueError("Invalid value for `functionality`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._functionality = functionality

    @property
    def result(self):
        """Gets the result of this ActionResult.


        :return: The result of this ActionResult.
        :rtype: List[object]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ActionResult.


        :param result: The result of this ActionResult.
        :type result: List[object]
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this ActionResult.

        Return code (HTTP status code)

        :return: The status of this ActionResult.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionResult.

        Return code (HTTP status code)

        :param status: The status of this ActionResult.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if status is not None and status > 599:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `599`")
        if status is not None and status < 200:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `200`")

        self._status = status
