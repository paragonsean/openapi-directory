# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UserMe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id: str=None, locale: str=None, login: str=None, metadata: Dict[str, object]=None, name: str=None, phone_number: str=None):
        """UserMe - a model defined in OpenAPI

        :param email: The email of this UserMe.
        :param id: The id of this UserMe.
        :param locale: The locale of this UserMe.
        :param login: The login of this UserMe.
        :param metadata: The metadata of this UserMe.
        :param name: The name of this UserMe.
        :param phone_number: The phone_number of this UserMe.
        """
        self.openapi_types = {
            'email': str,
            'id': str,
            'locale': str,
            'login': str,
            'metadata': Dict[str, object],
            'name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'email': 'email',
            'id': 'id',
            'locale': 'locale',
            'login': 'login',
            'metadata': 'metadata',
            'name': 'name',
            'phone_number': 'phoneNumber'
        }

        self._email = email
        self._id = id
        self._locale = locale
        self._login = login
        self._metadata = metadata
        self._name = name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMe of this UserMe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserMe.


        :return: The email of this UserMe.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserMe.


        :param email: The email of this UserMe.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 6:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `6`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserMe.

        Unique identifier of the *User*

        :return: The id of this UserMe.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserMe.

        Unique identifier of the *User*

        :param id: The id of this UserMe.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 22:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `22`")
        if id is not None and len(id) < 22:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `22`")
        if id is not None and not re.search(r'^[A-Za-z0-9-_]{22}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{22}$/`")

        self._id = id

    @property
    def locale(self):
        """Gets the locale of this UserMe.

        Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 

        :return: The locale of this UserMe.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserMe.

        Locale identifier (language, region). See https://tools.ietf.org/html/rfc5646 and https://www.iana.org/assignments/lang-subtags-templates/lang-subtags-templates.xhtml . 

        :param locale: The locale of this UserMe.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")
        if locale is not None and len(locale) < 2:
            raise ValueError("Invalid value for `locale`, length must be greater than or equal to `2`")
        if locale is not None and not re.search(r'^[a-z]{2}[A-Za-z0-9-]*$', locale):
            raise ValueError("Invalid value for `locale`, must be a follow pattern or equal to `/^[a-z]{2}[A-Za-z0-9-]*$/`")

        self._locale = locale

    @property
    def login(self):
        """Gets the login of this UserMe.


        :return: The login of this UserMe.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserMe.


        :param login: The login of this UserMe.
        :type login: str
        """
        if login is not None and len(login) < 1:
            raise ValueError("Invalid value for `login`, length must be greater than or equal to `1`")

        self._login = login

    @property
    def metadata(self):
        """Gets the metadata of this UserMe.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :return: The metadata of this UserMe.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UserMe.

        Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value.

        :param metadata: The metadata of this UserMe.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this UserMe.


        :return: The name of this UserMe.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserMe.


        :param name: The name of this UserMe.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this UserMe.

        Phone number of the *User* in international format, for SMS notifications.

        :return: The phone_number of this UserMe.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserMe.

        Phone number of the *User* in international format, for SMS notifications.

        :param phone_number: The phone_number of this UserMe.
        :type phone_number: str
        """
        if phone_number is not None and len(phone_number) < 6:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `6`")
        if phone_number is not None and not re.search(r'^\+[0-9]{5,}$', phone_number):
            raise ValueError("Invalid value for `phone_number`, must be a follow pattern or equal to `/^\+[0-9]{5,}$/`")

        self._phone_number = phone_number
