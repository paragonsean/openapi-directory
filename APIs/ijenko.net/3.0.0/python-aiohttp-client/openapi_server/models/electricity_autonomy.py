# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.electricity_status_code import ElectricityStatusCode
from openapi_server import util


class ElectricityAutonomy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autonomy: float=None, code: ElectricityStatusCode=None, _from: datetime=None, message: str=None, to: datetime=None):
        """ElectricityAutonomy - a model defined in OpenAPI

        :param autonomy: The autonomy of this ElectricityAutonomy.
        :param code: The code of this ElectricityAutonomy.
        :param _from: The _from of this ElectricityAutonomy.
        :param message: The message of this ElectricityAutonomy.
        :param to: The to of this ElectricityAutonomy.
        """
        self.openapi_types = {
            'autonomy': float,
            'code': ElectricityStatusCode,
            '_from': datetime,
            'message': str,
            'to': datetime
        }

        self.attribute_map = {
            'autonomy': 'autonomy',
            'code': 'code',
            '_from': 'from',
            'message': 'message',
            'to': 'to'
        }

        self._autonomy = autonomy
        self._code = code
        self.__from = _from
        self._message = message
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectricityAutonomy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectricityAutonomy of this ElectricityAutonomy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autonomy(self):
        """Gets the autonomy of this ElectricityAutonomy.

        Average electricity autonomy in % (value in range [0, 1], rounded)

        :return: The autonomy of this ElectricityAutonomy.
        :rtype: float
        """
        return self._autonomy

    @autonomy.setter
    def autonomy(self, autonomy):
        """Sets the autonomy of this ElectricityAutonomy.

        Average electricity autonomy in % (value in range [0, 1], rounded)

        :param autonomy: The autonomy of this ElectricityAutonomy.
        :type autonomy: float
        """
        if autonomy is not None and autonomy > 1:
            raise ValueError("Invalid value for `autonomy`, must be a value less than or equal to `1`")
        if autonomy is not None and autonomy < 0:
            raise ValueError("Invalid value for `autonomy`, must be a value greater than or equal to `0`")

        self._autonomy = autonomy

    @property
    def code(self):
        """Gets the code of this ElectricityAutonomy.


        :return: The code of this ElectricityAutonomy.
        :rtype: ElectricityStatusCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ElectricityAutonomy.


        :param code: The code of this ElectricityAutonomy.
        :type code: ElectricityStatusCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def _from(self):
        """Gets the _from of this ElectricityAutonomy.


        :return: The _from of this ElectricityAutonomy.
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ElectricityAutonomy.


        :param _from: The _from of this ElectricityAutonomy.
        :type _from: datetime
        """

        self.__from = _from

    @property
    def message(self):
        """Gets the message of this ElectricityAutonomy.

        Message for cases where computation is not possible (codes 200001, 200002)

        :return: The message of this ElectricityAutonomy.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ElectricityAutonomy.

        Message for cases where computation is not possible (codes 200001, 200002)

        :param message: The message of this ElectricityAutonomy.
        :type message: str
        """
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def to(self):
        """Gets the to of this ElectricityAutonomy.


        :return: The to of this ElectricityAutonomy.
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ElectricityAutonomy.


        :param to: The to of this ElectricityAutonomy.
        :type to: datetime
        """

        self._to = to
