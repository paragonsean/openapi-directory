# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.electricity_missing_flows import ElectricityMissingFlows
from openapi_server.models.electricity_status_code import ElectricityStatusCode
from openapi_server.models.electricity_virtual_flows import ElectricityVirtualFlows
from openapi_server import util


class ElectricityFlows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: ElectricityStatusCode=None, flows: ElectricityVirtualFlows=None, message: str=None, missing: ElectricityMissingFlows=None):
        """ElectricityFlows - a model defined in OpenAPI

        :param code: The code of this ElectricityFlows.
        :param flows: The flows of this ElectricityFlows.
        :param message: The message of this ElectricityFlows.
        :param missing: The missing of this ElectricityFlows.
        """
        self.openapi_types = {
            'code': ElectricityStatusCode,
            'flows': ElectricityVirtualFlows,
            'message': str,
            'missing': ElectricityMissingFlows
        }

        self.attribute_map = {
            'code': 'code',
            'flows': 'flows',
            'message': 'message',
            'missing': 'missing'
        }

        self._code = code
        self._flows = flows
        self._message = message
        self._missing = missing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElectricityFlows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElectricityFlows of this ElectricityFlows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ElectricityFlows.


        :return: The code of this ElectricityFlows.
        :rtype: ElectricityStatusCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ElectricityFlows.


        :param code: The code of this ElectricityFlows.
        :type code: ElectricityStatusCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def flows(self):
        """Gets the flows of this ElectricityFlows.


        :return: The flows of this ElectricityFlows.
        :rtype: ElectricityVirtualFlows
        """
        return self._flows

    @flows.setter
    def flows(self, flows):
        """Sets the flows of this ElectricityFlows.


        :param flows: The flows of this ElectricityFlows.
        :type flows: ElectricityVirtualFlows
        """

        self._flows = flows

    @property
    def message(self):
        """Gets the message of this ElectricityFlows.

        Message for cases where computation is not possible (codes 200001, 200002)

        :return: The message of this ElectricityFlows.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ElectricityFlows.

        Message for cases where computation is not possible (codes 200001, 200002)

        :param message: The message of this ElectricityFlows.
        :type message: str
        """
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message

    @property
    def missing(self):
        """Gets the missing of this ElectricityFlows.


        :return: The missing of this ElectricityFlows.
        :rtype: ElectricityMissingFlows
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this ElectricityFlows.


        :param missing: The missing of this ElectricityFlows.
        :type missing: ElectricityMissingFlows
        """

        self._missing = missing
