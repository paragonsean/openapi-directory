/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserMe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserMe::OAIUserMe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserMe::OAIUserMe() {
    this->initializeModel();
}

OAIUserMe::~OAIUserMe() {}

void OAIUserMe::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;
}

void OAIUserMe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserMe::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;
}

QString OAIUserMe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserMe::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    return obj;
}

QString OAIUserMe::getEmail() const {
    return m_email;
}
void OAIUserMe::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserMe::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserMe::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserMe::getId() const {
    return m_id;
}
void OAIUserMe::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserMe::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserMe::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserMe::getLocale() const {
    return m_locale;
}
void OAIUserMe::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUserMe::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUserMe::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUserMe::getLogin() const {
    return m_login;
}
void OAIUserMe::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUserMe::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUserMe::is_login_Valid() const{
    return m_login_isValid;
}

QMap<QString, OAIObject> OAIUserMe::getMetadata() const {
    return m_metadata;
}
void OAIUserMe::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUserMe::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUserMe::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIUserMe::getName() const {
    return m_name;
}
void OAIUserMe::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserMe::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserMe::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserMe::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUserMe::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUserMe::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUserMe::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAIUserMe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserMe::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_id_isValid && m_locale_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
