/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace::OAIPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace::OAIPlace() {
    this->initializeModel();
}

OAIPlace::~OAIPlace() {}

void OAIPlace::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAIPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIPlace::getAccount() const {
    return m_account;
}
void OAIPlace::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPlace::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPlace::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIPlace::getCountry() const {
    return m_country;
}
void OAIPlace::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlace::is_country_Valid() const{
    return m_country_isValid;
}

QMap<QString, OAIObject> OAIPlace::getMetadata() const {
    return m_metadata;
}
void OAIPlace::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPlace::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPlace::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPlace::getName() const {
    return m_name;
}
void OAIPlace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlace::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlace::getTimeZone() const {
    return m_time_zone;
}
void OAIPlace::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIPlace::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIPlace::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIPlace::getZipCode() const {
    return m_zip_code;
}
void OAIPlace::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIPlace::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIPlace::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_name_isValid && m_time_zone_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
