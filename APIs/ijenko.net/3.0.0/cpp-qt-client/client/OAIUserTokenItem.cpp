/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserTokenItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserTokenItem::OAIUserTokenItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserTokenItem::OAIUserTokenItem() {
    this->initializeModel();
}

OAIUserTokenItem::~OAIUserTokenItem() {}

void OAIUserTokenItem::initializeModel() {

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_use_isSet = false;
    m_last_use_isValid = false;

    m_places_isSet = false;
    m_places_isValid = false;

    m_refresh_token_expires_isSet = false;
    m_refresh_token_expires_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserTokenItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserTokenItem::fromJsonObject(QJsonObject json) {

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_use_isValid = ::OpenAPI::fromJsonValue(m_last_use, json[QString("lastUse")]);
    m_last_use_isSet = !json[QString("lastUse")].isNull() && m_last_use_isValid;

    m_places_isValid = ::OpenAPI::fromJsonValue(m_places, json[QString("places")]);
    m_places_isSet = !json[QString("places")].isNull() && m_places_isValid;

    m_refresh_token_expires_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_expires, json[QString("refreshTokenExpires")]);
    m_refresh_token_expires_isSet = !json[QString("refreshTokenExpires")].isNull() && m_refresh_token_expires_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserTokenItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserTokenItem::asJsonObject() const {
    QJsonObject obj;
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_use_isSet) {
        obj.insert(QString("lastUse"), ::OpenAPI::toJsonValue(m_last_use));
    }
    if (m_places.size() > 0) {
        obj.insert(QString("places"), ::OpenAPI::toJsonValue(m_places));
    }
    if (m_refresh_token_expires_isSet) {
        obj.insert(QString("refreshTokenExpires"), ::OpenAPI::toJsonValue(m_refresh_token_expires));
    }
    if (m_self_isSet) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIUserTokenItem::getAppName() const {
    return m_app_name;
}
void OAIUserTokenItem::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIUserTokenItem::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIUserTokenItem::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIUserTokenItem::getId() const {
    return m_id;
}
void OAIUserTokenItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserTokenItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserTokenItem::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIUserTokenItem::getLastUse() const {
    return m_last_use;
}
void OAIUserTokenItem::setLastUse(const QDateTime &last_use) {
    m_last_use = last_use;
    m_last_use_isSet = true;
}

bool OAIUserTokenItem::is_last_use_Set() const{
    return m_last_use_isSet;
}

bool OAIUserTokenItem::is_last_use_Valid() const{
    return m_last_use_isValid;
}

QSet<OAIPlaceItem> OAIUserTokenItem::getPlaces() const {
    return m_places;
}
void OAIUserTokenItem::setPlaces(const QSet<OAIPlaceItem> &places) {
    m_places = places;
    m_places_isSet = true;
}

bool OAIUserTokenItem::is_places_Set() const{
    return m_places_isSet;
}

bool OAIUserTokenItem::is_places_Valid() const{
    return m_places_isValid;
}

QDateTime OAIUserTokenItem::getRefreshTokenExpires() const {
    return m_refresh_token_expires;
}
void OAIUserTokenItem::setRefreshTokenExpires(const QDateTime &refresh_token_expires) {
    m_refresh_token_expires = refresh_token_expires;
    m_refresh_token_expires_isSet = true;
}

bool OAIUserTokenItem::is_refresh_token_expires_Set() const{
    return m_refresh_token_expires_isSet;
}

bool OAIUserTokenItem::is_refresh_token_expires_Valid() const{
    return m_refresh_token_expires_isValid;
}

bool OAIUserTokenItem::isSelf() const {
    return m_self;
}
void OAIUserTokenItem::setSelf(const bool &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIUserTokenItem::is_self_Set() const{
    return m_self_isSet;
}

bool OAIUserTokenItem::is_self_Valid() const{
    return m_self_isValid;
}

OAIUserItem OAIUserTokenItem::getUser() const {
    return m_user;
}
void OAIUserTokenItem::setUser(const OAIUserItem &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserTokenItem::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserTokenItem::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserTokenItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_places.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserTokenItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_name_isValid && m_id_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
