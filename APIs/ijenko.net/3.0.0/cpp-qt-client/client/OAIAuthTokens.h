/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuthTokens.h
 *
 * 
 */

#ifndef OAIAuthTokens_H
#define OAIAuthTokens_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAuthTokens : public OAIObject {
public:
    OAIAuthTokens();
    OAIAuthTokens(QString json);
    ~OAIAuthTokens() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccessToken() const;
    void setAccessToken(const QString &access_token);
    bool is_access_token_Set() const;
    bool is_access_token_Valid() const;

    QDateTime getAccessTokenExpires() const;
    void setAccessTokenExpires(const QDateTime &access_token_expires);
    bool is_access_token_expires_Set() const;
    bool is_access_token_expires_Valid() const;

    QString getRefreshToken() const;
    void setRefreshToken(const QString &refresh_token);
    bool is_refresh_token_Set() const;
    bool is_refresh_token_Valid() const;

    QDateTime getRefreshTokenExpires() const;
    void setRefreshTokenExpires(const QDateTime &refresh_token_expires);
    bool is_refresh_token_expires_Set() const;
    bool is_refresh_token_expires_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_access_token;
    bool m_access_token_isSet;
    bool m_access_token_isValid;

    QDateTime m_access_token_expires;
    bool m_access_token_expires_isSet;
    bool m_access_token_expires_isValid;

    QString m_refresh_token;
    bool m_refresh_token_isSet;
    bool m_refresh_token_isValid;

    QDateTime m_refresh_token_expires;
    bool m_refresh_token_expires_isSet;
    bool m_refresh_token_expires_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuthTokens)

#endif // OAIAuthTokens_H
