/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectricityFlows.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectricityFlows::OAIElectricityFlows(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectricityFlows::OAIElectricityFlows() {
    this->initializeModel();
}

OAIElectricityFlows::~OAIElectricityFlows() {}

void OAIElectricityFlows::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_flows_isSet = false;
    m_flows_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;
}

void OAIElectricityFlows::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectricityFlows::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_flows_isValid = ::OpenAPI::fromJsonValue(m_flows, json[QString("flows")]);
    m_flows_isSet = !json[QString("flows")].isNull() && m_flows_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("missing")]);
    m_missing_isSet = !json[QString("missing")].isNull() && m_missing_isValid;
}

QString OAIElectricityFlows::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectricityFlows::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_flows.isSet()) {
        obj.insert(QString("flows"), ::OpenAPI::toJsonValue(m_flows));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_missing.isSet()) {
        obj.insert(QString("missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    return obj;
}

OAIElectricityStatusCode OAIElectricityFlows::getCode() const {
    return m_code;
}
void OAIElectricityFlows::setCode(const OAIElectricityStatusCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIElectricityFlows::is_code_Set() const{
    return m_code_isSet;
}

bool OAIElectricityFlows::is_code_Valid() const{
    return m_code_isValid;
}

OAIElectricityVirtualFlows OAIElectricityFlows::getFlows() const {
    return m_flows;
}
void OAIElectricityFlows::setFlows(const OAIElectricityVirtualFlows &flows) {
    m_flows = flows;
    m_flows_isSet = true;
}

bool OAIElectricityFlows::is_flows_Set() const{
    return m_flows_isSet;
}

bool OAIElectricityFlows::is_flows_Valid() const{
    return m_flows_isValid;
}

QString OAIElectricityFlows::getMessage() const {
    return m_message;
}
void OAIElectricityFlows::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIElectricityFlows::is_message_Set() const{
    return m_message_isSet;
}

bool OAIElectricityFlows::is_message_Valid() const{
    return m_message_isValid;
}

OAIElectricityMissingFlows OAIElectricityFlows::getMissing() const {
    return m_missing;
}
void OAIElectricityFlows::setMissing(const OAIElectricityMissingFlows &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAIElectricityFlows::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAIElectricityFlows::is_missing_Valid() const{
    return m_missing_isValid;
}

bool OAIElectricityFlows::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectricityFlows::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
