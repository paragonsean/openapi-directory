/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBusItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBusItem::OAIBusItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBusItem::OAIBusItem() {
    this->initializeModel();
}

OAIBusItem::~OAIBusItem() {}

void OAIBusItem::initializeModel() {

    m_functionality_isSet = false;
    m_functionality_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIBusItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBusItem::fromJsonObject(QJsonObject json) {

    m_functionality_isValid = ::OpenAPI::fromJsonValue(m_functionality, json[QString("functionality")]);
    m_functionality_isSet = !json[QString("functionality")].isNull() && m_functionality_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIBusItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBusItem::asJsonObject() const {
    QJsonObject obj;
    if (m_functionality_isSet) {
        obj.insert(QString("functionality"), ::OpenAPI::toJsonValue(m_functionality));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

QString OAIBusItem::getFunctionality() const {
    return m_functionality;
}
void OAIBusItem::setFunctionality(const QString &functionality) {
    m_functionality = functionality;
    m_functionality_isSet = true;
}

bool OAIBusItem::is_functionality_Set() const{
    return m_functionality_isSet;
}

bool OAIBusItem::is_functionality_Valid() const{
    return m_functionality_isValid;
}

QString OAIBusItem::getId() const {
    return m_id;
}
void OAIBusItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBusItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBusItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBusItem::getProtocol() const {
    return m_protocol;
}
void OAIBusItem::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIBusItem::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIBusItem::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIBusItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_functionality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBusItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_functionality_isValid && m_id_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
