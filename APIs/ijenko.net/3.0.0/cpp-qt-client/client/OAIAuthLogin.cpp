/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthLogin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthLogin::OAIAuthLogin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthLogin::OAIAuthLogin() {
    this->initializeModel();
}

OAIAuthLogin::~OAIAuthLogin() {}

void OAIAuthLogin::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIAuthLogin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthLogin::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIAuthLogin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthLogin::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIAuthLogin::getAppId() const {
    return m_app_id;
}
void OAIAuthLogin::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAuthLogin::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAuthLogin::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAuthLogin::getLogin() const {
    return m_login;
}
void OAIAuthLogin::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIAuthLogin::is_login_Set() const{
    return m_login_isSet;
}

bool OAIAuthLogin::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIAuthLogin::getPassword() const {
    return m_password;
}
void OAIAuthLogin::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIAuthLogin::is_password_Set() const{
    return m_password_isSet;
}

bool OAIAuthLogin::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIAuthLogin::getTtl() const {
    return m_ttl;
}
void OAIAuthLogin::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIAuthLogin::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIAuthLogin::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIAuthLogin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthLogin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_login_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
