/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthChangePassword.h"
#include "OAIDefaultError.h"
#include "OAIErrorEntity.h"
#include "OAIMetadataPatch.h"
#include "OAIObject.h"
#include "OAIPlaceCreated.h"
#include "OAIPlaceItem.h"
#include "OAIPlaceNew.h"
#include "OAIUser.h"
#include "OAIUserCreated.h"
#include "OAIUserItem.h"
#include "OAIUserNew.h"
#include "OAIUserPatch.h"
#include "OAIUserTokenItem.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  change_password_info OAIAuthChangePassword [required]
    */
    virtual void account_changePassword(const OAIAuthChangePassword &change_password_info);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void account_deleteUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void account_getUser(const QString &user_id);

    /**
    * @param[in]  place OAIPlaceNew [optional]
    */
    virtual void account_newPlace(const ::OpenAPI::OptionalParam<OAIPlaceNew> &place = ::OpenAPI::OptionalParam<OAIPlaceNew>());

    /**
    * @param[in]  user_info OAIUserNew [required]
    */
    virtual void account_newUser(const OAIUserNew &user_info);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  user_patch OAIUserPatch [required]
    */
    virtual void account_patchUser(const QString &user_id, const OAIUserPatch &user_patch);


    virtual void account_places();

    /**
    * @param[in]  token_id QString [required]
    */
    virtual void account_revokeToken(const QString &token_id);


    virtual void account_tokens();

    /**
    * @param[in]  embed_metadata QList<QString> [optional]
    */
    virtual void account_users(const ::OpenAPI::OptionalParam<QList<QString>> &embed_metadata = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void user_getMetadata(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void user_patchMetadata(const QString &user_id, const OAIMetadataPatch &metadata_patch);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void account_changePasswordCallback(OAIHttpRequestWorker *worker);
    void account_deleteUserCallback(OAIHttpRequestWorker *worker);
    void account_getUserCallback(OAIHttpRequestWorker *worker);
    void account_newPlaceCallback(OAIHttpRequestWorker *worker);
    void account_newUserCallback(OAIHttpRequestWorker *worker);
    void account_patchUserCallback(OAIHttpRequestWorker *worker);
    void account_placesCallback(OAIHttpRequestWorker *worker);
    void account_revokeTokenCallback(OAIHttpRequestWorker *worker);
    void account_tokensCallback(OAIHttpRequestWorker *worker);
    void account_usersCallback(OAIHttpRequestWorker *worker);
    void user_getMetadataCallback(OAIHttpRequestWorker *worker);
    void user_patchMetadataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void account_changePasswordSignal();
    void account_deleteUserSignal();
    void account_getUserSignal(OAIUser summary);
    void account_newPlaceSignal(OAIPlaceCreated summary);
    void account_newUserSignal(OAIUserCreated summary);
    void account_patchUserSignal();
    void account_placesSignal(QSet<OAIPlaceItem> summary);
    void account_revokeTokenSignal();
    void account_tokensSignal(QSet<OAIUserTokenItem> summary);
    void account_usersSignal(QSet<OAIUserItem> summary);
    void user_getMetadataSignal(QMap<QString, OAIObject> summary);
    void user_patchMetadataSignal(QMap<QString, OAIObject> summary);


    void account_changePasswordSignalFull(OAIHttpRequestWorker *worker);
    void account_deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void account_getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void account_newPlaceSignalFull(OAIHttpRequestWorker *worker, OAIPlaceCreated summary);
    void account_newUserSignalFull(OAIHttpRequestWorker *worker, OAIUserCreated summary);
    void account_patchUserSignalFull(OAIHttpRequestWorker *worker);
    void account_placesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIPlaceItem> summary);
    void account_revokeTokenSignalFull(OAIHttpRequestWorker *worker);
    void account_tokensSignalFull(OAIHttpRequestWorker *worker, QSet<OAIUserTokenItem> summary);
    void account_usersSignalFull(OAIHttpRequestWorker *worker, QSet<OAIUserItem> summary);
    void user_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void user_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);

    Q_DECL_DEPRECATED_X("Use account_changePasswordSignalError() instead")
    void account_changePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_changePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_deleteUserSignalError() instead")
    void account_deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_getUserSignalError() instead")
    void account_getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_newPlaceSignalError() instead")
    void account_newPlaceSignalE(OAIPlaceCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_newPlaceSignalError(OAIPlaceCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_newUserSignalError() instead")
    void account_newUserSignalE(OAIUserCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_newUserSignalError(OAIUserCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_patchUserSignalError() instead")
    void account_patchUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_patchUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_placesSignalError() instead")
    void account_placesSignalE(QSet<OAIPlaceItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_placesSignalError(QSet<OAIPlaceItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_revokeTokenSignalError() instead")
    void account_revokeTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void account_revokeTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_tokensSignalError() instead")
    void account_tokensSignalE(QSet<OAIUserTokenItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_tokensSignalError(QSet<OAIUserTokenItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_usersSignalError() instead")
    void account_usersSignalE(QSet<OAIUserItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void account_usersSignalError(QSet<OAIUserItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_getMetadataSignalError() instead")
    void user_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_patchMetadataSignalError() instead")
    void user_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void user_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use account_changePasswordSignalErrorFull() instead")
    void account_changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_deleteUserSignalErrorFull() instead")
    void account_deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_getUserSignalErrorFull() instead")
    void account_getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_newPlaceSignalErrorFull() instead")
    void account_newPlaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_newPlaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_newUserSignalErrorFull() instead")
    void account_newUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_newUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_patchUserSignalErrorFull() instead")
    void account_patchUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_patchUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_placesSignalErrorFull() instead")
    void account_placesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_placesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_revokeTokenSignalErrorFull() instead")
    void account_revokeTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_revokeTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_tokensSignalErrorFull() instead")
    void account_tokensSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_tokensSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use account_usersSignalErrorFull() instead")
    void account_usersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void account_usersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_getMetadataSignalErrorFull() instead")
    void user_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use user_patchMetadataSignalErrorFull() instead")
    void user_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void user_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
