/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationApi_H
#define OAI_OAINotificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultError.h"
#include "OAIErrorEntity.h"
#include "OAIMetadataPatch.h"
#include "OAINotification.h"
#include "OAINotificationCreated.h"
#include "OAINotificationItem.h"
#include "OAINotificationNew.h"
#include "OAINotificationPatch.h"
#include "OAIObject.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationApi : public QObject {
    Q_OBJECT

public:
    OAINotificationApi(const int timeOut = 0);
    ~OAINotificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  notification_id QString [required]
    */
    virtual void notification_delete(const QString &notification_id);

    /**
    * @param[in]  notification_id QString [required]
    */
    virtual void notification_getMetadata(const QString &notification_id);

    /**
    * @param[in]  notification_id QString [required]
    * @param[in]  notification_patch OAINotificationPatch [required]
    */
    virtual void notification_patch(const QString &notification_id, const OAINotificationPatch &notification_patch);

    /**
    * @param[in]  notification_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void notification_patchMetadata(const QString &notification_id, const OAIMetadataPatch &metadata_patch);

    /**
    * @param[in]  notification_id QString [required]
    */
    virtual void notifications_get(const QString &notification_id);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  notification OAINotificationNew [required]
    */
    virtual void place_newNotification(const QString &place_id, const OAINotificationNew &notification);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  embed_metadata QList<QString> [optional]
    */
    virtual void place_notifications(const QString &place_id, const ::OpenAPI::OptionalParam<QList<QString>> &embed_metadata = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notification_deleteCallback(OAIHttpRequestWorker *worker);
    void notification_getMetadataCallback(OAIHttpRequestWorker *worker);
    void notification_patchCallback(OAIHttpRequestWorker *worker);
    void notification_patchMetadataCallback(OAIHttpRequestWorker *worker);
    void notifications_getCallback(OAIHttpRequestWorker *worker);
    void place_newNotificationCallback(OAIHttpRequestWorker *worker);
    void place_notificationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notification_deleteSignal();
    void notification_getMetadataSignal(QMap<QString, OAIObject> summary);
    void notification_patchSignal();
    void notification_patchMetadataSignal(QMap<QString, OAIObject> summary);
    void notifications_getSignal(OAINotification summary);
    void place_newNotificationSignal(OAINotificationCreated summary);
    void place_notificationsSignal(QSet<OAINotificationItem> summary);


    void notification_deleteSignalFull(OAIHttpRequestWorker *worker);
    void notification_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void notification_patchSignalFull(OAIHttpRequestWorker *worker);
    void notification_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void notifications_getSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void place_newNotificationSignalFull(OAIHttpRequestWorker *worker, OAINotificationCreated summary);
    void place_notificationsSignalFull(OAIHttpRequestWorker *worker, QSet<OAINotificationItem> summary);

    Q_DECL_DEPRECATED_X("Use notification_deleteSignalError() instead")
    void notification_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notification_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_getMetadataSignalError() instead")
    void notification_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_patchSignalError() instead")
    void notification_patchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notification_patchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_patchMetadataSignalError() instead")
    void notification_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifications_getSignalError() instead")
    void notifications_getSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifications_getSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_newNotificationSignalError() instead")
    void place_newNotificationSignalE(OAINotificationCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_newNotificationSignalError(OAINotificationCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_notificationsSignalError() instead")
    void place_notificationsSignalE(QSet<OAINotificationItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_notificationsSignalError(QSet<OAINotificationItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notification_deleteSignalErrorFull() instead")
    void notification_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_getMetadataSignalErrorFull() instead")
    void notification_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_patchSignalErrorFull() instead")
    void notification_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notification_patchMetadataSignalErrorFull() instead")
    void notification_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notification_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifications_getSignalErrorFull() instead")
    void notifications_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifications_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_newNotificationSignalErrorFull() instead")
    void place_newNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_newNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_notificationsSignalErrorFull() instead")
    void place_notificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_notificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
