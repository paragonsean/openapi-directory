/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgramLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgramLog::OAIProgramLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgramLog::OAIProgramLog() {
    this->initializeModel();
}

OAIProgramLog::~OAIProgramLog() {}

void OAIProgramLog::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_when_isSet = false;
    m_when_isValid = false;
}

void OAIProgramLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProgramLog::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_when_isValid = ::OpenAPI::fromJsonValue(m_when, json[QString("when")]);
    m_when_isSet = !json[QString("when")].isNull() && m_when_isValid;
}

QString OAIProgramLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProgramLog::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_when_isSet) {
        obj.insert(QString("when"), ::OpenAPI::toJsonValue(m_when));
    }
    return obj;
}

QList<OAIActionResult> OAIProgramLog::getActions() const {
    return m_actions;
}
void OAIProgramLog::setActions(const QList<OAIActionResult> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIProgramLog::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIProgramLog::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<QString> OAIProgramLog::getErrors() const {
    return m_errors;
}
void OAIProgramLog::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIProgramLog::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIProgramLog::is_errors_Valid() const{
    return m_errors_isValid;
}

QSet<QString> OAIProgramLog::getNotifications() const {
    return m_notifications;
}
void OAIProgramLog::setNotifications(const QSet<QString> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIProgramLog::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIProgramLog::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QDateTime OAIProgramLog::getWhen() const {
    return m_when;
}
void OAIProgramLog::setWhen(const QDateTime &when) {
    m_when = when;
    m_when_isSet = true;
}

bool OAIProgramLog::is_when_Set() const{
    return m_when_isSet;
}

bool OAIProgramLog::is_when_Valid() const{
    return m_when_isValid;
}

bool OAIProgramLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProgramLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_when_isValid && true;
}

} // namespace OpenAPI
