/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectricityAutonomy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectricityAutonomy::OAIElectricityAutonomy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectricityAutonomy::OAIElectricityAutonomy() {
    this->initializeModel();
}

OAIElectricityAutonomy::~OAIElectricityAutonomy() {}

void OAIElectricityAutonomy::initializeModel() {

    m_autonomy_isSet = false;
    m_autonomy_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIElectricityAutonomy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectricityAutonomy::fromJsonObject(QJsonObject json) {

    m_autonomy_isValid = ::OpenAPI::fromJsonValue(m_autonomy, json[QString("autonomy")]);
    m_autonomy_isSet = !json[QString("autonomy")].isNull() && m_autonomy_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIElectricityAutonomy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectricityAutonomy::asJsonObject() const {
    QJsonObject obj;
    if (m_autonomy_isSet) {
        obj.insert(QString("autonomy"), ::OpenAPI::toJsonValue(m_autonomy));
    }
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

double OAIElectricityAutonomy::getAutonomy() const {
    return m_autonomy;
}
void OAIElectricityAutonomy::setAutonomy(const double &autonomy) {
    m_autonomy = autonomy;
    m_autonomy_isSet = true;
}

bool OAIElectricityAutonomy::is_autonomy_Set() const{
    return m_autonomy_isSet;
}

bool OAIElectricityAutonomy::is_autonomy_Valid() const{
    return m_autonomy_isValid;
}

OAIElectricityStatusCode OAIElectricityAutonomy::getCode() const {
    return m_code;
}
void OAIElectricityAutonomy::setCode(const OAIElectricityStatusCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIElectricityAutonomy::is_code_Set() const{
    return m_code_isSet;
}

bool OAIElectricityAutonomy::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIElectricityAutonomy::getFrom() const {
    return m_from;
}
void OAIElectricityAutonomy::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIElectricityAutonomy::is_from_Set() const{
    return m_from_isSet;
}

bool OAIElectricityAutonomy::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIElectricityAutonomy::getMessage() const {
    return m_message;
}
void OAIElectricityAutonomy::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIElectricityAutonomy::is_message_Set() const{
    return m_message_isSet;
}

bool OAIElectricityAutonomy::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIElectricityAutonomy::getTo() const {
    return m_to;
}
void OAIElectricityAutonomy::setTo(const QDateTime &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIElectricityAutonomy::is_to_Set() const{
    return m_to_isSet;
}

bool OAIElectricityAutonomy::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIElectricityAutonomy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autonomy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectricityAutonomy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && true;
}

} // namespace OpenAPI
