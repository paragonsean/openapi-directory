/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeviceApi_H
#define OAI_OAIDeviceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultError.h"
#include "OAIDevice.h"
#include "OAIDeviceItem.h"
#include "OAIDevicePatch.h"
#include "OAIErrorEntity.h"
#include "OAIFunctionalityCreated.h"
#include "OAIFunctionalityNew.h"
#include "OAIMetadataPatch.h"
#include "OAIObject.h"
#include "OAITagsPatch.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeviceApi : public QObject {
    Q_OBJECT

public:
    OAIDeviceApi(const int timeOut = 0);
    ~OAIDeviceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  functionality_info OAIFunctionalityNew [required]
    */
    virtual void device_addFunctionality(const QString &device_id, const OAIFunctionalityNew &functionality_info);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void device_getMetadata(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void device_getTags(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void device_patchMetadata(const QString &device_id, const OAIMetadataPatch &metadata_patch);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  tags_patch OAITagsPatch [required]
    */
    virtual void device_patchTags(const QString &device_id, const OAITagsPatch &tags_patch);

    /**
    * @param[in]  device_id QString [required]
    */
    virtual void devices_get(const QString &device_id);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  device_patch OAIDevicePatch [required]
    */
    virtual void devices_patch(const QString &device_id, const OAIDevicePatch &device_patch);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  devices QString [optional]
    * @param[in]  embed_metadata QList<QString> [optional]
    */
    virtual void place_devices(const QString &place_id, const ::OpenAPI::OptionalParam<QString> &devices = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &embed_metadata = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void device_addFunctionalityCallback(OAIHttpRequestWorker *worker);
    void device_getMetadataCallback(OAIHttpRequestWorker *worker);
    void device_getTagsCallback(OAIHttpRequestWorker *worker);
    void device_patchMetadataCallback(OAIHttpRequestWorker *worker);
    void device_patchTagsCallback(OAIHttpRequestWorker *worker);
    void devices_getCallback(OAIHttpRequestWorker *worker);
    void devices_patchCallback(OAIHttpRequestWorker *worker);
    void place_devicesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void device_addFunctionalitySignal(OAIFunctionalityCreated summary);
    void device_getMetadataSignal(QMap<QString, OAIObject> summary);
    void device_getTagsSignal(QSet<QString> summary);
    void device_patchMetadataSignal(QMap<QString, OAIObject> summary);
    void device_patchTagsSignal(QSet<QString> summary);
    void devices_getSignal(OAIDevice summary);
    void devices_patchSignal();
    void place_devicesSignal(QSet<OAIDeviceItem> summary);


    void device_addFunctionalitySignalFull(OAIHttpRequestWorker *worker, OAIFunctionalityCreated summary);
    void device_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void device_getTagsSignalFull(OAIHttpRequestWorker *worker, QSet<QString> summary);
    void device_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void device_patchTagsSignalFull(OAIHttpRequestWorker *worker, QSet<QString> summary);
    void devices_getSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devices_patchSignalFull(OAIHttpRequestWorker *worker);
    void place_devicesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIDeviceItem> summary);

    Q_DECL_DEPRECATED_X("Use device_addFunctionalitySignalError() instead")
    void device_addFunctionalitySignalE(OAIFunctionalityCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_addFunctionalitySignalError(OAIFunctionalityCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_getMetadataSignalError() instead")
    void device_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_getTagsSignalError() instead")
    void device_getTagsSignalE(QSet<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_getTagsSignalError(QSet<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_patchMetadataSignalError() instead")
    void device_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_patchTagsSignalError() instead")
    void device_patchTagsSignalE(QSet<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_patchTagsSignalError(QSet<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devices_getSignalError() instead")
    void devices_getSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devices_getSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devices_patchSignalError() instead")
    void devices_patchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devices_patchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_devicesSignalError() instead")
    void place_devicesSignalE(QSet<OAIDeviceItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_devicesSignalError(QSet<OAIDeviceItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use device_addFunctionalitySignalErrorFull() instead")
    void device_addFunctionalitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_addFunctionalitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_getMetadataSignalErrorFull() instead")
    void device_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_getTagsSignalErrorFull() instead")
    void device_getTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_getTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_patchMetadataSignalErrorFull() instead")
    void device_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use device_patchTagsSignalErrorFull() instead")
    void device_patchTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_patchTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devices_getSignalErrorFull() instead")
    void devices_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devices_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devices_patchSignalErrorFull() instead")
    void devices_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devices_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_devicesSignalErrorFull() instead")
    void place_devicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_devicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
