/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionalityItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionalityItem::OAIFunctionalityItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionalityItem::OAIFunctionalityItem() {
    this->initializeModel();
}

OAIFunctionalityItem::~OAIFunctionalityItem() {}

void OAIFunctionalityItem::initializeModel() {

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFunctionalityItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionalityItem::fromJsonObject(QJsonObject json) {

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIFunctionalityItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionalityItem::asJsonObject() const {
    QJsonObject obj;
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIFunctionalityItem::getRClass() const {
    return m_r_class;
}
void OAIFunctionalityItem::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIFunctionalityItem::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIFunctionalityItem::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIFunctionalityItem::getDevice() const {
    return m_device;
}
void OAIFunctionalityItem::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIFunctionalityItem::is_device_Set() const{
    return m_device_isSet;
}

bool OAIFunctionalityItem::is_device_Valid() const{
    return m_device_isValid;
}

qint32 OAIFunctionalityItem::getEndpoint() const {
    return m_endpoint;
}
void OAIFunctionalityItem::setEndpoint(const qint32 &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIFunctionalityItem::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIFunctionalityItem::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIFunctionalityItem::getId() const {
    return m_id;
}
void OAIFunctionalityItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFunctionalityItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFunctionalityItem::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIObject> OAIFunctionalityItem::getMetadata() const {
    return m_metadata;
}
void OAIFunctionalityItem::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIFunctionalityItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIFunctionalityItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIFunctionalityItem::getName() const {
    return m_name;
}
void OAIFunctionalityItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunctionalityItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunctionalityItem::is_name_Valid() const{
    return m_name_isValid;
}

QSet<QString> OAIFunctionalityItem::getTags() const {
    return m_tags;
}
void OAIFunctionalityItem::setTags(const QSet<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFunctionalityItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFunctionalityItem::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFunctionalityItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionalityItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_class_isValid && m_device_isValid && m_endpoint_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
