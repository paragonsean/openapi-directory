/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFunctionalityApi_H
#define OAI_OAIFunctionalityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeValue.h"
#include "OAIDefaultError.h"
#include "OAIErrorEntity.h"
#include "OAIErrorSubEntity.h"
#include "OAIFunctionality.h"
#include "OAIFunctionalityCreated.h"
#include "OAIFunctionalityItem.h"
#include "OAIFunctionalityNew.h"
#include "OAIFunctionalityPatch.h"
#include "OAIMetadataPatch.h"
#include "OAIObject.h"
#include "OAITagsPatch.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFunctionalityApi : public QObject {
    Q_OBJECT

public:
    OAIFunctionalityApi(const int timeOut = 0);
    ~OAIFunctionalityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_id QString [required]
    * @param[in]  functionality_info OAIFunctionalityNew [required]
    */
    virtual void device_addFunctionality(const QString &device_id, const OAIFunctionalityNew &functionality_info);

    /**
    * @param[in]  functionality_id QString [required]
    */
    virtual void functionalities_get(const QString &functionality_id);

    /**
    * @param[in]  functionality_id QString [required]
    */
    virtual void functionality_getMetadata(const QString &functionality_id);

    /**
    * @param[in]  functionality_id QString [required]
    */
    virtual void functionality_getTags(const QString &functionality_id);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  functionality_patch OAIFunctionalityPatch [required]
    */
    virtual void functionality_patch(const QString &functionality_id, const OAIFunctionalityPatch &functionality_patch);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void functionality_patchMetadata(const QString &functionality_id, const OAIMetadataPatch &metadata_patch);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  tags_patch OAITagsPatch [required]
    */
    virtual void functionality_patchTags(const QString &functionality_id, const OAITagsPatch &tags_patch);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  attribute_name QString [required]
    * @param[in]  value OAIObject [required]
    */
    virtual void functionality_set(const QString &functionality_id, const QString &attribute_name, const OAIObject &value);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  attribute_name QString [required]
    */
    virtual void functionality_value(const QString &functionality_id, const QString &attribute_name);

    /**
    * @param[in]  functionality_id QString [required]
    * @param[in]  names QList<QString> [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  surround bool [optional]
    */
    virtual void functionality_values(const QString &functionality_id, const ::OpenAPI::OptionalParam<QList<QString>> &names = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &surround = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  devices QString [optional]
    * @param[in]  functionalities QString [optional]
    * @param[in]  embed_metadata QList<QString> [optional]
    */
    virtual void place_functionalities(const QString &place_id, const ::OpenAPI::OptionalParam<QString> &devices = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &functionalities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &embed_metadata = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void device_addFunctionalityCallback(OAIHttpRequestWorker *worker);
    void functionalities_getCallback(OAIHttpRequestWorker *worker);
    void functionality_getMetadataCallback(OAIHttpRequestWorker *worker);
    void functionality_getTagsCallback(OAIHttpRequestWorker *worker);
    void functionality_patchCallback(OAIHttpRequestWorker *worker);
    void functionality_patchMetadataCallback(OAIHttpRequestWorker *worker);
    void functionality_patchTagsCallback(OAIHttpRequestWorker *worker);
    void functionality_setCallback(OAIHttpRequestWorker *worker);
    void functionality_valueCallback(OAIHttpRequestWorker *worker);
    void functionality_valuesCallback(OAIHttpRequestWorker *worker);
    void place_functionalitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void device_addFunctionalitySignal(OAIFunctionalityCreated summary);
    void functionalities_getSignal(OAIFunctionality summary);
    void functionality_getMetadataSignal(QMap<QString, OAIObject> summary);
    void functionality_getTagsSignal(QSet<QString> summary);
    void functionality_patchSignal();
    void functionality_patchMetadataSignal(QMap<QString, OAIObject> summary);
    void functionality_patchTagsSignal(QSet<QString> summary);
    void functionality_setSignal();
    void functionality_valueSignal(OAIAttributeValue summary);
    void functionality_valuesSignal(QMap<QString, QList<OAIAttributeValue>> summary);
    void place_functionalitiesSignal(QSet<OAIFunctionalityItem> summary);


    void device_addFunctionalitySignalFull(OAIHttpRequestWorker *worker, OAIFunctionalityCreated summary);
    void functionalities_getSignalFull(OAIHttpRequestWorker *worker, OAIFunctionality summary);
    void functionality_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void functionality_getTagsSignalFull(OAIHttpRequestWorker *worker, QSet<QString> summary);
    void functionality_patchSignalFull(OAIHttpRequestWorker *worker);
    void functionality_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void functionality_patchTagsSignalFull(OAIHttpRequestWorker *worker, QSet<QString> summary);
    void functionality_setSignalFull(OAIHttpRequestWorker *worker);
    void functionality_valueSignalFull(OAIHttpRequestWorker *worker, OAIAttributeValue summary);
    void functionality_valuesSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QList<OAIAttributeValue>> summary);
    void place_functionalitiesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIFunctionalityItem> summary);

    Q_DECL_DEPRECATED_X("Use device_addFunctionalitySignalError() instead")
    void device_addFunctionalitySignalE(OAIFunctionalityCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void device_addFunctionalitySignalError(OAIFunctionalityCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionalities_getSignalError() instead")
    void functionalities_getSignalE(OAIFunctionality summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionalities_getSignalError(OAIFunctionality summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_getMetadataSignalError() instead")
    void functionality_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_getTagsSignalError() instead")
    void functionality_getTagsSignalE(QSet<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_getTagsSignalError(QSet<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchSignalError() instead")
    void functionality_patchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchMetadataSignalError() instead")
    void functionality_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchTagsSignalError() instead")
    void functionality_patchTagsSignalE(QSet<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchTagsSignalError(QSet<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_setSignalError() instead")
    void functionality_setSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_setSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_valueSignalError() instead")
    void functionality_valueSignalE(OAIAttributeValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_valueSignalError(OAIAttributeValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_valuesSignalError() instead")
    void functionality_valuesSignalE(QMap<QString, QList<OAIAttributeValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_valuesSignalError(QMap<QString, QList<OAIAttributeValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_functionalitiesSignalError() instead")
    void place_functionalitiesSignalE(QSet<OAIFunctionalityItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_functionalitiesSignalError(QSet<OAIFunctionalityItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use device_addFunctionalitySignalErrorFull() instead")
    void device_addFunctionalitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void device_addFunctionalitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionalities_getSignalErrorFull() instead")
    void functionalities_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionalities_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_getMetadataSignalErrorFull() instead")
    void functionality_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_getTagsSignalErrorFull() instead")
    void functionality_getTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_getTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchSignalErrorFull() instead")
    void functionality_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchMetadataSignalErrorFull() instead")
    void functionality_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_patchTagsSignalErrorFull() instead")
    void functionality_patchTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_patchTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_setSignalErrorFull() instead")
    void functionality_setSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_setSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_valueSignalErrorFull() instead")
    void functionality_valueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_valueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionality_valuesSignalErrorFull() instead")
    void functionality_valuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionality_valuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_functionalitiesSignalErrorFull() instead")
    void place_functionalitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_functionalitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
