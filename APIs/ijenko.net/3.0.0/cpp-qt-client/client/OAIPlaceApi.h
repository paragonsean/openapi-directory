/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaceApi_H
#define OAI_OAIPlaceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBusItem.h"
#include "OAIBusPairing.h"
#include "OAIDefaultError.h"
#include "OAIErrorEntity.h"
#include "OAIErrorSubEntity.h"
#include "OAIMetadataPatch.h"
#include "OAIObject.h"
#include "OAIPlace.h"
#include "OAIPlacePatch.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaceApi : public QObject {
    Q_OBJECT

public:
    OAIPlaceApi(const int timeOut = 0);
    ~OAIPlaceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  with_pairing bool [optional]
    */
    virtual void place_buses(const QString &place_id, const ::OpenAPI::OptionalParam<bool> &with_pairing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  place_id QString [required]
    */
    virtual void place_getMetadata(const QString &place_id);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  bus_id QString [required]
    * @param[in]  pairing OAIBusPairing [required]
    */
    virtual void place_openPairing(const QString &place_id, const QString &bus_id, const OAIBusPairing &pairing);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  bus_id QString [required]
    */
    virtual void place_pairing(const QString &place_id, const QString &bus_id);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  place_patch OAIPlacePatch [required]
    */
    virtual void place_patch(const QString &place_id, const OAIPlacePatch &place_patch);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void place_patchMetadata(const QString &place_id, const OAIMetadataPatch &metadata_patch);

    /**
    * @param[in]  place_id QString [required]
    */
    virtual void places_get(const QString &place_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void place_busesCallback(OAIHttpRequestWorker *worker);
    void place_getMetadataCallback(OAIHttpRequestWorker *worker);
    void place_openPairingCallback(OAIHttpRequestWorker *worker);
    void place_pairingCallback(OAIHttpRequestWorker *worker);
    void place_patchCallback(OAIHttpRequestWorker *worker);
    void place_patchMetadataCallback(OAIHttpRequestWorker *worker);
    void places_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void place_busesSignal(QSet<OAIBusItem> summary);
    void place_getMetadataSignal(QMap<QString, OAIObject> summary);
    void place_openPairingSignal(OAIBusPairing summary);
    void place_pairingSignal(OAIBusPairing summary);
    void place_patchSignal();
    void place_patchMetadataSignal(QMap<QString, OAIObject> summary);
    void places_getSignal(OAIPlace summary);


    void place_busesSignalFull(OAIHttpRequestWorker *worker, QSet<OAIBusItem> summary);
    void place_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void place_openPairingSignalFull(OAIHttpRequestWorker *worker, OAIBusPairing summary);
    void place_pairingSignalFull(OAIHttpRequestWorker *worker, OAIBusPairing summary);
    void place_patchSignalFull(OAIHttpRequestWorker *worker);
    void place_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void places_getSignalFull(OAIHttpRequestWorker *worker, OAIPlace summary);

    Q_DECL_DEPRECATED_X("Use place_busesSignalError() instead")
    void place_busesSignalE(QSet<OAIBusItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_busesSignalError(QSet<OAIBusItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_getMetadataSignalError() instead")
    void place_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_openPairingSignalError() instead")
    void place_openPairingSignalE(OAIBusPairing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_openPairingSignalError(OAIBusPairing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_pairingSignalError() instead")
    void place_pairingSignalE(OAIBusPairing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_pairingSignalError(OAIBusPairing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_patchSignalError() instead")
    void place_patchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void place_patchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_patchMetadataSignalError() instead")
    void place_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use places_getSignalError() instead")
    void places_getSignalE(OAIPlace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void places_getSignalError(OAIPlace summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use place_busesSignalErrorFull() instead")
    void place_busesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_busesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_getMetadataSignalErrorFull() instead")
    void place_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_openPairingSignalErrorFull() instead")
    void place_openPairingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_openPairingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_pairingSignalErrorFull() instead")
    void place_pairingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_pairingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_patchSignalErrorFull() instead")
    void place_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_patchMetadataSignalErrorFull() instead")
    void place_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use places_getSignalErrorFull() instead")
    void places_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void places_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
