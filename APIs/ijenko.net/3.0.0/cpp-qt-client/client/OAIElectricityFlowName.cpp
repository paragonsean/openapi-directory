/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectricityFlowName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectricityFlowName::OAIElectricityFlowName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectricityFlowName::OAIElectricityFlowName() {
    this->initializeModel();
}

OAIElectricityFlowName::~OAIElectricityFlowName() {}

void OAIElectricityFlowName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIElectricityFlowName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIElectricityFlowName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("battery_charge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::BATTERY_CHARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("battery_discharge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::BATTERY_DISCHARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("battery_grid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::BATTERY_GRID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_total_gen", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_TOTAL_GEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_total_usage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_TOTAL_USAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_feed_in", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_FEED_IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_drawn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_DRAWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_local", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_LOCAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_from_household", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_FROM_HOUSEHOLD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_to_pv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_TO_PV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elec_usage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIElectricityFlowName::ELEC_USAGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIElectricityFlowName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIElectricityFlowName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIElectricityFlowName::BATTERY_CHARGE:
            val = "battery_charge";
            break;
        case eOAIElectricityFlowName::BATTERY_DISCHARGE:
            val = "battery_discharge";
            break;
        case eOAIElectricityFlowName::BATTERY_GRID:
            val = "battery_grid";
            break;
        case eOAIElectricityFlowName::ELEC_TOTAL_GEN:
            val = "elec_total_gen";
            break;
        case eOAIElectricityFlowName::ELEC_TOTAL_USAGE:
            val = "elec_total_usage";
            break;
        case eOAIElectricityFlowName::ELEC_FEED_IN:
            val = "elec_feed_in";
            break;
        case eOAIElectricityFlowName::ELEC_DRAWN:
            val = "elec_drawn";
            break;
        case eOAIElectricityFlowName::ELEC_LOCAL:
            val = "elec_local";
            break;
        case eOAIElectricityFlowName::ELEC_FROM_HOUSEHOLD:
            val = "elec_from_household";
            break;
        case eOAIElectricityFlowName::ELEC_TO_PV:
            val = "elec_to_pv";
            break;
        case eOAIElectricityFlowName::ELEC_USAGE:
            val = "elec_usage";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIElectricityFlowName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIElectricityFlowName::eOAIElectricityFlowName OAIElectricityFlowName::getValue() const {
    return m_value;
}

void OAIElectricityFlowName::setValue(const OAIElectricityFlowName::eOAIElectricityFlowName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIElectricityFlowName::isSet() const {
    
    return m_value_isSet;
}

bool OAIElectricityFlowName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
