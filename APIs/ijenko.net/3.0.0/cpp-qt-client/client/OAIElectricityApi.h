/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIElectricityApi_H
#define OAI_OAIElectricityApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultError.h"
#include "OAIElectricityAutonomy.h"
#include "OAIElectricityFlows.h"
#include "OAIElectricityFlowsSetup.h"
#include "OAIElectricitySelfConsumption.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIElectricityApi : public QObject {
    Q_OBJECT

public:
    OAIElectricityApi(const int timeOut = 0);
    ~OAIElectricityApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  when QDateTime [required]
    * @param[in]  span QString [required]
    */
    virtual void place_Electricity_autonomy(const QString &place_id, const QDateTime &when, const QString &span);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  flows QList<QString> [required]
    */
    virtual void place_Electricity_getFlows(const QString &place_id, const QList<QString> &flows);

    /**
    * @param[in]  place_id QString [required]
    */
    virtual void place_Electricity_getFlowsSetup(const QString &place_id);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  when QDateTime [required]
    * @param[in]  span QString [required]
    */
    virtual void place_Electricity_selfConsumption(const QString &place_id, const QDateTime &when, const QString &span);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void place_Electricity_autonomyCallback(OAIHttpRequestWorker *worker);
    void place_Electricity_getFlowsCallback(OAIHttpRequestWorker *worker);
    void place_Electricity_getFlowsSetupCallback(OAIHttpRequestWorker *worker);
    void place_Electricity_selfConsumptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void place_Electricity_autonomySignal(OAIElectricityAutonomy summary);
    void place_Electricity_getFlowsSignal(OAIElectricityFlows summary);
    void place_Electricity_getFlowsSetupSignal(OAIElectricityFlowsSetup summary);
    void place_Electricity_selfConsumptionSignal(OAIElectricitySelfConsumption summary);


    void place_Electricity_autonomySignalFull(OAIHttpRequestWorker *worker, OAIElectricityAutonomy summary);
    void place_Electricity_getFlowsSignalFull(OAIHttpRequestWorker *worker, OAIElectricityFlows summary);
    void place_Electricity_getFlowsSetupSignalFull(OAIHttpRequestWorker *worker, OAIElectricityFlowsSetup summary);
    void place_Electricity_selfConsumptionSignalFull(OAIHttpRequestWorker *worker, OAIElectricitySelfConsumption summary);

    Q_DECL_DEPRECATED_X("Use place_Electricity_autonomySignalError() instead")
    void place_Electricity_autonomySignalE(OAIElectricityAutonomy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_autonomySignalError(OAIElectricityAutonomy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_getFlowsSignalError() instead")
    void place_Electricity_getFlowsSignalE(OAIElectricityFlows summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_getFlowsSignalError(OAIElectricityFlows summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_getFlowsSetupSignalError() instead")
    void place_Electricity_getFlowsSetupSignalE(OAIElectricityFlowsSetup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_getFlowsSetupSignalError(OAIElectricityFlowsSetup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_selfConsumptionSignalError() instead")
    void place_Electricity_selfConsumptionSignalE(OAIElectricitySelfConsumption summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_selfConsumptionSignalError(OAIElectricitySelfConsumption summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use place_Electricity_autonomySignalErrorFull() instead")
    void place_Electricity_autonomySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_autonomySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_getFlowsSignalErrorFull() instead")
    void place_Electricity_getFlowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_getFlowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_getFlowsSetupSignalErrorFull() instead")
    void place_Electricity_getFlowsSetupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_getFlowsSetupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_Electricity_selfConsumptionSignalErrorFull() instead")
    void place_Electricity_selfConsumptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_Electricity_selfConsumptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
