/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProgramApi_H
#define OAI_OAIProgramApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultError.h"
#include "OAIErrorEntity.h"
#include "OAIMetadataPatch.h"
#include "OAIObject.h"
#include "OAIProgram.h"
#include "OAIProgramCreated.h"
#include "OAIProgramItem.h"
#include "OAIProgramLog.h"
#include "OAIProgramNew.h"
#include "OAIProgramPatch.h"
#include <QMap>
#include <QSet>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProgramApi : public QObject {
    Q_OBJECT

public:
    OAIProgramApi(const int timeOut = 0);
    ~OAIProgramApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  program_info OAIProgramNew [required]
    */
    virtual void place_newProgram(const QString &place_id, const OAIProgramNew &program_info);

    /**
    * @param[in]  place_id QString [required]
    * @param[in]  embed_metadata QList<QString> [optional]
    */
    virtual void place_programs(const QString &place_id, const ::OpenAPI::OptionalParam<QList<QString>> &embed_metadata = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void program_delete(const QString &program_id);

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void program_getMetadata(const QString &program_id);

    /**
    * @param[in]  program_id QString [required]
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [optional]
    */
    virtual void program_log(const QString &program_id, const QDateTime &from, const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  program_id QString [required]
    * @param[in]  program_patch OAIProgramPatch [required]
    */
    virtual void program_patch(const QString &program_id, const OAIProgramPatch &program_patch);

    /**
    * @param[in]  program_id QString [required]
    * @param[in]  metadata_patch OAIMetadataPatch [required]
    */
    virtual void program_patchMetadata(const QString &program_id, const OAIMetadataPatch &metadata_patch);

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void program_run(const QString &program_id);

    /**
    * @param[in]  program_id QString [required]
    */
    virtual void programs_get(const QString &program_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void place_newProgramCallback(OAIHttpRequestWorker *worker);
    void place_programsCallback(OAIHttpRequestWorker *worker);
    void program_deleteCallback(OAIHttpRequestWorker *worker);
    void program_getMetadataCallback(OAIHttpRequestWorker *worker);
    void program_logCallback(OAIHttpRequestWorker *worker);
    void program_patchCallback(OAIHttpRequestWorker *worker);
    void program_patchMetadataCallback(OAIHttpRequestWorker *worker);
    void program_runCallback(OAIHttpRequestWorker *worker);
    void programs_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void place_newProgramSignal(OAIProgramCreated summary);
    void place_programsSignal(QSet<OAIProgramItem> summary);
    void program_deleteSignal();
    void program_getMetadataSignal(QMap<QString, OAIObject> summary);
    void program_logSignal(QSet<OAIProgramLog> summary);
    void program_patchSignal();
    void program_patchMetadataSignal(QMap<QString, OAIObject> summary);
    void program_runSignal();
    void programs_getSignal(OAIProgram summary);


    void place_newProgramSignalFull(OAIHttpRequestWorker *worker, OAIProgramCreated summary);
    void place_programsSignalFull(OAIHttpRequestWorker *worker, QSet<OAIProgramItem> summary);
    void program_deleteSignalFull(OAIHttpRequestWorker *worker);
    void program_getMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void program_logSignalFull(OAIHttpRequestWorker *worker, QSet<OAIProgramLog> summary);
    void program_patchSignalFull(OAIHttpRequestWorker *worker);
    void program_patchMetadataSignalFull(OAIHttpRequestWorker *worker, QMap<QString, OAIObject> summary);
    void program_runSignalFull(OAIHttpRequestWorker *worker);
    void programs_getSignalFull(OAIHttpRequestWorker *worker, OAIProgram summary);

    Q_DECL_DEPRECATED_X("Use place_newProgramSignalError() instead")
    void place_newProgramSignalE(OAIProgramCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_newProgramSignalError(OAIProgramCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_programsSignalError() instead")
    void place_programsSignalE(QSet<OAIProgramItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void place_programsSignalError(QSet<OAIProgramItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_deleteSignalError() instead")
    void program_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void program_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_getMetadataSignalError() instead")
    void program_getMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void program_getMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_logSignalError() instead")
    void program_logSignalE(QSet<OAIProgramLog> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void program_logSignalError(QSet<OAIProgramLog> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_patchSignalError() instead")
    void program_patchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void program_patchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_patchMetadataSignalError() instead")
    void program_patchMetadataSignalE(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void program_patchMetadataSignalError(QMap<QString, OAIObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_runSignalError() instead")
    void program_runSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void program_runSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use programs_getSignalError() instead")
    void programs_getSignalE(OAIProgram summary, QNetworkReply::NetworkError error_type, QString error_str);
    void programs_getSignalError(OAIProgram summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use place_newProgramSignalErrorFull() instead")
    void place_newProgramSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_newProgramSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use place_programsSignalErrorFull() instead")
    void place_programsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void place_programsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_deleteSignalErrorFull() instead")
    void program_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_getMetadataSignalErrorFull() instead")
    void program_getMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_getMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_logSignalErrorFull() instead")
    void program_logSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_logSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_patchSignalErrorFull() instead")
    void program_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_patchMetadataSignalErrorFull() instead")
    void program_patchMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_patchMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use program_runSignalErrorFull() instead")
    void program_runSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void program_runSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use programs_getSignalErrorFull() instead")
    void programs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void programs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
