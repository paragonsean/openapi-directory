/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceItem::OAIDeviceItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceItem::OAIDeviceItem() {
    this->initializeModel();
}

OAIDeviceItem::~OAIDeviceItem() {}

void OAIDeviceItem::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_online_isSet = false;
    m_is_online_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDeviceItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceItem::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_online_isValid = ::OpenAPI::fromJsonValue(m_is_online, json[QString("isOnline")]);
    m_is_online_isSet = !json[QString("isOnline")].isNull() && m_is_online_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDeviceItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceItem::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_online_isSet) {
        obj.insert(QString("isOnline"), ::OpenAPI::toJsonValue(m_is_online));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_isSet) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDeviceItem::getAddress() const {
    return m_address;
}
void OAIDeviceItem::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDeviceItem::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDeviceItem::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIDeviceItem::getRClass() const {
    return m_r_class;
}
void OAIDeviceItem::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIDeviceItem::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIDeviceItem::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIDeviceItem::getId() const {
    return m_id;
}
void OAIDeviceItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceItem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeviceItem::isIsOnline() const {
    return m_is_online;
}
void OAIDeviceItem::setIsOnline(const bool &is_online) {
    m_is_online = is_online;
    m_is_online_isSet = true;
}

bool OAIDeviceItem::is_is_online_Set() const{
    return m_is_online_isSet;
}

bool OAIDeviceItem::is_is_online_Valid() const{
    return m_is_online_isValid;
}

QMap<QString, OAIObject> OAIDeviceItem::getMetadata() const {
    return m_metadata;
}
void OAIDeviceItem::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDeviceItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDeviceItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDeviceItem::getName() const {
    return m_name;
}
void OAIDeviceItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceItem::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeviceItem::getPlace() const {
    return m_place;
}
void OAIDeviceItem::setPlace(const QString &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAIDeviceItem::is_place_Set() const{
    return m_place_isSet;
}

bool OAIDeviceItem::is_place_Valid() const{
    return m_place_isValid;
}

QSet<QString> OAIDeviceItem::getTags() const {
    return m_tags;
}
void OAIDeviceItem::setTags(const QSet<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDeviceItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDeviceItem::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDeviceItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_r_class_isValid && m_id_isValid && m_is_online_isValid && m_place_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
