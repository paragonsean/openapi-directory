/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_routing_isSet = false;
    m_routing_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_routing_isValid = ::OpenAPI::fromJsonValue(m_routing, json[QString("routing")]);
    m_routing_isSet = !json[QString("routing")].isNull() && m_routing_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_isSet) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_routing_isSet) {
        obj.insert(QString("routing"), ::OpenAPI::toJsonValue(m_routing));
    }
    return obj;
}

OAIObject OAINotification::getData() const {
    return m_data;
}
void OAINotification::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAINotification::is_data_Set() const{
    return m_data_isSet;
}

bool OAINotification::is_data_Valid() const{
    return m_data_isValid;
}

QMap<QString, OAIObject> OAINotification::getMetadata() const {
    return m_metadata;
}
void OAINotification::setMetadata(const QMap<QString, OAIObject> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAINotification::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAINotification::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAINotification::getName() const {
    return m_name;
}
void OAINotification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotification::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotification::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotification::getPlace() const {
    return m_place;
}
void OAINotification::setPlace(const QString &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAINotification::is_place_Set() const{
    return m_place_isSet;
}

bool OAINotification::is_place_Valid() const{
    return m_place_isValid;
}

QString OAINotification::getRouting() const {
    return m_routing;
}
void OAINotification::setRouting(const QString &routing) {
    m_routing = routing;
    m_routing_isSet = true;
}

bool OAINotification::is_routing_Set() const{
    return m_routing_isSet;
}

bool OAINotification::is_routing_Valid() const{
    return m_routing_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_place_isValid && true;
}

} // namespace OpenAPI
