/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationCreated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationCreated::OAINotificationCreated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationCreated::OAINotificationCreated() {
    this->initializeModel();
}

OAINotificationCreated::~OAINotificationCreated() {}

void OAINotificationCreated::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAINotificationCreated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationCreated::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAINotificationCreated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationCreated::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

qint32 OAINotificationCreated::getCode() const {
    return m_code;
}
void OAINotificationCreated::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAINotificationCreated::is_code_Set() const{
    return m_code_isSet;
}

bool OAINotificationCreated::is_code_Valid() const{
    return m_code_isValid;
}

QString OAINotificationCreated::getMessage() const {
    return m_message;
}
void OAINotificationCreated::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotificationCreated::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotificationCreated::is_message_Valid() const{
    return m_message_isValid;
}

OAINotificationResource OAINotificationCreated::getResource() const {
    return m_resource;
}
void OAINotificationCreated::setResource(const OAINotificationResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAINotificationCreated::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAINotificationCreated::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAINotificationCreated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationCreated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && m_resource_isValid && true;
}

} // namespace OpenAPI
