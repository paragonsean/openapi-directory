/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataPatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataPatch::OAIMetadataPatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataPatch::OAIMetadataPatch() {
    this->initializeModel();
}

OAIMetadataPatch::~OAIMetadataPatch() {}

void OAIMetadataPatch::initializeModel() {

    m_add_isSet = false;
    m_add_isValid = false;

    m_remove_isSet = false;
    m_remove_isValid = false;
}

void OAIMetadataPatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataPatch::fromJsonObject(QJsonObject json) {

    m_add_isValid = ::OpenAPI::fromJsonValue(m_add, json[QString("add")]);
    m_add_isSet = !json[QString("add")].isNull() && m_add_isValid;

    m_remove_isValid = ::OpenAPI::fromJsonValue(m_remove, json[QString("remove")]);
    m_remove_isSet = !json[QString("remove")].isNull() && m_remove_isValid;
}

QString OAIMetadataPatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataPatch::asJsonObject() const {
    QJsonObject obj;
    if (m_add.size() > 0) {
        obj.insert(QString("add"), ::OpenAPI::toJsonValue(m_add));
    }
    if (m_remove.size() > 0) {
        obj.insert(QString("remove"), ::OpenAPI::toJsonValue(m_remove));
    }
    return obj;
}

QMap<QString, OAIObject> OAIMetadataPatch::getAdd() const {
    return m_add;
}
void OAIMetadataPatch::setAdd(const QMap<QString, OAIObject> &add) {
    m_add = add;
    m_add_isSet = true;
}

bool OAIMetadataPatch::is_add_Set() const{
    return m_add_isSet;
}

bool OAIMetadataPatch::is_add_Valid() const{
    return m_add_isValid;
}

QSet<QString> OAIMetadataPatch::getRemove() const {
    return m_remove;
}
void OAIMetadataPatch::setRemove(const QSet<QString> &remove) {
    m_remove = remove;
    m_remove_isSet = true;
}

bool OAIMetadataPatch::is_remove_Set() const{
    return m_remove_isSet;
}

bool OAIMetadataPatch::is_remove_Valid() const{
    return m_remove_isValid;
}

bool OAIMetadataPatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataPatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
