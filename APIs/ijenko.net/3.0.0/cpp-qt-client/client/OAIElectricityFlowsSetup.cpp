/**
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElectricityFlowsSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElectricityFlowsSetup::OAIElectricityFlowsSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElectricityFlowsSetup::OAIElectricityFlowsSetup() {
    this->initializeModel();
}

OAIElectricityFlowsSetup::~OAIElectricityFlowsSetup() {}

void OAIElectricityFlowsSetup::initializeModel() {

    m_battery_charge_isSet = false;
    m_battery_charge_isValid = false;

    m_battery_discharge_isSet = false;
    m_battery_discharge_isValid = false;

    m_battery_grid_isSet = false;
    m_battery_grid_isValid = false;

    m_elec_drawn_isSet = false;
    m_elec_drawn_isValid = false;

    m_elec_feed_in_isSet = false;
    m_elec_feed_in_isValid = false;

    m_elec_from_household_isSet = false;
    m_elec_from_household_isValid = false;

    m_elec_local_isSet = false;
    m_elec_local_isValid = false;

    m_elec_to_pv_isSet = false;
    m_elec_to_pv_isValid = false;

    m_elec_total_gen_isSet = false;
    m_elec_total_gen_isValid = false;

    m_elec_total_usage_isSet = false;
    m_elec_total_usage_isValid = false;

    m_elec_usage_isSet = false;
    m_elec_usage_isValid = false;
}

void OAIElectricityFlowsSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElectricityFlowsSetup::fromJsonObject(QJsonObject json) {

    m_battery_charge_isValid = ::OpenAPI::fromJsonValue(m_battery_charge, json[QString("battery_charge")]);
    m_battery_charge_isSet = !json[QString("battery_charge")].isNull() && m_battery_charge_isValid;

    m_battery_discharge_isValid = ::OpenAPI::fromJsonValue(m_battery_discharge, json[QString("battery_discharge")]);
    m_battery_discharge_isSet = !json[QString("battery_discharge")].isNull() && m_battery_discharge_isValid;

    m_battery_grid_isValid = ::OpenAPI::fromJsonValue(m_battery_grid, json[QString("battery_grid")]);
    m_battery_grid_isSet = !json[QString("battery_grid")].isNull() && m_battery_grid_isValid;

    m_elec_drawn_isValid = ::OpenAPI::fromJsonValue(m_elec_drawn, json[QString("elec_drawn")]);
    m_elec_drawn_isSet = !json[QString("elec_drawn")].isNull() && m_elec_drawn_isValid;

    m_elec_feed_in_isValid = ::OpenAPI::fromJsonValue(m_elec_feed_in, json[QString("elec_feed_in")]);
    m_elec_feed_in_isSet = !json[QString("elec_feed_in")].isNull() && m_elec_feed_in_isValid;

    m_elec_from_household_isValid = ::OpenAPI::fromJsonValue(m_elec_from_household, json[QString("elec_from_household")]);
    m_elec_from_household_isSet = !json[QString("elec_from_household")].isNull() && m_elec_from_household_isValid;

    m_elec_local_isValid = ::OpenAPI::fromJsonValue(m_elec_local, json[QString("elec_local")]);
    m_elec_local_isSet = !json[QString("elec_local")].isNull() && m_elec_local_isValid;

    m_elec_to_pv_isValid = ::OpenAPI::fromJsonValue(m_elec_to_pv, json[QString("elec_to_pv")]);
    m_elec_to_pv_isSet = !json[QString("elec_to_pv")].isNull() && m_elec_to_pv_isValid;

    m_elec_total_gen_isValid = ::OpenAPI::fromJsonValue(m_elec_total_gen, json[QString("elec_total_gen")]);
    m_elec_total_gen_isSet = !json[QString("elec_total_gen")].isNull() && m_elec_total_gen_isValid;

    m_elec_total_usage_isValid = ::OpenAPI::fromJsonValue(m_elec_total_usage, json[QString("elec_total_usage")]);
    m_elec_total_usage_isSet = !json[QString("elec_total_usage")].isNull() && m_elec_total_usage_isValid;

    m_elec_usage_isValid = ::OpenAPI::fromJsonValue(m_elec_usage, json[QString("elec_usage")]);
    m_elec_usage_isSet = !json[QString("elec_usage")].isNull() && m_elec_usage_isValid;
}

QString OAIElectricityFlowsSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElectricityFlowsSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_battery_charge.size() > 0) {
        obj.insert(QString("battery_charge"), ::OpenAPI::toJsonValue(m_battery_charge));
    }
    if (m_battery_discharge.size() > 0) {
        obj.insert(QString("battery_discharge"), ::OpenAPI::toJsonValue(m_battery_discharge));
    }
    if (m_battery_grid.size() > 0) {
        obj.insert(QString("battery_grid"), ::OpenAPI::toJsonValue(m_battery_grid));
    }
    if (m_elec_drawn.size() > 0) {
        obj.insert(QString("elec_drawn"), ::OpenAPI::toJsonValue(m_elec_drawn));
    }
    if (m_elec_feed_in.size() > 0) {
        obj.insert(QString("elec_feed_in"), ::OpenAPI::toJsonValue(m_elec_feed_in));
    }
    if (m_elec_from_household.size() > 0) {
        obj.insert(QString("elec_from_household"), ::OpenAPI::toJsonValue(m_elec_from_household));
    }
    if (m_elec_local.size() > 0) {
        obj.insert(QString("elec_local"), ::OpenAPI::toJsonValue(m_elec_local));
    }
    if (m_elec_to_pv.size() > 0) {
        obj.insert(QString("elec_to_pv"), ::OpenAPI::toJsonValue(m_elec_to_pv));
    }
    if (m_elec_total_gen.size() > 0) {
        obj.insert(QString("elec_total_gen"), ::OpenAPI::toJsonValue(m_elec_total_gen));
    }
    if (m_elec_total_usage.size() > 0) {
        obj.insert(QString("elec_total_usage"), ::OpenAPI::toJsonValue(m_elec_total_usage));
    }
    if (m_elec_usage.size() > 0) {
        obj.insert(QString("elec_usage"), ::OpenAPI::toJsonValue(m_elec_usage));
    }
    return obj;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getBatteryCharge() const {
    return m_battery_charge;
}
void OAIElectricityFlowsSetup::setBatteryCharge(const QSet<OAIElectricityFunctionality> &battery_charge) {
    m_battery_charge = battery_charge;
    m_battery_charge_isSet = true;
}

bool OAIElectricityFlowsSetup::is_battery_charge_Set() const{
    return m_battery_charge_isSet;
}

bool OAIElectricityFlowsSetup::is_battery_charge_Valid() const{
    return m_battery_charge_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getBatteryDischarge() const {
    return m_battery_discharge;
}
void OAIElectricityFlowsSetup::setBatteryDischarge(const QSet<OAIElectricityFunctionality> &battery_discharge) {
    m_battery_discharge = battery_discharge;
    m_battery_discharge_isSet = true;
}

bool OAIElectricityFlowsSetup::is_battery_discharge_Set() const{
    return m_battery_discharge_isSet;
}

bool OAIElectricityFlowsSetup::is_battery_discharge_Valid() const{
    return m_battery_discharge_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getBatteryGrid() const {
    return m_battery_grid;
}
void OAIElectricityFlowsSetup::setBatteryGrid(const QSet<OAIElectricityFunctionality> &battery_grid) {
    m_battery_grid = battery_grid;
    m_battery_grid_isSet = true;
}

bool OAIElectricityFlowsSetup::is_battery_grid_Set() const{
    return m_battery_grid_isSet;
}

bool OAIElectricityFlowsSetup::is_battery_grid_Valid() const{
    return m_battery_grid_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecDrawn() const {
    return m_elec_drawn;
}
void OAIElectricityFlowsSetup::setElecDrawn(const QSet<OAIElectricityFunctionality> &elec_drawn) {
    m_elec_drawn = elec_drawn;
    m_elec_drawn_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_drawn_Set() const{
    return m_elec_drawn_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_drawn_Valid() const{
    return m_elec_drawn_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecFeedIn() const {
    return m_elec_feed_in;
}
void OAIElectricityFlowsSetup::setElecFeedIn(const QSet<OAIElectricityFunctionality> &elec_feed_in) {
    m_elec_feed_in = elec_feed_in;
    m_elec_feed_in_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_feed_in_Set() const{
    return m_elec_feed_in_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_feed_in_Valid() const{
    return m_elec_feed_in_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecFromHousehold() const {
    return m_elec_from_household;
}
void OAIElectricityFlowsSetup::setElecFromHousehold(const QSet<OAIElectricityFunctionality> &elec_from_household) {
    m_elec_from_household = elec_from_household;
    m_elec_from_household_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_from_household_Set() const{
    return m_elec_from_household_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_from_household_Valid() const{
    return m_elec_from_household_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecLocal() const {
    return m_elec_local;
}
void OAIElectricityFlowsSetup::setElecLocal(const QSet<OAIElectricityFunctionality> &elec_local) {
    m_elec_local = elec_local;
    m_elec_local_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_local_Set() const{
    return m_elec_local_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_local_Valid() const{
    return m_elec_local_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecToPv() const {
    return m_elec_to_pv;
}
void OAIElectricityFlowsSetup::setElecToPv(const QSet<OAIElectricityFunctionality> &elec_to_pv) {
    m_elec_to_pv = elec_to_pv;
    m_elec_to_pv_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_to_pv_Set() const{
    return m_elec_to_pv_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_to_pv_Valid() const{
    return m_elec_to_pv_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecTotalGen() const {
    return m_elec_total_gen;
}
void OAIElectricityFlowsSetup::setElecTotalGen(const QSet<OAIElectricityFunctionality> &elec_total_gen) {
    m_elec_total_gen = elec_total_gen;
    m_elec_total_gen_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_total_gen_Set() const{
    return m_elec_total_gen_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_total_gen_Valid() const{
    return m_elec_total_gen_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecTotalUsage() const {
    return m_elec_total_usage;
}
void OAIElectricityFlowsSetup::setElecTotalUsage(const QSet<OAIElectricityFunctionality> &elec_total_usage) {
    m_elec_total_usage = elec_total_usage;
    m_elec_total_usage_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_total_usage_Set() const{
    return m_elec_total_usage_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_total_usage_Valid() const{
    return m_elec_total_usage_isValid;
}

QSet<OAIElectricityFunctionality> OAIElectricityFlowsSetup::getElecUsage() const {
    return m_elec_usage;
}
void OAIElectricityFlowsSetup::setElecUsage(const QSet<OAIElectricityFunctionality> &elec_usage) {
    m_elec_usage = elec_usage;
    m_elec_usage_isSet = true;
}

bool OAIElectricityFlowsSetup::is_elec_usage_Set() const{
    return m_elec_usage_isSet;
}

bool OAIElectricityFlowsSetup::is_elec_usage_Valid() const{
    return m_elec_usage_isValid;
}

bool OAIElectricityFlowsSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_battery_charge.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_discharge.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_battery_grid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_drawn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_feed_in.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_from_household.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_local.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_to_pv.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_total_gen.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_total_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_elec_usage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElectricityFlowsSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
