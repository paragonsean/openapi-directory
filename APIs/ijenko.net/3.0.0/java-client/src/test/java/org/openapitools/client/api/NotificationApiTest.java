/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.NotificationCreated;
import org.openapitools.client.model.NotificationItem;
import org.openapitools.client.model.NotificationNew;
import org.openapitools.client.model.NotificationPatch;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationApi
 */
@Disabled
public class NotificationApiTest {

    private final NotificationApi api = new NotificationApi();

    /**
     * Delete a Notification
     *
     * Delete a *Notification*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationDeleteTest() throws ApiException {
        String notificationId = null;
        api.notificationDelete(notificationId);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata of the *Notification*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationGetMetadataTest() throws ApiException {
        String notificationId = null;
        Map<String, Object> response = api.notificationGetMetadata(notificationId);
        // TODO: test validations
    }

    /**
     * Modify a Notification
     *
     * Modify a *Notification*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPatchTest() throws ApiException {
        String notificationId = null;
        NotificationPatch notificationPatch = null;
        api.notificationPatch(notificationId, notificationPatch);
        // TODO: test validations
    }

    /**
     * Modify metadata of a Notification
     *
     * Modify the metadata of a *Notification*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPatchMetadataTest() throws ApiException {
        String notificationId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.notificationPatchMetadata(notificationId, metadataPatch);
        // TODO: test validations
    }

    /**
     * Information about a Notification
     *
     * Get information about a *Notification*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsGetTest() throws ApiException {
        String notificationId = null;
        Notification response = api.notificationsGet(notificationId);
        // TODO: test validations
    }

    /**
     * Create a Notification
     *
     * Create a new *Notification*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeNewNotificationTest() throws ApiException {
        String placeId = null;
        NotificationNew notification = null;
        NotificationCreated response = api.placeNewNotification(placeId, notification);
        // TODO: test validations
    }

    /**
     * List Notifications
     *
     * Get the list of *Notifications* available in this *Place*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeNotificationsTest() throws ApiException {
        String placeId = null;
        List<String> embedMetadata = null;
        Set<NotificationItem> response = api.placeNotifications(placeId, embedMetadata);
        // TODO: test validations
    }

}
