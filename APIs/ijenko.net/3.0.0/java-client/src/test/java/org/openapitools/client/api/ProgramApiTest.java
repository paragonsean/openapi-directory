/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Program;
import org.openapitools.client.model.ProgramCreated;
import org.openapitools.client.model.ProgramItem;
import org.openapitools.client.model.ProgramLog;
import org.openapitools.client.model.ProgramNew;
import org.openapitools.client.model.ProgramPatch;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProgramApi
 */
@Disabled
public class ProgramApiTest {

    private final ProgramApi api = new ProgramApi();

    /**
     * Create a Program
     *
     * Create a new *Program*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeNewProgramTest() throws ApiException {
        String placeId = null;
        ProgramNew programInfo = null;
        ProgramCreated response = api.placeNewProgram(placeId, programInfo);
        // TODO: test validations
    }

    /**
     * List Programs
     *
     * Get the list of *Programs* available in this *Place*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeProgramsTest() throws ApiException {
        String placeId = null;
        List<String> embedMetadata = null;
        Set<ProgramItem> response = api.placePrograms(placeId, embedMetadata);
        // TODO: test validations
    }

    /**
     * Delete a Program
     *
     * Delete a *Program*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programDeleteTest() throws ApiException {
        String programId = null;
        api.programDelete(programId);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata of the *Program*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programGetMetadataTest() throws ApiException {
        String programId = null;
        Map<String, Object> response = api.programGetMetadata(programId);
        // TODO: test validations
    }

    /**
     * History of executions of a Program
     *
     * Get the execution history list of this *Program*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programLogTest() throws ApiException {
        String programId = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Set<ProgramLog> response = api.programLog(programId, from, to);
        // TODO: test validations
    }

    /**
     * Modify a Program
     *
     * Modify a *Program*: - name - status (enabled/disabled) - code  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programPatchTest() throws ApiException {
        String programId = null;
        ProgramPatch programPatch = null;
        api.programPatch(programId, programPatch);
        // TODO: test validations
    }

    /**
     * Modify metadata of a Program
     *
     * Modify the metadata of a *Program*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programPatchMetadataTest() throws ApiException {
        String programId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.programPatchMetadata(programId, metadataPatch);
        // TODO: test validations
    }

    /**
     * Run the Program
     *
     * Launch the *Program*. The result will be available later in the run history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programRunTest() throws ApiException {
        String programId = null;
        api.programRun(programId);
        // TODO: test validations
    }

    /**
     * Information about a Program
     *
     * Get information about a *Program*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void programsGetTest() throws ApiException {
        String programId = null;
        Program response = api.programsGet(programId);
        // TODO: test validations
    }

}
