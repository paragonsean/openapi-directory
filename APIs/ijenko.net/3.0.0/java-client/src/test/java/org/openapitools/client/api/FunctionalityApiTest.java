/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.ErrorSubEntity;
import org.openapitools.client.model.Functionality;
import org.openapitools.client.model.FunctionalityCreated;
import org.openapitools.client.model.FunctionalityItem;
import org.openapitools.client.model.FunctionalityNew;
import org.openapitools.client.model.FunctionalityPatch;
import org.openapitools.client.model.MetadataPatch;
import java.time.OffsetDateTime;
import java.util.Set;
import org.openapitools.client.model.TagsPatch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FunctionalityApi
 */
@Disabled
public class FunctionalityApiTest {

    private final FunctionalityApi api = new FunctionalityApi();

    /**
     * Add dynamically a functionality
     *
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceAddFunctionality_0Test() throws ApiException {
        String deviceId = null;
        FunctionalityNew functionalityInfo = null;
        FunctionalityCreated response = api.deviceAddFunctionality_0(deviceId, functionalityInfo);
        // TODO: test validations
    }

    /**
     * Information about a Functionality
     *
     * Get the *Functionality*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalitiesGetTest() throws ApiException {
        String functionalityId = null;
        Functionality response = api.functionalitiesGet(functionalityId);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityGetMetadataTest() throws ApiException {
        String functionalityId = null;
        Map<String, Object> response = api.functionalityGetMetadata(functionalityId);
        // TODO: test validations
    }

    /**
     * List tags
     *
     * Get the tags of a *Functionality*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityGetTagsTest() throws ApiException {
        String functionalityId = null;
        Set<String> response = api.functionalityGetTags(functionalityId);
        // TODO: test validations
    }

    /**
     * Modify a Functionality
     *
     * Modify information about a *Functionality*: its name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityPatchTest() throws ApiException {
        String functionalityId = null;
        FunctionalityPatch functionalityPatch = null;
        api.functionalityPatch(functionalityId, functionalityPatch);
        // TODO: test validations
    }

    /**
     * Modify metadata
     *
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityPatchMetadataTest() throws ApiException {
        String functionalityId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.functionalityPatchMetadata(functionalityId, metadataPatch);
        // TODO: test validations
    }

    /**
     * Modify tags
     *
     * Modify the tags of a *Functionality*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityPatchTagsTest() throws ApiException {
        String functionalityId = null;
        TagsPatch tagsPatch = null;
        Set<String> response = api.functionalityPatchTags(functionalityId, tagsPatch);
        // TODO: test validations
    }

    /**
     * Modify an Attribute value
     *
     * Modify the value of the *Attribute*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalitySetTest() throws ApiException {
        String functionalityId = null;
        String attributeName = null;
        Object value = null;
        api.functionalitySet(functionalityId, attributeName, value);
        // TODO: test validations
    }

    /**
     * Get an Attribute value
     *
     * Get the *Attribute* value and the last time when it changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityValueTest() throws ApiException {
        String functionalityId = null;
        String attributeName = null;
        AttributeValue response = api.functionalityValue(functionalityId, attributeName);
        // TODO: test validations
    }

    /**
     * Get history of multiple attributes
     *
     * Get the values of multiple *Attributes* and their history.  If the &#x60;names&#x60; parameter is not given, all the attributes of the *Functionality* are returned. As the list may be huge, this must be avoided.  If the &#x60;to&#x60; parameter is set, &#x60;from&#x60; must also be set.  If &#x60;from&#x60; is not set, only the last value is returned.  The &#x60;surround&#x60; parameter allows to ask also for one value beyond each interval boundaries.  The request may fail if too many values are asked. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityValuesTest() throws ApiException {
        String functionalityId = null;
        List<String> names = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Boolean surround = null;
        Map<String, List<AttributeValue>> response = api.functionalityValues(functionalityId, names, from, to, surround);
        // TODO: test validations
    }

    /**
     * List Functionalities
     *
     * Get the list of *Functionalities* available in this *Place*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeFunctionalitiesTest() throws ApiException {
        String placeId = null;
        String devices = null;
        String functionalities = null;
        List<String> embedMetadata = null;
        Set<FunctionalityItem> response = api.placeFunctionalities(placeId, devices, functionalities, embedMetadata);
        // TODO: test validations
    }

}
