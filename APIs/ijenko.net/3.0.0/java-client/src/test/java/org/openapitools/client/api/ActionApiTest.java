/*
 * IoE² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActionResult;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorGatewayUnreachable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActionApi
 */
@Disabled
public class ActionApiTest {

    private final ActionApi api = new ActionApi();

    /**
     * Run actions
     *
     * Run an *Action* on zero, one or multiple Functionalities selected with tags. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceRunTest() throws ApiException {
        String deviceId = null;
        String action = null;
        String functionalities = null;
        List<Object> arguments = null;
        List<ActionResult> response = api.deviceRun(deviceId, action, functionalities, arguments);
        // TODO: test validations
    }

    /**
     * Run an action
     *
     * Run an action on the Functionality. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionalityRunTest() throws ApiException {
        String functionalityId = null;
        String action = null;
        List<Object> arguments = null;
        ActionResult response = api.functionalityRun(functionalityId, action, arguments);
        // TODO: test validations
    }

    /**
     * Run actions
     *
     * Run an *Action* on zero, one or multiple *Functionalities* selected with tags.  *Device* and *Functionality* selection are combined with « AND ».  If no functionality is matched by the device/functionality selection, an empty array is returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeRunTest() throws ApiException {
        String placeId = null;
        String action = null;
        String devices = null;
        String functionalities = null;
        List<Object> arguments = null;
        List<ActionResult> response = api.placeRun(placeId, action, devices, functionalities, arguments);
        // TODO: test validations
    }

}
