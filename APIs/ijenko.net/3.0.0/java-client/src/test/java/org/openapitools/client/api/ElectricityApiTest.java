/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ElectricityAutonomy;
import org.openapitools.client.model.ElectricityFlows;
import org.openapitools.client.model.ElectricityFlowsSetup;
import org.openapitools.client.model.ElectricitySelfConsumption;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ElectricityApi
 */
@Disabled
public class ElectricityApiTest {

    private final ElectricityApi api = new ElectricityApi();

    /**
     * Get autonomy rate of the place
     *
     * Compute the autonomy rate of the *Place* on a time period.  &#x60;autonomy &#x3D; 1 - (elec_drawn / elec_total_usage)&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeElectricityAutonomyTest() throws ApiException {
        String placeId = null;
        OffsetDateTime when = null;
        String span = null;
        ElectricityAutonomy response = api.placeElectricityAutonomy(placeId, when, span);
        // TODO: test validations
    }

    /**
     * Get electricity virtual flows
     *
     * Get the mapping of virtual electricity flows to functionalities.  Some rules are applied to expand the virtual flows using the concrete flows available.  The &#x60;factor&#x60; tells how each energy value coming from a functionality must be added with values from other functionality to compute the energy of the virtual flow. Factors are usually &#x60;1&#x60; or &#x60;-1&#x60;.  The &#x60;code&#x60; property gives the result which may be partial: - If all flows are available, &#x60;200000&#x60; is returned. - If no flows are available (indicating that the place has no   electricity functionality or that no functionality has been attached   to a flow), the &#x60;code&#x60; is &#x60;200001&#x60;. The &#x60;missing&#x60; property contains   all the requested flows. - If some flows are missing, the &#x60;code&#x60; is &#x60;200002&#x60; and the &#x60;missing&#x60;   property lists them. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeElectricityGetFlowsTest() throws ApiException {
        String placeId = null;
        List<String> flows = null;
        ElectricityFlows response = api.placeElectricityGetFlows(placeId, flows);
        // TODO: test validations
    }

    /**
     * Get electricity flows setup
     *
     * Get the mapping of functionalities to electricity flows.  A functionality is attached to *at most* one flow. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeElectricityGetFlowsSetupTest() throws ApiException {
        String placeId = null;
        ElectricityFlowsSetup response = api.placeElectricityGetFlowsSetup(placeId);
        // TODO: test validations
    }

    /**
     * Get self-consumption rate of the place
     *
     * Compute the self-consumption rate of the *Place* on a time period.  &#x60;selfConsumption &#x3D; 1 - (elec_feed_in / elec_total_usage)&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeElectricitySelfConsumptionTest() throws ApiException {
        String placeId = null;
        OffsetDateTime when = null;
        String span = null;
        ElectricitySelfConsumption response = api.placeElectricitySelfConsumption(placeId, when, span);
        // TODO: test validations
    }

}
