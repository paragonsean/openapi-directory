/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthLogin;
import org.openapitools.client.model.AuthTokens;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.PlaceItem;
import java.util.Set;
import org.openapitools.client.model.UserMe;
import org.openapitools.client.model.UserMePatch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntryPointsApi
 */
@Disabled
public class EntryPointsApiTest {

    private final EntryPointsApi api = new EntryPointsApi();

    /**
     * Get a token using login+password
     *
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an &#x60;Access-Token&#x60; HTTP header or in a &#x60;token&#x60; URL query parameter in requests that require authentication.  The *refresh token* can be used with &#x60;/auth/refresh&#x60; when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the &#x60;appId&#x60; used. The &#x60;ttl&#x60; input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use &#x60;/auth/revoke&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authAccountLogin_0Test() throws ApiException {
        AuthLogin loginInfo = null;
        AuthTokens response = api.authAccountLogin_0(loginInfo);
        // TODO: test validations
    }

    /**
     * Information about the User
     *
     * Get information on the authenticated *User* who does the request.  The *login* property is returned only if the *User* is the administrator of the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meGetTest() throws ApiException {
        UserMe response = api.meGet();
        // TODO: test validations
    }

    /**
     * Update User information
     *
     * Update *User* information (locale). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mePatchTest() throws ApiException {
        UserMePatch userPatch = null;
        api.mePatch(userPatch);
        // TODO: test validations
    }

    /**
     * List accessible Places
     *
     * List the *Places* to which the *Token* has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mePlacesTest() throws ApiException {
        List<String> embedMetadata = null;
        Set<PlaceItem> response = api.mePlaces(embedMetadata);
        // TODO: test validations
    }

}
