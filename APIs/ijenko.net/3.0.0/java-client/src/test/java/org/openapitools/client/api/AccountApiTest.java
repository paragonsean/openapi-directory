/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthChangePassword;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.PlaceCreated;
import org.openapitools.client.model.PlaceItem;
import org.openapitools.client.model.PlaceNew;
import java.util.Set;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreated;
import org.openapitools.client.model.UserItem;
import org.openapitools.client.model.UserNew;
import org.openapitools.client.model.UserPatch;
import org.openapitools.client.model.UserTokenItem;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Change the password
     *
     * Set a new password for the account.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountChangePasswordTest() throws ApiException {
        AuthChangePassword changePasswordInfo = null;
        api.accountChangePassword(changePasswordInfo);
        // TODO: test validations
    }

    /**
     * Delete a User
     *
     * Delete a *User* from this *Account*, and revoke all his/her *Tokens*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteUserTest() throws ApiException {
        String userId = null;
        api.accountDeleteUser(userId);
        // TODO: test validations
    }

    /**
     * Information about a User
     *
     * Get information about a *User* in the same *Account*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetUserTest() throws ApiException {
        String userId = null;
        User response = api.accountGetUser(userId);
        // TODO: test validations
    }

    /**
     * Create a Place
     *
     * Create a new *Place*.  A *Device* (&#x60;class&#x60;: &#x60;MINT&#x60;, &#x60;address&#x60;: &#x60;0&#x60;) is automatically created and attached to the new *Place*.  **Note:** requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountNewPlaceTest() throws ApiException {
        PlaceNew place = null;
        PlaceCreated response = api.accountNewPlace(place);
        // TODO: test validations
    }

    /**
     * New User
     *
     * Add a *User*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountNewUserTest() throws ApiException {
        UserNew userInfo = null;
        UserCreated response = api.accountNewUser(userInfo);
        // TODO: test validations
    }

    /**
     * Modify a User
     *
     * Modify a *User*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPatchUserTest() throws ApiException {
        String userId = null;
        UserPatch userPatch = null;
        api.accountPatchUser(userId, userPatch);
        // TODO: test validations
    }

    /**
     * List Places of the Account
     *
     * List the *Places* of the account.  **Note:** requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountPlacesTest() throws ApiException {
        Set<PlaceItem> response = api.accountPlaces();
        // TODO: test validations
    }

    /**
     * Revoke a Token
     *
     * Revoke the given *Token*.  **Note:** requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountRevokeTokenTest() throws ApiException {
        String tokenId = null;
        api.accountRevokeToken(tokenId);
        // TODO: test validations
    }

    /**
     * List active Tokens of the Account
     *
     * List the active *Tokens* on the account.  **Note:** requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountTokensTest() throws ApiException {
        Set<UserTokenItem> response = api.accountTokens();
        // TODO: test validations
    }

    /**
     * List Users of the Account
     *
     * Get the list of *Users* of this *Account*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUsersTest() throws ApiException {
        List<String> embedMetadata = null;
        Set<UserItem> response = api.accountUsers(embedMetadata);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetMetadataTest() throws ApiException {
        String userId = null;
        Map<String, Object> response = api.userGetMetadata(userId);
        // TODO: test validations
    }

    /**
     * Modify metadata
     *
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userPatchMetadataTest() throws ApiException {
        String userId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.userPatchMetadata(userId, metadataPatch);
        // TODO: test validations
    }

}
