/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BusItem;
import org.openapitools.client.model.BusPairing;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.ErrorSubEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.PlacePatch;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaceApi
 */
@Disabled
public class PlaceApiTest {

    private final PlaceApi api = new PlaceApi();

    /**
     * List Buses
     *
     * Get the list of *Buses* available on the gateway of this *Place*. If &#x60;withPairing&#x60; is &#x60;true&#x60;, return only buses that allow device pairing (see &#x60;/places/{placeId}/buses/{busId}/pairing&#x60;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeBusesTest() throws ApiException {
        String placeId = null;
        Boolean withPairing = null;
        Set<BusItem> response = api.placeBuses(placeId, withPairing);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeGetMetadataTest() throws ApiException {
        String placeId = null;
        Map<String, Object> response = api.placeGetMetadata(placeId);
        // TODO: test validations
    }

    /**
     * Open/Close the pairing window
     *
     * Open/Close the pairing window.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeOpenPairingTest() throws ApiException {
        String placeId = null;
        String busId = null;
        BusPairing pairing = null;
        BusPairing response = api.placeOpenPairing(placeId, busId, pairing);
        // TODO: test validations
    }

    /**
     * State of the pairing window
     *
     * Get the state of the pairing window of the *Bus*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placePairingTest() throws ApiException {
        String placeId = null;
        String busId = null;
        BusPairing response = api.placePairing(placeId, busId);
        // TODO: test validations
    }

    /**
     * Update a Place
     *
     * Change information about a *Place*.  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placePatchTest() throws ApiException {
        String placeId = null;
        PlacePatch placePatch = null;
        api.placePatch(placeId, placePatch);
        // TODO: test validations
    }

    /**
     * Modify metadata
     *
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placePatchMetadataTest() throws ApiException {
        String placeId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.placePatchMetadata(placeId, metadataPatch);
        // TODO: test validations
    }

    /**
     * Information about a Place
     *
     * Get information about a *Place*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placesGetTest() throws ApiException {
        String placeId = null;
        Place response = api.placesGet(placeId);
        // TODO: test validations
    }

}
