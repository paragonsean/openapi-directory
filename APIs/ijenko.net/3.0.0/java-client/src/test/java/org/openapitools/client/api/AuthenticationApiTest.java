/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthLogin;
import org.openapitools.client.model.AuthRefresh;
import org.openapitools.client.model.AuthResetPassword;
import org.openapitools.client.model.AuthTokens;
import org.openapitools.client.model.DefaultError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * Get a token using login+password
     *
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an &#x60;Access-Token&#x60; HTTP header or in a &#x60;token&#x60; URL query parameter in requests that require authentication.  The *refresh token* can be used with &#x60;/auth/refresh&#x60; when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the &#x60;appId&#x60; used. The &#x60;ttl&#x60; input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use &#x60;/auth/revoke&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authAccountLoginTest() throws ApiException {
        AuthLogin loginInfo = null;
        AuthTokens response = api.authAccountLogin(loginInfo);
        // TODO: test validations
    }

    /**
     * Refresh a token
     *
     * Get a new *access token* using a valid *refresh token*.  This is a **replacement** of the *access token*: if an existing *access token* was still not expired, it is invalidated. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRefreshTokenTest() throws ApiException {
        AuthRefresh refreshInfo = null;
        AuthTokens response = api.authRefreshToken(refreshInfo);
        // TODO: test validations
    }

    /**
     * Ask for a new password
     *
     * Trigger the request of a new password.  The account administrator will receive an e-mail with an URL pointing to a form to allow him/her to enter a new password. The old password is still functional until a new one is submitted.  Either the login or e-mail of the account must be given. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authResetPasswordTest() throws ApiException {
        AuthResetPassword resetPasswordInfo = null;
        api.authResetPassword(resetPasswordInfo);
        // TODO: test validations
    }

    /**
     * Revoke a token
     *
     * Invalidate the authentication used for the request. The access token and the refresh token will be invalid after this request. This request is typically called to implement logout. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authRevokeTokenTest() throws ApiException {
        api.authRevokeToken();
        // TODO: test validations
    }

}
