/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceItem;
import org.openapitools.client.model.DevicePatch;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.FunctionalityCreated;
import org.openapitools.client.model.FunctionalityNew;
import org.openapitools.client.model.MetadataPatch;
import java.util.Set;
import org.openapitools.client.model.TagsPatch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceApi
 */
@Disabled
public class DeviceApiTest {

    private final DeviceApi api = new DeviceApi();

    /**
     * Add dynamically a functionality
     *
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceAddFunctionalityTest() throws ApiException {
        String deviceId = null;
        FunctionalityNew functionalityInfo = null;
        FunctionalityCreated response = api.deviceAddFunctionality(deviceId, functionalityInfo);
        // TODO: test validations
    }

    /**
     * List metadata
     *
     * Get the metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceGetMetadataTest() throws ApiException {
        String deviceId = null;
        Map<String, Object> response = api.deviceGetMetadata(deviceId);
        // TODO: test validations
    }

    /**
     * List tags
     *
     * Get the tags of a *Device*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deviceGetTagsTest() throws ApiException {
        String deviceId = null;
        Set<String> response = api.deviceGetTags(deviceId);
        // TODO: test validations
    }

    /**
     * Modify metadata
     *
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicePatchMetadataTest() throws ApiException {
        String deviceId = null;
        MetadataPatch metadataPatch = null;
        Map<String, Object> response = api.devicePatchMetadata(deviceId, metadataPatch);
        // TODO: test validations
    }

    /**
     * Modify tags
     *
     * Modify the tags of a *Device*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicePatchTagsTest() throws ApiException {
        String deviceId = null;
        TagsPatch tagsPatch = null;
        Set<String> response = api.devicePatchTags(deviceId, tagsPatch);
        // TODO: test validations
    }

    /**
     * Information about a Device
     *
     * Get information about a *Device*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        String deviceId = null;
        Device response = api.devicesGet(deviceId);
        // TODO: test validations
    }

    /**
     * Update a Device
     *
     * Modify information about a *Device*: its name. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesPatchTest() throws ApiException {
        String deviceId = null;
        DevicePatch devicePatch = null;
        api.devicesPatch(deviceId, devicePatch);
        // TODO: test validations
    }

    /**
     * List of Devices
     *
     * Get the list of *Devices* available in this *Place*.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeDevicesTest() throws ApiException {
        String placeId = null;
        String devices = null;
        List<String> embedMetadata = null;
        Set<DeviceItem> response = api.placeDevices(placeId, devices, embedMetadata);
        // TODO: test validations
    }

}
