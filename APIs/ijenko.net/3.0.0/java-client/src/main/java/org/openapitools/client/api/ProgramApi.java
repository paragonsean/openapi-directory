/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Program;
import org.openapitools.client.model.ProgramCreated;
import org.openapitools.client.model.ProgramItem;
import org.openapitools.client.model.ProgramLog;
import org.openapitools.client.model.ProgramNew;
import org.openapitools.client.model.ProgramPatch;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProgramApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProgramApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProgramApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for placeNewProgram
     * @param placeId Unique identifier of a *Place*. (required)
     * @param programInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Program* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNewProgramCall(String placeId, ProgramNew programInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = programInfo;

        // create path and map variables
        String localVarPath = "/places/{placeId}/programs"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeNewProgramValidateBeforeCall(String placeId, ProgramNew programInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeNewProgram(Async)");
        }

        // verify the required parameter 'programInfo' is set
        if (programInfo == null) {
            throw new ApiException("Missing the required parameter 'programInfo' when calling placeNewProgram(Async)");
        }

        return placeNewProgramCall(placeId, programInfo, _callback);

    }

    /**
     * Create a Program
     * Create a new *Program*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param programInfo  (required)
     * @return ProgramCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Program* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ProgramCreated placeNewProgram(String placeId, ProgramNew programInfo) throws ApiException {
        ApiResponse<ProgramCreated> localVarResp = placeNewProgramWithHttpInfo(placeId, programInfo);
        return localVarResp.getData();
    }

    /**
     * Create a Program
     * Create a new *Program*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param programInfo  (required)
     * @return ApiResponse&lt;ProgramCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Program* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProgramCreated> placeNewProgramWithHttpInfo(String placeId, ProgramNew programInfo) throws ApiException {
        okhttp3.Call localVarCall = placeNewProgramValidateBeforeCall(placeId, programInfo, null);
        Type localVarReturnType = new TypeToken<ProgramCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Program (asynchronously)
     * Create a new *Program*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param programInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Program* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNewProgramAsync(String placeId, ProgramNew programInfo, final ApiCallback<ProgramCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeNewProgramValidateBeforeCall(placeId, programInfo, _callback);
        Type localVarReturnType = new TypeToken<ProgramCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placePrograms
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeProgramsCall(String placeId, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/programs"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embedMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "embed-metadata", embedMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeProgramsValidateBeforeCall(String placeId, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placePrograms(Async)");
        }

        return placeProgramsCall(placeId, embedMetadata, _callback);

    }

    /**
     * List Programs
     * Get the list of *Programs* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return Set&lt;ProgramItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<ProgramItem> placePrograms(String placeId, List<String> embedMetadata) throws ApiException {
        ApiResponse<Set<ProgramItem>> localVarResp = placeProgramsWithHttpInfo(placeId, embedMetadata);
        return localVarResp.getData();
    }

    /**
     * List Programs
     * Get the list of *Programs* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return ApiResponse&lt;Set&lt;ProgramItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<ProgramItem>> placeProgramsWithHttpInfo(String placeId, List<String> embedMetadata) throws ApiException {
        okhttp3.Call localVarCall = placeProgramsValidateBeforeCall(placeId, embedMetadata, null);
        Type localVarReturnType = new TypeToken<Set<ProgramItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Programs (asynchronously)
     * Get the list of *Programs* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeProgramsAsync(String placeId, List<String> embedMetadata, final ApiCallback<Set<ProgramItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeProgramsValidateBeforeCall(placeId, embedMetadata, _callback);
        Type localVarReturnType = new TypeToken<Set<ProgramItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for programDelete
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programDeleteCall(String programId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{programId}"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programDeleteValidateBeforeCall(String programId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programDelete(Async)");
        }

        return programDeleteCall(programId, _callback);

    }

    /**
     * Delete a Program
     * Delete a *Program*.  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void programDelete(String programId) throws ApiException {
        programDeleteWithHttpInfo(programId);
    }

    /**
     * Delete a Program
     * Delete a *Program*.  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> programDeleteWithHttpInfo(String programId) throws ApiException {
        okhttp3.Call localVarCall = programDeleteValidateBeforeCall(programId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Program (asynchronously)
     * Delete a *Program*.  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programDeleteAsync(String programId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = programDeleteValidateBeforeCall(programId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for programGetMetadata
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programGetMetadataCall(String programId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{programId}/metadata"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programGetMetadataValidateBeforeCall(String programId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programGetMetadata(Async)");
        }

        return programGetMetadataCall(programId, _callback);

    }

    /**
     * List metadata
     * Get the metadata of the *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> programGetMetadata(String programId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = programGetMetadataWithHttpInfo(programId);
        return localVarResp.getData();
    }

    /**
     * List metadata
     * Get the metadata of the *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> programGetMetadataWithHttpInfo(String programId) throws ApiException {
        okhttp3.Call localVarCall = programGetMetadataValidateBeforeCall(programId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metadata (asynchronously)
     * Get the metadata of the *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programGetMetadataAsync(String programId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = programGetMetadataValidateBeforeCall(programId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for programLog
     * @param programId Unique identifier of a *Program*. (required)
     * @param from Beginning of the time interval. (required)
     * @param to End of the interval. Default: now.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programLogCall(String programId, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{programId}/log"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programLogValidateBeforeCall(String programId, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programLog(Async)");
        }

        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling programLog(Async)");
        }

        return programLogCall(programId, from, to, _callback);

    }

    /**
     * History of executions of a Program
     * Get the execution history list of this *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @param from Beginning of the time interval. (required)
     * @param to End of the interval. Default: now.  (optional)
     * @return Set&lt;ProgramLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<ProgramLog> programLog(String programId, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<Set<ProgramLog>> localVarResp = programLogWithHttpInfo(programId, from, to);
        return localVarResp.getData();
    }

    /**
     * History of executions of a Program
     * Get the execution history list of this *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @param from Beginning of the time interval. (required)
     * @param to End of the interval. Default: now.  (optional)
     * @return ApiResponse&lt;Set&lt;ProgramLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<ProgramLog>> programLogWithHttpInfo(String programId, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = programLogValidateBeforeCall(programId, from, to, null);
        Type localVarReturnType = new TypeToken<Set<ProgramLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * History of executions of a Program (asynchronously)
     * Get the execution history list of this *Program*.
     * @param programId Unique identifier of a *Program*. (required)
     * @param from Beginning of the time interval. (required)
     * @param to End of the interval. Default: now.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programLogAsync(String programId, OffsetDateTime from, OffsetDateTime to, final ApiCallback<Set<ProgramLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = programLogValidateBeforeCall(programId, from, to, _callback);
        Type localVarReturnType = new TypeToken<Set<ProgramLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for programPatch
     * @param programId Unique identifier of a *Program*. (required)
     * @param programPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programPatchCall(String programId, ProgramPatch programPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = programPatch;

        // create path and map variables
        String localVarPath = "/programs/{programId}"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programPatchValidateBeforeCall(String programId, ProgramPatch programPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programPatch(Async)");
        }

        // verify the required parameter 'programPatch' is set
        if (programPatch == null) {
            throw new ApiException("Missing the required parameter 'programPatch' when calling programPatch(Async)");
        }

        return programPatchCall(programId, programPatch, _callback);

    }

    /**
     * Modify a Program
     * Modify a *Program*: - name - status (enabled/disabled) - code  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param programPatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void programPatch(String programId, ProgramPatch programPatch) throws ApiException {
        programPatchWithHttpInfo(programId, programPatch);
    }

    /**
     * Modify a Program
     * Modify a *Program*: - name - status (enabled/disabled) - code  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param programPatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> programPatchWithHttpInfo(String programId, ProgramPatch programPatch) throws ApiException {
        okhttp3.Call localVarCall = programPatchValidateBeforeCall(programId, programPatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify a Program (asynchronously)
     * Modify a *Program*: - name - status (enabled/disabled) - code  **Note**: requires full access to the *Account*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param programPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programPatchAsync(String programId, ProgramPatch programPatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = programPatchValidateBeforeCall(programId, programPatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for programPatchMetadata
     * @param programId Unique identifier of a *Program*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programPatchMetadataCall(String programId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataPatch;

        // create path and map variables
        String localVarPath = "/programs/{programId}/metadata"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programPatchMetadataValidateBeforeCall(String programId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programPatchMetadata(Async)");
        }

        // verify the required parameter 'metadataPatch' is set
        if (metadataPatch == null) {
            throw new ApiException("Missing the required parameter 'metadataPatch' when calling programPatchMetadata(Async)");
        }

        return programPatchMetadataCall(programId, metadataPatch, _callback);

    }

    /**
     * Modify metadata of a Program
     * Modify the metadata of a *Program*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> programPatchMetadata(String programId, MetadataPatch metadataPatch) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = programPatchMetadataWithHttpInfo(programId, metadataPatch);
        return localVarResp.getData();
    }

    /**
     * Modify metadata of a Program
     * Modify the metadata of a *Program*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> programPatchMetadataWithHttpInfo(String programId, MetadataPatch metadataPatch) throws ApiException {
        okhttp3.Call localVarCall = programPatchMetadataValidateBeforeCall(programId, metadataPatch, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify metadata of a Program (asynchronously)
     * Modify the metadata of a *Program*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programPatchMetadataAsync(String programId, MetadataPatch metadataPatch, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = programPatchMetadataValidateBeforeCall(programId, metadataPatch, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for programRun
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> *Program* successfully launched. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programRunCall(String programId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{programId}/run"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programRunValidateBeforeCall(String programId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programRun(Async)");
        }

        return programRunCall(programId, _callback);

    }

    /**
     * Run the Program
     * Launch the *Program*. The result will be available later in the run history.
     * @param programId Unique identifier of a *Program*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> *Program* successfully launched. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void programRun(String programId) throws ApiException {
        programRunWithHttpInfo(programId);
    }

    /**
     * Run the Program
     * Launch the *Program*. The result will be available later in the run history.
     * @param programId Unique identifier of a *Program*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> *Program* successfully launched. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> programRunWithHttpInfo(String programId) throws ApiException {
        okhttp3.Call localVarCall = programRunValidateBeforeCall(programId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run the Program (asynchronously)
     * Launch the *Program*. The result will be available later in the run history.
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> *Program* successfully launched. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programRunAsync(String programId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = programRunValidateBeforeCall(programId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for programsGet
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programsGetCall(String programId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/programs/{programId}"
            .replace("{" + "programId" + "}", localVarApiClient.escapeString(programId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call programsGetValidateBeforeCall(String programId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'programId' is set
        if (programId == null) {
            throw new ApiException("Missing the required parameter 'programId' when calling programsGet(Async)");
        }

        return programsGetCall(programId, _callback);

    }

    /**
     * Information about a Program
     * Get information about a *Program*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @return Program
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Program programsGet(String programId) throws ApiException {
        ApiResponse<Program> localVarResp = programsGetWithHttpInfo(programId);
        return localVarResp.getData();
    }

    /**
     * Information about a Program
     * Get information about a *Program*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @return ApiResponse&lt;Program&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Program> programsGetWithHttpInfo(String programId) throws ApiException {
        okhttp3.Call localVarCall = programsGetValidateBeforeCall(programId, null);
        Type localVarReturnType = new TypeToken<Program>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about a Program (asynchronously)
     * Get information about a *Program*. 
     * @param programId Unique identifier of a *Program*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Program* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call programsGetAsync(String programId, final ApiCallback<Program> _callback) throws ApiException {

        okhttp3.Call localVarCall = programsGetValidateBeforeCall(programId, _callback);
        Type localVarReturnType = new TypeToken<Program>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
