/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of missing flows (not available either directly or indirectly)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.849068-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElectricityMissingFlows {
  public static final String SERIALIZED_NAME_BATTERY_CHARGE = "battery_charge";
  @SerializedName(SERIALIZED_NAME_BATTERY_CHARGE)
  private Boolean batteryCharge;

  public static final String SERIALIZED_NAME_BATTERY_DISCHARGE = "battery_discharge";
  @SerializedName(SERIALIZED_NAME_BATTERY_DISCHARGE)
  private Boolean batteryDischarge;

  public static final String SERIALIZED_NAME_BATTERY_GRID = "battery_grid";
  @SerializedName(SERIALIZED_NAME_BATTERY_GRID)
  private Boolean batteryGrid;

  public static final String SERIALIZED_NAME_ELEC_DRAWN = "elec_drawn";
  @SerializedName(SERIALIZED_NAME_ELEC_DRAWN)
  private Boolean elecDrawn;

  public static final String SERIALIZED_NAME_ELEC_FEED_IN = "elec_feed_in";
  @SerializedName(SERIALIZED_NAME_ELEC_FEED_IN)
  private Boolean elecFeedIn;

  public static final String SERIALIZED_NAME_ELEC_FROM_HOUSEHOLD = "elec_from_household";
  @SerializedName(SERIALIZED_NAME_ELEC_FROM_HOUSEHOLD)
  private Boolean elecFromHousehold;

  public static final String SERIALIZED_NAME_ELEC_LOCAL = "elec_local";
  @SerializedName(SERIALIZED_NAME_ELEC_LOCAL)
  private Boolean elecLocal;

  public static final String SERIALIZED_NAME_ELEC_TO_PV = "elec_to_pv";
  @SerializedName(SERIALIZED_NAME_ELEC_TO_PV)
  private Boolean elecToPv;

  public static final String SERIALIZED_NAME_ELEC_TOTAL_GEN = "elec_total_gen";
  @SerializedName(SERIALIZED_NAME_ELEC_TOTAL_GEN)
  private Boolean elecTotalGen;

  public static final String SERIALIZED_NAME_ELEC_TOTAL_USAGE = "elec_total_usage";
  @SerializedName(SERIALIZED_NAME_ELEC_TOTAL_USAGE)
  private Boolean elecTotalUsage;

  public static final String SERIALIZED_NAME_ELEC_USAGE = "elec_usage";
  @SerializedName(SERIALIZED_NAME_ELEC_USAGE)
  private Boolean elecUsage;

  public ElectricityMissingFlows() {
  }

  public ElectricityMissingFlows batteryCharge(Boolean batteryCharge) {
    this.batteryCharge = batteryCharge;
    return this;
  }

  /**
   * Get batteryCharge
   * @return batteryCharge
   */
  @javax.annotation.Nullable
  public Boolean getBatteryCharge() {
    return batteryCharge;
  }

  public void setBatteryCharge(Boolean batteryCharge) {
    this.batteryCharge = batteryCharge;
  }


  public ElectricityMissingFlows batteryDischarge(Boolean batteryDischarge) {
    this.batteryDischarge = batteryDischarge;
    return this;
  }

  /**
   * Get batteryDischarge
   * @return batteryDischarge
   */
  @javax.annotation.Nullable
  public Boolean getBatteryDischarge() {
    return batteryDischarge;
  }

  public void setBatteryDischarge(Boolean batteryDischarge) {
    this.batteryDischarge = batteryDischarge;
  }


  public ElectricityMissingFlows batteryGrid(Boolean batteryGrid) {
    this.batteryGrid = batteryGrid;
    return this;
  }

  /**
   * Get batteryGrid
   * @return batteryGrid
   */
  @javax.annotation.Nullable
  public Boolean getBatteryGrid() {
    return batteryGrid;
  }

  public void setBatteryGrid(Boolean batteryGrid) {
    this.batteryGrid = batteryGrid;
  }


  public ElectricityMissingFlows elecDrawn(Boolean elecDrawn) {
    this.elecDrawn = elecDrawn;
    return this;
  }

  /**
   * Get elecDrawn
   * @return elecDrawn
   */
  @javax.annotation.Nullable
  public Boolean getElecDrawn() {
    return elecDrawn;
  }

  public void setElecDrawn(Boolean elecDrawn) {
    this.elecDrawn = elecDrawn;
  }


  public ElectricityMissingFlows elecFeedIn(Boolean elecFeedIn) {
    this.elecFeedIn = elecFeedIn;
    return this;
  }

  /**
   * Get elecFeedIn
   * @return elecFeedIn
   */
  @javax.annotation.Nullable
  public Boolean getElecFeedIn() {
    return elecFeedIn;
  }

  public void setElecFeedIn(Boolean elecFeedIn) {
    this.elecFeedIn = elecFeedIn;
  }


  public ElectricityMissingFlows elecFromHousehold(Boolean elecFromHousehold) {
    this.elecFromHousehold = elecFromHousehold;
    return this;
  }

  /**
   * Get elecFromHousehold
   * @return elecFromHousehold
   */
  @javax.annotation.Nullable
  public Boolean getElecFromHousehold() {
    return elecFromHousehold;
  }

  public void setElecFromHousehold(Boolean elecFromHousehold) {
    this.elecFromHousehold = elecFromHousehold;
  }


  public ElectricityMissingFlows elecLocal(Boolean elecLocal) {
    this.elecLocal = elecLocal;
    return this;
  }

  /**
   * Get elecLocal
   * @return elecLocal
   */
  @javax.annotation.Nullable
  public Boolean getElecLocal() {
    return elecLocal;
  }

  public void setElecLocal(Boolean elecLocal) {
    this.elecLocal = elecLocal;
  }


  public ElectricityMissingFlows elecToPv(Boolean elecToPv) {
    this.elecToPv = elecToPv;
    return this;
  }

  /**
   * Get elecToPv
   * @return elecToPv
   */
  @javax.annotation.Nullable
  public Boolean getElecToPv() {
    return elecToPv;
  }

  public void setElecToPv(Boolean elecToPv) {
    this.elecToPv = elecToPv;
  }


  public ElectricityMissingFlows elecTotalGen(Boolean elecTotalGen) {
    this.elecTotalGen = elecTotalGen;
    return this;
  }

  /**
   * Get elecTotalGen
   * @return elecTotalGen
   */
  @javax.annotation.Nullable
  public Boolean getElecTotalGen() {
    return elecTotalGen;
  }

  public void setElecTotalGen(Boolean elecTotalGen) {
    this.elecTotalGen = elecTotalGen;
  }


  public ElectricityMissingFlows elecTotalUsage(Boolean elecTotalUsage) {
    this.elecTotalUsage = elecTotalUsage;
    return this;
  }

  /**
   * Get elecTotalUsage
   * @return elecTotalUsage
   */
  @javax.annotation.Nullable
  public Boolean getElecTotalUsage() {
    return elecTotalUsage;
  }

  public void setElecTotalUsage(Boolean elecTotalUsage) {
    this.elecTotalUsage = elecTotalUsage;
  }


  public ElectricityMissingFlows elecUsage(Boolean elecUsage) {
    this.elecUsage = elecUsage;
    return this;
  }

  /**
   * Get elecUsage
   * @return elecUsage
   */
  @javax.annotation.Nullable
  public Boolean getElecUsage() {
    return elecUsage;
  }

  public void setElecUsage(Boolean elecUsage) {
    this.elecUsage = elecUsage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElectricityMissingFlows electricityMissingFlows = (ElectricityMissingFlows) o;
    return Objects.equals(this.batteryCharge, electricityMissingFlows.batteryCharge) &&
        Objects.equals(this.batteryDischarge, electricityMissingFlows.batteryDischarge) &&
        Objects.equals(this.batteryGrid, electricityMissingFlows.batteryGrid) &&
        Objects.equals(this.elecDrawn, electricityMissingFlows.elecDrawn) &&
        Objects.equals(this.elecFeedIn, electricityMissingFlows.elecFeedIn) &&
        Objects.equals(this.elecFromHousehold, electricityMissingFlows.elecFromHousehold) &&
        Objects.equals(this.elecLocal, electricityMissingFlows.elecLocal) &&
        Objects.equals(this.elecToPv, electricityMissingFlows.elecToPv) &&
        Objects.equals(this.elecTotalGen, electricityMissingFlows.elecTotalGen) &&
        Objects.equals(this.elecTotalUsage, electricityMissingFlows.elecTotalUsage) &&
        Objects.equals(this.elecUsage, electricityMissingFlows.elecUsage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batteryCharge, batteryDischarge, batteryGrid, elecDrawn, elecFeedIn, elecFromHousehold, elecLocal, elecToPv, elecTotalGen, elecTotalUsage, elecUsage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElectricityMissingFlows {\n");
    sb.append("    batteryCharge: ").append(toIndentedString(batteryCharge)).append("\n");
    sb.append("    batteryDischarge: ").append(toIndentedString(batteryDischarge)).append("\n");
    sb.append("    batteryGrid: ").append(toIndentedString(batteryGrid)).append("\n");
    sb.append("    elecDrawn: ").append(toIndentedString(elecDrawn)).append("\n");
    sb.append("    elecFeedIn: ").append(toIndentedString(elecFeedIn)).append("\n");
    sb.append("    elecFromHousehold: ").append(toIndentedString(elecFromHousehold)).append("\n");
    sb.append("    elecLocal: ").append(toIndentedString(elecLocal)).append("\n");
    sb.append("    elecToPv: ").append(toIndentedString(elecToPv)).append("\n");
    sb.append("    elecTotalGen: ").append(toIndentedString(elecTotalGen)).append("\n");
    sb.append("    elecTotalUsage: ").append(toIndentedString(elecTotalUsage)).append("\n");
    sb.append("    elecUsage: ").append(toIndentedString(elecUsage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("battery_charge");
    openapiFields.add("battery_discharge");
    openapiFields.add("battery_grid");
    openapiFields.add("elec_drawn");
    openapiFields.add("elec_feed_in");
    openapiFields.add("elec_from_household");
    openapiFields.add("elec_local");
    openapiFields.add("elec_to_pv");
    openapiFields.add("elec_total_gen");
    openapiFields.add("elec_total_usage");
    openapiFields.add("elec_usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElectricityMissingFlows
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElectricityMissingFlows.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElectricityMissingFlows is not found in the empty JSON string", ElectricityMissingFlows.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElectricityMissingFlows.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElectricityMissingFlows` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElectricityMissingFlows.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElectricityMissingFlows' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElectricityMissingFlows> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElectricityMissingFlows.class));

       return (TypeAdapter<T>) new TypeAdapter<ElectricityMissingFlows>() {
           @Override
           public void write(JsonWriter out, ElectricityMissingFlows value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElectricityMissingFlows read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElectricityMissingFlows given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElectricityMissingFlows
   * @throws IOException if the JSON string is invalid with respect to ElectricityMissingFlows
   */
  public static ElectricityMissingFlows fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElectricityMissingFlows.class);
  }

  /**
   * Convert an instance of ElectricityMissingFlows to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

