/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ElectricityAutonomy;
import org.openapitools.client.model.ElectricityFlows;
import org.openapitools.client.model.ElectricityFlowsSetup;
import org.openapitools.client.model.ElectricitySelfConsumption;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ElectricityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ElectricityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ElectricityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for placeElectricityAutonomy
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityAutonomyCall(String placeId, OffsetDateTime when, String span, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/electricity/autonomy"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (when != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("when", when));
        }

        if (span != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("span", span));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeElectricityAutonomyValidateBeforeCall(String placeId, OffsetDateTime when, String span, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeElectricityAutonomy(Async)");
        }

        // verify the required parameter 'when' is set
        if (when == null) {
            throw new ApiException("Missing the required parameter 'when' when calling placeElectricityAutonomy(Async)");
        }

        // verify the required parameter 'span' is set
        if (span == null) {
            throw new ApiException("Missing the required parameter 'span' when calling placeElectricityAutonomy(Async)");
        }

        return placeElectricityAutonomyCall(placeId, when, span, _callback);

    }

    /**
     * Get autonomy rate of the place
     * Compute the autonomy rate of the *Place* on a time period.  &#x60;autonomy &#x3D; 1 - (elec_drawn / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @return ElectricityAutonomy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ElectricityAutonomy placeElectricityAutonomy(String placeId, OffsetDateTime when, String span) throws ApiException {
        ApiResponse<ElectricityAutonomy> localVarResp = placeElectricityAutonomyWithHttpInfo(placeId, when, span);
        return localVarResp.getData();
    }

    /**
     * Get autonomy rate of the place
     * Compute the autonomy rate of the *Place* on a time period.  &#x60;autonomy &#x3D; 1 - (elec_drawn / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @return ApiResponse&lt;ElectricityAutonomy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectricityAutonomy> placeElectricityAutonomyWithHttpInfo(String placeId, OffsetDateTime when, String span) throws ApiException {
        okhttp3.Call localVarCall = placeElectricityAutonomyValidateBeforeCall(placeId, when, span, null);
        Type localVarReturnType = new TypeToken<ElectricityAutonomy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get autonomy rate of the place (asynchronously)
     * Compute the autonomy rate of the *Place* on a time period.  &#x60;autonomy &#x3D; 1 - (elec_drawn / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityAutonomyAsync(String placeId, OffsetDateTime when, String span, final ApiCallback<ElectricityAutonomy> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeElectricityAutonomyValidateBeforeCall(placeId, when, span, _callback);
        Type localVarReturnType = new TypeToken<ElectricityAutonomy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeElectricityGetFlows
     * @param placeId Unique identifier of a *Place*. (required)
     * @param flows Names of the flows requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Place is available. &#x60;code&#x60; gives the functional result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityGetFlowsCall(String placeId, List<String> flows, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/electricity/flows"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flows != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "flows", flows));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeElectricityGetFlowsValidateBeforeCall(String placeId, List<String> flows, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeElectricityGetFlows(Async)");
        }

        // verify the required parameter 'flows' is set
        if (flows == null) {
            throw new ApiException("Missing the required parameter 'flows' when calling placeElectricityGetFlows(Async)");
        }

        return placeElectricityGetFlowsCall(placeId, flows, _callback);

    }

    /**
     * Get electricity virtual flows
     * Get the mapping of virtual electricity flows to functionalities.  Some rules are applied to expand the virtual flows using the concrete flows available.  The &#x60;factor&#x60; tells how each energy value coming from a functionality must be added with values from other functionality to compute the energy of the virtual flow. Factors are usually &#x60;1&#x60; or &#x60;-1&#x60;.  The &#x60;code&#x60; property gives the result which may be partial: - If all flows are available, &#x60;200000&#x60; is returned. - If no flows are available (indicating that the place has no   electricity functionality or that no functionality has been attached   to a flow), the &#x60;code&#x60; is &#x60;200001&#x60;. The &#x60;missing&#x60; property contains   all the requested flows. - If some flows are missing, the &#x60;code&#x60; is &#x60;200002&#x60; and the &#x60;missing&#x60;   property lists them. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param flows Names of the flows requested (required)
     * @return ElectricityFlows
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Place is available. &#x60;code&#x60; gives the functional result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ElectricityFlows placeElectricityGetFlows(String placeId, List<String> flows) throws ApiException {
        ApiResponse<ElectricityFlows> localVarResp = placeElectricityGetFlowsWithHttpInfo(placeId, flows);
        return localVarResp.getData();
    }

    /**
     * Get electricity virtual flows
     * Get the mapping of virtual electricity flows to functionalities.  Some rules are applied to expand the virtual flows using the concrete flows available.  The &#x60;factor&#x60; tells how each energy value coming from a functionality must be added with values from other functionality to compute the energy of the virtual flow. Factors are usually &#x60;1&#x60; or &#x60;-1&#x60;.  The &#x60;code&#x60; property gives the result which may be partial: - If all flows are available, &#x60;200000&#x60; is returned. - If no flows are available (indicating that the place has no   electricity functionality or that no functionality has been attached   to a flow), the &#x60;code&#x60; is &#x60;200001&#x60;. The &#x60;missing&#x60; property contains   all the requested flows. - If some flows are missing, the &#x60;code&#x60; is &#x60;200002&#x60; and the &#x60;missing&#x60;   property lists them. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param flows Names of the flows requested (required)
     * @return ApiResponse&lt;ElectricityFlows&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Place is available. &#x60;code&#x60; gives the functional result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectricityFlows> placeElectricityGetFlowsWithHttpInfo(String placeId, List<String> flows) throws ApiException {
        okhttp3.Call localVarCall = placeElectricityGetFlowsValidateBeforeCall(placeId, flows, null);
        Type localVarReturnType = new TypeToken<ElectricityFlows>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get electricity virtual flows (asynchronously)
     * Get the mapping of virtual electricity flows to functionalities.  Some rules are applied to expand the virtual flows using the concrete flows available.  The &#x60;factor&#x60; tells how each energy value coming from a functionality must be added with values from other functionality to compute the energy of the virtual flow. Factors are usually &#x60;1&#x60; or &#x60;-1&#x60;.  The &#x60;code&#x60; property gives the result which may be partial: - If all flows are available, &#x60;200000&#x60; is returned. - If no flows are available (indicating that the place has no   electricity functionality or that no functionality has been attached   to a flow), the &#x60;code&#x60; is &#x60;200001&#x60;. The &#x60;missing&#x60; property contains   all the requested flows. - If some flows are missing, the &#x60;code&#x60; is &#x60;200002&#x60; and the &#x60;missing&#x60;   property lists them. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param flows Names of the flows requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Place is available. &#x60;code&#x60; gives the functional result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityGetFlowsAsync(String placeId, List<String> flows, final ApiCallback<ElectricityFlows> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeElectricityGetFlowsValidateBeforeCall(placeId, flows, _callback);
        Type localVarReturnType = new TypeToken<ElectricityFlows>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeElectricityGetFlowsSetup
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityGetFlowsSetupCall(String placeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/electricity/flows/setup"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeElectricityGetFlowsSetupValidateBeforeCall(String placeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeElectricityGetFlowsSetup(Async)");
        }

        return placeElectricityGetFlowsSetupCall(placeId, _callback);

    }

    /**
     * Get electricity flows setup
     * Get the mapping of functionalities to electricity flows.  A functionality is attached to *at most* one flow. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @return ElectricityFlowsSetup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ElectricityFlowsSetup placeElectricityGetFlowsSetup(String placeId) throws ApiException {
        ApiResponse<ElectricityFlowsSetup> localVarResp = placeElectricityGetFlowsSetupWithHttpInfo(placeId);
        return localVarResp.getData();
    }

    /**
     * Get electricity flows setup
     * Get the mapping of functionalities to electricity flows.  A functionality is attached to *at most* one flow. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @return ApiResponse&lt;ElectricityFlowsSetup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectricityFlowsSetup> placeElectricityGetFlowsSetupWithHttpInfo(String placeId) throws ApiException {
        okhttp3.Call localVarCall = placeElectricityGetFlowsSetupValidateBeforeCall(placeId, null);
        Type localVarReturnType = new TypeToken<ElectricityFlowsSetup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get electricity flows setup (asynchronously)
     * Get the mapping of functionalities to electricity flows.  A functionality is attached to *at most* one flow. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricityGetFlowsSetupAsync(String placeId, final ApiCallback<ElectricityFlowsSetup> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeElectricityGetFlowsSetupValidateBeforeCall(placeId, _callback);
        Type localVarReturnType = new TypeToken<ElectricityFlowsSetup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeElectricitySelfConsumption
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricitySelfConsumptionCall(String placeId, OffsetDateTime when, String span, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/electricity/self-consumption"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (when != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("when", when));
        }

        if (span != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("span", span));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeElectricitySelfConsumptionValidateBeforeCall(String placeId, OffsetDateTime when, String span, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeElectricitySelfConsumption(Async)");
        }

        // verify the required parameter 'when' is set
        if (when == null) {
            throw new ApiException("Missing the required parameter 'when' when calling placeElectricitySelfConsumption(Async)");
        }

        // verify the required parameter 'span' is set
        if (span == null) {
            throw new ApiException("Missing the required parameter 'span' when calling placeElectricitySelfConsumption(Async)");
        }

        return placeElectricitySelfConsumptionCall(placeId, when, span, _callback);

    }

    /**
     * Get self-consumption rate of the place
     * Compute the self-consumption rate of the *Place* on a time period.  &#x60;selfConsumption &#x3D; 1 - (elec_feed_in / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @return ElectricitySelfConsumption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ElectricitySelfConsumption placeElectricitySelfConsumption(String placeId, OffsetDateTime when, String span) throws ApiException {
        ApiResponse<ElectricitySelfConsumption> localVarResp = placeElectricitySelfConsumptionWithHttpInfo(placeId, when, span);
        return localVarResp.getData();
    }

    /**
     * Get self-consumption rate of the place
     * Compute the self-consumption rate of the *Place* on a time period.  &#x60;selfConsumption &#x3D; 1 - (elec_feed_in / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @return ApiResponse&lt;ElectricitySelfConsumption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ElectricitySelfConsumption> placeElectricitySelfConsumptionWithHttpInfo(String placeId, OffsetDateTime when, String span) throws ApiException {
        okhttp3.Call localVarCall = placeElectricitySelfConsumptionValidateBeforeCall(placeId, when, span, null);
        Type localVarReturnType = new TypeToken<ElectricitySelfConsumption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get self-consumption rate of the place (asynchronously)
     * Compute the self-consumption rate of the *Place* on a time period.  &#x60;selfConsumption &#x3D; 1 - (elec_feed_in / elec_total_usage)&#x60; 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param when A time part of the time span. (required)
     * @param span Timespan: H (hour), D (day), Wmo (week starting on Monday), Wsu (week starting on Sunday), M (month), Y (year) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeElectricitySelfConsumptionAsync(String placeId, OffsetDateTime when, String span, final ApiCallback<ElectricitySelfConsumption> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeElectricitySelfConsumptionValidateBeforeCall(placeId, when, span, _callback);
        Type localVarReturnType = new TypeToken<ElectricitySelfConsumption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
