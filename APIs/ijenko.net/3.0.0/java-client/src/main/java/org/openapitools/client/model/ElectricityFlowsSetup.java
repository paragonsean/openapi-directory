/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ElectricityFunctionality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElectricityFlowsSetup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.849068-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElectricityFlowsSetup {
  public static final String SERIALIZED_NAME_BATTERY_CHARGE = "battery_charge";
  @SerializedName(SERIALIZED_NAME_BATTERY_CHARGE)
  private Set<ElectricityFunctionality> batteryCharge = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BATTERY_DISCHARGE = "battery_discharge";
  @SerializedName(SERIALIZED_NAME_BATTERY_DISCHARGE)
  private Set<ElectricityFunctionality> batteryDischarge = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BATTERY_GRID = "battery_grid";
  @SerializedName(SERIALIZED_NAME_BATTERY_GRID)
  private Set<ElectricityFunctionality> batteryGrid = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_DRAWN = "elec_drawn";
  @SerializedName(SERIALIZED_NAME_ELEC_DRAWN)
  private Set<ElectricityFunctionality> elecDrawn = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_FEED_IN = "elec_feed_in";
  @SerializedName(SERIALIZED_NAME_ELEC_FEED_IN)
  private Set<ElectricityFunctionality> elecFeedIn = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_FROM_HOUSEHOLD = "elec_from_household";
  @SerializedName(SERIALIZED_NAME_ELEC_FROM_HOUSEHOLD)
  private Set<ElectricityFunctionality> elecFromHousehold = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_LOCAL = "elec_local";
  @SerializedName(SERIALIZED_NAME_ELEC_LOCAL)
  private Set<ElectricityFunctionality> elecLocal = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_TO_PV = "elec_to_pv";
  @SerializedName(SERIALIZED_NAME_ELEC_TO_PV)
  private Set<ElectricityFunctionality> elecToPv = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_TOTAL_GEN = "elec_total_gen";
  @SerializedName(SERIALIZED_NAME_ELEC_TOTAL_GEN)
  private Set<ElectricityFunctionality> elecTotalGen = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_TOTAL_USAGE = "elec_total_usage";
  @SerializedName(SERIALIZED_NAME_ELEC_TOTAL_USAGE)
  private Set<ElectricityFunctionality> elecTotalUsage = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ELEC_USAGE = "elec_usage";
  @SerializedName(SERIALIZED_NAME_ELEC_USAGE)
  private Set<ElectricityFunctionality> elecUsage = new LinkedHashSet<>();

  public ElectricityFlowsSetup() {
  }

  public ElectricityFlowsSetup batteryCharge(Set<ElectricityFunctionality> batteryCharge) {
    this.batteryCharge = batteryCharge;
    return this;
  }

  public ElectricityFlowsSetup addBatteryChargeItem(ElectricityFunctionality batteryChargeItem) {
    if (this.batteryCharge == null) {
      this.batteryCharge = new LinkedHashSet<>();
    }
    this.batteryCharge.add(batteryChargeItem);
    return this;
  }

  /**
   * Get batteryCharge
   * @return batteryCharge
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getBatteryCharge() {
    return batteryCharge;
  }

  public void setBatteryCharge(Set<ElectricityFunctionality> batteryCharge) {
    this.batteryCharge = batteryCharge;
  }


  public ElectricityFlowsSetup batteryDischarge(Set<ElectricityFunctionality> batteryDischarge) {
    this.batteryDischarge = batteryDischarge;
    return this;
  }

  public ElectricityFlowsSetup addBatteryDischargeItem(ElectricityFunctionality batteryDischargeItem) {
    if (this.batteryDischarge == null) {
      this.batteryDischarge = new LinkedHashSet<>();
    }
    this.batteryDischarge.add(batteryDischargeItem);
    return this;
  }

  /**
   * Get batteryDischarge
   * @return batteryDischarge
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getBatteryDischarge() {
    return batteryDischarge;
  }

  public void setBatteryDischarge(Set<ElectricityFunctionality> batteryDischarge) {
    this.batteryDischarge = batteryDischarge;
  }


  public ElectricityFlowsSetup batteryGrid(Set<ElectricityFunctionality> batteryGrid) {
    this.batteryGrid = batteryGrid;
    return this;
  }

  public ElectricityFlowsSetup addBatteryGridItem(ElectricityFunctionality batteryGridItem) {
    if (this.batteryGrid == null) {
      this.batteryGrid = new LinkedHashSet<>();
    }
    this.batteryGrid.add(batteryGridItem);
    return this;
  }

  /**
   * Get batteryGrid
   * @return batteryGrid
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getBatteryGrid() {
    return batteryGrid;
  }

  public void setBatteryGrid(Set<ElectricityFunctionality> batteryGrid) {
    this.batteryGrid = batteryGrid;
  }


  public ElectricityFlowsSetup elecDrawn(Set<ElectricityFunctionality> elecDrawn) {
    this.elecDrawn = elecDrawn;
    return this;
  }

  public ElectricityFlowsSetup addElecDrawnItem(ElectricityFunctionality elecDrawnItem) {
    if (this.elecDrawn == null) {
      this.elecDrawn = new LinkedHashSet<>();
    }
    this.elecDrawn.add(elecDrawnItem);
    return this;
  }

  /**
   * Get elecDrawn
   * @return elecDrawn
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecDrawn() {
    return elecDrawn;
  }

  public void setElecDrawn(Set<ElectricityFunctionality> elecDrawn) {
    this.elecDrawn = elecDrawn;
  }


  public ElectricityFlowsSetup elecFeedIn(Set<ElectricityFunctionality> elecFeedIn) {
    this.elecFeedIn = elecFeedIn;
    return this;
  }

  public ElectricityFlowsSetup addElecFeedInItem(ElectricityFunctionality elecFeedInItem) {
    if (this.elecFeedIn == null) {
      this.elecFeedIn = new LinkedHashSet<>();
    }
    this.elecFeedIn.add(elecFeedInItem);
    return this;
  }

  /**
   * Get elecFeedIn
   * @return elecFeedIn
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecFeedIn() {
    return elecFeedIn;
  }

  public void setElecFeedIn(Set<ElectricityFunctionality> elecFeedIn) {
    this.elecFeedIn = elecFeedIn;
  }


  public ElectricityFlowsSetup elecFromHousehold(Set<ElectricityFunctionality> elecFromHousehold) {
    this.elecFromHousehold = elecFromHousehold;
    return this;
  }

  public ElectricityFlowsSetup addElecFromHouseholdItem(ElectricityFunctionality elecFromHouseholdItem) {
    if (this.elecFromHousehold == null) {
      this.elecFromHousehold = new LinkedHashSet<>();
    }
    this.elecFromHousehold.add(elecFromHouseholdItem);
    return this;
  }

  /**
   * Get elecFromHousehold
   * @return elecFromHousehold
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecFromHousehold() {
    return elecFromHousehold;
  }

  public void setElecFromHousehold(Set<ElectricityFunctionality> elecFromHousehold) {
    this.elecFromHousehold = elecFromHousehold;
  }


  public ElectricityFlowsSetup elecLocal(Set<ElectricityFunctionality> elecLocal) {
    this.elecLocal = elecLocal;
    return this;
  }

  public ElectricityFlowsSetup addElecLocalItem(ElectricityFunctionality elecLocalItem) {
    if (this.elecLocal == null) {
      this.elecLocal = new LinkedHashSet<>();
    }
    this.elecLocal.add(elecLocalItem);
    return this;
  }

  /**
   * Get elecLocal
   * @return elecLocal
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecLocal() {
    return elecLocal;
  }

  public void setElecLocal(Set<ElectricityFunctionality> elecLocal) {
    this.elecLocal = elecLocal;
  }


  public ElectricityFlowsSetup elecToPv(Set<ElectricityFunctionality> elecToPv) {
    this.elecToPv = elecToPv;
    return this;
  }

  public ElectricityFlowsSetup addElecToPvItem(ElectricityFunctionality elecToPvItem) {
    if (this.elecToPv == null) {
      this.elecToPv = new LinkedHashSet<>();
    }
    this.elecToPv.add(elecToPvItem);
    return this;
  }

  /**
   * Get elecToPv
   * @return elecToPv
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecToPv() {
    return elecToPv;
  }

  public void setElecToPv(Set<ElectricityFunctionality> elecToPv) {
    this.elecToPv = elecToPv;
  }


  public ElectricityFlowsSetup elecTotalGen(Set<ElectricityFunctionality> elecTotalGen) {
    this.elecTotalGen = elecTotalGen;
    return this;
  }

  public ElectricityFlowsSetup addElecTotalGenItem(ElectricityFunctionality elecTotalGenItem) {
    if (this.elecTotalGen == null) {
      this.elecTotalGen = new LinkedHashSet<>();
    }
    this.elecTotalGen.add(elecTotalGenItem);
    return this;
  }

  /**
   * Get elecTotalGen
   * @return elecTotalGen
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecTotalGen() {
    return elecTotalGen;
  }

  public void setElecTotalGen(Set<ElectricityFunctionality> elecTotalGen) {
    this.elecTotalGen = elecTotalGen;
  }


  public ElectricityFlowsSetup elecTotalUsage(Set<ElectricityFunctionality> elecTotalUsage) {
    this.elecTotalUsage = elecTotalUsage;
    return this;
  }

  public ElectricityFlowsSetup addElecTotalUsageItem(ElectricityFunctionality elecTotalUsageItem) {
    if (this.elecTotalUsage == null) {
      this.elecTotalUsage = new LinkedHashSet<>();
    }
    this.elecTotalUsage.add(elecTotalUsageItem);
    return this;
  }

  /**
   * Get elecTotalUsage
   * @return elecTotalUsage
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecTotalUsage() {
    return elecTotalUsage;
  }

  public void setElecTotalUsage(Set<ElectricityFunctionality> elecTotalUsage) {
    this.elecTotalUsage = elecTotalUsage;
  }


  public ElectricityFlowsSetup elecUsage(Set<ElectricityFunctionality> elecUsage) {
    this.elecUsage = elecUsage;
    return this;
  }

  public ElectricityFlowsSetup addElecUsageItem(ElectricityFunctionality elecUsageItem) {
    if (this.elecUsage == null) {
      this.elecUsage = new LinkedHashSet<>();
    }
    this.elecUsage.add(elecUsageItem);
    return this;
  }

  /**
   * Get elecUsage
   * @return elecUsage
   */
  @javax.annotation.Nullable
  public Set<ElectricityFunctionality> getElecUsage() {
    return elecUsage;
  }

  public void setElecUsage(Set<ElectricityFunctionality> elecUsage) {
    this.elecUsage = elecUsage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElectricityFlowsSetup electricityFlowsSetup = (ElectricityFlowsSetup) o;
    return Objects.equals(this.batteryCharge, electricityFlowsSetup.batteryCharge) &&
        Objects.equals(this.batteryDischarge, electricityFlowsSetup.batteryDischarge) &&
        Objects.equals(this.batteryGrid, electricityFlowsSetup.batteryGrid) &&
        Objects.equals(this.elecDrawn, electricityFlowsSetup.elecDrawn) &&
        Objects.equals(this.elecFeedIn, electricityFlowsSetup.elecFeedIn) &&
        Objects.equals(this.elecFromHousehold, electricityFlowsSetup.elecFromHousehold) &&
        Objects.equals(this.elecLocal, electricityFlowsSetup.elecLocal) &&
        Objects.equals(this.elecToPv, electricityFlowsSetup.elecToPv) &&
        Objects.equals(this.elecTotalGen, electricityFlowsSetup.elecTotalGen) &&
        Objects.equals(this.elecTotalUsage, electricityFlowsSetup.elecTotalUsage) &&
        Objects.equals(this.elecUsage, electricityFlowsSetup.elecUsage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batteryCharge, batteryDischarge, batteryGrid, elecDrawn, elecFeedIn, elecFromHousehold, elecLocal, elecToPv, elecTotalGen, elecTotalUsage, elecUsage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElectricityFlowsSetup {\n");
    sb.append("    batteryCharge: ").append(toIndentedString(batteryCharge)).append("\n");
    sb.append("    batteryDischarge: ").append(toIndentedString(batteryDischarge)).append("\n");
    sb.append("    batteryGrid: ").append(toIndentedString(batteryGrid)).append("\n");
    sb.append("    elecDrawn: ").append(toIndentedString(elecDrawn)).append("\n");
    sb.append("    elecFeedIn: ").append(toIndentedString(elecFeedIn)).append("\n");
    sb.append("    elecFromHousehold: ").append(toIndentedString(elecFromHousehold)).append("\n");
    sb.append("    elecLocal: ").append(toIndentedString(elecLocal)).append("\n");
    sb.append("    elecToPv: ").append(toIndentedString(elecToPv)).append("\n");
    sb.append("    elecTotalGen: ").append(toIndentedString(elecTotalGen)).append("\n");
    sb.append("    elecTotalUsage: ").append(toIndentedString(elecTotalUsage)).append("\n");
    sb.append("    elecUsage: ").append(toIndentedString(elecUsage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("battery_charge");
    openapiFields.add("battery_discharge");
    openapiFields.add("battery_grid");
    openapiFields.add("elec_drawn");
    openapiFields.add("elec_feed_in");
    openapiFields.add("elec_from_household");
    openapiFields.add("elec_local");
    openapiFields.add("elec_to_pv");
    openapiFields.add("elec_total_gen");
    openapiFields.add("elec_total_usage");
    openapiFields.add("elec_usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElectricityFlowsSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElectricityFlowsSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElectricityFlowsSetup is not found in the empty JSON string", ElectricityFlowsSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElectricityFlowsSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElectricityFlowsSetup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("battery_charge") != null && !jsonObj.get("battery_charge").isJsonNull()) {
        JsonArray jsonArraybatteryCharge = jsonObj.getAsJsonArray("battery_charge");
        if (jsonArraybatteryCharge != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battery_charge").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battery_charge` to be an array in the JSON string but got `%s`", jsonObj.get("battery_charge").toString()));
          }

          // validate the optional field `battery_charge` (array)
          for (int i = 0; i < jsonArraybatteryCharge.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArraybatteryCharge.get(i));
          };
        }
      }
      if (jsonObj.get("battery_discharge") != null && !jsonObj.get("battery_discharge").isJsonNull()) {
        JsonArray jsonArraybatteryDischarge = jsonObj.getAsJsonArray("battery_discharge");
        if (jsonArraybatteryDischarge != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battery_discharge").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battery_discharge` to be an array in the JSON string but got `%s`", jsonObj.get("battery_discharge").toString()));
          }

          // validate the optional field `battery_discharge` (array)
          for (int i = 0; i < jsonArraybatteryDischarge.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArraybatteryDischarge.get(i));
          };
        }
      }
      if (jsonObj.get("battery_grid") != null && !jsonObj.get("battery_grid").isJsonNull()) {
        JsonArray jsonArraybatteryGrid = jsonObj.getAsJsonArray("battery_grid");
        if (jsonArraybatteryGrid != null) {
          // ensure the json data is an array
          if (!jsonObj.get("battery_grid").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `battery_grid` to be an array in the JSON string but got `%s`", jsonObj.get("battery_grid").toString()));
          }

          // validate the optional field `battery_grid` (array)
          for (int i = 0; i < jsonArraybatteryGrid.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArraybatteryGrid.get(i));
          };
        }
      }
      if (jsonObj.get("elec_drawn") != null && !jsonObj.get("elec_drawn").isJsonNull()) {
        JsonArray jsonArrayelecDrawn = jsonObj.getAsJsonArray("elec_drawn");
        if (jsonArrayelecDrawn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_drawn").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_drawn` to be an array in the JSON string but got `%s`", jsonObj.get("elec_drawn").toString()));
          }

          // validate the optional field `elec_drawn` (array)
          for (int i = 0; i < jsonArrayelecDrawn.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecDrawn.get(i));
          };
        }
      }
      if (jsonObj.get("elec_feed_in") != null && !jsonObj.get("elec_feed_in").isJsonNull()) {
        JsonArray jsonArrayelecFeedIn = jsonObj.getAsJsonArray("elec_feed_in");
        if (jsonArrayelecFeedIn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_feed_in").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_feed_in` to be an array in the JSON string but got `%s`", jsonObj.get("elec_feed_in").toString()));
          }

          // validate the optional field `elec_feed_in` (array)
          for (int i = 0; i < jsonArrayelecFeedIn.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecFeedIn.get(i));
          };
        }
      }
      if (jsonObj.get("elec_from_household") != null && !jsonObj.get("elec_from_household").isJsonNull()) {
        JsonArray jsonArrayelecFromHousehold = jsonObj.getAsJsonArray("elec_from_household");
        if (jsonArrayelecFromHousehold != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_from_household").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_from_household` to be an array in the JSON string but got `%s`", jsonObj.get("elec_from_household").toString()));
          }

          // validate the optional field `elec_from_household` (array)
          for (int i = 0; i < jsonArrayelecFromHousehold.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecFromHousehold.get(i));
          };
        }
      }
      if (jsonObj.get("elec_local") != null && !jsonObj.get("elec_local").isJsonNull()) {
        JsonArray jsonArrayelecLocal = jsonObj.getAsJsonArray("elec_local");
        if (jsonArrayelecLocal != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_local").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_local` to be an array in the JSON string but got `%s`", jsonObj.get("elec_local").toString()));
          }

          // validate the optional field `elec_local` (array)
          for (int i = 0; i < jsonArrayelecLocal.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecLocal.get(i));
          };
        }
      }
      if (jsonObj.get("elec_to_pv") != null && !jsonObj.get("elec_to_pv").isJsonNull()) {
        JsonArray jsonArrayelecToPv = jsonObj.getAsJsonArray("elec_to_pv");
        if (jsonArrayelecToPv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_to_pv").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_to_pv` to be an array in the JSON string but got `%s`", jsonObj.get("elec_to_pv").toString()));
          }

          // validate the optional field `elec_to_pv` (array)
          for (int i = 0; i < jsonArrayelecToPv.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecToPv.get(i));
          };
        }
      }
      if (jsonObj.get("elec_total_gen") != null && !jsonObj.get("elec_total_gen").isJsonNull()) {
        JsonArray jsonArrayelecTotalGen = jsonObj.getAsJsonArray("elec_total_gen");
        if (jsonArrayelecTotalGen != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_total_gen").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_total_gen` to be an array in the JSON string but got `%s`", jsonObj.get("elec_total_gen").toString()));
          }

          // validate the optional field `elec_total_gen` (array)
          for (int i = 0; i < jsonArrayelecTotalGen.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecTotalGen.get(i));
          };
        }
      }
      if (jsonObj.get("elec_total_usage") != null && !jsonObj.get("elec_total_usage").isJsonNull()) {
        JsonArray jsonArrayelecTotalUsage = jsonObj.getAsJsonArray("elec_total_usage");
        if (jsonArrayelecTotalUsage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_total_usage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_total_usage` to be an array in the JSON string but got `%s`", jsonObj.get("elec_total_usage").toString()));
          }

          // validate the optional field `elec_total_usage` (array)
          for (int i = 0; i < jsonArrayelecTotalUsage.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecTotalUsage.get(i));
          };
        }
      }
      if (jsonObj.get("elec_usage") != null && !jsonObj.get("elec_usage").isJsonNull()) {
        JsonArray jsonArrayelecUsage = jsonObj.getAsJsonArray("elec_usage");
        if (jsonArrayelecUsage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elec_usage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elec_usage` to be an array in the JSON string but got `%s`", jsonObj.get("elec_usage").toString()));
          }

          // validate the optional field `elec_usage` (array)
          for (int i = 0; i < jsonArrayelecUsage.size(); i++) {
            ElectricityFunctionality.validateJsonElement(jsonArrayelecUsage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElectricityFlowsSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElectricityFlowsSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElectricityFlowsSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElectricityFlowsSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<ElectricityFlowsSetup>() {
           @Override
           public void write(JsonWriter out, ElectricityFlowsSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElectricityFlowsSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElectricityFlowsSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElectricityFlowsSetup
   * @throws IOException if the JSON string is invalid with respect to ElectricityFlowsSetup
   */
  public static ElectricityFlowsSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElectricityFlowsSetup.class);
  }

  /**
   * Convert an instance of ElectricityFlowsSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

