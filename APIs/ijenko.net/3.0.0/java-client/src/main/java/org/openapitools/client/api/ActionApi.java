/*
 * IoE² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionResult;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorGatewayUnreachable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deviceRun
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceRunCall(String deviceId, String action, String functionalities, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = arguments;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}/run/{action}"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()))
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (functionalities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("functionalities", functionalities));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceRunValidateBeforeCall(String deviceId, String action, String functionalities, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deviceRun(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling deviceRun(Async)");
        }

        // verify the required parameter 'functionalities' is set
        if (functionalities == null) {
            throw new ApiException("Missing the required parameter 'functionalities' when calling deviceRun(Async)");
        }

        // verify the required parameter 'arguments' is set
        if (arguments == null) {
            throw new ApiException("Missing the required parameter 'arguments' when calling deviceRun(Async)");
        }

        return deviceRunCall(deviceId, action, functionalities, arguments, _callback);

    }

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple Functionalities selected with tags. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @return List&lt;ActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ActionResult> deviceRun(String deviceId, String action, String functionalities, List<Object> arguments) throws ApiException {
        ApiResponse<List<ActionResult>> localVarResp = deviceRunWithHttpInfo(deviceId, action, functionalities, arguments);
        return localVarResp.getData();
    }

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple Functionalities selected with tags. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @return ApiResponse&lt;List&lt;ActionResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActionResult>> deviceRunWithHttpInfo(String deviceId, String action, String functionalities, List<Object> arguments) throws ApiException {
        okhttp3.Call localVarCall = deviceRunValidateBeforeCall(deviceId, action, functionalities, arguments, null);
        Type localVarReturnType = new TypeToken<List<ActionResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run actions (asynchronously)
     * Run an *Action* on zero, one or multiple Functionalities selected with tags. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceRunAsync(String deviceId, String action, String functionalities, List<Object> arguments, final ApiCallback<List<ActionResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceRunValidateBeforeCall(deviceId, action, functionalities, arguments, _callback);
        Type localVarReturnType = new TypeToken<List<ActionResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityRun
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param arguments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityRunCall(String functionalityId, String action, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = arguments;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/run/{action}"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()))
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityRunValidateBeforeCall(String functionalityId, String action, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityRun(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling functionalityRun(Async)");
        }

        // verify the required parameter 'arguments' is set
        if (arguments == null) {
            throw new ApiException("Missing the required parameter 'arguments' when calling functionalityRun(Async)");
        }

        return functionalityRunCall(functionalityId, action, arguments, _callback);

    }

    /**
     * Run an action
     * Run an action on the Functionality. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param arguments  (required)
     * @return ActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ActionResult functionalityRun(String functionalityId, String action, List<Object> arguments) throws ApiException {
        ApiResponse<ActionResult> localVarResp = functionalityRunWithHttpInfo(functionalityId, action, arguments);
        return localVarResp.getData();
    }

    /**
     * Run an action
     * Run an action on the Functionality. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param arguments  (required)
     * @return ApiResponse&lt;ActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionResult> functionalityRunWithHttpInfo(String functionalityId, String action, List<Object> arguments) throws ApiException {
        okhttp3.Call localVarCall = functionalityRunValidateBeforeCall(functionalityId, action, arguments, null);
        Type localVarReturnType = new TypeToken<ActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run an action (asynchronously)
     * Run an action on the Functionality. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param arguments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityRunAsync(String functionalityId, String action, List<Object> arguments, final ApiCallback<ActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityRunValidateBeforeCall(functionalityId, action, arguments, _callback);
        Type localVarReturnType = new TypeToken<ActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeRun
     * @param placeId Unique identifier of a *Place*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as « OR ». (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeRunCall(String placeId, String action, String devices, String functionalities, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = arguments;

        // create path and map variables
        String localVarPath = "/places/{placeId}/run/{action}"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()))
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (devices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devices", devices));
        }

        if (functionalities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("functionalities", functionalities));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeRunValidateBeforeCall(String placeId, String action, String devices, String functionalities, List<Object> arguments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeRun(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling placeRun(Async)");
        }

        // verify the required parameter 'devices' is set
        if (devices == null) {
            throw new ApiException("Missing the required parameter 'devices' when calling placeRun(Async)");
        }

        // verify the required parameter 'functionalities' is set
        if (functionalities == null) {
            throw new ApiException("Missing the required parameter 'functionalities' when calling placeRun(Async)");
        }

        // verify the required parameter 'arguments' is set
        if (arguments == null) {
            throw new ApiException("Missing the required parameter 'arguments' when calling placeRun(Async)");
        }

        return placeRunCall(placeId, action, devices, functionalities, arguments, _callback);

    }

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple *Functionalities* selected with tags.  *Device* and *Functionality* selection are combined with « AND ».  If no functionality is matched by the device/functionality selection, an empty array is returned. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as « OR ». (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @return List&lt;ActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public List<ActionResult> placeRun(String placeId, String action, String devices, String functionalities, List<Object> arguments) throws ApiException {
        ApiResponse<List<ActionResult>> localVarResp = placeRunWithHttpInfo(placeId, action, devices, functionalities, arguments);
        return localVarResp.getData();
    }

    /**
     * Run actions
     * Run an *Action* on zero, one or multiple *Functionalities* selected with tags.  *Device* and *Functionality* selection are combined with « AND ».  If no functionality is matched by the device/functionality selection, an empty array is returned. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as « OR ». (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @return ApiResponse&lt;List&lt;ActionResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ActionResult>> placeRunWithHttpInfo(String placeId, String action, String devices, String functionalities, List<Object> arguments) throws ApiException {
        okhttp3.Call localVarCall = placeRunValidateBeforeCall(placeId, action, devices, functionalities, arguments, null);
        Type localVarReturnType = new TypeToken<List<ActionResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run actions (asynchronously)
     * Run an *Action* on zero, one or multiple *Functionalities* selected with tags.  *Device* and *Functionality* selection are combined with « AND ».  If no functionality is matched by the device/functionality selection, an empty array is returned. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param action Identifier of an *Action* inside a *Functionality*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as « OR ». (required)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as « OR ».  (required)
     * @param arguments  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 450 </td><td> The gateway of the Place is not reachable. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeRunAsync(String placeId, String action, String devices, String functionalities, List<Object> arguments, final ApiCallback<List<ActionResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeRunValidateBeforeCall(placeId, action, devices, functionalities, arguments, _callback);
        Type localVarReturnType = new TypeToken<List<ActionResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
