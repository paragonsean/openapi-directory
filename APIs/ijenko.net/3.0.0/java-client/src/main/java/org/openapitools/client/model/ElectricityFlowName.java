/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Name of an electricity flow
 */
@JsonAdapter(ElectricityFlowName.Adapter.class)
public enum ElectricityFlowName {
  
  BATTERY_CHARGE("battery_charge"),
  
  BATTERY_DISCHARGE("battery_discharge"),
  
  BATTERY_GRID("battery_grid"),
  
  ELEC_TOTAL_GEN("elec_total_gen"),
  
  ELEC_TOTAL_USAGE("elec_total_usage"),
  
  ELEC_FEED_IN("elec_feed_in"),
  
  ELEC_DRAWN("elec_drawn"),
  
  ELEC_LOCAL("elec_local"),
  
  ELEC_FROM_HOUSEHOLD("elec_from_household"),
  
  ELEC_TO_PV("elec_to_pv"),
  
  ELEC_USAGE("elec_usage");

  private String value;

  ElectricityFlowName(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ElectricityFlowName fromValue(String value) {
    for (ElectricityFlowName b : ElectricityFlowName.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ElectricityFlowName> {
    @Override
    public void write(final JsonWriter jsonWriter, final ElectricityFlowName enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ElectricityFlowName read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ElectricityFlowName.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ElectricityFlowName.fromValue(value);
  }
}

