/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttributeValue;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.ErrorSubEntity;
import org.openapitools.client.model.Functionality;
import org.openapitools.client.model.FunctionalityCreated;
import org.openapitools.client.model.FunctionalityItem;
import org.openapitools.client.model.FunctionalityNew;
import org.openapitools.client.model.FunctionalityPatch;
import org.openapitools.client.model.MetadataPatch;
import java.time.OffsetDateTime;
import java.util.Set;
import org.openapitools.client.model.TagsPatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FunctionalityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionalityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionalityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deviceAddFunctionality_0
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param functionalityInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Functionality* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Device* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAddFunctionality_0Call(String deviceId, FunctionalityNew functionalityInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionalityInfo;

        // create path and map variables
        String localVarPath = "/devices/{deviceId}/functionalities"
            .replace("{" + "deviceId" + "}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceAddFunctionality_0ValidateBeforeCall(String deviceId, FunctionalityNew functionalityInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deviceAddFunctionality_0(Async)");
        }

        // verify the required parameter 'functionalityInfo' is set
        if (functionalityInfo == null) {
            throw new ApiException("Missing the required parameter 'functionalityInfo' when calling deviceAddFunctionality_0(Async)");
        }

        return deviceAddFunctionality_0Call(deviceId, functionalityInfo, _callback);

    }

    /**
     * Add dynamically a functionality
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param functionalityInfo  (required)
     * @return FunctionalityCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Functionality* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Device* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public FunctionalityCreated deviceAddFunctionality_0(String deviceId, FunctionalityNew functionalityInfo) throws ApiException {
        ApiResponse<FunctionalityCreated> localVarResp = deviceAddFunctionality_0WithHttpInfo(deviceId, functionalityInfo);
        return localVarResp.getData();
    }

    /**
     * Add dynamically a functionality
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param functionalityInfo  (required)
     * @return ApiResponse&lt;FunctionalityCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Functionality* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Device* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FunctionalityCreated> deviceAddFunctionality_0WithHttpInfo(String deviceId, FunctionalityNew functionalityInfo) throws ApiException {
        okhttp3.Call localVarCall = deviceAddFunctionality_0ValidateBeforeCall(deviceId, functionalityInfo, null);
        Type localVarReturnType = new TypeToken<FunctionalityCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add dynamically a functionality (asynchronously)
     * Add a *Functionality* to the device.  Required parameters are : - functionality class - endpoint  Each device class has its own restrictions on which Functionality classes can be added and on which endpoints. Only a few devices allow to add Functionalities.  |Device class|Functionality class|Endpoints| |------------|-------------------|---------| |MINT        |CurrentPeriod      |1,2,3    | |MINT        |ElectricityRates   |1,2,3    | |MINT        |GenericRate        |1,2,3    |  **Note**: requires full access to the *Account*. 
     * @param deviceId Unique identifier of a *Device*. (required)
     * @param functionalityInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Functionality* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Device* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceAddFunctionality_0Async(String deviceId, FunctionalityNew functionalityInfo, final ApiCallback<FunctionalityCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceAddFunctionality_0ValidateBeforeCall(deviceId, functionalityInfo, _callback);
        Type localVarReturnType = new TypeToken<FunctionalityCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalitiesGet
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalitiesGetCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalitiesGetValidateBeforeCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalitiesGet(Async)");
        }

        return functionalitiesGetCall(functionalityId, _callback);

    }

    /**
     * Information about a Functionality
     * Get the *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return Functionality
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Functionality functionalitiesGet(String functionalityId) throws ApiException {
        ApiResponse<Functionality> localVarResp = functionalitiesGetWithHttpInfo(functionalityId);
        return localVarResp.getData();
    }

    /**
     * Information about a Functionality
     * Get the *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return ApiResponse&lt;Functionality&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Functionality> functionalitiesGetWithHttpInfo(String functionalityId) throws ApiException {
        okhttp3.Call localVarCall = functionalitiesGetValidateBeforeCall(functionalityId, null);
        Type localVarReturnType = new TypeToken<Functionality>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about a Functionality (asynchronously)
     * Get the *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalitiesGetAsync(String functionalityId, final ApiCallback<Functionality> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalitiesGetValidateBeforeCall(functionalityId, _callback);
        Type localVarReturnType = new TypeToken<Functionality>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityGetMetadata
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityGetMetadataCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/metadata"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityGetMetadataValidateBeforeCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityGetMetadata(Async)");
        }

        return functionalityGetMetadataCall(functionalityId, _callback);

    }

    /**
     * List metadata
     * Get the metadata.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> functionalityGetMetadata(String functionalityId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = functionalityGetMetadataWithHttpInfo(functionalityId);
        return localVarResp.getData();
    }

    /**
     * List metadata
     * Get the metadata.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> functionalityGetMetadataWithHttpInfo(String functionalityId) throws ApiException {
        okhttp3.Call localVarCall = functionalityGetMetadataValidateBeforeCall(functionalityId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metadata (asynchronously)
     * Get the metadata.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityGetMetadataAsync(String functionalityId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityGetMetadataValidateBeforeCall(functionalityId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityGetTags
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityGetTagsCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/tags"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityGetTagsValidateBeforeCall(String functionalityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityGetTags(Async)");
        }

        return functionalityGetTagsCall(functionalityId, _callback);

    }

    /**
     * List tags
     * Get the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return Set&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<String> functionalityGetTags(String functionalityId) throws ApiException {
        ApiResponse<Set<String>> localVarResp = functionalityGetTagsWithHttpInfo(functionalityId);
        return localVarResp.getData();
    }

    /**
     * List tags
     * Get the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @return ApiResponse&lt;Set&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<String>> functionalityGetTagsWithHttpInfo(String functionalityId) throws ApiException {
        okhttp3.Call localVarCall = functionalityGetTagsValidateBeforeCall(functionalityId, null);
        Type localVarReturnType = new TypeToken<Set<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tags (asynchronously)
     * Get the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityGetTagsAsync(String functionalityId, final ApiCallback<Set<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityGetTagsValidateBeforeCall(functionalityId, _callback);
        Type localVarReturnType = new TypeToken<Set<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityPatch
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param functionalityPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchCall(String functionalityId, FunctionalityPatch functionalityPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionalityPatch;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityPatchValidateBeforeCall(String functionalityId, FunctionalityPatch functionalityPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityPatch(Async)");
        }

        // verify the required parameter 'functionalityPatch' is set
        if (functionalityPatch == null) {
            throw new ApiException("Missing the required parameter 'functionalityPatch' when calling functionalityPatch(Async)");
        }

        return functionalityPatchCall(functionalityId, functionalityPatch, _callback);

    }

    /**
     * Modify a Functionality
     * Modify information about a *Functionality*: its name. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param functionalityPatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void functionalityPatch(String functionalityId, FunctionalityPatch functionalityPatch) throws ApiException {
        functionalityPatchWithHttpInfo(functionalityId, functionalityPatch);
    }

    /**
     * Modify a Functionality
     * Modify information about a *Functionality*: its name. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param functionalityPatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> functionalityPatchWithHttpInfo(String functionalityId, FunctionalityPatch functionalityPatch) throws ApiException {
        okhttp3.Call localVarCall = functionalityPatchValidateBeforeCall(functionalityId, functionalityPatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify a Functionality (asynchronously)
     * Modify information about a *Functionality*: its name. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param functionalityPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchAsync(String functionalityId, FunctionalityPatch functionalityPatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityPatchValidateBeforeCall(functionalityId, functionalityPatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityPatchMetadata
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchMetadataCall(String functionalityId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataPatch;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/metadata"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityPatchMetadataValidateBeforeCall(String functionalityId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityPatchMetadata(Async)");
        }

        // verify the required parameter 'metadataPatch' is set
        if (metadataPatch == null) {
            throw new ApiException("Missing the required parameter 'metadataPatch' when calling functionalityPatchMetadata(Async)");
        }

        return functionalityPatchMetadataCall(functionalityId, metadataPatch, _callback);

    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> functionalityPatchMetadata(String functionalityId, MetadataPatch metadataPatch) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = functionalityPatchMetadataWithHttpInfo(functionalityId, metadataPatch);
        return localVarResp.getData();
    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> functionalityPatchMetadataWithHttpInfo(String functionalityId, MetadataPatch metadataPatch) throws ApiException {
        okhttp3.Call localVarCall = functionalityPatchMetadataValidateBeforeCall(functionalityId, metadataPatch, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify metadata (asynchronously)
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchMetadataAsync(String functionalityId, MetadataPatch metadataPatch, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityPatchMetadataValidateBeforeCall(functionalityId, metadataPatch, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityPatchTags
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param tagsPatch Modifications to apply to the tags list of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new list of tags is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchTagsCall(String functionalityId, TagsPatch tagsPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsPatch;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/tags"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityPatchTagsValidateBeforeCall(String functionalityId, TagsPatch tagsPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityPatchTags(Async)");
        }

        // verify the required parameter 'tagsPatch' is set
        if (tagsPatch == null) {
            throw new ApiException("Missing the required parameter 'tagsPatch' when calling functionalityPatchTags(Async)");
        }

        return functionalityPatchTagsCall(functionalityId, tagsPatch, _callback);

    }

    /**
     * Modify tags
     * Modify the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param tagsPatch Modifications to apply to the tags list of the resource.  (required)
     * @return Set&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new list of tags is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<String> functionalityPatchTags(String functionalityId, TagsPatch tagsPatch) throws ApiException {
        ApiResponse<Set<String>> localVarResp = functionalityPatchTagsWithHttpInfo(functionalityId, tagsPatch);
        return localVarResp.getData();
    }

    /**
     * Modify tags
     * Modify the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param tagsPatch Modifications to apply to the tags list of the resource.  (required)
     * @return ApiResponse&lt;Set&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new list of tags is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<String>> functionalityPatchTagsWithHttpInfo(String functionalityId, TagsPatch tagsPatch) throws ApiException {
        okhttp3.Call localVarCall = functionalityPatchTagsValidateBeforeCall(functionalityId, tagsPatch, null);
        Type localVarReturnType = new TypeToken<Set<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify tags (asynchronously)
     * Modify the tags of a *Functionality*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param tagsPatch Modifications to apply to the tags list of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new list of tags is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Functionality* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityPatchTagsAsync(String functionalityId, TagsPatch tagsPatch, final ApiCallback<Set<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityPatchTagsValidateBeforeCall(functionalityId, tagsPatch, _callback);
        Type localVarReturnType = new TypeToken<Set<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalitySet
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param value New value for the *Attribute*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> *Attribute* is not writable.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalitySetCall(String functionalityId, String attributeName, Object value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/attributes/{attributeName}"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()))
            .replace("{" + "attributeName" + "}", localVarApiClient.escapeString(attributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalitySetValidateBeforeCall(String functionalityId, String attributeName, Object value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalitySet(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling functionalitySet(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling functionalitySet(Async)");
        }

        return functionalitySetCall(functionalityId, attributeName, value, _callback);

    }

    /**
     * Modify an Attribute value
     * Modify the value of the *Attribute*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param value New value for the *Attribute*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> *Attribute* is not writable.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void functionalitySet(String functionalityId, String attributeName, Object value) throws ApiException {
        functionalitySetWithHttpInfo(functionalityId, attributeName, value);
    }

    /**
     * Modify an Attribute value
     * Modify the value of the *Attribute*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param value New value for the *Attribute*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> *Attribute* is not writable.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> functionalitySetWithHttpInfo(String functionalityId, String attributeName, Object value) throws ApiException {
        okhttp3.Call localVarCall = functionalitySetValidateBeforeCall(functionalityId, attributeName, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify an Attribute value (asynchronously)
     * Modify the value of the *Attribute*.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param value New value for the *Attribute*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> *Attribute* is not writable.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalitySetAsync(String functionalityId, String attributeName, Object value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalitySetValidateBeforeCall(functionalityId, attributeName, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityValue
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No value has yet been set on this attribute. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityValueCall(String functionalityId, String attributeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/attributes/{attributeName}"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()))
            .replace("{" + "attributeName" + "}", localVarApiClient.escapeString(attributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityValueValidateBeforeCall(String functionalityId, String attributeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityValue(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling functionalityValue(Async)");
        }

        return functionalityValueCall(functionalityId, attributeName, _callback);

    }

    /**
     * Get an Attribute value
     * Get the *Attribute* value and the last time when it changed.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @return AttributeValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No value has yet been set on this attribute. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public AttributeValue functionalityValue(String functionalityId, String attributeName) throws ApiException {
        ApiResponse<AttributeValue> localVarResp = functionalityValueWithHttpInfo(functionalityId, attributeName);
        return localVarResp.getData();
    }

    /**
     * Get an Attribute value
     * Get the *Attribute* value and the last time when it changed.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @return ApiResponse&lt;AttributeValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No value has yet been set on this attribute. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeValue> functionalityValueWithHttpInfo(String functionalityId, String attributeName) throws ApiException {
        okhttp3.Call localVarCall = functionalityValueValidateBeforeCall(functionalityId, attributeName, null);
        Type localVarReturnType = new TypeToken<AttributeValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Attribute value (asynchronously)
     * Get the *Attribute* value and the last time when it changed.
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param attributeName Identifier of an *Attribute* inside a *Functionality*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No value has yet been set on this attribute. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityValueAsync(String functionalityId, String attributeName, final ApiCallback<AttributeValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityValueValidateBeforeCall(functionalityId, attributeName, _callback);
        Type localVarReturnType = new TypeToken<AttributeValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionalityValues
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param names One or multiple *Attribute* names separated by commas (optional)
     * @param from Beginning of the time interval. (optional)
     * @param to End of the interval. Default: now.  (optional)
     * @param surround If true, return also one value before from and one value after to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityValuesCall(String functionalityId, List<String> names, OffsetDateTime from, OffsetDateTime to, Boolean surround, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functionalities/{functionalityId}/attributes"
            .replace("{" + "functionalityId" + "}", localVarApiClient.escapeString(functionalityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (names != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "names", names));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (surround != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surround", surround));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionalityValuesValidateBeforeCall(String functionalityId, List<String> names, OffsetDateTime from, OffsetDateTime to, Boolean surround, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionalityId' is set
        if (functionalityId == null) {
            throw new ApiException("Missing the required parameter 'functionalityId' when calling functionalityValues(Async)");
        }

        return functionalityValuesCall(functionalityId, names, from, to, surround, _callback);

    }

    /**
     * Get history of multiple attributes
     * Get the values of multiple *Attributes* and their history.  If the &#x60;names&#x60; parameter is not given, all the attributes of the *Functionality* are returned. As the list may be huge, this must be avoided.  If the &#x60;to&#x60; parameter is set, &#x60;from&#x60; must also be set.  If &#x60;from&#x60; is not set, only the last value is returned.  The &#x60;surround&#x60; parameter allows to ask also for one value beyond each interval boundaries.  The request may fail if too many values are asked. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param names One or multiple *Attribute* names separated by commas (optional)
     * @param from Beginning of the time interval. (optional)
     * @param to End of the interval. Default: now.  (optional)
     * @param surround If true, return also one value before from and one value after to (optional)
     * @return Map&lt;String, List&lt;AttributeValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<AttributeValue>> functionalityValues(String functionalityId, List<String> names, OffsetDateTime from, OffsetDateTime to, Boolean surround) throws ApiException {
        ApiResponse<Map<String, List<AttributeValue>>> localVarResp = functionalityValuesWithHttpInfo(functionalityId, names, from, to, surround);
        return localVarResp.getData();
    }

    /**
     * Get history of multiple attributes
     * Get the values of multiple *Attributes* and their history.  If the &#x60;names&#x60; parameter is not given, all the attributes of the *Functionality* are returned. As the list may be huge, this must be avoided.  If the &#x60;to&#x60; parameter is set, &#x60;from&#x60; must also be set.  If &#x60;from&#x60; is not set, only the last value is returned.  The &#x60;surround&#x60; parameter allows to ask also for one value beyond each interval boundaries.  The request may fail if too many values are asked. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param names One or multiple *Attribute* names separated by commas (optional)
     * @param from Beginning of the time interval. (optional)
     * @param to End of the interval. Default: now.  (optional)
     * @param surround If true, return also one value before from and one value after to (optional)
     * @return ApiResponse&lt;Map&lt;String, List&lt;AttributeValue&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<AttributeValue>>> functionalityValuesWithHttpInfo(String functionalityId, List<String> names, OffsetDateTime from, OffsetDateTime to, Boolean surround) throws ApiException {
        okhttp3.Call localVarCall = functionalityValuesValidateBeforeCall(functionalityId, names, from, to, surround, null);
        Type localVarReturnType = new TypeToken<Map<String, List<AttributeValue>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get history of multiple attributes (asynchronously)
     * Get the values of multiple *Attributes* and their history.  If the &#x60;names&#x60; parameter is not given, all the attributes of the *Functionality* are returned. As the list may be huge, this must be avoided.  If the &#x60;to&#x60; parameter is set, &#x60;from&#x60; must also be set.  If &#x60;from&#x60; is not set, only the last value is returned.  The &#x60;surround&#x60; parameter allows to ask also for one value beyond each interval boundaries.  The request may fail if too many values are asked. 
     * @param functionalityId Unique identifier of a *Functionality*. (required)
     * @param names One or multiple *Attribute* names separated by commas (optional)
     * @param from Beginning of the time interval. (optional)
     * @param to End of the interval. Default: now.  (optional)
     * @param surround If true, return also one value before from and one value after to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionalityValuesAsync(String functionalityId, List<String> names, OffsetDateTime from, OffsetDateTime to, Boolean surround, final ApiCallback<Map<String, List<AttributeValue>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionalityValuesValidateBeforeCall(functionalityId, names, from, to, surround, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<AttributeValue>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeFunctionalities
     * @param placeId Unique identifier of a *Place*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as Â« OR Â». (optional)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as Â« OR Â».  (optional)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeFunctionalitiesCall(String placeId, String devices, String functionalities, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/functionalities"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (devices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("devices", devices));
        }

        if (functionalities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("functionalities", functionalities));
        }

        if (embedMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "embed-metadata", embedMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeFunctionalitiesValidateBeforeCall(String placeId, String devices, String functionalities, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeFunctionalities(Async)");
        }

        return placeFunctionalitiesCall(placeId, devices, functionalities, embedMetadata, _callback);

    }

    /**
     * List Functionalities
     * Get the list of *Functionalities* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as Â« OR Â». (optional)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as Â« OR Â».  (optional)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return Set&lt;FunctionalityItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<FunctionalityItem> placeFunctionalities(String placeId, String devices, String functionalities, List<String> embedMetadata) throws ApiException {
        ApiResponse<Set<FunctionalityItem>> localVarResp = placeFunctionalitiesWithHttpInfo(placeId, devices, functionalities, embedMetadata);
        return localVarResp.getData();
    }

    /**
     * List Functionalities
     * Get the list of *Functionalities* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as Â« OR Â». (optional)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as Â« OR Â».  (optional)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return ApiResponse&lt;Set&lt;FunctionalityItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<FunctionalityItem>> placeFunctionalitiesWithHttpInfo(String placeId, String devices, String functionalities, List<String> embedMetadata) throws ApiException {
        okhttp3.Call localVarCall = placeFunctionalitiesValidateBeforeCall(placeId, devices, functionalities, embedMetadata, null);
        Type localVarReturnType = new TypeToken<Set<FunctionalityItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Functionalities (asynchronously)
     * Get the list of *Functionalities* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param devices Devices selector. Device tags or device classes or device ids or &#39;*&#39; for any. Multiple values are separated by &#39;|&#39; and interpreted as Â« OR Â». (optional)
     * @param functionalities Functionality selector: Functionality tags or functionality class (optionally, &#39;@&#39; followed by a endpoint in decimal) or &#39;*&#39; for all. Multiple values are separated by &#39;|&#39; and are interpreted as Â« OR Â».  (optional)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeFunctionalitiesAsync(String placeId, String devices, String functionalities, List<String> embedMetadata, final ApiCallback<Set<FunctionalityItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeFunctionalitiesValidateBeforeCall(placeId, devices, functionalities, embedMetadata, _callback);
        Type localVarReturnType = new TypeToken<Set<FunctionalityItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
