/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.PlaceItem;
import org.openapitools.client.model.UserItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Token for User API access
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:22.849068-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserTokenItem {
  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_USE = "lastUse";
  @SerializedName(SERIALIZED_NAME_LAST_USE)
  private OffsetDateTime lastUse;

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private Set<PlaceItem> places = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES = "refreshTokenExpires";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_EXPIRES)
  private OffsetDateTime refreshTokenExpires;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Boolean self;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserItem user;

  public UserTokenItem() {
  }

  public UserTokenItem appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Application name
   * @return appName
   */
  @javax.annotation.Nonnull
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public UserTokenItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserTokenItem lastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
    return this;
  }

  /**
   * Time of last use of the token to access the API. Updated at most every 15 minutes. If absent, the token has never been used.
   * @return lastUse
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUse() {
    return lastUse;
  }

  public void setLastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
  }


  public UserTokenItem places(Set<PlaceItem> places) {
    this.places = places;
    return this;
  }

  public UserTokenItem addPlacesItem(PlaceItem placesItem) {
    if (this.places == null) {
      this.places = new LinkedHashSet<>();
    }
    this.places.add(placesItem);
    return this;
  }

  /**
   * List of Places to which the User has access. If absent, it means any Place of the account are allowed.
   * @return places
   */
  @javax.annotation.Nullable
  public Set<PlaceItem> getPlaces() {
    return places;
  }

  public void setPlaces(Set<PlaceItem> places) {
    this.places = places;
  }


  public UserTokenItem refreshTokenExpires(OffsetDateTime refreshTokenExpires) {
    this.refreshTokenExpires = refreshTokenExpires;
    return this;
  }

  /**
   * If absent, infinite validity.
   * @return refreshTokenExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRefreshTokenExpires() {
    return refreshTokenExpires;
  }

  public void setRefreshTokenExpires(OffsetDateTime refreshTokenExpires) {
    this.refreshTokenExpires = refreshTokenExpires;
  }


  public UserTokenItem self(Boolean self) {
    this.self = self;
    return this;
  }

  /**
   * True if this token is the one used for this API request
   * @return self
   */
  @javax.annotation.Nullable
  public Boolean getSelf() {
    return self;
  }

  public void setSelf(Boolean self) {
    this.self = self;
  }


  public UserTokenItem user(UserItem user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public UserItem getUser() {
    return user;
  }

  public void setUser(UserItem user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserTokenItem userTokenItem = (UserTokenItem) o;
    return Objects.equals(this.appName, userTokenItem.appName) &&
        Objects.equals(this.id, userTokenItem.id) &&
        Objects.equals(this.lastUse, userTokenItem.lastUse) &&
        Objects.equals(this.places, userTokenItem.places) &&
        Objects.equals(this.refreshTokenExpires, userTokenItem.refreshTokenExpires) &&
        Objects.equals(this.self, userTokenItem.self) &&
        Objects.equals(this.user, userTokenItem.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appName, id, lastUse, places, refreshTokenExpires, self, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserTokenItem {\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUse: ").append(toIndentedString(lastUse)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    refreshTokenExpires: ").append(toIndentedString(refreshTokenExpires)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appName");
    openapiFields.add("id");
    openapiFields.add("lastUse");
    openapiFields.add("places");
    openapiFields.add("refreshTokenExpires");
    openapiFields.add("self");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserTokenItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserTokenItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserTokenItem is not found in the empty JSON string", UserTokenItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserTokenItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserTokenItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserTokenItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("places") != null && !jsonObj.get("places").isJsonNull()) {
        JsonArray jsonArrayplaces = jsonObj.getAsJsonArray("places");
        if (jsonArrayplaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("places").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `places` to be an array in the JSON string but got `%s`", jsonObj.get("places").toString()));
          }

          // validate the optional field `places` (array)
          for (int i = 0; i < jsonArrayplaces.size(); i++) {
            PlaceItem.validateJsonElement(jsonArrayplaces.get(i));
          };
        }
      }
      // validate the required field `user`
      UserItem.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserTokenItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserTokenItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserTokenItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserTokenItem.class));

       return (TypeAdapter<T>) new TypeAdapter<UserTokenItem>() {
           @Override
           public void write(JsonWriter out, UserTokenItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserTokenItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserTokenItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserTokenItem
   * @throws IOException if the JSON string is invalid with respect to UserTokenItem
   */
  public static UserTokenItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserTokenItem.class);
  }

  /**
   * Convert an instance of UserTokenItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

