/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BusItem;
import org.openapitools.client.model.BusPairing;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.ErrorSubEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.PlacePatch;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for placeBuses
     * @param placeId Unique identifier of a *Place*. (required)
     * @param withPairing Filter out buses that have no pairing window (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeBusesCall(String placeId, Boolean withPairing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/buses"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withPairing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withPairing", withPairing));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeBusesValidateBeforeCall(String placeId, Boolean withPairing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeBuses(Async)");
        }

        return placeBusesCall(placeId, withPairing, _callback);

    }

    /**
     * List Buses
     * Get the list of *Buses* available on the gateway of this *Place*. If &#x60;withPairing&#x60; is &#x60;true&#x60;, return only buses that allow device pairing (see &#x60;/places/{placeId}/buses/{busId}/pairing&#x60;).
     * @param placeId Unique identifier of a *Place*. (required)
     * @param withPairing Filter out buses that have no pairing window (optional, default to false)
     * @return Set&lt;BusItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public Set<BusItem> placeBuses(String placeId, Boolean withPairing) throws ApiException {
        ApiResponse<Set<BusItem>> localVarResp = placeBusesWithHttpInfo(placeId, withPairing);
        return localVarResp.getData();
    }

    /**
     * List Buses
     * Get the list of *Buses* available on the gateway of this *Place*. If &#x60;withPairing&#x60; is &#x60;true&#x60;, return only buses that allow device pairing (see &#x60;/places/{placeId}/buses/{busId}/pairing&#x60;).
     * @param placeId Unique identifier of a *Place*. (required)
     * @param withPairing Filter out buses that have no pairing window (optional, default to false)
     * @return ApiResponse&lt;Set&lt;BusItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<BusItem>> placeBusesWithHttpInfo(String placeId, Boolean withPairing) throws ApiException {
        okhttp3.Call localVarCall = placeBusesValidateBeforeCall(placeId, withPairing, null);
        Type localVarReturnType = new TypeToken<Set<BusItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Buses (asynchronously)
     * Get the list of *Buses* available on the gateway of this *Place*. If &#x60;withPairing&#x60; is &#x60;true&#x60;, return only buses that allow device pairing (see &#x60;/places/{placeId}/buses/{busId}/pairing&#x60;).
     * @param placeId Unique identifier of a *Place*. (required)
     * @param withPairing Filter out buses that have no pairing window (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeBusesAsync(String placeId, Boolean withPairing, final ApiCallback<Set<BusItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeBusesValidateBeforeCall(placeId, withPairing, _callback);
        Type localVarReturnType = new TypeToken<Set<BusItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeGetMetadata
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetMetadataCall(String placeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/metadata"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeGetMetadataValidateBeforeCall(String placeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeGetMetadata(Async)");
        }

        return placeGetMetadataCall(placeId, _callback);

    }

    /**
     * List metadata
     * Get the metadata.
     * @param placeId Unique identifier of a *Place*. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> placeGetMetadata(String placeId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = placeGetMetadataWithHttpInfo(placeId);
        return localVarResp.getData();
    }

    /**
     * List metadata
     * Get the metadata.
     * @param placeId Unique identifier of a *Place*. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> placeGetMetadataWithHttpInfo(String placeId) throws ApiException {
        okhttp3.Call localVarCall = placeGetMetadataValidateBeforeCall(placeId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metadata (asynchronously)
     * Get the metadata.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeGetMetadataAsync(String placeId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeGetMetadataValidateBeforeCall(placeId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeOpenPairing
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param pairing  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOpenPairingCall(String placeId, String busId, BusPairing pairing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pairing;

        // create path and map variables
        String localVarPath = "/places/{placeId}/buses/{busId}/pairing"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()))
            .replace("{" + "busId" + "}", localVarApiClient.escapeString(busId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeOpenPairingValidateBeforeCall(String placeId, String busId, BusPairing pairing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeOpenPairing(Async)");
        }

        // verify the required parameter 'busId' is set
        if (busId == null) {
            throw new ApiException("Missing the required parameter 'busId' when calling placeOpenPairing(Async)");
        }

        // verify the required parameter 'pairing' is set
        if (pairing == null) {
            throw new ApiException("Missing the required parameter 'pairing' when calling placeOpenPairing(Async)");
        }

        return placeOpenPairingCall(placeId, busId, pairing, _callback);

    }

    /**
     * Open/Close the pairing window
     * Open/Close the pairing window.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param pairing  (required)
     * @return BusPairing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public BusPairing placeOpenPairing(String placeId, String busId, BusPairing pairing) throws ApiException {
        ApiResponse<BusPairing> localVarResp = placeOpenPairingWithHttpInfo(placeId, busId, pairing);
        return localVarResp.getData();
    }

    /**
     * Open/Close the pairing window
     * Open/Close the pairing window.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param pairing  (required)
     * @return ApiResponse&lt;BusPairing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusPairing> placeOpenPairingWithHttpInfo(String placeId, String busId, BusPairing pairing) throws ApiException {
        okhttp3.Call localVarCall = placeOpenPairingValidateBeforeCall(placeId, busId, pairing, null);
        Type localVarReturnType = new TypeToken<BusPairing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Open/Close the pairing window (asynchronously)
     * Open/Close the pairing window.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param pairing  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOpenPairingAsync(String placeId, String busId, BusPairing pairing, final ApiCallback<BusPairing> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeOpenPairingValidateBeforeCall(placeId, busId, pairing, _callback);
        Type localVarReturnType = new TypeToken<BusPairing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placePairing
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePairingCall(String placeId, String busId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/buses/{busId}/pairing"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()))
            .replace("{" + "busId" + "}", localVarApiClient.escapeString(busId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placePairingValidateBeforeCall(String placeId, String busId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placePairing(Async)");
        }

        // verify the required parameter 'busId' is set
        if (busId == null) {
            throw new ApiException("Missing the required parameter 'busId' when calling placePairing(Async)");
        }

        return placePairingCall(placeId, busId, _callback);

    }

    /**
     * State of the pairing window
     * Get the state of the pairing window of the *Bus*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @return BusPairing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public BusPairing placePairing(String placeId, String busId) throws ApiException {
        ApiResponse<BusPairing> localVarResp = placePairingWithHttpInfo(placeId, busId);
        return localVarResp.getData();
    }

    /**
     * State of the pairing window
     * Get the state of the pairing window of the *Bus*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @return ApiResponse&lt;BusPairing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusPairing> placePairingWithHttpInfo(String placeId, String busId) throws ApiException {
        okhttp3.Call localVarCall = placePairingValidateBeforeCall(placeId, busId, null);
        Type localVarReturnType = new TypeToken<BusPairing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * State of the pairing window (asynchronously)
     * Get the state of the pairing window of the *Bus*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param busId Unique identifier of a *Bus*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> State information. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Bus* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePairingAsync(String placeId, String busId, final ApiCallback<BusPairing> _callback) throws ApiException {

        okhttp3.Call localVarCall = placePairingValidateBeforeCall(placeId, busId, _callback);
        Type localVarReturnType = new TypeToken<BusPairing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placePatch
     * @param placeId Unique identifier of a *Place*. (required)
     * @param placePatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePatchCall(String placeId, PlacePatch placePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = placePatch;

        // create path and map variables
        String localVarPath = "/places/{placeId}"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placePatchValidateBeforeCall(String placeId, PlacePatch placePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placePatch(Async)");
        }

        // verify the required parameter 'placePatch' is set
        if (placePatch == null) {
            throw new ApiException("Missing the required parameter 'placePatch' when calling placePatch(Async)");
        }

        return placePatchCall(placeId, placePatch, _callback);

    }

    /**
     * Update a Place
     * Change information about a *Place*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param placePatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void placePatch(String placeId, PlacePatch placePatch) throws ApiException {
        placePatchWithHttpInfo(placeId, placePatch);
    }

    /**
     * Update a Place
     * Change information about a *Place*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param placePatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> placePatchWithHttpInfo(String placeId, PlacePatch placePatch) throws ApiException {
        okhttp3.Call localVarCall = placePatchValidateBeforeCall(placeId, placePatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a Place (asynchronously)
     * Change information about a *Place*.  **Note**: requires full access to the *Account*. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param placePatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePatchAsync(String placeId, PlacePatch placePatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = placePatchValidateBeforeCall(placeId, placePatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for placePatchMetadata
     * @param placeId Unique identifier of a *Place*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePatchMetadataCall(String placeId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataPatch;

        // create path and map variables
        String localVarPath = "/places/{placeId}/metadata"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placePatchMetadataValidateBeforeCall(String placeId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placePatchMetadata(Async)");
        }

        // verify the required parameter 'metadataPatch' is set
        if (metadataPatch == null) {
            throw new ApiException("Missing the required parameter 'metadataPatch' when calling placePatchMetadata(Async)");
        }

        return placePatchMetadataCall(placeId, metadataPatch, _callback);

    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> placePatchMetadata(String placeId, MetadataPatch metadataPatch) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = placePatchMetadataWithHttpInfo(placeId, metadataPatch);
        return localVarResp.getData();
    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> placePatchMetadataWithHttpInfo(String placeId, MetadataPatch metadataPatch) throws ApiException {
        okhttp3.Call localVarCall = placePatchMetadataValidateBeforeCall(placeId, metadataPatch, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify metadata (asynchronously)
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param placeId Unique identifier of a *Place*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placePatchMetadataAsync(String placeId, MetadataPatch metadataPatch, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placePatchMetadataValidateBeforeCall(placeId, metadataPatch, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placesGet
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesGetCall(String placeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placesGetValidateBeforeCall(String placeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placesGet(Async)");
        }

        return placesGetCall(placeId, _callback);

    }

    /**
     * Information about a Place
     * Get information about a *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @return Place
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
     </table>
     */
    public Place placesGet(String placeId) throws ApiException {
        ApiResponse<Place> localVarResp = placesGetWithHttpInfo(placeId);
        return localVarResp.getData();
    }

    /**
     * Information about a Place
     * Get information about a *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @return ApiResponse&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Place> placesGetWithHttpInfo(String placeId) throws ApiException {
        okhttp3.Call localVarCall = placesGetValidateBeforeCall(placeId, null);
        Type localVarReturnType = new TypeToken<Place>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about a Place (asynchronously)
     * Get information about a *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placesGetAsync(String placeId, final ApiCallback<Place> _callback) throws ApiException {

        okhttp3.Call localVarCall = placesGetValidateBeforeCall(placeId, _callback);
        Type localVarReturnType = new TypeToken<Place>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
