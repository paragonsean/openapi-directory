/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthChangePassword;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.PlaceCreated;
import org.openapitools.client.model.PlaceItem;
import org.openapitools.client.model.PlaceNew;
import java.util.Set;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserCreated;
import org.openapitools.client.model.UserItem;
import org.openapitools.client.model.UserNew;
import org.openapitools.client.model.UserPatch;
import org.openapitools.client.model.UserTokenItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountChangePassword
     * @param changePasswordInfo Old and new password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Change successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountChangePasswordCall(AuthChangePassword changePasswordInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordInfo;

        // create path and map variables
        String localVarPath = "/account/change-password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountChangePasswordValidateBeforeCall(AuthChangePassword changePasswordInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changePasswordInfo' is set
        if (changePasswordInfo == null) {
            throw new ApiException("Missing the required parameter 'changePasswordInfo' when calling accountChangePassword(Async)");
        }

        return accountChangePasswordCall(changePasswordInfo, _callback);

    }

    /**
     * Change the password
     * Set a new password for the account.  **Note**: requires full access to the *Account*. 
     * @param changePasswordInfo Old and new password (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Change successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void accountChangePassword(AuthChangePassword changePasswordInfo) throws ApiException {
        accountChangePasswordWithHttpInfo(changePasswordInfo);
    }

    /**
     * Change the password
     * Set a new password for the account.  **Note**: requires full access to the *Account*. 
     * @param changePasswordInfo Old and new password (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Change successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountChangePasswordWithHttpInfo(AuthChangePassword changePasswordInfo) throws ApiException {
        okhttp3.Call localVarCall = accountChangePasswordValidateBeforeCall(changePasswordInfo, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change the password (asynchronously)
     * Set a new password for the account.  **Note**: requires full access to the *Account*. 
     * @param changePasswordInfo Old and new password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Change successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountChangePasswordAsync(AuthChangePassword changePasswordInfo, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountChangePasswordValidateBeforeCall(changePasswordInfo, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountDeleteUser
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountDeleteUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling accountDeleteUser(Async)");
        }

        return accountDeleteUserCall(userId, _callback);

    }

    /**
     * Delete a User
     * Delete a *User* from this *Account*, and revoke all his/her *Tokens*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void accountDeleteUser(String userId) throws ApiException {
        accountDeleteUserWithHttpInfo(userId);
    }

    /**
     * Delete a User
     * Delete a *User* from this *Account*, and revoke all his/her *Tokens*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountDeleteUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = accountDeleteUserValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a User (asynchronously)
     * Delete a *User* from this *Account*, and revoke all his/her *Tokens*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountDeleteUserAsync(String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountDeleteUserValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountGetUser
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *User* information.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling accountGetUser(Async)");
        }

        return accountGetUserCall(userId, _callback);

    }

    /**
     * Information about a User
     * Get information about a *User* in the same *Account*.
     * @param userId Unique identifier of a *User*. (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *User* information.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public User accountGetUser(String userId) throws ApiException {
        ApiResponse<User> localVarResp = accountGetUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Information about a User
     * Get information about a *User* in the same *Account*.
     * @param userId Unique identifier of a *User*. (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *User* information.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> accountGetUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = accountGetUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about a User (asynchronously)
     * Get information about a *User* in the same *Account*.
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> *User* information.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetUserAsync(String userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountNewPlace
     * @param place  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Place* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountNewPlaceCall(PlaceNew place, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = place;

        // create path and map variables
        String localVarPath = "/account/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountNewPlaceValidateBeforeCall(PlaceNew place, final ApiCallback _callback) throws ApiException {
        return accountNewPlaceCall(place, _callback);

    }

    /**
     * Create a Place
     * Create a new *Place*.  A *Device* (&#x60;class&#x60;: &#x60;MINT&#x60;, &#x60;address&#x60;: &#x60;0&#x60;) is automatically created and attached to the new *Place*.  **Note:** requires full access to the *Account*. 
     * @param place  (optional)
     * @return PlaceCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Place* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public PlaceCreated accountNewPlace(PlaceNew place) throws ApiException {
        ApiResponse<PlaceCreated> localVarResp = accountNewPlaceWithHttpInfo(place);
        return localVarResp.getData();
    }

    /**
     * Create a Place
     * Create a new *Place*.  A *Device* (&#x60;class&#x60;: &#x60;MINT&#x60;, &#x60;address&#x60;: &#x60;0&#x60;) is automatically created and attached to the new *Place*.  **Note:** requires full access to the *Account*. 
     * @param place  (optional)
     * @return ApiResponse&lt;PlaceCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Place* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlaceCreated> accountNewPlaceWithHttpInfo(PlaceNew place) throws ApiException {
        okhttp3.Call localVarCall = accountNewPlaceValidateBeforeCall(place, null);
        Type localVarReturnType = new TypeToken<PlaceCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Place (asynchronously)
     * Create a new *Place*.  A *Device* (&#x60;class&#x60;: &#x60;MINT&#x60;, &#x60;address&#x60;: &#x60;0&#x60;) is automatically created and attached to the new *Place*.  **Note:** requires full access to the *Account*. 
     * @param place  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Place* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountNewPlaceAsync(PlaceNew place, final ApiCallback<PlaceCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountNewPlaceValidateBeforeCall(place, _callback);
        Type localVarReturnType = new TypeToken<PlaceCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountNewUser
     * @param userInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *User* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountNewUserCall(UserNew userInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userInfo;

        // create path and map variables
        String localVarPath = "/account/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountNewUserValidateBeforeCall(UserNew userInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userInfo' is set
        if (userInfo == null) {
            throw new ApiException("Missing the required parameter 'userInfo' when calling accountNewUser(Async)");
        }

        return accountNewUserCall(userInfo, _callback);

    }

    /**
     * New User
     * Add a *User*.  **Note**: requires full access to the *Account*. 
     * @param userInfo  (required)
     * @return UserCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *User* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public UserCreated accountNewUser(UserNew userInfo) throws ApiException {
        ApiResponse<UserCreated> localVarResp = accountNewUserWithHttpInfo(userInfo);
        return localVarResp.getData();
    }

    /**
     * New User
     * Add a *User*.  **Note**: requires full access to the *Account*. 
     * @param userInfo  (required)
     * @return ApiResponse&lt;UserCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *User* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCreated> accountNewUserWithHttpInfo(UserNew userInfo) throws ApiException {
        okhttp3.Call localVarCall = accountNewUserValidateBeforeCall(userInfo, null);
        Type localVarReturnType = new TypeToken<UserCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * New User (asynchronously)
     * Add a *User*.  **Note**: requires full access to the *Account*. 
     * @param userInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *User* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountNewUserAsync(UserNew userInfo, final ApiCallback<UserCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountNewUserValidateBeforeCall(userInfo, _callback);
        Type localVarReturnType = new TypeToken<UserCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPatchUser
     * @param userId Unique identifier of a *User*. (required)
     * @param userPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPatchUserCall(String userId, UserPatch userPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPatch;

        // create path and map variables
        String localVarPath = "/account/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPatchUserValidateBeforeCall(String userId, UserPatch userPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling accountPatchUser(Async)");
        }

        // verify the required parameter 'userPatch' is set
        if (userPatch == null) {
            throw new ApiException("Missing the required parameter 'userPatch' when calling accountPatchUser(Async)");
        }

        return accountPatchUserCall(userId, userPatch, _callback);

    }

    /**
     * Modify a User
     * Modify a *User*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @param userPatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void accountPatchUser(String userId, UserPatch userPatch) throws ApiException {
        accountPatchUserWithHttpInfo(userId, userPatch);
    }

    /**
     * Modify a User
     * Modify a *User*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @param userPatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountPatchUserWithHttpInfo(String userId, UserPatch userPatch) throws ApiException {
        okhttp3.Call localVarCall = accountPatchUserValidateBeforeCall(userId, userPatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify a User (asynchronously)
     * Modify a *User*.  **Note**: requires full access to the *Account*. 
     * @param userId Unique identifier of a *User*. (required)
     * @param userPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPatchUserAsync(String userId, UserPatch userPatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPatchUserValidateBeforeCall(userId, userPatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountPlaces
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPlacesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountPlacesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountPlacesCall(_callback);

    }

    /**
     * List Places of the Account
     * List the *Places* of the account.  **Note:** requires full access to the *Account*. 
     * @return Set&lt;PlaceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
     </table>
     */
    public Set<PlaceItem> accountPlaces() throws ApiException {
        ApiResponse<Set<PlaceItem>> localVarResp = accountPlacesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Places of the Account
     * List the *Places* of the account.  **Note:** requires full access to the *Account*. 
     * @return ApiResponse&lt;Set&lt;PlaceItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<PlaceItem>> accountPlacesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountPlacesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Set<PlaceItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Places of the Account (asynchronously)
     * List the *Places* of the account.  **Note:** requires full access to the *Account*. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountPlacesAsync(final ApiCallback<Set<PlaceItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountPlacesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Set<PlaceItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountRevokeToken
     * @param tokenId Identifier of the token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRevokeTokenCall(String tokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/tokens/{tokenId}"
            .replace("{" + "tokenId" + "}", localVarApiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountRevokeTokenValidateBeforeCall(String tokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling accountRevokeToken(Async)");
        }

        return accountRevokeTokenCall(tokenId, _callback);

    }

    /**
     * Revoke a Token
     * Revoke the given *Token*.  **Note:** requires full access to the *Account*. 
     * @param tokenId Identifier of the token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void accountRevokeToken(String tokenId) throws ApiException {
        accountRevokeTokenWithHttpInfo(tokenId);
    }

    /**
     * Revoke a Token
     * Revoke the given *Token*.  **Note:** requires full access to the *Account*. 
     * @param tokenId Identifier of the token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountRevokeTokenWithHttpInfo(String tokenId) throws ApiException {
        okhttp3.Call localVarCall = accountRevokeTokenValidateBeforeCall(tokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke a Token (asynchronously)
     * Revoke the given *Token*.  **Note:** requires full access to the *Account*. 
     * @param tokenId Identifier of the token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountRevokeTokenAsync(String tokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountRevokeTokenValidateBeforeCall(tokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTokensCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountTokensCall(_callback);

    }

    /**
     * List active Tokens of the Account
     * List the active *Tokens* on the account.  **Note:** requires full access to the *Account*. 
     * @return Set&lt;UserTokenItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<UserTokenItem> accountTokens() throws ApiException {
        ApiResponse<Set<UserTokenItem>> localVarResp = accountTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List active Tokens of the Account
     * List the active *Tokens* on the account.  **Note:** requires full access to the *Account*. 
     * @return ApiResponse&lt;Set&lt;UserTokenItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<UserTokenItem>> accountTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Set<UserTokenItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List active Tokens of the Account (asynchronously)
     * List the active *Tokens* on the account.  **Note:** requires full access to the *Account*. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The authentication token doesn&#39;t allow to modify the *Account*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountTokensAsync(final ApiCallback<Set<UserTokenItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Set<UserTokenItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountUsers
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUsersCall(List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embedMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "embed-metadata", embedMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountUsersValidateBeforeCall(List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        return accountUsersCall(embedMetadata, _callback);

    }

    /**
     * List Users of the Account
     * Get the list of *Users* of this *Account*.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return Set&lt;UserItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public Set<UserItem> accountUsers(List<String> embedMetadata) throws ApiException {
        ApiResponse<Set<UserItem>> localVarResp = accountUsersWithHttpInfo(embedMetadata);
        return localVarResp.getData();
    }

    /**
     * List Users of the Account
     * Get the list of *Users* of this *Account*.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return ApiResponse&lt;Set&lt;UserItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<UserItem>> accountUsersWithHttpInfo(List<String> embedMetadata) throws ApiException {
        okhttp3.Call localVarCall = accountUsersValidateBeforeCall(embedMetadata, null);
        Type localVarReturnType = new TypeToken<Set<UserItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users of the Account (asynchronously)
     * Get the list of *Users* of this *Account*.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountUsersAsync(List<String> embedMetadata, final ApiCallback<Set<UserItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountUsersValidateBeforeCall(embedMetadata, _callback);
        Type localVarReturnType = new TypeToken<Set<UserItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetMetadata
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMetadataCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/users/{userId}/metadata"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetMetadataValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userGetMetadata(Async)");
        }

        return userGetMetadataCall(userId, _callback);

    }

    /**
     * List metadata
     * Get the metadata.
     * @param userId Unique identifier of a *User*. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> userGetMetadata(String userId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = userGetMetadataWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * List metadata
     * Get the metadata.
     * @param userId Unique identifier of a *User*. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> userGetMetadataWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = userGetMetadataValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metadata (asynchronously)
     * Get the metadata.
     * @param userId Unique identifier of a *User*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMetadataAsync(String userId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetMetadataValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPatchMetadata
     * @param userId Unique identifier of a *User*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *User* doesn&#39;t exist in this *Account* or the requester doesn&#39;t have access to a *Place* on which this *User* has access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPatchMetadataCall(String userId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataPatch;

        // create path and map variables
        String localVarPath = "/account/users/{userId}/metadata"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPatchMetadataValidateBeforeCall(String userId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userPatchMetadata(Async)");
        }

        // verify the required parameter 'metadataPatch' is set
        if (metadataPatch == null) {
            throw new ApiException("Missing the required parameter 'metadataPatch' when calling userPatchMetadata(Async)");
        }

        return userPatchMetadataCall(userId, metadataPatch, _callback);

    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param userId Unique identifier of a *User*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *User* doesn&#39;t exist in this *Account* or the requester doesn&#39;t have access to a *Place* on which this *User* has access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> userPatchMetadata(String userId, MetadataPatch metadataPatch) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = userPatchMetadataWithHttpInfo(userId, metadataPatch);
        return localVarResp.getData();
    }

    /**
     * Modify metadata
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param userId Unique identifier of a *User*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *User* doesn&#39;t exist in this *Account* or the requester doesn&#39;t have access to a *Place* on which this *User* has access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> userPatchMetadataWithHttpInfo(String userId, MetadataPatch metadataPatch) throws ApiException {
        okhttp3.Call localVarCall = userPatchMetadataValidateBeforeCall(userId, metadataPatch, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify metadata (asynchronously)
     * Modify the metadata. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param userId Unique identifier of a *User*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *User* doesn&#39;t exist in this *Account* or the requester doesn&#39;t have access to a *Place* on which this *User* has access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPatchMetadataAsync(String userId, MetadataPatch metadataPatch, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPatchMetadataValidateBeforeCall(userId, metadataPatch, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
