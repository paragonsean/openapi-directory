/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.ErrorEntity;
import org.openapitools.client.model.MetadataPatch;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.NotificationCreated;
import org.openapitools.client.model.NotificationItem;
import org.openapitools.client.model.NotificationNew;
import org.openapitools.client.model.NotificationPatch;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationDelete
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDeleteCall(String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{notificationId}"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationDeleteValidateBeforeCall(String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationDelete(Async)");
        }

        return notificationDeleteCall(notificationId, _callback);

    }

    /**
     * Delete a Notification
     * Delete a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationDelete(String notificationId) throws ApiException {
        notificationDeleteWithHttpInfo(notificationId);
    }

    /**
     * Delete a Notification
     * Delete a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationDeleteWithHttpInfo(String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationDeleteValidateBeforeCall(notificationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Notification (asynchronously)
     * Delete a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Resource successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationDeleteAsync(String notificationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationDeleteValidateBeforeCall(notificationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationGetMetadata
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetMetadataCall(String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{notificationId}/metadata"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationGetMetadataValidateBeforeCall(String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationGetMetadata(Async)");
        }

        return notificationGetMetadataCall(notificationId, _callback);

    }

    /**
     * List metadata
     * Get the metadata of the *Notification*.
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> notificationGetMetadata(String notificationId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = notificationGetMetadataWithHttpInfo(notificationId);
        return localVarResp.getData();
    }

    /**
     * List metadata
     * Get the metadata of the *Notification*.
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> notificationGetMetadataWithHttpInfo(String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationGetMetadataValidateBeforeCall(notificationId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List metadata (asynchronously)
     * Get the metadata of the *Notification*.
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationGetMetadataAsync(String notificationId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationGetMetadataValidateBeforeCall(notificationId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPatch
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param notificationPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPatchCall(String notificationId, NotificationPatch notificationPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationPatch;

        // create path and map variables
        String localVarPath = "/notifications/{notificationId}"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPatchValidateBeforeCall(String notificationId, NotificationPatch notificationPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationPatch(Async)");
        }

        // verify the required parameter 'notificationPatch' is set
        if (notificationPatch == null) {
            throw new ApiException("Missing the required parameter 'notificationPatch' when calling notificationPatch(Async)");
        }

        return notificationPatchCall(notificationId, notificationPatch, _callback);

    }

    /**
     * Modify a Notification
     * Modify a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param notificationPatch  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationPatch(String notificationId, NotificationPatch notificationPatch) throws ApiException {
        notificationPatchWithHttpInfo(notificationId, notificationPatch);
    }

    /**
     * Modify a Notification
     * Modify a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param notificationPatch  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationPatchWithHttpInfo(String notificationId, NotificationPatch notificationPatch) throws ApiException {
        okhttp3.Call localVarCall = notificationPatchValidateBeforeCall(notificationId, notificationPatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modify a Notification (asynchronously)
     * Modify a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param notificationPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPatchAsync(String notificationId, NotificationPatch notificationPatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPatchValidateBeforeCall(notificationId, notificationPatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationPatchMetadata
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPatchMetadataCall(String notificationId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadataPatch;

        // create path and map variables
        String localVarPath = "/notifications/{notificationId}/metadata"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationPatchMetadataValidateBeforeCall(String notificationId, MetadataPatch metadataPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationPatchMetadata(Async)");
        }

        // verify the required parameter 'metadataPatch' is set
        if (metadataPatch == null) {
            throw new ApiException("Missing the required parameter 'metadataPatch' when calling notificationPatchMetadata(Async)");
        }

        return notificationPatchMetadataCall(notificationId, metadataPatch, _callback);

    }

    /**
     * Modify metadata of a Notification
     * Modify the metadata of a *Notification*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> notificationPatchMetadata(String notificationId, MetadataPatch metadataPatch) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = notificationPatchMetadataWithHttpInfo(notificationId, metadataPatch);
        return localVarResp.getData();
    }

    /**
     * Modify metadata of a Notification
     * Modify the metadata of a *Notification*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> notificationPatchMetadataWithHttpInfo(String notificationId, MetadataPatch metadataPatch) throws ApiException {
        okhttp3.Call localVarCall = notificationPatchMetadataValidateBeforeCall(notificationId, metadataPatch, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify metadata of a Notification (asynchronously)
     * Modify the metadata of a *Notification*. Keys are limited to the same format as tags (up to 21 characters, [a-z0-9], starting with [a-z]). Values can be any JSON value. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param metadataPatch Modifications to apply to the metadata of the resource.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. The new metadata is returned. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationPatchMetadataAsync(String notificationId, MetadataPatch metadataPatch, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationPatchMetadataValidateBeforeCall(notificationId, metadataPatch, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsGet
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetCall(String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/{notificationId}"
            .replace("{" + "notificationId" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsGetValidateBeforeCall(String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationsGet(Async)");
        }

        return notificationsGetCall(notificationId, _callback);

    }

    /**
     * Information about a Notification
     * Get information about a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @return Notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Notification notificationsGet(String notificationId) throws ApiException {
        ApiResponse<Notification> localVarResp = notificationsGetWithHttpInfo(notificationId);
        return localVarResp.getData();
    }

    /**
     * Information about a Notification
     * Get information about a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @return ApiResponse&lt;Notification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notification> notificationsGetWithHttpInfo(String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationsGetValidateBeforeCall(notificationId, null);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about a Notification (asynchronously)
     * Get information about a *Notification*. 
     * @param notificationId Unique identifier of a *Notification*. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> *Notification* doesn&#39;t exist or the requester doesn&#39;t have appropriate access to the *Place*.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsGetAsync(String notificationId, final ApiCallback<Notification> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsGetValidateBeforeCall(notificationId, _callback);
        Type localVarReturnType = new TypeToken<Notification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeNewNotification
     * @param placeId Unique identifier of a *Place*. (required)
     * @param notification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Notification* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNewNotificationCall(String placeId, NotificationNew notification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notification;

        // create path and map variables
        String localVarPath = "/places/{placeId}/notifications"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeNewNotificationValidateBeforeCall(String placeId, NotificationNew notification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeNewNotification(Async)");
        }

        // verify the required parameter 'notification' is set
        if (notification == null) {
            throw new ApiException("Missing the required parameter 'notification' when calling placeNewNotification(Async)");
        }

        return placeNewNotificationCall(placeId, notification, _callback);

    }

    /**
     * Create a Notification
     * Create a new *Notification*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param notification  (required)
     * @return NotificationCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Notification* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationCreated placeNewNotification(String placeId, NotificationNew notification) throws ApiException {
        ApiResponse<NotificationCreated> localVarResp = placeNewNotificationWithHttpInfo(placeId, notification);
        return localVarResp.getData();
    }

    /**
     * Create a Notification
     * Create a new *Notification*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param notification  (required)
     * @return ApiResponse&lt;NotificationCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Notification* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationCreated> placeNewNotificationWithHttpInfo(String placeId, NotificationNew notification) throws ApiException {
        okhttp3.Call localVarCall = placeNewNotificationValidateBeforeCall(placeId, notification, null);
        Type localVarReturnType = new TypeToken<NotificationCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Notification (asynchronously)
     * Create a new *Notification*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param notification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> *Notification* successfully created. </td><td>  * Location - Path of the Program created (&#x60;/programs/{id}&#x60;) <br>  </td></tr>
        <tr><td> 403 </td><td> *Place* doesn&#39;t exist or the requester doesn&#39;t have access.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNewNotificationAsync(String placeId, NotificationNew notification, final ApiCallback<NotificationCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeNewNotificationValidateBeforeCall(placeId, notification, _callback);
        Type localVarReturnType = new TypeToken<NotificationCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeNotifications
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNotificationsCall(String placeId, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places/{placeId}/notifications"
            .replace("{" + "placeId" + "}", localVarApiClient.escapeString(placeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embedMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "embed-metadata", embedMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeNotificationsValidateBeforeCall(String placeId, List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'placeId' is set
        if (placeId == null) {
            throw new ApiException("Missing the required parameter 'placeId' when calling placeNotifications(Async)");
        }

        return placeNotificationsCall(placeId, embedMetadata, _callback);

    }

    /**
     * List Notifications
     * Get the list of *Notifications* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return Set&lt;NotificationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public Set<NotificationItem> placeNotifications(String placeId, List<String> embedMetadata) throws ApiException {
        ApiResponse<Set<NotificationItem>> localVarResp = placeNotificationsWithHttpInfo(placeId, embedMetadata);
        return localVarResp.getData();
    }

    /**
     * List Notifications
     * Get the list of *Notifications* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return ApiResponse&lt;Set&lt;NotificationItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<NotificationItem>> placeNotificationsWithHttpInfo(String placeId, List<String> embedMetadata) throws ApiException {
        okhttp3.Call localVarCall = placeNotificationsValidateBeforeCall(placeId, embedMetadata, null);
        Type localVarReturnType = new TypeToken<Set<NotificationItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Notifications (asynchronously)
     * Get the list of *Notifications* available in this *Place*.
     * @param placeId Unique identifier of a *Place*. (required)
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeNotificationsAsync(String placeId, List<String> embedMetadata, final ApiCallback<Set<NotificationItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeNotificationsValidateBeforeCall(placeId, embedMetadata, _callback);
        Type localVarReturnType = new TypeToken<Set<NotificationItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
