/*
 * IoEÂ² IoT API - to create end-user applications
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@ijenko.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthLogin;
import org.openapitools.client.model.AuthTokens;
import org.openapitools.client.model.DefaultError;
import org.openapitools.client.model.PlaceItem;
import java.util.Set;
import org.openapitools.client.model.UserMe;
import org.openapitools.client.model.UserMePatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntryPointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EntryPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntryPointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authAccountLogin_0
     * @param loginInfo Login information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful. The access token is given to use the API. The refresh token must be stored in a safe place. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAccountLogin_0Call(AuthLogin loginInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginInfo;

        // create path and map variables
        String localVarPath = "/auth/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authAccountLogin_0ValidateBeforeCall(AuthLogin loginInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loginInfo' is set
        if (loginInfo == null) {
            throw new ApiException("Missing the required parameter 'loginInfo' when calling authAccountLogin_0(Async)");
        }

        return authAccountLogin_0Call(loginInfo, _callback);

    }

    /**
     * Get a token using login+password
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an &#x60;Access-Token&#x60; HTTP header or in a &#x60;token&#x60; URL query parameter in requests that require authentication.  The *refresh token* can be used with &#x60;/auth/refresh&#x60; when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the &#x60;appId&#x60; used. The &#x60;ttl&#x60; input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use &#x60;/auth/revoke&#x60;. 
     * @param loginInfo Login information. (required)
     * @return AuthTokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful. The access token is given to use the API. The refresh token must be stored in a safe place. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public AuthTokens authAccountLogin_0(AuthLogin loginInfo) throws ApiException {
        ApiResponse<AuthTokens> localVarResp = authAccountLogin_0WithHttpInfo(loginInfo);
        return localVarResp.getData();
    }

    /**
     * Get a token using login+password
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an &#x60;Access-Token&#x60; HTTP header or in a &#x60;token&#x60; URL query parameter in requests that require authentication.  The *refresh token* can be used with &#x60;/auth/refresh&#x60; when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the &#x60;appId&#x60; used. The &#x60;ttl&#x60; input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use &#x60;/auth/revoke&#x60;. 
     * @param loginInfo Login information. (required)
     * @return ApiResponse&lt;AuthTokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful. The access token is given to use the API. The refresh token must be stored in a safe place. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthTokens> authAccountLogin_0WithHttpInfo(AuthLogin loginInfo) throws ApiException {
        okhttp3.Call localVarCall = authAccountLogin_0ValidateBeforeCall(loginInfo, null);
        Type localVarReturnType = new TypeToken<AuthTokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a token using login+password (asynchronously)
     * Get an access+refresh tokens pair from login and password information.  The *access token* obtained with this request can then be used in an &#x60;Access-Token&#x60; HTTP header or in a &#x60;token&#x60; URL query parameter in requests that require authentication.  The *refresh token* can be used with &#x60;/auth/refresh&#x60; when the *access token* expires to retrieve a new *access token*. The lifetime of the refresh token is the maximum lifetime of this authentication request.  The default lifetime of the *refresh token* is defined by the &#x60;appId&#x60; used. The &#x60;ttl&#x60; input parameter allows to request a *refresh token* with a shorter lifetime.  To implement *logout*, use &#x60;/auth/revoke&#x60;. 
     * @param loginInfo Login information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful. The access token is given to use the API. The refresh token must be stored in a safe place. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAccountLogin_0Async(AuthLogin loginInfo, final ApiCallback<AuthTokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = authAccountLogin_0ValidateBeforeCall(loginInfo, _callback);
        Type localVarReturnType = new TypeToken<AuthTokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for meGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call meGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return meGetCall(_callback);

    }

    /**
     * Information about the User
     * Get information on the authenticated *User* who does the request.  The *login* property is returned only if the *User* is the administrator of the *Account*. 
     * @return UserMe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UserMe meGet() throws ApiException {
        ApiResponse<UserMe> localVarResp = meGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Information about the User
     * Get information on the authenticated *User* who does the request.  The *login* property is returned only if the *User* is the administrator of the *Account*. 
     * @return ApiResponse&lt;UserMe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserMe> meGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = meGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserMe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information about the User (asynchronously)
     * Get information on the authenticated *User* who does the request.  The *login* property is returned only if the *User* is the administrator of the *Account*. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call meGetAsync(final ApiCallback<UserMe> _callback) throws ApiException {

        okhttp3.Call localVarCall = meGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserMe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mePatch
     * @param userPatch Updated user info. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mePatchCall(UserMePatch userPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userPatch;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mePatchValidateBeforeCall(UserMePatch userPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userPatch' is set
        if (userPatch == null) {
            throw new ApiException("Missing the required parameter 'userPatch' when calling mePatch(Async)");
        }

        return mePatchCall(userPatch, _callback);

    }

    /**
     * Update User information
     * Update *User* information (locale). 
     * @param userPatch Updated user info. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public void mePatch(UserMePatch userPatch) throws ApiException {
        mePatchWithHttpInfo(userPatch);
    }

    /**
     * Update User information
     * Update *User* information (locale). 
     * @param userPatch Updated user info. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mePatchWithHttpInfo(UserMePatch userPatch) throws ApiException {
        okhttp3.Call localVarCall = mePatchValidateBeforeCall(userPatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update User information (asynchronously)
     * Update *User* information (locale). 
     * @param userPatch Updated user info. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Modification successful. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Successful, but nothing changed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Other error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mePatchAsync(UserMePatch userPatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mePatchValidateBeforeCall(userPatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mePlaces
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mePlacesCall(List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/places";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embedMetadata != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "embed-metadata", embedMetadata));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Token in query", "Token in Access-Token header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mePlacesValidateBeforeCall(List<String> embedMetadata, final ApiCallback _callback) throws ApiException {
        return mePlacesCall(embedMetadata, _callback);

    }

    /**
     * List accessible Places
     * List the *Places* to which the *Token* has access.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return Set&lt;PlaceItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Set<PlaceItem> mePlaces(List<String> embedMetadata) throws ApiException {
        ApiResponse<Set<PlaceItem>> localVarResp = mePlacesWithHttpInfo(embedMetadata);
        return localVarResp.getData();
    }

    /**
     * List accessible Places
     * List the *Places* to which the *Token* has access.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @return ApiResponse&lt;Set&lt;PlaceItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<PlaceItem>> mePlacesWithHttpInfo(List<String> embedMetadata) throws ApiException {
        okhttp3.Call localVarCall = mePlacesValidateBeforeCall(embedMetadata, null);
        Type localVarReturnType = new TypeToken<Set<PlaceItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accessible Places (asynchronously)
     * List the *Places* to which the *Token* has access.
     * @param embedMetadata Request to include the given keys of metadata in the response. If a key doesn&#39;t exist on the resource it is ignored. **Note:** This only applies to the top level resources.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mePlacesAsync(List<String> embedMetadata, final ApiCallback<Set<PlaceItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mePlacesValidateBeforeCall(embedMetadata, _callback);
        Type localVarReturnType = new TypeToken<Set<PlaceItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
