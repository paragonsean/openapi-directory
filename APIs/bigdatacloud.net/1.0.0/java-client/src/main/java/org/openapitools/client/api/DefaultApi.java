/*
 * IP Geolocation API
 * BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.  This API is powered by patent-pending ‘Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.  You can authenticate the API with the use of API keys provided in your BigDataCloud account.  BigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.  The API has Unprecedented Update Rate - Geolocation data re-evaluated every 2 hours or at least once a day - BGP data updated every 2 hours - Registry data updated at least once a day - Country object data usually updates at least once in a month   You can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipGeolocationWithConfidenceAreaAndHazardReportApi
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGeolocationWithConfidenceAreaAndHazardReportApiCall(String ip, String localityLanguage, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ip-geolocation-full";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (localityLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localityLanguage", localityLanguage));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipGeolocationWithConfidenceAreaAndHazardReportApiValidateBeforeCall(String ip, String localityLanguage, String key, final ApiCallback _callback) throws ApiException {
        return ipGeolocationWithConfidenceAreaAndHazardReportApiCall(ip, localityLanguage, key, _callback);

    }

    /**
     * IP Geolocation with Confidence Area and Hazard Report API
     * This API returns additional security hazard report in addition to confidence area and locality information.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipGeolocationWithConfidenceAreaAndHazardReportApi(String ip, String localityLanguage, String key) throws ApiException {
        ipGeolocationWithConfidenceAreaAndHazardReportApiWithHttpInfo(ip, localityLanguage, key);
    }

    /**
     * IP Geolocation with Confidence Area and Hazard Report API
     * This API returns additional security hazard report in addition to confidence area and locality information.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipGeolocationWithConfidenceAreaAndHazardReportApiWithHttpInfo(String ip, String localityLanguage, String key) throws ApiException {
        okhttp3.Call localVarCall = ipGeolocationWithConfidenceAreaAndHazardReportApiValidateBeforeCall(ip, localityLanguage, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * IP Geolocation with Confidence Area and Hazard Report API (asynchronously)
     * This API returns additional security hazard report in addition to confidence area and locality information.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGeolocationWithConfidenceAreaAndHazardReportApiAsync(String ip, String localityLanguage, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipGeolocationWithConfidenceAreaAndHazardReportApiValidateBeforeCall(ip, localityLanguage, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipGeolocationWithConfidenceAreaApi
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGeolocationWithConfidenceAreaApiCall(String ip, String localityLanguage, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ip-geolocation-with-confidence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (localityLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("localityLanguage", localityLanguage));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipGeolocationWithConfidenceAreaApiValidateBeforeCall(String ip, String localityLanguage, String key, final ApiCallback _callback) throws ApiException {
        return ipGeolocationWithConfidenceAreaApiCall(ip, localityLanguage, key, _callback);

    }

    /**
     * IP Geolocation with Confidence Area API
     * Returns list of geocoordinates which represents estimated geolocation confidence area.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void ipGeolocationWithConfidenceAreaApi(String ip, String localityLanguage, String key) throws ApiException {
        ipGeolocationWithConfidenceAreaApiWithHttpInfo(ip, localityLanguage, key);
    }

    /**
     * IP Geolocation with Confidence Area API
     * Returns list of geocoordinates which represents estimated geolocation confidence area.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ipGeolocationWithConfidenceAreaApiWithHttpInfo(String ip, String localityLanguage, String key) throws ApiException {
        okhttp3.Call localVarCall = ipGeolocationWithConfidenceAreaApiValidateBeforeCall(ip, localityLanguage, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * IP Geolocation with Confidence Area API (asynchronously)
     * Returns list of geocoordinates which represents estimated geolocation confidence area.
     * @param ip IPv4 IP address in a string or numeric format. If omitted, the caller’s IP address is assumed  (optional)
     * @param localityLanguage Preferred language for locality names in ISO 639-1 format, such as &#39;en&#39; for English, &#39;es&#39; for Spanish etc. Please note: 147 common world languages are supported, full list here, but not all languages are available for every location. If requested language is not available for a requested location it will default to English, if no English is available, the native, local names will be provided  (optional)
     * @param key Your API key  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipGeolocationWithConfidenceAreaApiAsync(String ip, String localityLanguage, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipGeolocationWithConfidenceAreaApiValidateBeforeCall(ip, localityLanguage, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
