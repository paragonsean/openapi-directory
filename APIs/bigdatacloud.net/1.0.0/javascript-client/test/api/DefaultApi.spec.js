/**
 * IP Geolocation API
 * BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.  This API is powered by patent-pending â€˜Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.  You can authenticate the API with the use of API keys provided in your BigDataCloud account.  BigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.  The API has Unprecedented Update Rate - Geolocation data re-evaluated every 2 hours or at least once a day - BGP data updated every 2 hours - Registry data updated at least once a day - Country object data usually updates at least once in a month   You can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IpGeolocationApi);
  }
}(this, function(expect, IpGeolocationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IpGeolocationApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('ipGeolocationWithConfidenceAreaAndHazardReportApi', function() {
      it('should call ipGeolocationWithConfidenceAreaAndHazardReportApi successfully', function(done) {
        //uncomment below and update the code to test ipGeolocationWithConfidenceAreaAndHazardReportApi
        //instance.ipGeolocationWithConfidenceAreaAndHazardReportApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ipGeolocationWithConfidenceAreaApi', function() {
      it('should call ipGeolocationWithConfidenceAreaApi successfully', function(done) {
        //uncomment below and update the code to test ipGeolocationWithConfidenceAreaApi
        //instance.ipGeolocationWithConfidenceAreaApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
