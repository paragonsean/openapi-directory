/**
 * IP Geolocation API
 * BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.  This API is powered by patent-pending â€˜Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.  You can authenticate the API with the use of API keys provided in your BigDataCloud account.  BigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.  The API has Unprecedented Update Rate - Geolocation data re-evaluated every 2 hours or at least once a day - BGP data updated every 2 hours - Registry data updated at least once a day - Country object data usually updates at least once in a month   You can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ip QString [optional]
    * @param[in]  locality_language QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void ipGeolocationWithConfidenceAreaAndHazardReportApi(const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locality_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ip QString [optional]
    * @param[in]  locality_language QString [optional]
    * @param[in]  key QString [optional]
    */
    virtual void ipGeolocationWithConfidenceAreaApi(const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locality_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipGeolocationWithConfidenceAreaAndHazardReportApiCallback(OAIHttpRequestWorker *worker);
    void ipGeolocationWithConfidenceAreaApiCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignal();
    void ipGeolocationWithConfidenceAreaApiSignal();


    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignalFull(OAIHttpRequestWorker *worker);
    void ipGeolocationWithConfidenceAreaApiSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use ipGeolocationWithConfidenceAreaAndHazardReportApiSignalError() instead")
    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGeolocationWithConfidenceAreaApiSignalError() instead")
    void ipGeolocationWithConfidenceAreaApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipGeolocationWithConfidenceAreaApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipGeolocationWithConfidenceAreaAndHazardReportApiSignalErrorFull() instead")
    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGeolocationWithConfidenceAreaAndHazardReportApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGeolocationWithConfidenceAreaApiSignalErrorFull() instead")
    void ipGeolocationWithConfidenceAreaApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGeolocationWithConfidenceAreaApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
