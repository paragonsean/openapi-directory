/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICloseApproachData.h
 *
 * 
 */

#ifndef OAICloseApproachData_H
#define OAICloseApproachData_H

#include <QJsonObject>

#include "OAIMissDistance.h"
#include "OAIRelVelocity.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMissDistance;
class OAIRelVelocity;

class OAICloseApproachData : public OAIObject {
public:
    OAICloseApproachData();
    OAICloseApproachData(QString json);
    ~OAICloseApproachData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCloseApproachDate() const;
    void setCloseApproachDate(const QString &close_approach_date);
    bool is_close_approach_date_Set() const;
    bool is_close_approach_date_Valid() const;

    QString getCloseApproachDateFull() const;
    void setCloseApproachDateFull(const QString &close_approach_date_full);
    bool is_close_approach_date_full_Set() const;
    bool is_close_approach_date_full_Valid() const;

    qint64 getEpochDateCloseApproach() const;
    void setEpochDateCloseApproach(const qint64 &epoch_date_close_approach);
    bool is_epoch_date_close_approach_Set() const;
    bool is_epoch_date_close_approach_Valid() const;

    OAIMissDistance getMissDistance() const;
    void setMissDistance(const OAIMissDistance &miss_distance);
    bool is_miss_distance_Set() const;
    bool is_miss_distance_Valid() const;

    QString getOrbitingBody() const;
    void setOrbitingBody(const QString &orbiting_body);
    bool is_orbiting_body_Set() const;
    bool is_orbiting_body_Valid() const;

    OAIRelVelocity getRelativeVelocity() const;
    void setRelativeVelocity(const OAIRelVelocity &relative_velocity);
    bool is_relative_velocity_Set() const;
    bool is_relative_velocity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_close_approach_date;
    bool m_close_approach_date_isSet;
    bool m_close_approach_date_isValid;

    QString m_close_approach_date_full;
    bool m_close_approach_date_full_isSet;
    bool m_close_approach_date_full_isValid;

    qint64 m_epoch_date_close_approach;
    bool m_epoch_date_close_approach_isSet;
    bool m_epoch_date_close_approach_isValid;

    OAIMissDistance m_miss_distance;
    bool m_miss_distance_isSet;
    bool m_miss_distance_isValid;

    QString m_orbiting_body;
    bool m_orbiting_body_isSet;
    bool m_orbiting_body_isValid;

    OAIRelVelocity m_relative_velocity;
    bool m_relative_velocity_isSet;
    bool m_relative_velocity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICloseApproachData)

#endif // OAICloseApproachData_H
