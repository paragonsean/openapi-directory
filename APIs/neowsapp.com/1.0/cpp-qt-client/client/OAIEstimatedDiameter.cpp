/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimatedDiameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimatedDiameter::OAIEstimatedDiameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimatedDiameter::OAIEstimatedDiameter() {
    this->initializeModel();
}

OAIEstimatedDiameter::~OAIEstimatedDiameter() {}

void OAIEstimatedDiameter::initializeModel() {

    m_estimated_diameter_max_isSet = false;
    m_estimated_diameter_max_isValid = false;

    m_estimated_diameter_min_isSet = false;
    m_estimated_diameter_min_isValid = false;
}

void OAIEstimatedDiameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimatedDiameter::fromJsonObject(QJsonObject json) {

    m_estimated_diameter_max_isValid = ::OpenAPI::fromJsonValue(m_estimated_diameter_max, json[QString("estimated_diameter_max")]);
    m_estimated_diameter_max_isSet = !json[QString("estimated_diameter_max")].isNull() && m_estimated_diameter_max_isValid;

    m_estimated_diameter_min_isValid = ::OpenAPI::fromJsonValue(m_estimated_diameter_min, json[QString("estimated_diameter_min")]);
    m_estimated_diameter_min_isSet = !json[QString("estimated_diameter_min")].isNull() && m_estimated_diameter_min_isValid;
}

QString OAIEstimatedDiameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimatedDiameter::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_diameter_max_isSet) {
        obj.insert(QString("estimated_diameter_max"), ::OpenAPI::toJsonValue(m_estimated_diameter_max));
    }
    if (m_estimated_diameter_min_isSet) {
        obj.insert(QString("estimated_diameter_min"), ::OpenAPI::toJsonValue(m_estimated_diameter_min));
    }
    return obj;
}

double OAIEstimatedDiameter::getEstimatedDiameterMax() const {
    return m_estimated_diameter_max;
}
void OAIEstimatedDiameter::setEstimatedDiameterMax(const double &estimated_diameter_max) {
    m_estimated_diameter_max = estimated_diameter_max;
    m_estimated_diameter_max_isSet = true;
}

bool OAIEstimatedDiameter::is_estimated_diameter_max_Set() const{
    return m_estimated_diameter_max_isSet;
}

bool OAIEstimatedDiameter::is_estimated_diameter_max_Valid() const{
    return m_estimated_diameter_max_isValid;
}

double OAIEstimatedDiameter::getEstimatedDiameterMin() const {
    return m_estimated_diameter_min;
}
void OAIEstimatedDiameter::setEstimatedDiameterMin(const double &estimated_diameter_min) {
    m_estimated_diameter_min = estimated_diameter_min;
    m_estimated_diameter_min_isSet = true;
}

bool OAIEstimatedDiameter::is_estimated_diameter_min_Set() const{
    return m_estimated_diameter_min_isSet;
}

bool OAIEstimatedDiameter::is_estimated_diameter_min_Valid() const{
    return m_estimated_diameter_min_isValid;
}

bool OAIEstimatedDiameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_diameter_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_diameter_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimatedDiameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
