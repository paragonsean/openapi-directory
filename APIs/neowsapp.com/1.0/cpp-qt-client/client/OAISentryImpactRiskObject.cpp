/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentryImpactRiskObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentryImpactRiskObject::OAISentryImpactRiskObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentryImpactRiskObject::OAISentryImpactRiskObject() {
    this->initializeModel();
}

OAISentryImpactRiskObject::~OAISentryImpactRiskObject() {}

void OAISentryImpactRiskObject::initializeModel() {

    m_palermo_scale_max_isSet = false;
    m_palermo_scale_max_isValid = false;

    m_absolute_magnitude_isSet = false;
    m_absolute_magnitude_isValid = false;

    m_average_lunar_distance_isSet = false;
    m_average_lunar_distance_isValid = false;

    m_designation_isSet = false;
    m_designation_isValid = false;

    m_estimated_diameter_isSet = false;
    m_estimated_diameter_isValid = false;

    m_fullname_isSet = false;
    m_fullname_isValid = false;

    m_impact_probability_isSet = false;
    m_impact_probability_isValid = false;

    m_is_active_sentry_object_isSet = false;
    m_is_active_sentry_object_isValid = false;

    m_last_obs_isSet = false;
    m_last_obs_isValid = false;

    m_last_obs_jd_isSet = false;
    m_last_obs_jd_isValid = false;

    m_palermo_scale_ave_isSet = false;
    m_palermo_scale_ave_isValid = false;

    m_potential_impacts_isSet = false;
    m_potential_impacts_isValid = false;

    m_removal_date_isSet = false;
    m_removal_date_isValid = false;

    m_sentry_id_isSet = false;
    m_sentry_id_isValid = false;

    m_torino_scale_isSet = false;
    m_torino_scale_isValid = false;

    m_v_infinity_isSet = false;
    m_v_infinity_isValid = false;

    m_year_range_max_isSet = false;
    m_year_range_max_isValid = false;

    m_year_range_min_isSet = false;
    m_year_range_min_isValid = false;
}

void OAISentryImpactRiskObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentryImpactRiskObject::fromJsonObject(QJsonObject json) {

    m_palermo_scale_max_isValid = ::OpenAPI::fromJsonValue(m_palermo_scale_max, json[QString("Palermo_scale_max")]);
    m_palermo_scale_max_isSet = !json[QString("Palermo_scale_max")].isNull() && m_palermo_scale_max_isValid;

    m_absolute_magnitude_isValid = ::OpenAPI::fromJsonValue(m_absolute_magnitude, json[QString("absolute_magnitude")]);
    m_absolute_magnitude_isSet = !json[QString("absolute_magnitude")].isNull() && m_absolute_magnitude_isValid;

    m_average_lunar_distance_isValid = ::OpenAPI::fromJsonValue(m_average_lunar_distance, json[QString("average_lunar_distance")]);
    m_average_lunar_distance_isSet = !json[QString("average_lunar_distance")].isNull() && m_average_lunar_distance_isValid;

    m_designation_isValid = ::OpenAPI::fromJsonValue(m_designation, json[QString("designation")]);
    m_designation_isSet = !json[QString("designation")].isNull() && m_designation_isValid;

    m_estimated_diameter_isValid = ::OpenAPI::fromJsonValue(m_estimated_diameter, json[QString("estimated_diameter")]);
    m_estimated_diameter_isSet = !json[QString("estimated_diameter")].isNull() && m_estimated_diameter_isValid;

    m_fullname_isValid = ::OpenAPI::fromJsonValue(m_fullname, json[QString("fullname")]);
    m_fullname_isSet = !json[QString("fullname")].isNull() && m_fullname_isValid;

    m_impact_probability_isValid = ::OpenAPI::fromJsonValue(m_impact_probability, json[QString("impact_probability")]);
    m_impact_probability_isSet = !json[QString("impact_probability")].isNull() && m_impact_probability_isValid;

    m_is_active_sentry_object_isValid = ::OpenAPI::fromJsonValue(m_is_active_sentry_object, json[QString("is_active_sentry_object")]);
    m_is_active_sentry_object_isSet = !json[QString("is_active_sentry_object")].isNull() && m_is_active_sentry_object_isValid;

    m_last_obs_isValid = ::OpenAPI::fromJsonValue(m_last_obs, json[QString("last_obs")]);
    m_last_obs_isSet = !json[QString("last_obs")].isNull() && m_last_obs_isValid;

    m_last_obs_jd_isValid = ::OpenAPI::fromJsonValue(m_last_obs_jd, json[QString("last_obs_jd")]);
    m_last_obs_jd_isSet = !json[QString("last_obs_jd")].isNull() && m_last_obs_jd_isValid;

    m_palermo_scale_ave_isValid = ::OpenAPI::fromJsonValue(m_palermo_scale_ave, json[QString("palermo_scale_ave")]);
    m_palermo_scale_ave_isSet = !json[QString("palermo_scale_ave")].isNull() && m_palermo_scale_ave_isValid;

    m_potential_impacts_isValid = ::OpenAPI::fromJsonValue(m_potential_impacts, json[QString("potential_impacts")]);
    m_potential_impacts_isSet = !json[QString("potential_impacts")].isNull() && m_potential_impacts_isValid;

    m_removal_date_isValid = ::OpenAPI::fromJsonValue(m_removal_date, json[QString("removal_date")]);
    m_removal_date_isSet = !json[QString("removal_date")].isNull() && m_removal_date_isValid;

    m_sentry_id_isValid = ::OpenAPI::fromJsonValue(m_sentry_id, json[QString("sentryId")]);
    m_sentry_id_isSet = !json[QString("sentryId")].isNull() && m_sentry_id_isValid;

    m_torino_scale_isValid = ::OpenAPI::fromJsonValue(m_torino_scale, json[QString("torino_scale")]);
    m_torino_scale_isSet = !json[QString("torino_scale")].isNull() && m_torino_scale_isValid;

    m_v_infinity_isValid = ::OpenAPI::fromJsonValue(m_v_infinity, json[QString("v_infinity")]);
    m_v_infinity_isSet = !json[QString("v_infinity")].isNull() && m_v_infinity_isValid;

    m_year_range_max_isValid = ::OpenAPI::fromJsonValue(m_year_range_max, json[QString("year_range_max")]);
    m_year_range_max_isSet = !json[QString("year_range_max")].isNull() && m_year_range_max_isValid;

    m_year_range_min_isValid = ::OpenAPI::fromJsonValue(m_year_range_min, json[QString("year_range_min")]);
    m_year_range_min_isSet = !json[QString("year_range_min")].isNull() && m_year_range_min_isValid;
}

QString OAISentryImpactRiskObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentryImpactRiskObject::asJsonObject() const {
    QJsonObject obj;
    if (m_palermo_scale_max_isSet) {
        obj.insert(QString("Palermo_scale_max"), ::OpenAPI::toJsonValue(m_palermo_scale_max));
    }
    if (m_absolute_magnitude_isSet) {
        obj.insert(QString("absolute_magnitude"), ::OpenAPI::toJsonValue(m_absolute_magnitude));
    }
    if (m_average_lunar_distance_isSet) {
        obj.insert(QString("average_lunar_distance"), ::OpenAPI::toJsonValue(m_average_lunar_distance));
    }
    if (m_designation_isSet) {
        obj.insert(QString("designation"), ::OpenAPI::toJsonValue(m_designation));
    }
    if (m_estimated_diameter_isSet) {
        obj.insert(QString("estimated_diameter"), ::OpenAPI::toJsonValue(m_estimated_diameter));
    }
    if (m_fullname_isSet) {
        obj.insert(QString("fullname"), ::OpenAPI::toJsonValue(m_fullname));
    }
    if (m_impact_probability_isSet) {
        obj.insert(QString("impact_probability"), ::OpenAPI::toJsonValue(m_impact_probability));
    }
    if (m_is_active_sentry_object_isSet) {
        obj.insert(QString("is_active_sentry_object"), ::OpenAPI::toJsonValue(m_is_active_sentry_object));
    }
    if (m_last_obs_isSet) {
        obj.insert(QString("last_obs"), ::OpenAPI::toJsonValue(m_last_obs));
    }
    if (m_last_obs_jd_isSet) {
        obj.insert(QString("last_obs_jd"), ::OpenAPI::toJsonValue(m_last_obs_jd));
    }
    if (m_palermo_scale_ave_isSet) {
        obj.insert(QString("palermo_scale_ave"), ::OpenAPI::toJsonValue(m_palermo_scale_ave));
    }
    if (m_potential_impacts_isSet) {
        obj.insert(QString("potential_impacts"), ::OpenAPI::toJsonValue(m_potential_impacts));
    }
    if (m_removal_date_isSet) {
        obj.insert(QString("removal_date"), ::OpenAPI::toJsonValue(m_removal_date));
    }
    if (m_sentry_id_isSet) {
        obj.insert(QString("sentryId"), ::OpenAPI::toJsonValue(m_sentry_id));
    }
    if (m_torino_scale_isSet) {
        obj.insert(QString("torino_scale"), ::OpenAPI::toJsonValue(m_torino_scale));
    }
    if (m_v_infinity_isSet) {
        obj.insert(QString("v_infinity"), ::OpenAPI::toJsonValue(m_v_infinity));
    }
    if (m_year_range_max_isSet) {
        obj.insert(QString("year_range_max"), ::OpenAPI::toJsonValue(m_year_range_max));
    }
    if (m_year_range_min_isSet) {
        obj.insert(QString("year_range_min"), ::OpenAPI::toJsonValue(m_year_range_min));
    }
    return obj;
}

QString OAISentryImpactRiskObject::getPalermoScaleMax() const {
    return m_palermo_scale_max;
}
void OAISentryImpactRiskObject::setPalermoScaleMax(const QString &palermo_scale_max) {
    m_palermo_scale_max = palermo_scale_max;
    m_palermo_scale_max_isSet = true;
}

bool OAISentryImpactRiskObject::is_palermo_scale_max_Set() const{
    return m_palermo_scale_max_isSet;
}

bool OAISentryImpactRiskObject::is_palermo_scale_max_Valid() const{
    return m_palermo_scale_max_isValid;
}

QString OAISentryImpactRiskObject::getAbsoluteMagnitude() const {
    return m_absolute_magnitude;
}
void OAISentryImpactRiskObject::setAbsoluteMagnitude(const QString &absolute_magnitude) {
    m_absolute_magnitude = absolute_magnitude;
    m_absolute_magnitude_isSet = true;
}

bool OAISentryImpactRiskObject::is_absolute_magnitude_Set() const{
    return m_absolute_magnitude_isSet;
}

bool OAISentryImpactRiskObject::is_absolute_magnitude_Valid() const{
    return m_absolute_magnitude_isValid;
}

double OAISentryImpactRiskObject::getAverageLunarDistance() const {
    return m_average_lunar_distance;
}
void OAISentryImpactRiskObject::setAverageLunarDistance(const double &average_lunar_distance) {
    m_average_lunar_distance = average_lunar_distance;
    m_average_lunar_distance_isSet = true;
}

bool OAISentryImpactRiskObject::is_average_lunar_distance_Set() const{
    return m_average_lunar_distance_isSet;
}

bool OAISentryImpactRiskObject::is_average_lunar_distance_Valid() const{
    return m_average_lunar_distance_isValid;
}

QString OAISentryImpactRiskObject::getDesignation() const {
    return m_designation;
}
void OAISentryImpactRiskObject::setDesignation(const QString &designation) {
    m_designation = designation;
    m_designation_isSet = true;
}

bool OAISentryImpactRiskObject::is_designation_Set() const{
    return m_designation_isSet;
}

bool OAISentryImpactRiskObject::is_designation_Valid() const{
    return m_designation_isValid;
}

QString OAISentryImpactRiskObject::getEstimatedDiameter() const {
    return m_estimated_diameter;
}
void OAISentryImpactRiskObject::setEstimatedDiameter(const QString &estimated_diameter) {
    m_estimated_diameter = estimated_diameter;
    m_estimated_diameter_isSet = true;
}

bool OAISentryImpactRiskObject::is_estimated_diameter_Set() const{
    return m_estimated_diameter_isSet;
}

bool OAISentryImpactRiskObject::is_estimated_diameter_Valid() const{
    return m_estimated_diameter_isValid;
}

QString OAISentryImpactRiskObject::getFullname() const {
    return m_fullname;
}
void OAISentryImpactRiskObject::setFullname(const QString &fullname) {
    m_fullname = fullname;
    m_fullname_isSet = true;
}

bool OAISentryImpactRiskObject::is_fullname_Set() const{
    return m_fullname_isSet;
}

bool OAISentryImpactRiskObject::is_fullname_Valid() const{
    return m_fullname_isValid;
}

QString OAISentryImpactRiskObject::getImpactProbability() const {
    return m_impact_probability;
}
void OAISentryImpactRiskObject::setImpactProbability(const QString &impact_probability) {
    m_impact_probability = impact_probability;
    m_impact_probability_isSet = true;
}

bool OAISentryImpactRiskObject::is_impact_probability_Set() const{
    return m_impact_probability_isSet;
}

bool OAISentryImpactRiskObject::is_impact_probability_Valid() const{
    return m_impact_probability_isValid;
}

bool OAISentryImpactRiskObject::isIsActiveSentryObject() const {
    return m_is_active_sentry_object;
}
void OAISentryImpactRiskObject::setIsActiveSentryObject(const bool &is_active_sentry_object) {
    m_is_active_sentry_object = is_active_sentry_object;
    m_is_active_sentry_object_isSet = true;
}

bool OAISentryImpactRiskObject::is_is_active_sentry_object_Set() const{
    return m_is_active_sentry_object_isSet;
}

bool OAISentryImpactRiskObject::is_is_active_sentry_object_Valid() const{
    return m_is_active_sentry_object_isValid;
}

QString OAISentryImpactRiskObject::getLastObs() const {
    return m_last_obs;
}
void OAISentryImpactRiskObject::setLastObs(const QString &last_obs) {
    m_last_obs = last_obs;
    m_last_obs_isSet = true;
}

bool OAISentryImpactRiskObject::is_last_obs_Set() const{
    return m_last_obs_isSet;
}

bool OAISentryImpactRiskObject::is_last_obs_Valid() const{
    return m_last_obs_isValid;
}

QString OAISentryImpactRiskObject::getLastObsJd() const {
    return m_last_obs_jd;
}
void OAISentryImpactRiskObject::setLastObsJd(const QString &last_obs_jd) {
    m_last_obs_jd = last_obs_jd;
    m_last_obs_jd_isSet = true;
}

bool OAISentryImpactRiskObject::is_last_obs_jd_Set() const{
    return m_last_obs_jd_isSet;
}

bool OAISentryImpactRiskObject::is_last_obs_jd_Valid() const{
    return m_last_obs_jd_isValid;
}

QString OAISentryImpactRiskObject::getPalermoScaleAve() const {
    return m_palermo_scale_ave;
}
void OAISentryImpactRiskObject::setPalermoScaleAve(const QString &palermo_scale_ave) {
    m_palermo_scale_ave = palermo_scale_ave;
    m_palermo_scale_ave_isSet = true;
}

bool OAISentryImpactRiskObject::is_palermo_scale_ave_Set() const{
    return m_palermo_scale_ave_isSet;
}

bool OAISentryImpactRiskObject::is_palermo_scale_ave_Valid() const{
    return m_palermo_scale_ave_isValid;
}

QString OAISentryImpactRiskObject::getPotentialImpacts() const {
    return m_potential_impacts;
}
void OAISentryImpactRiskObject::setPotentialImpacts(const QString &potential_impacts) {
    m_potential_impacts = potential_impacts;
    m_potential_impacts_isSet = true;
}

bool OAISentryImpactRiskObject::is_potential_impacts_Set() const{
    return m_potential_impacts_isSet;
}

bool OAISentryImpactRiskObject::is_potential_impacts_Valid() const{
    return m_potential_impacts_isValid;
}

QString OAISentryImpactRiskObject::getRemovalDate() const {
    return m_removal_date;
}
void OAISentryImpactRiskObject::setRemovalDate(const QString &removal_date) {
    m_removal_date = removal_date;
    m_removal_date_isSet = true;
}

bool OAISentryImpactRiskObject::is_removal_date_Set() const{
    return m_removal_date_isSet;
}

bool OAISentryImpactRiskObject::is_removal_date_Valid() const{
    return m_removal_date_isValid;
}

QString OAISentryImpactRiskObject::getSentryId() const {
    return m_sentry_id;
}
void OAISentryImpactRiskObject::setSentryId(const QString &sentry_id) {
    m_sentry_id = sentry_id;
    m_sentry_id_isSet = true;
}

bool OAISentryImpactRiskObject::is_sentry_id_Set() const{
    return m_sentry_id_isSet;
}

bool OAISentryImpactRiskObject::is_sentry_id_Valid() const{
    return m_sentry_id_isValid;
}

QString OAISentryImpactRiskObject::getTorinoScale() const {
    return m_torino_scale;
}
void OAISentryImpactRiskObject::setTorinoScale(const QString &torino_scale) {
    m_torino_scale = torino_scale;
    m_torino_scale_isSet = true;
}

bool OAISentryImpactRiskObject::is_torino_scale_Set() const{
    return m_torino_scale_isSet;
}

bool OAISentryImpactRiskObject::is_torino_scale_Valid() const{
    return m_torino_scale_isValid;
}

QString OAISentryImpactRiskObject::getVInfinity() const {
    return m_v_infinity;
}
void OAISentryImpactRiskObject::setVInfinity(const QString &v_infinity) {
    m_v_infinity = v_infinity;
    m_v_infinity_isSet = true;
}

bool OAISentryImpactRiskObject::is_v_infinity_Set() const{
    return m_v_infinity_isSet;
}

bool OAISentryImpactRiskObject::is_v_infinity_Valid() const{
    return m_v_infinity_isValid;
}

QString OAISentryImpactRiskObject::getYearRangeMax() const {
    return m_year_range_max;
}
void OAISentryImpactRiskObject::setYearRangeMax(const QString &year_range_max) {
    m_year_range_max = year_range_max;
    m_year_range_max_isSet = true;
}

bool OAISentryImpactRiskObject::is_year_range_max_Set() const{
    return m_year_range_max_isSet;
}

bool OAISentryImpactRiskObject::is_year_range_max_Valid() const{
    return m_year_range_max_isValid;
}

QString OAISentryImpactRiskObject::getYearRangeMin() const {
    return m_year_range_min;
}
void OAISentryImpactRiskObject::setYearRangeMin(const QString &year_range_min) {
    m_year_range_min = year_range_min;
    m_year_range_min_isSet = true;
}

bool OAISentryImpactRiskObject::is_year_range_min_Set() const{
    return m_year_range_min_isSet;
}

bool OAISentryImpactRiskObject::is_year_range_min_Valid() const{
    return m_year_range_min_isValid;
}

bool OAISentryImpactRiskObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_palermo_scale_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolute_magnitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_lunar_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_diameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fullname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_sentry_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_obs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_obs_jd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_palermo_scale_ave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_potential_impacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removal_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_torino_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_infinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_range_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_range_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentryImpactRiskObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
