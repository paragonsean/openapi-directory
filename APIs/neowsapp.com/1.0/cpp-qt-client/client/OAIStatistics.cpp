/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_close_approach_count_isSet = false;
    m_close_approach_count_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_nasa_jpl_url_isSet = false;
    m_nasa_jpl_url_isValid = false;

    m_near_earth_object_count_isSet = false;
    m_near_earth_object_count_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_close_approach_count_isValid = ::OpenAPI::fromJsonValue(m_close_approach_count, json[QString("close_approach_count")]);
    m_close_approach_count_isSet = !json[QString("close_approach_count")].isNull() && m_close_approach_count_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("last_updated")]);
    m_last_updated_isSet = !json[QString("last_updated")].isNull() && m_last_updated_isValid;

    m_nasa_jpl_url_isValid = ::OpenAPI::fromJsonValue(m_nasa_jpl_url, json[QString("nasa_jpl_url")]);
    m_nasa_jpl_url_isSet = !json[QString("nasa_jpl_url")].isNull() && m_nasa_jpl_url_isValid;

    m_near_earth_object_count_isValid = ::OpenAPI::fromJsonValue(m_near_earth_object_count, json[QString("near_earth_object_count")]);
    m_near_earth_object_count_isSet = !json[QString("near_earth_object_count")].isNull() && m_near_earth_object_count_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_close_approach_count_isSet) {
        obj.insert(QString("close_approach_count"), ::OpenAPI::toJsonValue(m_close_approach_count));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("last_updated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_nasa_jpl_url.isSet()) {
        obj.insert(QString("nasa_jpl_url"), ::OpenAPI::toJsonValue(m_nasa_jpl_url));
    }
    if (m_near_earth_object_count_isSet) {
        obj.insert(QString("near_earth_object_count"), ::OpenAPI::toJsonValue(m_near_earth_object_count));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

qint64 OAIStatistics::getCloseApproachCount() const {
    return m_close_approach_count;
}
void OAIStatistics::setCloseApproachCount(const qint64 &close_approach_count) {
    m_close_approach_count = close_approach_count;
    m_close_approach_count_isSet = true;
}

bool OAIStatistics::is_close_approach_count_Set() const{
    return m_close_approach_count_isSet;
}

bool OAIStatistics::is_close_approach_count_Valid() const{
    return m_close_approach_count_isValid;
}

QString OAIStatistics::getLastUpdated() const {
    return m_last_updated;
}
void OAIStatistics::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIStatistics::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIStatistics::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIURL OAIStatistics::getNasaJplUrl() const {
    return m_nasa_jpl_url;
}
void OAIStatistics::setNasaJplUrl(const OAIURL &nasa_jpl_url) {
    m_nasa_jpl_url = nasa_jpl_url;
    m_nasa_jpl_url_isSet = true;
}

bool OAIStatistics::is_nasa_jpl_url_Set() const{
    return m_nasa_jpl_url_isSet;
}

bool OAIStatistics::is_nasa_jpl_url_Valid() const{
    return m_nasa_jpl_url_isValid;
}

qint64 OAIStatistics::getNearEarthObjectCount() const {
    return m_near_earth_object_count;
}
void OAIStatistics::setNearEarthObjectCount(const qint64 &near_earth_object_count) {
    m_near_earth_object_count = near_earth_object_count;
    m_near_earth_object_count_isSet = true;
}

bool OAIStatistics::is_near_earth_object_count_Set() const{
    return m_near_earth_object_count_isSet;
}

bool OAIStatistics::is_near_earth_object_count_Valid() const{
    return m_near_earth_object_count_isValid;
}

QString OAIStatistics::getSource() const {
    return m_source;
}
void OAIStatistics::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIStatistics::is_source_Set() const{
    return m_source_isSet;
}

bool OAIStatistics::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_approach_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nasa_jpl_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_near_earth_object_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
