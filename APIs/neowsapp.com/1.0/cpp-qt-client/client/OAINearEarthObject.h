/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINearEarthObject.h
 *
 * 
 */

#ifndef OAINearEarthObject_H
#define OAINearEarthObject_H

#include <QJsonObject>

#include "OAICloseApproachData.h"
#include "OAIEstimatedDiameterContainer.h"
#include "OAIOrbitalData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICloseApproachData;
class OAIEstimatedDiameterContainer;
class OAIOrbitalData;

class OAINearEarthObject : public OAIObject {
public:
    OAINearEarthObject();
    OAINearEarthObject(QString json);
    ~OAINearEarthObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAbsoluteMagnitudeH() const;
    void setAbsoluteMagnitudeH(const double &absolute_magnitude_h);
    bool is_absolute_magnitude_h_Set() const;
    bool is_absolute_magnitude_h_Valid() const;

    QList<OAICloseApproachData> getCloseApproachData() const;
    void setCloseApproachData(const QList<OAICloseApproachData> &close_approach_data);
    bool is_close_approach_data_Set() const;
    bool is_close_approach_data_Valid() const;

    QString getDesignation() const;
    void setDesignation(const QString &designation);
    bool is_designation_Set() const;
    bool is_designation_Valid() const;

    OAIEstimatedDiameterContainer getEstimatedDiameter() const;
    void setEstimatedDiameter(const OAIEstimatedDiameterContainer &estimated_diameter);
    bool is_estimated_diameter_Set() const;
    bool is_estimated_diameter_Valid() const;

    bool isIsPotentiallyHazardousAsteroid() const;
    void setIsPotentiallyHazardousAsteroid(const bool &is_potentially_hazardous_asteroid);
    bool is_is_potentially_hazardous_asteroid_Set() const;
    bool is_is_potentially_hazardous_asteroid_Valid() const;

    bool isIsSentryObject() const;
    void setIsSentryObject(const bool &is_sentry_object);
    bool is_is_sentry_object_Set() const;
    bool is_is_sentry_object_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNameLimited() const;
    void setNameLimited(const QString &name_limited);
    bool is_name_limited_Set() const;
    bool is_name_limited_Valid() const;

    QString getNasaJplUrl() const;
    void setNasaJplUrl(const QString &nasa_jpl_url);
    bool is_nasa_jpl_url_Set() const;
    bool is_nasa_jpl_url_Valid() const;

    QString getNeoReferenceId() const;
    void setNeoReferenceId(const QString &neo_reference_id);
    bool is_neo_reference_id_Set() const;
    bool is_neo_reference_id_Valid() const;

    OAIOrbitalData getOrbitalData() const;
    void setOrbitalData(const OAIOrbitalData &orbital_data);
    bool is_orbital_data_Set() const;
    bool is_orbital_data_Valid() const;

    QString getSentryData() const;
    void setSentryData(const QString &sentry_data);
    bool is_sentry_data_Set() const;
    bool is_sentry_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_absolute_magnitude_h;
    bool m_absolute_magnitude_h_isSet;
    bool m_absolute_magnitude_h_isValid;

    QList<OAICloseApproachData> m_close_approach_data;
    bool m_close_approach_data_isSet;
    bool m_close_approach_data_isValid;

    QString m_designation;
    bool m_designation_isSet;
    bool m_designation_isValid;

    OAIEstimatedDiameterContainer m_estimated_diameter;
    bool m_estimated_diameter_isSet;
    bool m_estimated_diameter_isValid;

    bool m_is_potentially_hazardous_asteroid;
    bool m_is_potentially_hazardous_asteroid_isSet;
    bool m_is_potentially_hazardous_asteroid_isValid;

    bool m_is_sentry_object;
    bool m_is_sentry_object_isSet;
    bool m_is_sentry_object_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_name_limited;
    bool m_name_limited_isSet;
    bool m_name_limited_isValid;

    QString m_nasa_jpl_url;
    bool m_nasa_jpl_url_isSet;
    bool m_nasa_jpl_url_isValid;

    QString m_neo_reference_id;
    bool m_neo_reference_id_isSet;
    bool m_neo_reference_id_isValid;

    OAIOrbitalData m_orbital_data;
    bool m_orbital_data_isSet;
    bool m_orbital_data_isValid;

    QString m_sentry_data;
    bool m_sentry_data_isSet;
    bool m_sentry_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINearEarthObject)

#endif // OAINearEarthObject_H
