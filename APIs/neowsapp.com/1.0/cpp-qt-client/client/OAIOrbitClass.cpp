/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrbitClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrbitClass::OAIOrbitClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrbitClass::OAIOrbitClass() {
    this->initializeModel();
}

OAIOrbitClass::~OAIOrbitClass() {}

void OAIOrbitClass::initializeModel() {

    m_orbit_class_description_isSet = false;
    m_orbit_class_description_isValid = false;

    m_orbit_class_range_isSet = false;
    m_orbit_class_range_isValid = false;

    m_orbit_class_type_isSet = false;
    m_orbit_class_type_isValid = false;
}

void OAIOrbitClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrbitClass::fromJsonObject(QJsonObject json) {

    m_orbit_class_description_isValid = ::OpenAPI::fromJsonValue(m_orbit_class_description, json[QString("orbit_class_description")]);
    m_orbit_class_description_isSet = !json[QString("orbit_class_description")].isNull() && m_orbit_class_description_isValid;

    m_orbit_class_range_isValid = ::OpenAPI::fromJsonValue(m_orbit_class_range, json[QString("orbit_class_range")]);
    m_orbit_class_range_isSet = !json[QString("orbit_class_range")].isNull() && m_orbit_class_range_isValid;

    m_orbit_class_type_isValid = ::OpenAPI::fromJsonValue(m_orbit_class_type, json[QString("orbit_class_type")]);
    m_orbit_class_type_isSet = !json[QString("orbit_class_type")].isNull() && m_orbit_class_type_isValid;
}

QString OAIOrbitClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrbitClass::asJsonObject() const {
    QJsonObject obj;
    if (m_orbit_class_description_isSet) {
        obj.insert(QString("orbit_class_description"), ::OpenAPI::toJsonValue(m_orbit_class_description));
    }
    if (m_orbit_class_range_isSet) {
        obj.insert(QString("orbit_class_range"), ::OpenAPI::toJsonValue(m_orbit_class_range));
    }
    if (m_orbit_class_type_isSet) {
        obj.insert(QString("orbit_class_type"), ::OpenAPI::toJsonValue(m_orbit_class_type));
    }
    return obj;
}

QString OAIOrbitClass::getOrbitClassDescription() const {
    return m_orbit_class_description;
}
void OAIOrbitClass::setOrbitClassDescription(const QString &orbit_class_description) {
    m_orbit_class_description = orbit_class_description;
    m_orbit_class_description_isSet = true;
}

bool OAIOrbitClass::is_orbit_class_description_Set() const{
    return m_orbit_class_description_isSet;
}

bool OAIOrbitClass::is_orbit_class_description_Valid() const{
    return m_orbit_class_description_isValid;
}

QString OAIOrbitClass::getOrbitClassRange() const {
    return m_orbit_class_range;
}
void OAIOrbitClass::setOrbitClassRange(const QString &orbit_class_range) {
    m_orbit_class_range = orbit_class_range;
    m_orbit_class_range_isSet = true;
}

bool OAIOrbitClass::is_orbit_class_range_Set() const{
    return m_orbit_class_range_isSet;
}

bool OAIOrbitClass::is_orbit_class_range_Valid() const{
    return m_orbit_class_range_isValid;
}

QString OAIOrbitClass::getOrbitClassType() const {
    return m_orbit_class_type;
}
void OAIOrbitClass::setOrbitClassType(const QString &orbit_class_type) {
    m_orbit_class_type = orbit_class_type;
    m_orbit_class_type_isSet = true;
}

bool OAIOrbitClass::is_orbit_class_type_Set() const{
    return m_orbit_class_type_isSet;
}

bool OAIOrbitClass::is_orbit_class_type_Valid() const{
    return m_orbit_class_type_isValid;
}

bool OAIOrbitClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_orbit_class_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbit_class_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbit_class_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrbitClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
