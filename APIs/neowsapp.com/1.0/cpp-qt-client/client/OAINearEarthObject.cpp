/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINearEarthObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINearEarthObject::OAINearEarthObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINearEarthObject::OAINearEarthObject() {
    this->initializeModel();
}

OAINearEarthObject::~OAINearEarthObject() {}

void OAINearEarthObject::initializeModel() {

    m_absolute_magnitude_h_isSet = false;
    m_absolute_magnitude_h_isValid = false;

    m_close_approach_data_isSet = false;
    m_close_approach_data_isValid = false;

    m_designation_isSet = false;
    m_designation_isValid = false;

    m_estimated_diameter_isSet = false;
    m_estimated_diameter_isValid = false;

    m_is_potentially_hazardous_asteroid_isSet = false;
    m_is_potentially_hazardous_asteroid_isValid = false;

    m_is_sentry_object_isSet = false;
    m_is_sentry_object_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_limited_isSet = false;
    m_name_limited_isValid = false;

    m_nasa_jpl_url_isSet = false;
    m_nasa_jpl_url_isValid = false;

    m_neo_reference_id_isSet = false;
    m_neo_reference_id_isValid = false;

    m_orbital_data_isSet = false;
    m_orbital_data_isValid = false;

    m_sentry_data_isSet = false;
    m_sentry_data_isValid = false;
}

void OAINearEarthObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINearEarthObject::fromJsonObject(QJsonObject json) {

    m_absolute_magnitude_h_isValid = ::OpenAPI::fromJsonValue(m_absolute_magnitude_h, json[QString("absolute_magnitude_h")]);
    m_absolute_magnitude_h_isSet = !json[QString("absolute_magnitude_h")].isNull() && m_absolute_magnitude_h_isValid;

    m_close_approach_data_isValid = ::OpenAPI::fromJsonValue(m_close_approach_data, json[QString("close_approach_data")]);
    m_close_approach_data_isSet = !json[QString("close_approach_data")].isNull() && m_close_approach_data_isValid;

    m_designation_isValid = ::OpenAPI::fromJsonValue(m_designation, json[QString("designation")]);
    m_designation_isSet = !json[QString("designation")].isNull() && m_designation_isValid;

    m_estimated_diameter_isValid = ::OpenAPI::fromJsonValue(m_estimated_diameter, json[QString("estimated_diameter")]);
    m_estimated_diameter_isSet = !json[QString("estimated_diameter")].isNull() && m_estimated_diameter_isValid;

    m_is_potentially_hazardous_asteroid_isValid = ::OpenAPI::fromJsonValue(m_is_potentially_hazardous_asteroid, json[QString("is_potentially_hazardous_asteroid")]);
    m_is_potentially_hazardous_asteroid_isSet = !json[QString("is_potentially_hazardous_asteroid")].isNull() && m_is_potentially_hazardous_asteroid_isValid;

    m_is_sentry_object_isValid = ::OpenAPI::fromJsonValue(m_is_sentry_object, json[QString("is_sentry_object")]);
    m_is_sentry_object_isSet = !json[QString("is_sentry_object")].isNull() && m_is_sentry_object_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_limited_isValid = ::OpenAPI::fromJsonValue(m_name_limited, json[QString("name_limited")]);
    m_name_limited_isSet = !json[QString("name_limited")].isNull() && m_name_limited_isValid;

    m_nasa_jpl_url_isValid = ::OpenAPI::fromJsonValue(m_nasa_jpl_url, json[QString("nasa_jpl_url")]);
    m_nasa_jpl_url_isSet = !json[QString("nasa_jpl_url")].isNull() && m_nasa_jpl_url_isValid;

    m_neo_reference_id_isValid = ::OpenAPI::fromJsonValue(m_neo_reference_id, json[QString("neo_reference_id")]);
    m_neo_reference_id_isSet = !json[QString("neo_reference_id")].isNull() && m_neo_reference_id_isValid;

    m_orbital_data_isValid = ::OpenAPI::fromJsonValue(m_orbital_data, json[QString("orbital_data")]);
    m_orbital_data_isSet = !json[QString("orbital_data")].isNull() && m_orbital_data_isValid;

    m_sentry_data_isValid = ::OpenAPI::fromJsonValue(m_sentry_data, json[QString("sentry_data")]);
    m_sentry_data_isSet = !json[QString("sentry_data")].isNull() && m_sentry_data_isValid;
}

QString OAINearEarthObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINearEarthObject::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_magnitude_h_isSet) {
        obj.insert(QString("absolute_magnitude_h"), ::OpenAPI::toJsonValue(m_absolute_magnitude_h));
    }
    if (m_close_approach_data.size() > 0) {
        obj.insert(QString("close_approach_data"), ::OpenAPI::toJsonValue(m_close_approach_data));
    }
    if (m_designation_isSet) {
        obj.insert(QString("designation"), ::OpenAPI::toJsonValue(m_designation));
    }
    if (m_estimated_diameter.isSet()) {
        obj.insert(QString("estimated_diameter"), ::OpenAPI::toJsonValue(m_estimated_diameter));
    }
    if (m_is_potentially_hazardous_asteroid_isSet) {
        obj.insert(QString("is_potentially_hazardous_asteroid"), ::OpenAPI::toJsonValue(m_is_potentially_hazardous_asteroid));
    }
    if (m_is_sentry_object_isSet) {
        obj.insert(QString("is_sentry_object"), ::OpenAPI::toJsonValue(m_is_sentry_object));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_limited_isSet) {
        obj.insert(QString("name_limited"), ::OpenAPI::toJsonValue(m_name_limited));
    }
    if (m_nasa_jpl_url_isSet) {
        obj.insert(QString("nasa_jpl_url"), ::OpenAPI::toJsonValue(m_nasa_jpl_url));
    }
    if (m_neo_reference_id_isSet) {
        obj.insert(QString("neo_reference_id"), ::OpenAPI::toJsonValue(m_neo_reference_id));
    }
    if (m_orbital_data.isSet()) {
        obj.insert(QString("orbital_data"), ::OpenAPI::toJsonValue(m_orbital_data));
    }
    if (m_sentry_data_isSet) {
        obj.insert(QString("sentry_data"), ::OpenAPI::toJsonValue(m_sentry_data));
    }
    return obj;
}

double OAINearEarthObject::getAbsoluteMagnitudeH() const {
    return m_absolute_magnitude_h;
}
void OAINearEarthObject::setAbsoluteMagnitudeH(const double &absolute_magnitude_h) {
    m_absolute_magnitude_h = absolute_magnitude_h;
    m_absolute_magnitude_h_isSet = true;
}

bool OAINearEarthObject::is_absolute_magnitude_h_Set() const{
    return m_absolute_magnitude_h_isSet;
}

bool OAINearEarthObject::is_absolute_magnitude_h_Valid() const{
    return m_absolute_magnitude_h_isValid;
}

QList<OAICloseApproachData> OAINearEarthObject::getCloseApproachData() const {
    return m_close_approach_data;
}
void OAINearEarthObject::setCloseApproachData(const QList<OAICloseApproachData> &close_approach_data) {
    m_close_approach_data = close_approach_data;
    m_close_approach_data_isSet = true;
}

bool OAINearEarthObject::is_close_approach_data_Set() const{
    return m_close_approach_data_isSet;
}

bool OAINearEarthObject::is_close_approach_data_Valid() const{
    return m_close_approach_data_isValid;
}

QString OAINearEarthObject::getDesignation() const {
    return m_designation;
}
void OAINearEarthObject::setDesignation(const QString &designation) {
    m_designation = designation;
    m_designation_isSet = true;
}

bool OAINearEarthObject::is_designation_Set() const{
    return m_designation_isSet;
}

bool OAINearEarthObject::is_designation_Valid() const{
    return m_designation_isValid;
}

OAIEstimatedDiameterContainer OAINearEarthObject::getEstimatedDiameter() const {
    return m_estimated_diameter;
}
void OAINearEarthObject::setEstimatedDiameter(const OAIEstimatedDiameterContainer &estimated_diameter) {
    m_estimated_diameter = estimated_diameter;
    m_estimated_diameter_isSet = true;
}

bool OAINearEarthObject::is_estimated_diameter_Set() const{
    return m_estimated_diameter_isSet;
}

bool OAINearEarthObject::is_estimated_diameter_Valid() const{
    return m_estimated_diameter_isValid;
}

bool OAINearEarthObject::isIsPotentiallyHazardousAsteroid() const {
    return m_is_potentially_hazardous_asteroid;
}
void OAINearEarthObject::setIsPotentiallyHazardousAsteroid(const bool &is_potentially_hazardous_asteroid) {
    m_is_potentially_hazardous_asteroid = is_potentially_hazardous_asteroid;
    m_is_potentially_hazardous_asteroid_isSet = true;
}

bool OAINearEarthObject::is_is_potentially_hazardous_asteroid_Set() const{
    return m_is_potentially_hazardous_asteroid_isSet;
}

bool OAINearEarthObject::is_is_potentially_hazardous_asteroid_Valid() const{
    return m_is_potentially_hazardous_asteroid_isValid;
}

bool OAINearEarthObject::isIsSentryObject() const {
    return m_is_sentry_object;
}
void OAINearEarthObject::setIsSentryObject(const bool &is_sentry_object) {
    m_is_sentry_object = is_sentry_object;
    m_is_sentry_object_isSet = true;
}

bool OAINearEarthObject::is_is_sentry_object_Set() const{
    return m_is_sentry_object_isSet;
}

bool OAINearEarthObject::is_is_sentry_object_Valid() const{
    return m_is_sentry_object_isValid;
}

QString OAINearEarthObject::getName() const {
    return m_name;
}
void OAINearEarthObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINearEarthObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAINearEarthObject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINearEarthObject::getNameLimited() const {
    return m_name_limited;
}
void OAINearEarthObject::setNameLimited(const QString &name_limited) {
    m_name_limited = name_limited;
    m_name_limited_isSet = true;
}

bool OAINearEarthObject::is_name_limited_Set() const{
    return m_name_limited_isSet;
}

bool OAINearEarthObject::is_name_limited_Valid() const{
    return m_name_limited_isValid;
}

QString OAINearEarthObject::getNasaJplUrl() const {
    return m_nasa_jpl_url;
}
void OAINearEarthObject::setNasaJplUrl(const QString &nasa_jpl_url) {
    m_nasa_jpl_url = nasa_jpl_url;
    m_nasa_jpl_url_isSet = true;
}

bool OAINearEarthObject::is_nasa_jpl_url_Set() const{
    return m_nasa_jpl_url_isSet;
}

bool OAINearEarthObject::is_nasa_jpl_url_Valid() const{
    return m_nasa_jpl_url_isValid;
}

QString OAINearEarthObject::getNeoReferenceId() const {
    return m_neo_reference_id;
}
void OAINearEarthObject::setNeoReferenceId(const QString &neo_reference_id) {
    m_neo_reference_id = neo_reference_id;
    m_neo_reference_id_isSet = true;
}

bool OAINearEarthObject::is_neo_reference_id_Set() const{
    return m_neo_reference_id_isSet;
}

bool OAINearEarthObject::is_neo_reference_id_Valid() const{
    return m_neo_reference_id_isValid;
}

OAIOrbitalData OAINearEarthObject::getOrbitalData() const {
    return m_orbital_data;
}
void OAINearEarthObject::setOrbitalData(const OAIOrbitalData &orbital_data) {
    m_orbital_data = orbital_data;
    m_orbital_data_isSet = true;
}

bool OAINearEarthObject::is_orbital_data_Set() const{
    return m_orbital_data_isSet;
}

bool OAINearEarthObject::is_orbital_data_Valid() const{
    return m_orbital_data_isValid;
}

QString OAINearEarthObject::getSentryData() const {
    return m_sentry_data;
}
void OAINearEarthObject::setSentryData(const QString &sentry_data) {
    m_sentry_data = sentry_data;
    m_sentry_data_isSet = true;
}

bool OAINearEarthObject::is_sentry_data_Set() const{
    return m_sentry_data_isSet;
}

bool OAINearEarthObject::is_sentry_data_Valid() const{
    return m_sentry_data_isValid;
}

bool OAINearEarthObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_magnitude_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_approach_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_designation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_diameter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_potentially_hazardous_asteroid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sentry_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_limited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nasa_jpl_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neo_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbital_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentry_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINearEarthObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
