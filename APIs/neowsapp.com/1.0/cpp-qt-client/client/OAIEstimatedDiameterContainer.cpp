/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimatedDiameterContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimatedDiameterContainer::OAIEstimatedDiameterContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimatedDiameterContainer::OAIEstimatedDiameterContainer() {
    this->initializeModel();
}

OAIEstimatedDiameterContainer::~OAIEstimatedDiameterContainer() {}

void OAIEstimatedDiameterContainer::initializeModel() {

    m_feet_isSet = false;
    m_feet_isValid = false;

    m_kilometers_isSet = false;
    m_kilometers_isValid = false;

    m_meters_isSet = false;
    m_meters_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;
}

void OAIEstimatedDiameterContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimatedDiameterContainer::fromJsonObject(QJsonObject json) {

    m_feet_isValid = ::OpenAPI::fromJsonValue(m_feet, json[QString("feet")]);
    m_feet_isSet = !json[QString("feet")].isNull() && m_feet_isValid;

    m_kilometers_isValid = ::OpenAPI::fromJsonValue(m_kilometers, json[QString("kilometers")]);
    m_kilometers_isSet = !json[QString("kilometers")].isNull() && m_kilometers_isValid;

    m_meters_isValid = ::OpenAPI::fromJsonValue(m_meters, json[QString("meters")]);
    m_meters_isSet = !json[QString("meters")].isNull() && m_meters_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;
}

QString OAIEstimatedDiameterContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimatedDiameterContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_feet.isSet()) {
        obj.insert(QString("feet"), ::OpenAPI::toJsonValue(m_feet));
    }
    if (m_kilometers.isSet()) {
        obj.insert(QString("kilometers"), ::OpenAPI::toJsonValue(m_kilometers));
    }
    if (m_meters.isSet()) {
        obj.insert(QString("meters"), ::OpenAPI::toJsonValue(m_meters));
    }
    if (m_miles.isSet()) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    return obj;
}

OAIEstimatedDiameter OAIEstimatedDiameterContainer::getFeet() const {
    return m_feet;
}
void OAIEstimatedDiameterContainer::setFeet(const OAIEstimatedDiameter &feet) {
    m_feet = feet;
    m_feet_isSet = true;
}

bool OAIEstimatedDiameterContainer::is_feet_Set() const{
    return m_feet_isSet;
}

bool OAIEstimatedDiameterContainer::is_feet_Valid() const{
    return m_feet_isValid;
}

OAIEstimatedDiameter OAIEstimatedDiameterContainer::getKilometers() const {
    return m_kilometers;
}
void OAIEstimatedDiameterContainer::setKilometers(const OAIEstimatedDiameter &kilometers) {
    m_kilometers = kilometers;
    m_kilometers_isSet = true;
}

bool OAIEstimatedDiameterContainer::is_kilometers_Set() const{
    return m_kilometers_isSet;
}

bool OAIEstimatedDiameterContainer::is_kilometers_Valid() const{
    return m_kilometers_isValid;
}

OAIEstimatedDiameter OAIEstimatedDiameterContainer::getMeters() const {
    return m_meters;
}
void OAIEstimatedDiameterContainer::setMeters(const OAIEstimatedDiameter &meters) {
    m_meters = meters;
    m_meters_isSet = true;
}

bool OAIEstimatedDiameterContainer::is_meters_Set() const{
    return m_meters_isSet;
}

bool OAIEstimatedDiameterContainer::is_meters_Valid() const{
    return m_meters_isValid;
}

OAIEstimatedDiameter OAIEstimatedDiameterContainer::getMiles() const {
    return m_miles;
}
void OAIEstimatedDiameterContainer::setMiles(const OAIEstimatedDiameter &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIEstimatedDiameterContainer::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIEstimatedDiameterContainer::is_miles_Valid() const{
    return m_miles_isValid;
}

bool OAIEstimatedDiameterContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kilometers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimatedDiameterContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
