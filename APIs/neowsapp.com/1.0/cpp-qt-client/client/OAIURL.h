/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIURL.h
 *
 * 
 */

#ifndef OAIURL_H
#define OAIURL_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIURL : public OAIObject {
public:
    OAIURL();
    OAIURL(QString json);
    ~OAIURL() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthority() const;
    void setAuthority(const QString &authority);
    bool is_authority_Set() const;
    bool is_authority_Valid() const;

    OAIObject getContent() const;
    void setContent(const OAIObject &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    qint32 getDefaultPort() const;
    void setDefaultPort(const qint32 &default_port);
    bool is_default_port_Set() const;
    bool is_default_port_Valid() const;

    QString getFile() const;
    void setFile(const QString &file);
    bool is_file_Set() const;
    bool is_file_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    QString getRef() const;
    void setRef(const QString &ref);
    bool is_ref_Set() const;
    bool is_ref_Valid() const;

    QString getUserInfo() const;
    void setUserInfo(const QString &user_info);
    bool is_user_info_Set() const;
    bool is_user_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authority;
    bool m_authority_isSet;
    bool m_authority_isValid;

    OAIObject m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    qint32 m_default_port;
    bool m_default_port_isSet;
    bool m_default_port_isValid;

    QString m_file;
    bool m_file_isSet;
    bool m_file_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    QString m_ref;
    bool m_ref_isSet;
    bool m_ref_isValid;

    QString m_user_info;
    bool m_user_info_isSet;
    bool m_user_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIURL)

#endif // OAIURL_H
