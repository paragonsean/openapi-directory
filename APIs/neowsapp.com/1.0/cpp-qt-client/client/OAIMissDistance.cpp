/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMissDistance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMissDistance::OAIMissDistance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMissDistance::OAIMissDistance() {
    this->initializeModel();
}

OAIMissDistance::~OAIMissDistance() {}

void OAIMissDistance::initializeModel() {

    m_astronomical_isSet = false;
    m_astronomical_isValid = false;

    m_kilometers_isSet = false;
    m_kilometers_isValid = false;

    m_lunar_isSet = false;
    m_lunar_isValid = false;

    m_miles_isSet = false;
    m_miles_isValid = false;
}

void OAIMissDistance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMissDistance::fromJsonObject(QJsonObject json) {

    m_astronomical_isValid = ::OpenAPI::fromJsonValue(m_astronomical, json[QString("astronomical")]);
    m_astronomical_isSet = !json[QString("astronomical")].isNull() && m_astronomical_isValid;

    m_kilometers_isValid = ::OpenAPI::fromJsonValue(m_kilometers, json[QString("kilometers")]);
    m_kilometers_isSet = !json[QString("kilometers")].isNull() && m_kilometers_isValid;

    m_lunar_isValid = ::OpenAPI::fromJsonValue(m_lunar, json[QString("lunar")]);
    m_lunar_isSet = !json[QString("lunar")].isNull() && m_lunar_isValid;

    m_miles_isValid = ::OpenAPI::fromJsonValue(m_miles, json[QString("miles")]);
    m_miles_isSet = !json[QString("miles")].isNull() && m_miles_isValid;
}

QString OAIMissDistance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMissDistance::asJsonObject() const {
    QJsonObject obj;
    if (m_astronomical_isSet) {
        obj.insert(QString("astronomical"), ::OpenAPI::toJsonValue(m_astronomical));
    }
    if (m_kilometers_isSet) {
        obj.insert(QString("kilometers"), ::OpenAPI::toJsonValue(m_kilometers));
    }
    if (m_lunar_isSet) {
        obj.insert(QString("lunar"), ::OpenAPI::toJsonValue(m_lunar));
    }
    if (m_miles_isSet) {
        obj.insert(QString("miles"), ::OpenAPI::toJsonValue(m_miles));
    }
    return obj;
}

QString OAIMissDistance::getAstronomical() const {
    return m_astronomical;
}
void OAIMissDistance::setAstronomical(const QString &astronomical) {
    m_astronomical = astronomical;
    m_astronomical_isSet = true;
}

bool OAIMissDistance::is_astronomical_Set() const{
    return m_astronomical_isSet;
}

bool OAIMissDistance::is_astronomical_Valid() const{
    return m_astronomical_isValid;
}

QString OAIMissDistance::getKilometers() const {
    return m_kilometers;
}
void OAIMissDistance::setKilometers(const QString &kilometers) {
    m_kilometers = kilometers;
    m_kilometers_isSet = true;
}

bool OAIMissDistance::is_kilometers_Set() const{
    return m_kilometers_isSet;
}

bool OAIMissDistance::is_kilometers_Valid() const{
    return m_kilometers_isValid;
}

QString OAIMissDistance::getLunar() const {
    return m_lunar;
}
void OAIMissDistance::setLunar(const QString &lunar) {
    m_lunar = lunar;
    m_lunar_isSet = true;
}

bool OAIMissDistance::is_lunar_Set() const{
    return m_lunar_isSet;
}

bool OAIMissDistance::is_lunar_Valid() const{
    return m_lunar_isValid;
}

QString OAIMissDistance::getMiles() const {
    return m_miles;
}
void OAIMissDistance::setMiles(const QString &miles) {
    m_miles = miles;
    m_miles_isSet = true;
}

bool OAIMissDistance::is_miles_Set() const{
    return m_miles_isSet;
}

bool OAIMissDistance::is_miles_Valid() const{
    return m_miles_isValid;
}

bool OAIMissDistance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_astronomical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kilometers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lunar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miles_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMissDistance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
