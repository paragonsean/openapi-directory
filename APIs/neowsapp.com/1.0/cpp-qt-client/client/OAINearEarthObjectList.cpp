/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINearEarthObjectList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINearEarthObjectList::OAINearEarthObjectList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINearEarthObjectList::OAINearEarthObjectList() {
    this->initializeModel();
}

OAINearEarthObjectList::~OAINearEarthObjectList() {}

void OAINearEarthObjectList::initializeModel() {

    m_element_count_isSet = false;
    m_element_count_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_near_earth_objects_isSet = false;
    m_near_earth_objects_isValid = false;
}

void OAINearEarthObjectList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINearEarthObjectList::fromJsonObject(QJsonObject json) {

    m_element_count_isValid = ::OpenAPI::fromJsonValue(m_element_count, json[QString("element_count")]);
    m_element_count_isSet = !json[QString("element_count")].isNull() && m_element_count_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_near_earth_objects_isValid = ::OpenAPI::fromJsonValue(m_near_earth_objects, json[QString("near_earth_objects")]);
    m_near_earth_objects_isSet = !json[QString("near_earth_objects")].isNull() && m_near_earth_objects_isValid;
}

QString OAINearEarthObjectList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINearEarthObjectList::asJsonObject() const {
    QJsonObject obj;
    if (m_element_count_isSet) {
        obj.insert(QString("element_count"), ::OpenAPI::toJsonValue(m_element_count));
    }
    if (m_links_isSet) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_near_earth_objects_isSet) {
        obj.insert(QString("near_earth_objects"), ::OpenAPI::toJsonValue(m_near_earth_objects));
    }
    return obj;
}

qint32 OAINearEarthObjectList::getElementCount() const {
    return m_element_count;
}
void OAINearEarthObjectList::setElementCount(const qint32 &element_count) {
    m_element_count = element_count;
    m_element_count_isSet = true;
}

bool OAINearEarthObjectList::is_element_count_Set() const{
    return m_element_count_isSet;
}

bool OAINearEarthObjectList::is_element_count_Valid() const{
    return m_element_count_isValid;
}

OAIObject OAINearEarthObjectList::getLinks() const {
    return m_links;
}
void OAINearEarthObjectList::setLinks(const OAIObject &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAINearEarthObjectList::is_links_Set() const{
    return m_links_isSet;
}

bool OAINearEarthObjectList::is_links_Valid() const{
    return m_links_isValid;
}

QJsonValue OAINearEarthObjectList::getNearEarthObjects() const {
    return m_near_earth_objects;
}
void OAINearEarthObjectList::setNearEarthObjects(const QJsonValue &near_earth_objects) {
    m_near_earth_objects = near_earth_objects;
    m_near_earth_objects_isSet = true;
}

bool OAINearEarthObjectList::is_near_earth_objects_Set() const{
    return m_near_earth_objects_isSet;
}

bool OAINearEarthObjectList::is_near_earth_objects_Valid() const{
    return m_near_earth_objects_isValid;
}

bool OAINearEarthObjectList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_near_earth_objects_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINearEarthObjectList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
