/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrbitalData.h
 *
 * 
 */

#ifndef OAIOrbitalData_H
#define OAIOrbitalData_H

#include <QJsonObject>

#include "OAIOrbitClass.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrbitClass;

class OAIOrbitalData : public OAIObject {
public:
    OAIOrbitalData();
    OAIOrbitalData(QString json);
    ~OAIOrbitalData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAphelionDistance() const;
    void setAphelionDistance(const QString &aphelion_distance);
    bool is_aphelion_distance_Set() const;
    bool is_aphelion_distance_Valid() const;

    QString getAscendingNodeLongitude() const;
    void setAscendingNodeLongitude(const QString &ascending_node_longitude);
    bool is_ascending_node_longitude_Set() const;
    bool is_ascending_node_longitude_Valid() const;

    qint64 getDataArcInDays() const;
    void setDataArcInDays(const qint64 &data_arc_in_days);
    bool is_data_arc_in_days_Set() const;
    bool is_data_arc_in_days_Valid() const;

    QString getEccentricity() const;
    void setEccentricity(const QString &eccentricity);
    bool is_eccentricity_Set() const;
    bool is_eccentricity_Valid() const;

    QString getEpochOsculation() const;
    void setEpochOsculation(const QString &epoch_osculation);
    bool is_epoch_osculation_Set() const;
    bool is_epoch_osculation_Valid() const;

    QString getEquinox() const;
    void setEquinox(const QString &equinox);
    bool is_equinox_Set() const;
    bool is_equinox_Valid() const;

    QString getFirstObservationDate() const;
    void setFirstObservationDate(const QString &first_observation_date);
    bool is_first_observation_date_Set() const;
    bool is_first_observation_date_Valid() const;

    QString getInclination() const;
    void setInclination(const QString &inclination);
    bool is_inclination_Set() const;
    bool is_inclination_Valid() const;

    QString getJupiterTisserandInvariant() const;
    void setJupiterTisserandInvariant(const QString &jupiter_tisserand_invariant);
    bool is_jupiter_tisserand_invariant_Set() const;
    bool is_jupiter_tisserand_invariant_Valid() const;

    QString getLastObservationDate() const;
    void setLastObservationDate(const QString &last_observation_date);
    bool is_last_observation_date_Set() const;
    bool is_last_observation_date_Valid() const;

    QString getMeanAnomaly() const;
    void setMeanAnomaly(const QString &mean_anomaly);
    bool is_mean_anomaly_Set() const;
    bool is_mean_anomaly_Valid() const;

    QString getMeanMotion() const;
    void setMeanMotion(const QString &mean_motion);
    bool is_mean_motion_Set() const;
    bool is_mean_motion_Valid() const;

    QString getMinimumOrbitIntersection() const;
    void setMinimumOrbitIntersection(const QString &minimum_orbit_intersection);
    bool is_minimum_orbit_intersection_Set() const;
    bool is_minimum_orbit_intersection_Valid() const;

    qint64 getObservationsUsed() const;
    void setObservationsUsed(const qint64 &observations_used);
    bool is_observations_used_Set() const;
    bool is_observations_used_Valid() const;

    OAIOrbitClass getOrbitClass() const;
    void setOrbitClass(const OAIOrbitClass &orbit_class);
    bool is_orbit_class_Set() const;
    bool is_orbit_class_Valid() const;

    QString getOrbitDeterminationDate() const;
    void setOrbitDeterminationDate(const QString &orbit_determination_date);
    bool is_orbit_determination_date_Set() const;
    bool is_orbit_determination_date_Valid() const;

    QString getOrbitId() const;
    void setOrbitId(const QString &orbit_id);
    bool is_orbit_id_Set() const;
    bool is_orbit_id_Valid() const;

    QString getOrbitUncertainty() const;
    void setOrbitUncertainty(const QString &orbit_uncertainty);
    bool is_orbit_uncertainty_Set() const;
    bool is_orbit_uncertainty_Valid() const;

    QString getOrbitalPeriod() const;
    void setOrbitalPeriod(const QString &orbital_period);
    bool is_orbital_period_Set() const;
    bool is_orbital_period_Valid() const;

    QString getPerihelionArgument() const;
    void setPerihelionArgument(const QString &perihelion_argument);
    bool is_perihelion_argument_Set() const;
    bool is_perihelion_argument_Valid() const;

    QString getPerihelionDistance() const;
    void setPerihelionDistance(const QString &perihelion_distance);
    bool is_perihelion_distance_Set() const;
    bool is_perihelion_distance_Valid() const;

    QString getPerihelionTime() const;
    void setPerihelionTime(const QString &perihelion_time);
    bool is_perihelion_time_Set() const;
    bool is_perihelion_time_Valid() const;

    QString getSemiMajorAxis() const;
    void setSemiMajorAxis(const QString &semi_major_axis);
    bool is_semi_major_axis_Set() const;
    bool is_semi_major_axis_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aphelion_distance;
    bool m_aphelion_distance_isSet;
    bool m_aphelion_distance_isValid;

    QString m_ascending_node_longitude;
    bool m_ascending_node_longitude_isSet;
    bool m_ascending_node_longitude_isValid;

    qint64 m_data_arc_in_days;
    bool m_data_arc_in_days_isSet;
    bool m_data_arc_in_days_isValid;

    QString m_eccentricity;
    bool m_eccentricity_isSet;
    bool m_eccentricity_isValid;

    QString m_epoch_osculation;
    bool m_epoch_osculation_isSet;
    bool m_epoch_osculation_isValid;

    QString m_equinox;
    bool m_equinox_isSet;
    bool m_equinox_isValid;

    QString m_first_observation_date;
    bool m_first_observation_date_isSet;
    bool m_first_observation_date_isValid;

    QString m_inclination;
    bool m_inclination_isSet;
    bool m_inclination_isValid;

    QString m_jupiter_tisserand_invariant;
    bool m_jupiter_tisserand_invariant_isSet;
    bool m_jupiter_tisserand_invariant_isValid;

    QString m_last_observation_date;
    bool m_last_observation_date_isSet;
    bool m_last_observation_date_isValid;

    QString m_mean_anomaly;
    bool m_mean_anomaly_isSet;
    bool m_mean_anomaly_isValid;

    QString m_mean_motion;
    bool m_mean_motion_isSet;
    bool m_mean_motion_isValid;

    QString m_minimum_orbit_intersection;
    bool m_minimum_orbit_intersection_isSet;
    bool m_minimum_orbit_intersection_isValid;

    qint64 m_observations_used;
    bool m_observations_used_isSet;
    bool m_observations_used_isValid;

    OAIOrbitClass m_orbit_class;
    bool m_orbit_class_isSet;
    bool m_orbit_class_isValid;

    QString m_orbit_determination_date;
    bool m_orbit_determination_date_isSet;
    bool m_orbit_determination_date_isValid;

    QString m_orbit_id;
    bool m_orbit_id_isSet;
    bool m_orbit_id_isValid;

    QString m_orbit_uncertainty;
    bool m_orbit_uncertainty_isSet;
    bool m_orbit_uncertainty_isValid;

    QString m_orbital_period;
    bool m_orbital_period_isSet;
    bool m_orbital_period_isValid;

    QString m_perihelion_argument;
    bool m_perihelion_argument_isSet;
    bool m_perihelion_argument_isValid;

    QString m_perihelion_distance;
    bool m_perihelion_distance_isSet;
    bool m_perihelion_distance_isValid;

    QString m_perihelion_time;
    bool m_perihelion_time_isSet;
    bool m_perihelion_time_isValid;

    QString m_semi_major_axis;
    bool m_semi_major_axis_isSet;
    bool m_semi_major_axis_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOrbitalData)

#endif // OAIOrbitalData_H
