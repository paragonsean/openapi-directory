/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloseApproachData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloseApproachData::OAICloseApproachData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloseApproachData::OAICloseApproachData() {
    this->initializeModel();
}

OAICloseApproachData::~OAICloseApproachData() {}

void OAICloseApproachData::initializeModel() {

    m_close_approach_date_isSet = false;
    m_close_approach_date_isValid = false;

    m_close_approach_date_full_isSet = false;
    m_close_approach_date_full_isValid = false;

    m_epoch_date_close_approach_isSet = false;
    m_epoch_date_close_approach_isValid = false;

    m_miss_distance_isSet = false;
    m_miss_distance_isValid = false;

    m_orbiting_body_isSet = false;
    m_orbiting_body_isValid = false;

    m_relative_velocity_isSet = false;
    m_relative_velocity_isValid = false;
}

void OAICloseApproachData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloseApproachData::fromJsonObject(QJsonObject json) {

    m_close_approach_date_isValid = ::OpenAPI::fromJsonValue(m_close_approach_date, json[QString("close_approach_date")]);
    m_close_approach_date_isSet = !json[QString("close_approach_date")].isNull() && m_close_approach_date_isValid;

    m_close_approach_date_full_isValid = ::OpenAPI::fromJsonValue(m_close_approach_date_full, json[QString("close_approach_date_full")]);
    m_close_approach_date_full_isSet = !json[QString("close_approach_date_full")].isNull() && m_close_approach_date_full_isValid;

    m_epoch_date_close_approach_isValid = ::OpenAPI::fromJsonValue(m_epoch_date_close_approach, json[QString("epoch_date_close_approach")]);
    m_epoch_date_close_approach_isSet = !json[QString("epoch_date_close_approach")].isNull() && m_epoch_date_close_approach_isValid;

    m_miss_distance_isValid = ::OpenAPI::fromJsonValue(m_miss_distance, json[QString("miss_distance")]);
    m_miss_distance_isSet = !json[QString("miss_distance")].isNull() && m_miss_distance_isValid;

    m_orbiting_body_isValid = ::OpenAPI::fromJsonValue(m_orbiting_body, json[QString("orbiting_body")]);
    m_orbiting_body_isSet = !json[QString("orbiting_body")].isNull() && m_orbiting_body_isValid;

    m_relative_velocity_isValid = ::OpenAPI::fromJsonValue(m_relative_velocity, json[QString("relative_velocity")]);
    m_relative_velocity_isSet = !json[QString("relative_velocity")].isNull() && m_relative_velocity_isValid;
}

QString OAICloseApproachData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloseApproachData::asJsonObject() const {
    QJsonObject obj;
    if (m_close_approach_date_isSet) {
        obj.insert(QString("close_approach_date"), ::OpenAPI::toJsonValue(m_close_approach_date));
    }
    if (m_close_approach_date_full_isSet) {
        obj.insert(QString("close_approach_date_full"), ::OpenAPI::toJsonValue(m_close_approach_date_full));
    }
    if (m_epoch_date_close_approach_isSet) {
        obj.insert(QString("epoch_date_close_approach"), ::OpenAPI::toJsonValue(m_epoch_date_close_approach));
    }
    if (m_miss_distance.isSet()) {
        obj.insert(QString("miss_distance"), ::OpenAPI::toJsonValue(m_miss_distance));
    }
    if (m_orbiting_body_isSet) {
        obj.insert(QString("orbiting_body"), ::OpenAPI::toJsonValue(m_orbiting_body));
    }
    if (m_relative_velocity.isSet()) {
        obj.insert(QString("relative_velocity"), ::OpenAPI::toJsonValue(m_relative_velocity));
    }
    return obj;
}

QString OAICloseApproachData::getCloseApproachDate() const {
    return m_close_approach_date;
}
void OAICloseApproachData::setCloseApproachDate(const QString &close_approach_date) {
    m_close_approach_date = close_approach_date;
    m_close_approach_date_isSet = true;
}

bool OAICloseApproachData::is_close_approach_date_Set() const{
    return m_close_approach_date_isSet;
}

bool OAICloseApproachData::is_close_approach_date_Valid() const{
    return m_close_approach_date_isValid;
}

QString OAICloseApproachData::getCloseApproachDateFull() const {
    return m_close_approach_date_full;
}
void OAICloseApproachData::setCloseApproachDateFull(const QString &close_approach_date_full) {
    m_close_approach_date_full = close_approach_date_full;
    m_close_approach_date_full_isSet = true;
}

bool OAICloseApproachData::is_close_approach_date_full_Set() const{
    return m_close_approach_date_full_isSet;
}

bool OAICloseApproachData::is_close_approach_date_full_Valid() const{
    return m_close_approach_date_full_isValid;
}

qint64 OAICloseApproachData::getEpochDateCloseApproach() const {
    return m_epoch_date_close_approach;
}
void OAICloseApproachData::setEpochDateCloseApproach(const qint64 &epoch_date_close_approach) {
    m_epoch_date_close_approach = epoch_date_close_approach;
    m_epoch_date_close_approach_isSet = true;
}

bool OAICloseApproachData::is_epoch_date_close_approach_Set() const{
    return m_epoch_date_close_approach_isSet;
}

bool OAICloseApproachData::is_epoch_date_close_approach_Valid() const{
    return m_epoch_date_close_approach_isValid;
}

OAIMissDistance OAICloseApproachData::getMissDistance() const {
    return m_miss_distance;
}
void OAICloseApproachData::setMissDistance(const OAIMissDistance &miss_distance) {
    m_miss_distance = miss_distance;
    m_miss_distance_isSet = true;
}

bool OAICloseApproachData::is_miss_distance_Set() const{
    return m_miss_distance_isSet;
}

bool OAICloseApproachData::is_miss_distance_Valid() const{
    return m_miss_distance_isValid;
}

QString OAICloseApproachData::getOrbitingBody() const {
    return m_orbiting_body;
}
void OAICloseApproachData::setOrbitingBody(const QString &orbiting_body) {
    m_orbiting_body = orbiting_body;
    m_orbiting_body_isSet = true;
}

bool OAICloseApproachData::is_orbiting_body_Set() const{
    return m_orbiting_body_isSet;
}

bool OAICloseApproachData::is_orbiting_body_Valid() const{
    return m_orbiting_body_isValid;
}

OAIRelVelocity OAICloseApproachData::getRelativeVelocity() const {
    return m_relative_velocity;
}
void OAICloseApproachData::setRelativeVelocity(const OAIRelVelocity &relative_velocity) {
    m_relative_velocity = relative_velocity;
    m_relative_velocity_isSet = true;
}

bool OAICloseApproachData::is_relative_velocity_Set() const{
    return m_relative_velocity_isSet;
}

bool OAICloseApproachData::is_relative_velocity_Valid() const{
    return m_relative_velocity_isValid;
}

bool OAICloseApproachData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_approach_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_approach_date_full_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epoch_date_close_approach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_miss_distance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orbiting_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_velocity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloseApproachData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
