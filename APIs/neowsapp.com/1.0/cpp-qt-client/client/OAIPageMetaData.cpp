/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageMetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageMetaData::OAIPageMetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageMetaData::OAIPageMetaData() {
    this->initializeModel();
}

OAIPageMetaData::~OAIPageMetaData() {}

void OAIPageMetaData::initializeModel() {

    m_number_isSet = false;
    m_number_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIPageMetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageMetaData::fromJsonObject(QJsonObject json) {

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("total_elements")]);
    m_total_elements_isSet = !json[QString("total_elements")].isNull() && m_total_elements_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("total_pages")]);
    m_total_pages_isSet = !json[QString("total_pages")].isNull() && m_total_pages_isValid;
}

QString OAIPageMetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageMetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("total_elements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("total_pages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

qint64 OAIPageMetaData::getNumber() const {
    return m_number;
}
void OAIPageMetaData::setNumber(const qint64 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPageMetaData::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPageMetaData::is_number_Valid() const{
    return m_number_isValid;
}

qint64 OAIPageMetaData::getSize() const {
    return m_size;
}
void OAIPageMetaData::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPageMetaData::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPageMetaData::is_size_Valid() const{
    return m_size_isValid;
}

qint64 OAIPageMetaData::getTotalElements() const {
    return m_total_elements;
}
void OAIPageMetaData::setTotalElements(const qint64 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIPageMetaData::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIPageMetaData::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

qint64 OAIPageMetaData::getTotalPages() const {
    return m_total_pages;
}
void OAIPageMetaData::setTotalPages(const qint64 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIPageMetaData::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIPageMetaData::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIPageMetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageMetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
