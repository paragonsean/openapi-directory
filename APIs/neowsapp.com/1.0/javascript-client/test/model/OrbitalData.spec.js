/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NeoWsNearEarthObjectWebService);
  }
}(this, function(expect, NeoWsNearEarthObjectWebService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NeoWsNearEarthObjectWebService.OrbitalData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrbitalData', function() {
    it('should create an instance of OrbitalData', function() {
      // uncomment below and update the code to test OrbitalData
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be.a(NeoWsNearEarthObjectWebService.OrbitalData);
    });

    it('should have the property aphelionDistance (base name: "aphelion_distance")', function() {
      // uncomment below and update the code to test the property aphelionDistance
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property ascendingNodeLongitude (base name: "ascending_node_longitude")', function() {
      // uncomment below and update the code to test the property ascendingNodeLongitude
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property dataArcInDays (base name: "data_arc_in_days")', function() {
      // uncomment below and update the code to test the property dataArcInDays
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property eccentricity (base name: "eccentricity")', function() {
      // uncomment below and update the code to test the property eccentricity
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property epochOsculation (base name: "epoch_osculation")', function() {
      // uncomment below and update the code to test the property epochOsculation
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property equinox (base name: "equinox")', function() {
      // uncomment below and update the code to test the property equinox
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property firstObservationDate (base name: "first_observation_date")', function() {
      // uncomment below and update the code to test the property firstObservationDate
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property inclination (base name: "inclination")', function() {
      // uncomment below and update the code to test the property inclination
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property jupiterTisserandInvariant (base name: "jupiter_tisserand_invariant")', function() {
      // uncomment below and update the code to test the property jupiterTisserandInvariant
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property lastObservationDate (base name: "last_observation_date")', function() {
      // uncomment below and update the code to test the property lastObservationDate
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property meanAnomaly (base name: "mean_anomaly")', function() {
      // uncomment below and update the code to test the property meanAnomaly
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property meanMotion (base name: "mean_motion")', function() {
      // uncomment below and update the code to test the property meanMotion
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property minimumOrbitIntersection (base name: "minimum_orbit_intersection")', function() {
      // uncomment below and update the code to test the property minimumOrbitIntersection
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property observationsUsed (base name: "observations_used")', function() {
      // uncomment below and update the code to test the property observationsUsed
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property orbitClass (base name: "orbit_class")', function() {
      // uncomment below and update the code to test the property orbitClass
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property orbitDeterminationDate (base name: "orbit_determination_date")', function() {
      // uncomment below and update the code to test the property orbitDeterminationDate
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property orbitId (base name: "orbit_id")', function() {
      // uncomment below and update the code to test the property orbitId
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property orbitUncertainty (base name: "orbit_uncertainty")', function() {
      // uncomment below and update the code to test the property orbitUncertainty
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property orbitalPeriod (base name: "orbital_period")', function() {
      // uncomment below and update the code to test the property orbitalPeriod
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property perihelionArgument (base name: "perihelion_argument")', function() {
      // uncomment below and update the code to test the property perihelionArgument
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property perihelionDistance (base name: "perihelion_distance")', function() {
      // uncomment below and update the code to test the property perihelionDistance
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property perihelionTime (base name: "perihelion_time")', function() {
      // uncomment below and update the code to test the property perihelionTime
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

    it('should have the property semiMajorAxis (base name: "semi_major_axis")', function() {
      // uncomment below and update the code to test the property semiMajorAxis
      //var instance = new NeoWsNearEarthObjectWebService.OrbitalData();
      //expect(instance).to.be();
    });

  });

}));
