/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrbitClass from './OrbitClass';

/**
 * The OrbitalData model module.
 * @module model/OrbitalData
 * @version 1.0
 */
class OrbitalData {
    /**
     * Constructs a new <code>OrbitalData</code>.
     * @alias module:model/OrbitalData
     */
    constructor() { 
        
        OrbitalData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrbitalData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrbitalData} obj Optional instance to populate.
     * @return {module:model/OrbitalData} The populated <code>OrbitalData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrbitalData();

            if (data.hasOwnProperty('aphelion_distance')) {
                obj['aphelion_distance'] = ApiClient.convertToType(data['aphelion_distance'], 'String');
            }
            if (data.hasOwnProperty('ascending_node_longitude')) {
                obj['ascending_node_longitude'] = ApiClient.convertToType(data['ascending_node_longitude'], 'String');
            }
            if (data.hasOwnProperty('data_arc_in_days')) {
                obj['data_arc_in_days'] = ApiClient.convertToType(data['data_arc_in_days'], 'Number');
            }
            if (data.hasOwnProperty('eccentricity')) {
                obj['eccentricity'] = ApiClient.convertToType(data['eccentricity'], 'String');
            }
            if (data.hasOwnProperty('epoch_osculation')) {
                obj['epoch_osculation'] = ApiClient.convertToType(data['epoch_osculation'], 'String');
            }
            if (data.hasOwnProperty('equinox')) {
                obj['equinox'] = ApiClient.convertToType(data['equinox'], 'String');
            }
            if (data.hasOwnProperty('first_observation_date')) {
                obj['first_observation_date'] = ApiClient.convertToType(data['first_observation_date'], 'String');
            }
            if (data.hasOwnProperty('inclination')) {
                obj['inclination'] = ApiClient.convertToType(data['inclination'], 'String');
            }
            if (data.hasOwnProperty('jupiter_tisserand_invariant')) {
                obj['jupiter_tisserand_invariant'] = ApiClient.convertToType(data['jupiter_tisserand_invariant'], 'String');
            }
            if (data.hasOwnProperty('last_observation_date')) {
                obj['last_observation_date'] = ApiClient.convertToType(data['last_observation_date'], 'String');
            }
            if (data.hasOwnProperty('mean_anomaly')) {
                obj['mean_anomaly'] = ApiClient.convertToType(data['mean_anomaly'], 'String');
            }
            if (data.hasOwnProperty('mean_motion')) {
                obj['mean_motion'] = ApiClient.convertToType(data['mean_motion'], 'String');
            }
            if (data.hasOwnProperty('minimum_orbit_intersection')) {
                obj['minimum_orbit_intersection'] = ApiClient.convertToType(data['minimum_orbit_intersection'], 'String');
            }
            if (data.hasOwnProperty('observations_used')) {
                obj['observations_used'] = ApiClient.convertToType(data['observations_used'], 'Number');
            }
            if (data.hasOwnProperty('orbit_class')) {
                obj['orbit_class'] = OrbitClass.constructFromObject(data['orbit_class']);
            }
            if (data.hasOwnProperty('orbit_determination_date')) {
                obj['orbit_determination_date'] = ApiClient.convertToType(data['orbit_determination_date'], 'String');
            }
            if (data.hasOwnProperty('orbit_id')) {
                obj['orbit_id'] = ApiClient.convertToType(data['orbit_id'], 'String');
            }
            if (data.hasOwnProperty('orbit_uncertainty')) {
                obj['orbit_uncertainty'] = ApiClient.convertToType(data['orbit_uncertainty'], 'String');
            }
            if (data.hasOwnProperty('orbital_period')) {
                obj['orbital_period'] = ApiClient.convertToType(data['orbital_period'], 'String');
            }
            if (data.hasOwnProperty('perihelion_argument')) {
                obj['perihelion_argument'] = ApiClient.convertToType(data['perihelion_argument'], 'String');
            }
            if (data.hasOwnProperty('perihelion_distance')) {
                obj['perihelion_distance'] = ApiClient.convertToType(data['perihelion_distance'], 'String');
            }
            if (data.hasOwnProperty('perihelion_time')) {
                obj['perihelion_time'] = ApiClient.convertToType(data['perihelion_time'], 'String');
            }
            if (data.hasOwnProperty('semi_major_axis')) {
                obj['semi_major_axis'] = ApiClient.convertToType(data['semi_major_axis'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrbitalData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrbitalData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aphelion_distance'] && !(typeof data['aphelion_distance'] === 'string' || data['aphelion_distance'] instanceof String)) {
            throw new Error("Expected the field `aphelion_distance` to be a primitive type in the JSON string but got " + data['aphelion_distance']);
        }
        // ensure the json data is a string
        if (data['ascending_node_longitude'] && !(typeof data['ascending_node_longitude'] === 'string' || data['ascending_node_longitude'] instanceof String)) {
            throw new Error("Expected the field `ascending_node_longitude` to be a primitive type in the JSON string but got " + data['ascending_node_longitude']);
        }
        // ensure the json data is a string
        if (data['eccentricity'] && !(typeof data['eccentricity'] === 'string' || data['eccentricity'] instanceof String)) {
            throw new Error("Expected the field `eccentricity` to be a primitive type in the JSON string but got " + data['eccentricity']);
        }
        // ensure the json data is a string
        if (data['epoch_osculation'] && !(typeof data['epoch_osculation'] === 'string' || data['epoch_osculation'] instanceof String)) {
            throw new Error("Expected the field `epoch_osculation` to be a primitive type in the JSON string but got " + data['epoch_osculation']);
        }
        // ensure the json data is a string
        if (data['equinox'] && !(typeof data['equinox'] === 'string' || data['equinox'] instanceof String)) {
            throw new Error("Expected the field `equinox` to be a primitive type in the JSON string but got " + data['equinox']);
        }
        // ensure the json data is a string
        if (data['first_observation_date'] && !(typeof data['first_observation_date'] === 'string' || data['first_observation_date'] instanceof String)) {
            throw new Error("Expected the field `first_observation_date` to be a primitive type in the JSON string but got " + data['first_observation_date']);
        }
        // ensure the json data is a string
        if (data['inclination'] && !(typeof data['inclination'] === 'string' || data['inclination'] instanceof String)) {
            throw new Error("Expected the field `inclination` to be a primitive type in the JSON string but got " + data['inclination']);
        }
        // ensure the json data is a string
        if (data['jupiter_tisserand_invariant'] && !(typeof data['jupiter_tisserand_invariant'] === 'string' || data['jupiter_tisserand_invariant'] instanceof String)) {
            throw new Error("Expected the field `jupiter_tisserand_invariant` to be a primitive type in the JSON string but got " + data['jupiter_tisserand_invariant']);
        }
        // ensure the json data is a string
        if (data['last_observation_date'] && !(typeof data['last_observation_date'] === 'string' || data['last_observation_date'] instanceof String)) {
            throw new Error("Expected the field `last_observation_date` to be a primitive type in the JSON string but got " + data['last_observation_date']);
        }
        // ensure the json data is a string
        if (data['mean_anomaly'] && !(typeof data['mean_anomaly'] === 'string' || data['mean_anomaly'] instanceof String)) {
            throw new Error("Expected the field `mean_anomaly` to be a primitive type in the JSON string but got " + data['mean_anomaly']);
        }
        // ensure the json data is a string
        if (data['mean_motion'] && !(typeof data['mean_motion'] === 'string' || data['mean_motion'] instanceof String)) {
            throw new Error("Expected the field `mean_motion` to be a primitive type in the JSON string but got " + data['mean_motion']);
        }
        // ensure the json data is a string
        if (data['minimum_orbit_intersection'] && !(typeof data['minimum_orbit_intersection'] === 'string' || data['minimum_orbit_intersection'] instanceof String)) {
            throw new Error("Expected the field `minimum_orbit_intersection` to be a primitive type in the JSON string but got " + data['minimum_orbit_intersection']);
        }
        // validate the optional field `orbit_class`
        if (data['orbit_class']) { // data not null
          OrbitClass.validateJSON(data['orbit_class']);
        }
        // ensure the json data is a string
        if (data['orbit_determination_date'] && !(typeof data['orbit_determination_date'] === 'string' || data['orbit_determination_date'] instanceof String)) {
            throw new Error("Expected the field `orbit_determination_date` to be a primitive type in the JSON string but got " + data['orbit_determination_date']);
        }
        // ensure the json data is a string
        if (data['orbit_id'] && !(typeof data['orbit_id'] === 'string' || data['orbit_id'] instanceof String)) {
            throw new Error("Expected the field `orbit_id` to be a primitive type in the JSON string but got " + data['orbit_id']);
        }
        // ensure the json data is a string
        if (data['orbit_uncertainty'] && !(typeof data['orbit_uncertainty'] === 'string' || data['orbit_uncertainty'] instanceof String)) {
            throw new Error("Expected the field `orbit_uncertainty` to be a primitive type in the JSON string but got " + data['orbit_uncertainty']);
        }
        // ensure the json data is a string
        if (data['orbital_period'] && !(typeof data['orbital_period'] === 'string' || data['orbital_period'] instanceof String)) {
            throw new Error("Expected the field `orbital_period` to be a primitive type in the JSON string but got " + data['orbital_period']);
        }
        // ensure the json data is a string
        if (data['perihelion_argument'] && !(typeof data['perihelion_argument'] === 'string' || data['perihelion_argument'] instanceof String)) {
            throw new Error("Expected the field `perihelion_argument` to be a primitive type in the JSON string but got " + data['perihelion_argument']);
        }
        // ensure the json data is a string
        if (data['perihelion_distance'] && !(typeof data['perihelion_distance'] === 'string' || data['perihelion_distance'] instanceof String)) {
            throw new Error("Expected the field `perihelion_distance` to be a primitive type in the JSON string but got " + data['perihelion_distance']);
        }
        // ensure the json data is a string
        if (data['perihelion_time'] && !(typeof data['perihelion_time'] === 'string' || data['perihelion_time'] instanceof String)) {
            throw new Error("Expected the field `perihelion_time` to be a primitive type in the JSON string but got " + data['perihelion_time']);
        }
        // ensure the json data is a string
        if (data['semi_major_axis'] && !(typeof data['semi_major_axis'] === 'string' || data['semi_major_axis'] instanceof String)) {
            throw new Error("Expected the field `semi_major_axis` to be a primitive type in the JSON string but got " + data['semi_major_axis']);
        }

        return true;
    }


}



/**
 * @member {String} aphelion_distance
 */
OrbitalData.prototype['aphelion_distance'] = undefined;

/**
 * @member {String} ascending_node_longitude
 */
OrbitalData.prototype['ascending_node_longitude'] = undefined;

/**
 * @member {Number} data_arc_in_days
 */
OrbitalData.prototype['data_arc_in_days'] = undefined;

/**
 * @member {String} eccentricity
 */
OrbitalData.prototype['eccentricity'] = undefined;

/**
 * @member {String} epoch_osculation
 */
OrbitalData.prototype['epoch_osculation'] = undefined;

/**
 * @member {String} equinox
 */
OrbitalData.prototype['equinox'] = undefined;

/**
 * @member {String} first_observation_date
 */
OrbitalData.prototype['first_observation_date'] = undefined;

/**
 * @member {String} inclination
 */
OrbitalData.prototype['inclination'] = undefined;

/**
 * @member {String} jupiter_tisserand_invariant
 */
OrbitalData.prototype['jupiter_tisserand_invariant'] = undefined;

/**
 * @member {String} last_observation_date
 */
OrbitalData.prototype['last_observation_date'] = undefined;

/**
 * @member {String} mean_anomaly
 */
OrbitalData.prototype['mean_anomaly'] = undefined;

/**
 * @member {String} mean_motion
 */
OrbitalData.prototype['mean_motion'] = undefined;

/**
 * @member {String} minimum_orbit_intersection
 */
OrbitalData.prototype['minimum_orbit_intersection'] = undefined;

/**
 * @member {Number} observations_used
 */
OrbitalData.prototype['observations_used'] = undefined;

/**
 * @member {module:model/OrbitClass} orbit_class
 */
OrbitalData.prototype['orbit_class'] = undefined;

/**
 * @member {String} orbit_determination_date
 */
OrbitalData.prototype['orbit_determination_date'] = undefined;

/**
 * @member {String} orbit_id
 */
OrbitalData.prototype['orbit_id'] = undefined;

/**
 * @member {String} orbit_uncertainty
 */
OrbitalData.prototype['orbit_uncertainty'] = undefined;

/**
 * @member {String} orbital_period
 */
OrbitalData.prototype['orbital_period'] = undefined;

/**
 * @member {String} perihelion_argument
 */
OrbitalData.prototype['perihelion_argument'] = undefined;

/**
 * @member {String} perihelion_distance
 */
OrbitalData.prototype['perihelion_distance'] = undefined;

/**
 * @member {String} perihelion_time
 */
OrbitalData.prototype['perihelion_time'] = undefined;

/**
 * @member {String} semi_major_axis
 */
OrbitalData.prototype['semi_major_axis'] = undefined;






export default OrbitalData;

