/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloseApproachData from './CloseApproachData';
import EstimatedDiameterContainer from './EstimatedDiameterContainer';
import OrbitalData from './OrbitalData';

/**
 * The NearEarthObject model module.
 * @module model/NearEarthObject
 * @version 1.0
 */
class NearEarthObject {
    /**
     * Constructs a new <code>NearEarthObject</code>.
     * @alias module:model/NearEarthObject
     */
    constructor() { 
        
        NearEarthObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NearEarthObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NearEarthObject} obj Optional instance to populate.
     * @return {module:model/NearEarthObject} The populated <code>NearEarthObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NearEarthObject();

            if (data.hasOwnProperty('absolute_magnitude_h')) {
                obj['absolute_magnitude_h'] = ApiClient.convertToType(data['absolute_magnitude_h'], 'Number');
            }
            if (data.hasOwnProperty('close_approach_data')) {
                obj['close_approach_data'] = ApiClient.convertToType(data['close_approach_data'], [CloseApproachData]);
            }
            if (data.hasOwnProperty('designation')) {
                obj['designation'] = ApiClient.convertToType(data['designation'], 'String');
            }
            if (data.hasOwnProperty('estimated_diameter')) {
                obj['estimated_diameter'] = EstimatedDiameterContainer.constructFromObject(data['estimated_diameter']);
            }
            if (data.hasOwnProperty('is_potentially_hazardous_asteroid')) {
                obj['is_potentially_hazardous_asteroid'] = ApiClient.convertToType(data['is_potentially_hazardous_asteroid'], 'Boolean');
            }
            if (data.hasOwnProperty('is_sentry_object')) {
                obj['is_sentry_object'] = ApiClient.convertToType(data['is_sentry_object'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('name_limited')) {
                obj['name_limited'] = ApiClient.convertToType(data['name_limited'], 'String');
            }
            if (data.hasOwnProperty('nasa_jpl_url')) {
                obj['nasa_jpl_url'] = ApiClient.convertToType(data['nasa_jpl_url'], 'String');
            }
            if (data.hasOwnProperty('neo_reference_id')) {
                obj['neo_reference_id'] = ApiClient.convertToType(data['neo_reference_id'], 'String');
            }
            if (data.hasOwnProperty('orbital_data')) {
                obj['orbital_data'] = OrbitalData.constructFromObject(data['orbital_data']);
            }
            if (data.hasOwnProperty('sentry_data')) {
                obj['sentry_data'] = ApiClient.convertToType(data['sentry_data'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NearEarthObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NearEarthObject</code>.
     */
    static validateJSON(data) {
        if (data['close_approach_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['close_approach_data'])) {
                throw new Error("Expected the field `close_approach_data` to be an array in the JSON data but got " + data['close_approach_data']);
            }
            // validate the optional field `close_approach_data` (array)
            for (const item of data['close_approach_data']) {
                CloseApproachData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['designation'] && !(typeof data['designation'] === 'string' || data['designation'] instanceof String)) {
            throw new Error("Expected the field `designation` to be a primitive type in the JSON string but got " + data['designation']);
        }
        // validate the optional field `estimated_diameter`
        if (data['estimated_diameter']) { // data not null
          EstimatedDiameterContainer.validateJSON(data['estimated_diameter']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['name_limited'] && !(typeof data['name_limited'] === 'string' || data['name_limited'] instanceof String)) {
            throw new Error("Expected the field `name_limited` to be a primitive type in the JSON string but got " + data['name_limited']);
        }
        // ensure the json data is a string
        if (data['nasa_jpl_url'] && !(typeof data['nasa_jpl_url'] === 'string' || data['nasa_jpl_url'] instanceof String)) {
            throw new Error("Expected the field `nasa_jpl_url` to be a primitive type in the JSON string but got " + data['nasa_jpl_url']);
        }
        // ensure the json data is a string
        if (data['neo_reference_id'] && !(typeof data['neo_reference_id'] === 'string' || data['neo_reference_id'] instanceof String)) {
            throw new Error("Expected the field `neo_reference_id` to be a primitive type in the JSON string but got " + data['neo_reference_id']);
        }
        // validate the optional field `orbital_data`
        if (data['orbital_data']) { // data not null
          OrbitalData.validateJSON(data['orbital_data']);
        }
        // ensure the json data is a string
        if (data['sentry_data'] && !(typeof data['sentry_data'] === 'string' || data['sentry_data'] instanceof String)) {
            throw new Error("Expected the field `sentry_data` to be a primitive type in the JSON string but got " + data['sentry_data']);
        }

        return true;
    }


}



/**
 * Is a measure of an asteroids brightness
 * @member {Number} absolute_magnitude_h
 */
NearEarthObject.prototype['absolute_magnitude_h'] = undefined;

/**
 * Close approach information of the Asteroid
 * @member {Array.<module:model/CloseApproachData>} close_approach_data
 */
NearEarthObject.prototype['close_approach_data'] = undefined;

/**
 * @member {String} designation
 */
NearEarthObject.prototype['designation'] = undefined;

/**
 * @member {module:model/EstimatedDiameterContainer} estimated_diameter
 */
NearEarthObject.prototype['estimated_diameter'] = undefined;

/**
 * @member {Boolean} is_potentially_hazardous_asteroid
 */
NearEarthObject.prototype['is_potentially_hazardous_asteroid'] = undefined;

/**
 * @member {Boolean} is_sentry_object
 */
NearEarthObject.prototype['is_sentry_object'] = undefined;

/**
 * @member {String} name
 */
NearEarthObject.prototype['name'] = undefined;

/**
 * @member {String} name_limited
 */
NearEarthObject.prototype['name_limited'] = undefined;

/**
 * A Link to the NASA JPL Small-Body Database website
 * @member {String} nasa_jpl_url
 */
NearEarthObject.prototype['nasa_jpl_url'] = undefined;

/**
 * The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data
 * @member {String} neo_reference_id
 */
NearEarthObject.prototype['neo_reference_id'] = undefined;

/**
 * @member {module:model/OrbitalData} orbital_data
 */
NearEarthObject.prototype['orbital_data'] = undefined;

/**
 * @member {String} sentry_data
 */
NearEarthObject.prototype['sentry_data'] = undefined;






export default NearEarthObject;

