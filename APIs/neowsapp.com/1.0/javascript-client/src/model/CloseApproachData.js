/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MissDistance from './MissDistance';
import RelVelocity from './RelVelocity';

/**
 * The CloseApproachData model module.
 * @module model/CloseApproachData
 * @version 1.0
 */
class CloseApproachData {
    /**
     * Constructs a new <code>CloseApproachData</code>.
     * @alias module:model/CloseApproachData
     */
    constructor() { 
        
        CloseApproachData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloseApproachData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloseApproachData} obj Optional instance to populate.
     * @return {module:model/CloseApproachData} The populated <code>CloseApproachData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloseApproachData();

            if (data.hasOwnProperty('close_approach_date')) {
                obj['close_approach_date'] = ApiClient.convertToType(data['close_approach_date'], 'String');
            }
            if (data.hasOwnProperty('close_approach_date_full')) {
                obj['close_approach_date_full'] = ApiClient.convertToType(data['close_approach_date_full'], 'String');
            }
            if (data.hasOwnProperty('epoch_date_close_approach')) {
                obj['epoch_date_close_approach'] = ApiClient.convertToType(data['epoch_date_close_approach'], 'Number');
            }
            if (data.hasOwnProperty('miss_distance')) {
                obj['miss_distance'] = MissDistance.constructFromObject(data['miss_distance']);
            }
            if (data.hasOwnProperty('orbiting_body')) {
                obj['orbiting_body'] = ApiClient.convertToType(data['orbiting_body'], 'String');
            }
            if (data.hasOwnProperty('relative_velocity')) {
                obj['relative_velocity'] = RelVelocity.constructFromObject(data['relative_velocity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloseApproachData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloseApproachData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['close_approach_date'] && !(typeof data['close_approach_date'] === 'string' || data['close_approach_date'] instanceof String)) {
            throw new Error("Expected the field `close_approach_date` to be a primitive type in the JSON string but got " + data['close_approach_date']);
        }
        // ensure the json data is a string
        if (data['close_approach_date_full'] && !(typeof data['close_approach_date_full'] === 'string' || data['close_approach_date_full'] instanceof String)) {
            throw new Error("Expected the field `close_approach_date_full` to be a primitive type in the JSON string but got " + data['close_approach_date_full']);
        }
        // validate the optional field `miss_distance`
        if (data['miss_distance']) { // data not null
          MissDistance.validateJSON(data['miss_distance']);
        }
        // ensure the json data is a string
        if (data['orbiting_body'] && !(typeof data['orbiting_body'] === 'string' || data['orbiting_body'] instanceof String)) {
            throw new Error("Expected the field `orbiting_body` to be a primitive type in the JSON string but got " + data['orbiting_body']);
        }
        // validate the optional field `relative_velocity`
        if (data['relative_velocity']) { // data not null
          RelVelocity.validateJSON(data['relative_velocity']);
        }

        return true;
    }


}



/**
 * @member {String} close_approach_date
 */
CloseApproachData.prototype['close_approach_date'] = undefined;

/**
 * @member {String} close_approach_date_full
 */
CloseApproachData.prototype['close_approach_date_full'] = undefined;

/**
 * @member {Number} epoch_date_close_approach
 */
CloseApproachData.prototype['epoch_date_close_approach'] = undefined;

/**
 * @member {module:model/MissDistance} miss_distance
 */
CloseApproachData.prototype['miss_distance'] = undefined;

/**
 * @member {String} orbiting_body
 */
CloseApproachData.prototype['orbiting_body'] = undefined;

/**
 * @member {module:model/RelVelocity} relative_velocity
 */
CloseApproachData.prototype['relative_velocity'] = undefined;






export default CloseApproachData;

