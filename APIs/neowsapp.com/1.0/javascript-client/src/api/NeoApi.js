/**
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NearEarthObject from '../model/NearEarthObject';

/**
* Neo service.
* @module api/NeoApi
* @version 1.0
*/
export default class NeoApi {

    /**
    * Constructs a new NeoApi. 
    * @alias module:api/NeoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the browseNearEarthObjects operation.
     * @callback module:api/NeoApi~browseNearEarthObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NearEarthObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Browse the Near Earth Objects service
     * Retieve a paginated list of Near Earth Objects
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] page
     * @param {Number} [size = 20)] size
     * @param {module:api/NeoApi~browseNearEarthObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NearEarthObject}
     */
    browseNearEarthObjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NearEarthObject;
      return this.apiClient.callApi(
        '/rest/v1/neo/browse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveNearEarthObjectById operation.
     * @callback module:api/NeoApi~retrieveNearEarthObjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NearEarthObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find Near Earth Objects by id
     * Retrieve a Near Earth Objects with a given id
     * @param {String} asteroidId ID of Near Earth Object - (ex: 3729835)
     * @param {module:api/NeoApi~retrieveNearEarthObjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NearEarthObject}
     */
    retrieveNearEarthObjectById(asteroidId, callback) {
      let postBody = null;
      // verify the required parameter 'asteroidId' is set
      if (asteroidId === undefined || asteroidId === null) {
        throw new Error("Missing the required parameter 'asteroidId' when calling retrieveNearEarthObjectById");
      }

      let pathParams = {
        'asteroid_id': asteroidId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NearEarthObject;
      return this.apiClient.callApi(
        '/rest/v1/neo/{asteroid_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
