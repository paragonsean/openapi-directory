# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url import URL
from openapi_server import util


class Statistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_approach_count: int=None, last_updated: str=None, nasa_jpl_url: URL=None, near_earth_object_count: int=None, source: str=None):
        """Statistics - a model defined in OpenAPI

        :param close_approach_count: The close_approach_count of this Statistics.
        :param last_updated: The last_updated of this Statistics.
        :param nasa_jpl_url: The nasa_jpl_url of this Statistics.
        :param near_earth_object_count: The near_earth_object_count of this Statistics.
        :param source: The source of this Statistics.
        """
        self.openapi_types = {
            'close_approach_count': int,
            'last_updated': str,
            'nasa_jpl_url': URL,
            'near_earth_object_count': int,
            'source': str
        }

        self.attribute_map = {
            'close_approach_count': 'close_approach_count',
            'last_updated': 'last_updated',
            'nasa_jpl_url': 'nasa_jpl_url',
            'near_earth_object_count': 'near_earth_object_count',
            'source': 'source'
        }

        self._close_approach_count = close_approach_count
        self._last_updated = last_updated
        self._nasa_jpl_url = nasa_jpl_url
        self._near_earth_object_count = near_earth_object_count
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statistics of this Statistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_approach_count(self):
        """Gets the close_approach_count of this Statistics.

        Number of Close Approach listings across all NEOs listed in NeoWs

        :return: The close_approach_count of this Statistics.
        :rtype: int
        """
        return self._close_approach_count

    @close_approach_count.setter
    def close_approach_count(self, close_approach_count):
        """Sets the close_approach_count of this Statistics.

        Number of Close Approach listings across all NEOs listed in NeoWs

        :param close_approach_count: The close_approach_count of this Statistics.
        :type close_approach_count: int
        """

        self._close_approach_count = close_approach_count

    @property
    def last_updated(self):
        """Gets the last_updated of this Statistics.

        TimeStamp the last time the DB was updated

        :return: The last_updated of this Statistics.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Statistics.

        TimeStamp the last time the DB was updated

        :param last_updated: The last_updated of this Statistics.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def nasa_jpl_url(self):
        """Gets the nasa_jpl_url of this Statistics.


        :return: The nasa_jpl_url of this Statistics.
        :rtype: URL
        """
        return self._nasa_jpl_url

    @nasa_jpl_url.setter
    def nasa_jpl_url(self, nasa_jpl_url):
        """Sets the nasa_jpl_url of this Statistics.


        :param nasa_jpl_url: The nasa_jpl_url of this Statistics.
        :type nasa_jpl_url: URL
        """

        self._nasa_jpl_url = nasa_jpl_url

    @property
    def near_earth_object_count(self):
        """Gets the near_earth_object_count of this Statistics.

        Number of NearEarthObjects listed in NeoWs

        :return: The near_earth_object_count of this Statistics.
        :rtype: int
        """
        return self._near_earth_object_count

    @near_earth_object_count.setter
    def near_earth_object_count(self, near_earth_object_count):
        """Sets the near_earth_object_count of this Statistics.

        Number of NearEarthObjects listed in NeoWs

        :param near_earth_object_count: The near_earth_object_count of this Statistics.
        :type near_earth_object_count: int
        """

        self._near_earth_object_count = near_earth_object_count

    @property
    def source(self):
        """Gets the source of this Statistics.


        :return: The source of this Statistics.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Statistics.


        :param source: The source of this Statistics.
        :type source: str
        """

        self._source = source
