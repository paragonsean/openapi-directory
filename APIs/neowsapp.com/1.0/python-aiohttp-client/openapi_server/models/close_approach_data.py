# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.miss_distance import MissDistance
from openapi_server.models.rel_velocity import RelVelocity
from openapi_server import util


class CloseApproachData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, close_approach_date: str=None, close_approach_date_full: str=None, epoch_date_close_approach: int=None, miss_distance: MissDistance=None, orbiting_body: str=None, relative_velocity: RelVelocity=None):
        """CloseApproachData - a model defined in OpenAPI

        :param close_approach_date: The close_approach_date of this CloseApproachData.
        :param close_approach_date_full: The close_approach_date_full of this CloseApproachData.
        :param epoch_date_close_approach: The epoch_date_close_approach of this CloseApproachData.
        :param miss_distance: The miss_distance of this CloseApproachData.
        :param orbiting_body: The orbiting_body of this CloseApproachData.
        :param relative_velocity: The relative_velocity of this CloseApproachData.
        """
        self.openapi_types = {
            'close_approach_date': str,
            'close_approach_date_full': str,
            'epoch_date_close_approach': int,
            'miss_distance': MissDistance,
            'orbiting_body': str,
            'relative_velocity': RelVelocity
        }

        self.attribute_map = {
            'close_approach_date': 'close_approach_date',
            'close_approach_date_full': 'close_approach_date_full',
            'epoch_date_close_approach': 'epoch_date_close_approach',
            'miss_distance': 'miss_distance',
            'orbiting_body': 'orbiting_body',
            'relative_velocity': 'relative_velocity'
        }

        self._close_approach_date = close_approach_date
        self._close_approach_date_full = close_approach_date_full
        self._epoch_date_close_approach = epoch_date_close_approach
        self._miss_distance = miss_distance
        self._orbiting_body = orbiting_body
        self._relative_velocity = relative_velocity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloseApproachData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloseApproachData of this CloseApproachData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def close_approach_date(self):
        """Gets the close_approach_date of this CloseApproachData.


        :return: The close_approach_date of this CloseApproachData.
        :rtype: str
        """
        return self._close_approach_date

    @close_approach_date.setter
    def close_approach_date(self, close_approach_date):
        """Sets the close_approach_date of this CloseApproachData.


        :param close_approach_date: The close_approach_date of this CloseApproachData.
        :type close_approach_date: str
        """

        self._close_approach_date = close_approach_date

    @property
    def close_approach_date_full(self):
        """Gets the close_approach_date_full of this CloseApproachData.


        :return: The close_approach_date_full of this CloseApproachData.
        :rtype: str
        """
        return self._close_approach_date_full

    @close_approach_date_full.setter
    def close_approach_date_full(self, close_approach_date_full):
        """Sets the close_approach_date_full of this CloseApproachData.


        :param close_approach_date_full: The close_approach_date_full of this CloseApproachData.
        :type close_approach_date_full: str
        """

        self._close_approach_date_full = close_approach_date_full

    @property
    def epoch_date_close_approach(self):
        """Gets the epoch_date_close_approach of this CloseApproachData.


        :return: The epoch_date_close_approach of this CloseApproachData.
        :rtype: int
        """
        return self._epoch_date_close_approach

    @epoch_date_close_approach.setter
    def epoch_date_close_approach(self, epoch_date_close_approach):
        """Sets the epoch_date_close_approach of this CloseApproachData.


        :param epoch_date_close_approach: The epoch_date_close_approach of this CloseApproachData.
        :type epoch_date_close_approach: int
        """

        self._epoch_date_close_approach = epoch_date_close_approach

    @property
    def miss_distance(self):
        """Gets the miss_distance of this CloseApproachData.


        :return: The miss_distance of this CloseApproachData.
        :rtype: MissDistance
        """
        return self._miss_distance

    @miss_distance.setter
    def miss_distance(self, miss_distance):
        """Sets the miss_distance of this CloseApproachData.


        :param miss_distance: The miss_distance of this CloseApproachData.
        :type miss_distance: MissDistance
        """

        self._miss_distance = miss_distance

    @property
    def orbiting_body(self):
        """Gets the orbiting_body of this CloseApproachData.


        :return: The orbiting_body of this CloseApproachData.
        :rtype: str
        """
        return self._orbiting_body

    @orbiting_body.setter
    def orbiting_body(self, orbiting_body):
        """Sets the orbiting_body of this CloseApproachData.


        :param orbiting_body: The orbiting_body of this CloseApproachData.
        :type orbiting_body: str
        """

        self._orbiting_body = orbiting_body

    @property
    def relative_velocity(self):
        """Gets the relative_velocity of this CloseApproachData.


        :return: The relative_velocity of this CloseApproachData.
        :rtype: RelVelocity
        """
        return self._relative_velocity

    @relative_velocity.setter
    def relative_velocity(self, relative_velocity):
        """Sets the relative_velocity of this CloseApproachData.


        :param relative_velocity: The relative_velocity of this CloseApproachData.
        :type relative_velocity: RelVelocity
        """

        self._relative_velocity = relative_velocity
