# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrbitClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orbit_class_description: str=None, orbit_class_range: str=None, orbit_class_type: str=None):
        """OrbitClass - a model defined in OpenAPI

        :param orbit_class_description: The orbit_class_description of this OrbitClass.
        :param orbit_class_range: The orbit_class_range of this OrbitClass.
        :param orbit_class_type: The orbit_class_type of this OrbitClass.
        """
        self.openapi_types = {
            'orbit_class_description': str,
            'orbit_class_range': str,
            'orbit_class_type': str
        }

        self.attribute_map = {
            'orbit_class_description': 'orbit_class_description',
            'orbit_class_range': 'orbit_class_range',
            'orbit_class_type': 'orbit_class_type'
        }

        self._orbit_class_description = orbit_class_description
        self._orbit_class_range = orbit_class_range
        self._orbit_class_type = orbit_class_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrbitClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrbitClass of this OrbitClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orbit_class_description(self):
        """Gets the orbit_class_description of this OrbitClass.


        :return: The orbit_class_description of this OrbitClass.
        :rtype: str
        """
        return self._orbit_class_description

    @orbit_class_description.setter
    def orbit_class_description(self, orbit_class_description):
        """Sets the orbit_class_description of this OrbitClass.


        :param orbit_class_description: The orbit_class_description of this OrbitClass.
        :type orbit_class_description: str
        """

        self._orbit_class_description = orbit_class_description

    @property
    def orbit_class_range(self):
        """Gets the orbit_class_range of this OrbitClass.


        :return: The orbit_class_range of this OrbitClass.
        :rtype: str
        """
        return self._orbit_class_range

    @orbit_class_range.setter
    def orbit_class_range(self, orbit_class_range):
        """Sets the orbit_class_range of this OrbitClass.


        :param orbit_class_range: The orbit_class_range of this OrbitClass.
        :type orbit_class_range: str
        """

        self._orbit_class_range = orbit_class_range

    @property
    def orbit_class_type(self):
        """Gets the orbit_class_type of this OrbitClass.


        :return: The orbit_class_type of this OrbitClass.
        :rtype: str
        """
        return self._orbit_class_type

    @orbit_class_type.setter
    def orbit_class_type(self, orbit_class_type):
        """Sets the orbit_class_type of this OrbitClass.


        :param orbit_class_type: The orbit_class_type of this OrbitClass.
        :type orbit_class_type: str
        """
        allowed_values = ["IEO", "ATE", "APO", "AMO", "MCA", "IMB", "MBA", "OMB", "TJN", "CEN", "TNO", "PAA", "HYA", "HYP", "PAR", "COM", "JFC", "HTC", "ETC", "CTC", "JFc"]  # noqa: E501
        if orbit_class_type not in allowed_values:
            raise ValueError(
                "Invalid value for `orbit_class_type` ({0}), must be one of {1}"
                .format(orbit_class_type, allowed_values)
            )

        self._orbit_class_type = orbit_class_type
