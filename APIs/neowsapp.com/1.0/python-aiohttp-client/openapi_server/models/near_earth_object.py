# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.close_approach_data import CloseApproachData
from openapi_server.models.estimated_diameter_container import EstimatedDiameterContainer
from openapi_server.models.orbital_data import OrbitalData
from openapi_server import util


class NearEarthObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_magnitude_h: float=None, close_approach_data: List[CloseApproachData]=None, designation: str=None, estimated_diameter: EstimatedDiameterContainer=None, is_potentially_hazardous_asteroid: bool=None, is_sentry_object: bool=None, name: str=None, name_limited: str=None, nasa_jpl_url: str=None, neo_reference_id: str=None, orbital_data: OrbitalData=None, sentry_data: str=None):
        """NearEarthObject - a model defined in OpenAPI

        :param absolute_magnitude_h: The absolute_magnitude_h of this NearEarthObject.
        :param close_approach_data: The close_approach_data of this NearEarthObject.
        :param designation: The designation of this NearEarthObject.
        :param estimated_diameter: The estimated_diameter of this NearEarthObject.
        :param is_potentially_hazardous_asteroid: The is_potentially_hazardous_asteroid of this NearEarthObject.
        :param is_sentry_object: The is_sentry_object of this NearEarthObject.
        :param name: The name of this NearEarthObject.
        :param name_limited: The name_limited of this NearEarthObject.
        :param nasa_jpl_url: The nasa_jpl_url of this NearEarthObject.
        :param neo_reference_id: The neo_reference_id of this NearEarthObject.
        :param orbital_data: The orbital_data of this NearEarthObject.
        :param sentry_data: The sentry_data of this NearEarthObject.
        """
        self.openapi_types = {
            'absolute_magnitude_h': float,
            'close_approach_data': List[CloseApproachData],
            'designation': str,
            'estimated_diameter': EstimatedDiameterContainer,
            'is_potentially_hazardous_asteroid': bool,
            'is_sentry_object': bool,
            'name': str,
            'name_limited': str,
            'nasa_jpl_url': str,
            'neo_reference_id': str,
            'orbital_data': OrbitalData,
            'sentry_data': str
        }

        self.attribute_map = {
            'absolute_magnitude_h': 'absolute_magnitude_h',
            'close_approach_data': 'close_approach_data',
            'designation': 'designation',
            'estimated_diameter': 'estimated_diameter',
            'is_potentially_hazardous_asteroid': 'is_potentially_hazardous_asteroid',
            'is_sentry_object': 'is_sentry_object',
            'name': 'name',
            'name_limited': 'name_limited',
            'nasa_jpl_url': 'nasa_jpl_url',
            'neo_reference_id': 'neo_reference_id',
            'orbital_data': 'orbital_data',
            'sentry_data': 'sentry_data'
        }

        self._absolute_magnitude_h = absolute_magnitude_h
        self._close_approach_data = close_approach_data
        self._designation = designation
        self._estimated_diameter = estimated_diameter
        self._is_potentially_hazardous_asteroid = is_potentially_hazardous_asteroid
        self._is_sentry_object = is_sentry_object
        self._name = name
        self._name_limited = name_limited
        self._nasa_jpl_url = nasa_jpl_url
        self._neo_reference_id = neo_reference_id
        self._orbital_data = orbital_data
        self._sentry_data = sentry_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NearEarthObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NearEarthObject of this NearEarthObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_magnitude_h(self):
        """Gets the absolute_magnitude_h of this NearEarthObject.

        Is a measure of an asteroids brightness

        :return: The absolute_magnitude_h of this NearEarthObject.
        :rtype: float
        """
        return self._absolute_magnitude_h

    @absolute_magnitude_h.setter
    def absolute_magnitude_h(self, absolute_magnitude_h):
        """Sets the absolute_magnitude_h of this NearEarthObject.

        Is a measure of an asteroids brightness

        :param absolute_magnitude_h: The absolute_magnitude_h of this NearEarthObject.
        :type absolute_magnitude_h: float
        """

        self._absolute_magnitude_h = absolute_magnitude_h

    @property
    def close_approach_data(self):
        """Gets the close_approach_data of this NearEarthObject.

        Close approach information of the Asteroid

        :return: The close_approach_data of this NearEarthObject.
        :rtype: List[CloseApproachData]
        """
        return self._close_approach_data

    @close_approach_data.setter
    def close_approach_data(self, close_approach_data):
        """Sets the close_approach_data of this NearEarthObject.

        Close approach information of the Asteroid

        :param close_approach_data: The close_approach_data of this NearEarthObject.
        :type close_approach_data: List[CloseApproachData]
        """

        self._close_approach_data = close_approach_data

    @property
    def designation(self):
        """Gets the designation of this NearEarthObject.


        :return: The designation of this NearEarthObject.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this NearEarthObject.


        :param designation: The designation of this NearEarthObject.
        :type designation: str
        """

        self._designation = designation

    @property
    def estimated_diameter(self):
        """Gets the estimated_diameter of this NearEarthObject.


        :return: The estimated_diameter of this NearEarthObject.
        :rtype: EstimatedDiameterContainer
        """
        return self._estimated_diameter

    @estimated_diameter.setter
    def estimated_diameter(self, estimated_diameter):
        """Sets the estimated_diameter of this NearEarthObject.


        :param estimated_diameter: The estimated_diameter of this NearEarthObject.
        :type estimated_diameter: EstimatedDiameterContainer
        """

        self._estimated_diameter = estimated_diameter

    @property
    def is_potentially_hazardous_asteroid(self):
        """Gets the is_potentially_hazardous_asteroid of this NearEarthObject.


        :return: The is_potentially_hazardous_asteroid of this NearEarthObject.
        :rtype: bool
        """
        return self._is_potentially_hazardous_asteroid

    @is_potentially_hazardous_asteroid.setter
    def is_potentially_hazardous_asteroid(self, is_potentially_hazardous_asteroid):
        """Sets the is_potentially_hazardous_asteroid of this NearEarthObject.


        :param is_potentially_hazardous_asteroid: The is_potentially_hazardous_asteroid of this NearEarthObject.
        :type is_potentially_hazardous_asteroid: bool
        """

        self._is_potentially_hazardous_asteroid = is_potentially_hazardous_asteroid

    @property
    def is_sentry_object(self):
        """Gets the is_sentry_object of this NearEarthObject.


        :return: The is_sentry_object of this NearEarthObject.
        :rtype: bool
        """
        return self._is_sentry_object

    @is_sentry_object.setter
    def is_sentry_object(self, is_sentry_object):
        """Sets the is_sentry_object of this NearEarthObject.


        :param is_sentry_object: The is_sentry_object of this NearEarthObject.
        :type is_sentry_object: bool
        """

        self._is_sentry_object = is_sentry_object

    @property
    def name(self):
        """Gets the name of this NearEarthObject.


        :return: The name of this NearEarthObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NearEarthObject.


        :param name: The name of this NearEarthObject.
        :type name: str
        """

        self._name = name

    @property
    def name_limited(self):
        """Gets the name_limited of this NearEarthObject.


        :return: The name_limited of this NearEarthObject.
        :rtype: str
        """
        return self._name_limited

    @name_limited.setter
    def name_limited(self, name_limited):
        """Sets the name_limited of this NearEarthObject.


        :param name_limited: The name_limited of this NearEarthObject.
        :type name_limited: str
        """

        self._name_limited = name_limited

    @property
    def nasa_jpl_url(self):
        """Gets the nasa_jpl_url of this NearEarthObject.

        A Link to the NASA JPL Small-Body Database website

        :return: The nasa_jpl_url of this NearEarthObject.
        :rtype: str
        """
        return self._nasa_jpl_url

    @nasa_jpl_url.setter
    def nasa_jpl_url(self, nasa_jpl_url):
        """Sets the nasa_jpl_url of this NearEarthObject.

        A Link to the NASA JPL Small-Body Database website

        :param nasa_jpl_url: The nasa_jpl_url of this NearEarthObject.
        :type nasa_jpl_url: str
        """

        self._nasa_jpl_url = nasa_jpl_url

    @property
    def neo_reference_id(self):
        """Gets the neo_reference_id of this NearEarthObject.

        The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data

        :return: The neo_reference_id of this NearEarthObject.
        :rtype: str
        """
        return self._neo_reference_id

    @neo_reference_id.setter
    def neo_reference_id(self, neo_reference_id):
        """Sets the neo_reference_id of this NearEarthObject.

        The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data

        :param neo_reference_id: The neo_reference_id of this NearEarthObject.
        :type neo_reference_id: str
        """

        self._neo_reference_id = neo_reference_id

    @property
    def orbital_data(self):
        """Gets the orbital_data of this NearEarthObject.


        :return: The orbital_data of this NearEarthObject.
        :rtype: OrbitalData
        """
        return self._orbital_data

    @orbital_data.setter
    def orbital_data(self, orbital_data):
        """Sets the orbital_data of this NearEarthObject.


        :param orbital_data: The orbital_data of this NearEarthObject.
        :type orbital_data: OrbitalData
        """

        self._orbital_data = orbital_data

    @property
    def sentry_data(self):
        """Gets the sentry_data of this NearEarthObject.


        :return: The sentry_data of this NearEarthObject.
        :rtype: str
        """
        return self._sentry_data

    @sentry_data.setter
    def sentry_data(self, sentry_data):
        """Sets the sentry_data of this NearEarthObject.


        :param sentry_data: The sentry_data of this NearEarthObject.
        :type sentry_data: str
        """

        self._sentry_data = sentry_data
