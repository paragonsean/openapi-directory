# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NearEarthObjectList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element_count: int=None, links: object=None, near_earth_objects: object=None):
        """NearEarthObjectList - a model defined in OpenAPI

        :param element_count: The element_count of this NearEarthObjectList.
        :param links: The links of this NearEarthObjectList.
        :param near_earth_objects: The near_earth_objects of this NearEarthObjectList.
        """
        self.openapi_types = {
            'element_count': int,
            'links': object,
            'near_earth_objects': object
        }

        self.attribute_map = {
            'element_count': 'element_count',
            'links': 'links',
            'near_earth_objects': 'near_earth_objects'
        }

        self._element_count = element_count
        self._links = links
        self._near_earth_objects = near_earth_objects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NearEarthObjectList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NearEarthObjectList of this NearEarthObjectList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_count(self):
        """Gets the element_count of this NearEarthObjectList.

        Number of NEOs in list

        :return: The element_count of this NearEarthObjectList.
        :rtype: int
        """
        return self._element_count

    @element_count.setter
    def element_count(self, element_count):
        """Sets the element_count of this NearEarthObjectList.

        Number of NEOs in list

        :param element_count: The element_count of this NearEarthObjectList.
        :type element_count: int
        """

        self._element_count = element_count

    @property
    def links(self):
        """Gets the links of this NearEarthObjectList.

        Hypermedia links to collection

        :return: The links of this NearEarthObjectList.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NearEarthObjectList.

        Hypermedia links to collection

        :param links: The links of this NearEarthObjectList.
        :type links: object
        """

        self._links = links

    @property
    def near_earth_objects(self):
        """Gets the near_earth_objects of this NearEarthObjectList.


        :return: The near_earth_objects of this NearEarthObjectList.
        :rtype: object
        """
        return self._near_earth_objects

    @near_earth_objects.setter
    def near_earth_objects(self, near_earth_objects):
        """Sets the near_earth_objects of this NearEarthObjectList.


        :param near_earth_objects: The near_earth_objects of this NearEarthObjectList.
        :type near_earth_objects: object
        """

        self._near_earth_objects = near_earth_objects
