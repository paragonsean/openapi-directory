# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MissDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, astronomical: str=None, kilometers: str=None, lunar: str=None, miles: str=None):
        """MissDistance - a model defined in OpenAPI

        :param astronomical: The astronomical of this MissDistance.
        :param kilometers: The kilometers of this MissDistance.
        :param lunar: The lunar of this MissDistance.
        :param miles: The miles of this MissDistance.
        """
        self.openapi_types = {
            'astronomical': str,
            'kilometers': str,
            'lunar': str,
            'miles': str
        }

        self.attribute_map = {
            'astronomical': 'astronomical',
            'kilometers': 'kilometers',
            'lunar': 'lunar',
            'miles': 'miles'
        }

        self._astronomical = astronomical
        self._kilometers = kilometers
        self._lunar = lunar
        self._miles = miles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MissDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MissDistance of this MissDistance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def astronomical(self):
        """Gets the astronomical of this MissDistance.


        :return: The astronomical of this MissDistance.
        :rtype: str
        """
        return self._astronomical

    @astronomical.setter
    def astronomical(self, astronomical):
        """Sets the astronomical of this MissDistance.


        :param astronomical: The astronomical of this MissDistance.
        :type astronomical: str
        """

        self._astronomical = astronomical

    @property
    def kilometers(self):
        """Gets the kilometers of this MissDistance.


        :return: The kilometers of this MissDistance.
        :rtype: str
        """
        return self._kilometers

    @kilometers.setter
    def kilometers(self, kilometers):
        """Sets the kilometers of this MissDistance.


        :param kilometers: The kilometers of this MissDistance.
        :type kilometers: str
        """

        self._kilometers = kilometers

    @property
    def lunar(self):
        """Gets the lunar of this MissDistance.


        :return: The lunar of this MissDistance.
        :rtype: str
        """
        return self._lunar

    @lunar.setter
    def lunar(self, lunar):
        """Sets the lunar of this MissDistance.


        :param lunar: The lunar of this MissDistance.
        :type lunar: str
        """

        self._lunar = lunar

    @property
    def miles(self):
        """Gets the miles of this MissDistance.


        :return: The miles of this MissDistance.
        :rtype: str
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this MissDistance.


        :param miles: The miles of this MissDistance.
        :type miles: str
        """

        self._miles = miles
