/*
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrbitClass
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:15.882853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrbitClass {
  public static final String SERIALIZED_NAME_ORBIT_CLASS_DESCRIPTION = "orbit_class_description";
  @SerializedName(SERIALIZED_NAME_ORBIT_CLASS_DESCRIPTION)
  private String orbitClassDescription;

  public static final String SERIALIZED_NAME_ORBIT_CLASS_RANGE = "orbit_class_range";
  @SerializedName(SERIALIZED_NAME_ORBIT_CLASS_RANGE)
  private String orbitClassRange;

  /**
   * Gets or Sets orbitClassType
   */
  @JsonAdapter(OrbitClassTypeEnum.Adapter.class)
  public enum OrbitClassTypeEnum {
    IEO("IEO"),
    
    ATE("ATE"),
    
    APO("APO"),
    
    AMO("AMO"),
    
    MCA("MCA"),
    
    IMB("IMB"),
    
    MBA("MBA"),
    
    OMB("OMB"),
    
    TJN("TJN"),
    
    CEN("CEN"),
    
    TNO("TNO"),
    
    PAA("PAA"),
    
    HYA("HYA"),
    
    HYP("HYP"),
    
    PAR("PAR"),
    
    COM("COM"),
    
    JFC("JFC"),
    
    HTC("HTC"),
    
    ETC("ETC"),
    
    CTC("CTC"),
    
    JFC2("JFc");

    private String value;

    OrbitClassTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrbitClassTypeEnum fromValue(String value) {
      for (OrbitClassTypeEnum b : OrbitClassTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrbitClassTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrbitClassTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrbitClassTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrbitClassTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrbitClassTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORBIT_CLASS_TYPE = "orbit_class_type";
  @SerializedName(SERIALIZED_NAME_ORBIT_CLASS_TYPE)
  private OrbitClassTypeEnum orbitClassType;

  public OrbitClass() {
  }

  public OrbitClass orbitClassDescription(String orbitClassDescription) {
    this.orbitClassDescription = orbitClassDescription;
    return this;
  }

  /**
   * Get orbitClassDescription
   * @return orbitClassDescription
   */
  @javax.annotation.Nullable
  public String getOrbitClassDescription() {
    return orbitClassDescription;
  }

  public void setOrbitClassDescription(String orbitClassDescription) {
    this.orbitClassDescription = orbitClassDescription;
  }


  public OrbitClass orbitClassRange(String orbitClassRange) {
    this.orbitClassRange = orbitClassRange;
    return this;
  }

  /**
   * Get orbitClassRange
   * @return orbitClassRange
   */
  @javax.annotation.Nullable
  public String getOrbitClassRange() {
    return orbitClassRange;
  }

  public void setOrbitClassRange(String orbitClassRange) {
    this.orbitClassRange = orbitClassRange;
  }


  public OrbitClass orbitClassType(OrbitClassTypeEnum orbitClassType) {
    this.orbitClassType = orbitClassType;
    return this;
  }

  /**
   * Get orbitClassType
   * @return orbitClassType
   */
  @javax.annotation.Nullable
  public OrbitClassTypeEnum getOrbitClassType() {
    return orbitClassType;
  }

  public void setOrbitClassType(OrbitClassTypeEnum orbitClassType) {
    this.orbitClassType = orbitClassType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrbitClass orbitClass = (OrbitClass) o;
    return Objects.equals(this.orbitClassDescription, orbitClass.orbitClassDescription) &&
        Objects.equals(this.orbitClassRange, orbitClass.orbitClassRange) &&
        Objects.equals(this.orbitClassType, orbitClass.orbitClassType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orbitClassDescription, orbitClassRange, orbitClassType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrbitClass {\n");
    sb.append("    orbitClassDescription: ").append(toIndentedString(orbitClassDescription)).append("\n");
    sb.append("    orbitClassRange: ").append(toIndentedString(orbitClassRange)).append("\n");
    sb.append("    orbitClassType: ").append(toIndentedString(orbitClassType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orbit_class_description");
    openapiFields.add("orbit_class_range");
    openapiFields.add("orbit_class_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrbitClass
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrbitClass.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrbitClass is not found in the empty JSON string", OrbitClass.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrbitClass.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrbitClass` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("orbit_class_description") != null && !jsonObj.get("orbit_class_description").isJsonNull()) && !jsonObj.get("orbit_class_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_class_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_class_description").toString()));
      }
      if ((jsonObj.get("orbit_class_range") != null && !jsonObj.get("orbit_class_range").isJsonNull()) && !jsonObj.get("orbit_class_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_class_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_class_range").toString()));
      }
      if ((jsonObj.get("orbit_class_type") != null && !jsonObj.get("orbit_class_type").isJsonNull()) && !jsonObj.get("orbit_class_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_class_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_class_type").toString()));
      }
      // validate the optional field `orbit_class_type`
      if (jsonObj.get("orbit_class_type") != null && !jsonObj.get("orbit_class_type").isJsonNull()) {
        OrbitClassTypeEnum.validateJsonElement(jsonObj.get("orbit_class_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrbitClass.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrbitClass' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrbitClass> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrbitClass.class));

       return (TypeAdapter<T>) new TypeAdapter<OrbitClass>() {
           @Override
           public void write(JsonWriter out, OrbitClass value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrbitClass read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrbitClass given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrbitClass
   * @throws IOException if the JSON string is invalid with respect to OrbitClass
   */
  public static OrbitClass fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrbitClass.class);
  }

  /**
   * Convert an instance of OrbitClass to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

