/*
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.URL;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:15.882853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Statistics {
  public static final String SERIALIZED_NAME_CLOSE_APPROACH_COUNT = "close_approach_count";
  @SerializedName(SERIALIZED_NAME_CLOSE_APPROACH_COUNT)
  private Long closeApproachCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_NASA_JPL_URL = "nasa_jpl_url";
  @SerializedName(SERIALIZED_NAME_NASA_JPL_URL)
  private URL nasaJplUrl;

  public static final String SERIALIZED_NAME_NEAR_EARTH_OBJECT_COUNT = "near_earth_object_count";
  @SerializedName(SERIALIZED_NAME_NEAR_EARTH_OBJECT_COUNT)
  private Long nearEarthObjectCount;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public Statistics() {
  }

  public Statistics closeApproachCount(Long closeApproachCount) {
    this.closeApproachCount = closeApproachCount;
    return this;
  }

  /**
   * Number of Close Approach listings across all NEOs listed in NeoWs
   * @return closeApproachCount
   */
  @javax.annotation.Nullable
  public Long getCloseApproachCount() {
    return closeApproachCount;
  }

  public void setCloseApproachCount(Long closeApproachCount) {
    this.closeApproachCount = closeApproachCount;
  }


  public Statistics lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * TimeStamp the last time the DB was updated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Statistics nasaJplUrl(URL nasaJplUrl) {
    this.nasaJplUrl = nasaJplUrl;
    return this;
  }

  /**
   * Get nasaJplUrl
   * @return nasaJplUrl
   */
  @javax.annotation.Nullable
  public URL getNasaJplUrl() {
    return nasaJplUrl;
  }

  public void setNasaJplUrl(URL nasaJplUrl) {
    this.nasaJplUrl = nasaJplUrl;
  }


  public Statistics nearEarthObjectCount(Long nearEarthObjectCount) {
    this.nearEarthObjectCount = nearEarthObjectCount;
    return this;
  }

  /**
   * Number of NearEarthObjects listed in NeoWs
   * @return nearEarthObjectCount
   */
  @javax.annotation.Nullable
  public Long getNearEarthObjectCount() {
    return nearEarthObjectCount;
  }

  public void setNearEarthObjectCount(Long nearEarthObjectCount) {
    this.nearEarthObjectCount = nearEarthObjectCount;
  }


  public Statistics source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statistics statistics = (Statistics) o;
    return Objects.equals(this.closeApproachCount, statistics.closeApproachCount) &&
        Objects.equals(this.lastUpdated, statistics.lastUpdated) &&
        Objects.equals(this.nasaJplUrl, statistics.nasaJplUrl) &&
        Objects.equals(this.nearEarthObjectCount, statistics.nearEarthObjectCount) &&
        Objects.equals(this.source, statistics.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closeApproachCount, lastUpdated, nasaJplUrl, nearEarthObjectCount, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statistics {\n");
    sb.append("    closeApproachCount: ").append(toIndentedString(closeApproachCount)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    nasaJplUrl: ").append(toIndentedString(nasaJplUrl)).append("\n");
    sb.append("    nearEarthObjectCount: ").append(toIndentedString(nearEarthObjectCount)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("close_approach_count");
    openapiFields.add("last_updated");
    openapiFields.add("nasa_jpl_url");
    openapiFields.add("near_earth_object_count");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Statistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Statistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Statistics is not found in the empty JSON string", Statistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Statistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Statistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("last_updated") != null && !jsonObj.get("last_updated").isJsonNull()) && !jsonObj.get("last_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated").toString()));
      }
      // validate the optional field `nasa_jpl_url`
      if (jsonObj.get("nasa_jpl_url") != null && !jsonObj.get("nasa_jpl_url").isJsonNull()) {
        URL.validateJsonElement(jsonObj.get("nasa_jpl_url"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Statistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Statistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Statistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Statistics.class));

       return (TypeAdapter<T>) new TypeAdapter<Statistics>() {
           @Override
           public void write(JsonWriter out, Statistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Statistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Statistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Statistics
   * @throws IOException if the JSON string is invalid with respect to Statistics
   */
  public static Statistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Statistics.class);
  }

  /**
   * Convert an instance of Statistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

