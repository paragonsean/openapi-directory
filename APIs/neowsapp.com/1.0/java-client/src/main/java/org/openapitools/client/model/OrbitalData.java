/*
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrbitClass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrbitalData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:15.882853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrbitalData {
  public static final String SERIALIZED_NAME_APHELION_DISTANCE = "aphelion_distance";
  @SerializedName(SERIALIZED_NAME_APHELION_DISTANCE)
  private String aphelionDistance;

  public static final String SERIALIZED_NAME_ASCENDING_NODE_LONGITUDE = "ascending_node_longitude";
  @SerializedName(SERIALIZED_NAME_ASCENDING_NODE_LONGITUDE)
  private String ascendingNodeLongitude;

  public static final String SERIALIZED_NAME_DATA_ARC_IN_DAYS = "data_arc_in_days";
  @SerializedName(SERIALIZED_NAME_DATA_ARC_IN_DAYS)
  private Long dataArcInDays;

  public static final String SERIALIZED_NAME_ECCENTRICITY = "eccentricity";
  @SerializedName(SERIALIZED_NAME_ECCENTRICITY)
  private String eccentricity;

  public static final String SERIALIZED_NAME_EPOCH_OSCULATION = "epoch_osculation";
  @SerializedName(SERIALIZED_NAME_EPOCH_OSCULATION)
  private String epochOsculation;

  public static final String SERIALIZED_NAME_EQUINOX = "equinox";
  @SerializedName(SERIALIZED_NAME_EQUINOX)
  private String equinox;

  public static final String SERIALIZED_NAME_FIRST_OBSERVATION_DATE = "first_observation_date";
  @SerializedName(SERIALIZED_NAME_FIRST_OBSERVATION_DATE)
  private String firstObservationDate;

  public static final String SERIALIZED_NAME_INCLINATION = "inclination";
  @SerializedName(SERIALIZED_NAME_INCLINATION)
  private String inclination;

  public static final String SERIALIZED_NAME_JUPITER_TISSERAND_INVARIANT = "jupiter_tisserand_invariant";
  @SerializedName(SERIALIZED_NAME_JUPITER_TISSERAND_INVARIANT)
  private String jupiterTisserandInvariant;

  public static final String SERIALIZED_NAME_LAST_OBSERVATION_DATE = "last_observation_date";
  @SerializedName(SERIALIZED_NAME_LAST_OBSERVATION_DATE)
  private String lastObservationDate;

  public static final String SERIALIZED_NAME_MEAN_ANOMALY = "mean_anomaly";
  @SerializedName(SERIALIZED_NAME_MEAN_ANOMALY)
  private String meanAnomaly;

  public static final String SERIALIZED_NAME_MEAN_MOTION = "mean_motion";
  @SerializedName(SERIALIZED_NAME_MEAN_MOTION)
  private String meanMotion;

  public static final String SERIALIZED_NAME_MINIMUM_ORBIT_INTERSECTION = "minimum_orbit_intersection";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ORBIT_INTERSECTION)
  private String minimumOrbitIntersection;

  public static final String SERIALIZED_NAME_OBSERVATIONS_USED = "observations_used";
  @SerializedName(SERIALIZED_NAME_OBSERVATIONS_USED)
  private Long observationsUsed;

  public static final String SERIALIZED_NAME_ORBIT_CLASS = "orbit_class";
  @SerializedName(SERIALIZED_NAME_ORBIT_CLASS)
  private OrbitClass orbitClass;

  public static final String SERIALIZED_NAME_ORBIT_DETERMINATION_DATE = "orbit_determination_date";
  @SerializedName(SERIALIZED_NAME_ORBIT_DETERMINATION_DATE)
  private String orbitDeterminationDate;

  public static final String SERIALIZED_NAME_ORBIT_ID = "orbit_id";
  @SerializedName(SERIALIZED_NAME_ORBIT_ID)
  private String orbitId;

  public static final String SERIALIZED_NAME_ORBIT_UNCERTAINTY = "orbit_uncertainty";
  @SerializedName(SERIALIZED_NAME_ORBIT_UNCERTAINTY)
  private String orbitUncertainty;

  public static final String SERIALIZED_NAME_ORBITAL_PERIOD = "orbital_period";
  @SerializedName(SERIALIZED_NAME_ORBITAL_PERIOD)
  private String orbitalPeriod;

  public static final String SERIALIZED_NAME_PERIHELION_ARGUMENT = "perihelion_argument";
  @SerializedName(SERIALIZED_NAME_PERIHELION_ARGUMENT)
  private String perihelionArgument;

  public static final String SERIALIZED_NAME_PERIHELION_DISTANCE = "perihelion_distance";
  @SerializedName(SERIALIZED_NAME_PERIHELION_DISTANCE)
  private String perihelionDistance;

  public static final String SERIALIZED_NAME_PERIHELION_TIME = "perihelion_time";
  @SerializedName(SERIALIZED_NAME_PERIHELION_TIME)
  private String perihelionTime;

  public static final String SERIALIZED_NAME_SEMI_MAJOR_AXIS = "semi_major_axis";
  @SerializedName(SERIALIZED_NAME_SEMI_MAJOR_AXIS)
  private String semiMajorAxis;

  public OrbitalData() {
  }

  public OrbitalData aphelionDistance(String aphelionDistance) {
    this.aphelionDistance = aphelionDistance;
    return this;
  }

  /**
   * Get aphelionDistance
   * @return aphelionDistance
   */
  @javax.annotation.Nullable
  public String getAphelionDistance() {
    return aphelionDistance;
  }

  public void setAphelionDistance(String aphelionDistance) {
    this.aphelionDistance = aphelionDistance;
  }


  public OrbitalData ascendingNodeLongitude(String ascendingNodeLongitude) {
    this.ascendingNodeLongitude = ascendingNodeLongitude;
    return this;
  }

  /**
   * Get ascendingNodeLongitude
   * @return ascendingNodeLongitude
   */
  @javax.annotation.Nullable
  public String getAscendingNodeLongitude() {
    return ascendingNodeLongitude;
  }

  public void setAscendingNodeLongitude(String ascendingNodeLongitude) {
    this.ascendingNodeLongitude = ascendingNodeLongitude;
  }


  public OrbitalData dataArcInDays(Long dataArcInDays) {
    this.dataArcInDays = dataArcInDays;
    return this;
  }

  /**
   * Get dataArcInDays
   * @return dataArcInDays
   */
  @javax.annotation.Nullable
  public Long getDataArcInDays() {
    return dataArcInDays;
  }

  public void setDataArcInDays(Long dataArcInDays) {
    this.dataArcInDays = dataArcInDays;
  }


  public OrbitalData eccentricity(String eccentricity) {
    this.eccentricity = eccentricity;
    return this;
  }

  /**
   * Get eccentricity
   * @return eccentricity
   */
  @javax.annotation.Nullable
  public String getEccentricity() {
    return eccentricity;
  }

  public void setEccentricity(String eccentricity) {
    this.eccentricity = eccentricity;
  }


  public OrbitalData epochOsculation(String epochOsculation) {
    this.epochOsculation = epochOsculation;
    return this;
  }

  /**
   * Get epochOsculation
   * @return epochOsculation
   */
  @javax.annotation.Nullable
  public String getEpochOsculation() {
    return epochOsculation;
  }

  public void setEpochOsculation(String epochOsculation) {
    this.epochOsculation = epochOsculation;
  }


  public OrbitalData equinox(String equinox) {
    this.equinox = equinox;
    return this;
  }

  /**
   * Get equinox
   * @return equinox
   */
  @javax.annotation.Nullable
  public String getEquinox() {
    return equinox;
  }

  public void setEquinox(String equinox) {
    this.equinox = equinox;
  }


  public OrbitalData firstObservationDate(String firstObservationDate) {
    this.firstObservationDate = firstObservationDate;
    return this;
  }

  /**
   * Get firstObservationDate
   * @return firstObservationDate
   */
  @javax.annotation.Nullable
  public String getFirstObservationDate() {
    return firstObservationDate;
  }

  public void setFirstObservationDate(String firstObservationDate) {
    this.firstObservationDate = firstObservationDate;
  }


  public OrbitalData inclination(String inclination) {
    this.inclination = inclination;
    return this;
  }

  /**
   * Get inclination
   * @return inclination
   */
  @javax.annotation.Nullable
  public String getInclination() {
    return inclination;
  }

  public void setInclination(String inclination) {
    this.inclination = inclination;
  }


  public OrbitalData jupiterTisserandInvariant(String jupiterTisserandInvariant) {
    this.jupiterTisserandInvariant = jupiterTisserandInvariant;
    return this;
  }

  /**
   * Get jupiterTisserandInvariant
   * @return jupiterTisserandInvariant
   */
  @javax.annotation.Nullable
  public String getJupiterTisserandInvariant() {
    return jupiterTisserandInvariant;
  }

  public void setJupiterTisserandInvariant(String jupiterTisserandInvariant) {
    this.jupiterTisserandInvariant = jupiterTisserandInvariant;
  }


  public OrbitalData lastObservationDate(String lastObservationDate) {
    this.lastObservationDate = lastObservationDate;
    return this;
  }

  /**
   * Get lastObservationDate
   * @return lastObservationDate
   */
  @javax.annotation.Nullable
  public String getLastObservationDate() {
    return lastObservationDate;
  }

  public void setLastObservationDate(String lastObservationDate) {
    this.lastObservationDate = lastObservationDate;
  }


  public OrbitalData meanAnomaly(String meanAnomaly) {
    this.meanAnomaly = meanAnomaly;
    return this;
  }

  /**
   * Get meanAnomaly
   * @return meanAnomaly
   */
  @javax.annotation.Nullable
  public String getMeanAnomaly() {
    return meanAnomaly;
  }

  public void setMeanAnomaly(String meanAnomaly) {
    this.meanAnomaly = meanAnomaly;
  }


  public OrbitalData meanMotion(String meanMotion) {
    this.meanMotion = meanMotion;
    return this;
  }

  /**
   * Get meanMotion
   * @return meanMotion
   */
  @javax.annotation.Nullable
  public String getMeanMotion() {
    return meanMotion;
  }

  public void setMeanMotion(String meanMotion) {
    this.meanMotion = meanMotion;
  }


  public OrbitalData minimumOrbitIntersection(String minimumOrbitIntersection) {
    this.minimumOrbitIntersection = minimumOrbitIntersection;
    return this;
  }

  /**
   * Get minimumOrbitIntersection
   * @return minimumOrbitIntersection
   */
  @javax.annotation.Nullable
  public String getMinimumOrbitIntersection() {
    return minimumOrbitIntersection;
  }

  public void setMinimumOrbitIntersection(String minimumOrbitIntersection) {
    this.minimumOrbitIntersection = minimumOrbitIntersection;
  }


  public OrbitalData observationsUsed(Long observationsUsed) {
    this.observationsUsed = observationsUsed;
    return this;
  }

  /**
   * Get observationsUsed
   * @return observationsUsed
   */
  @javax.annotation.Nullable
  public Long getObservationsUsed() {
    return observationsUsed;
  }

  public void setObservationsUsed(Long observationsUsed) {
    this.observationsUsed = observationsUsed;
  }


  public OrbitalData orbitClass(OrbitClass orbitClass) {
    this.orbitClass = orbitClass;
    return this;
  }

  /**
   * Get orbitClass
   * @return orbitClass
   */
  @javax.annotation.Nullable
  public OrbitClass getOrbitClass() {
    return orbitClass;
  }

  public void setOrbitClass(OrbitClass orbitClass) {
    this.orbitClass = orbitClass;
  }


  public OrbitalData orbitDeterminationDate(String orbitDeterminationDate) {
    this.orbitDeterminationDate = orbitDeterminationDate;
    return this;
  }

  /**
   * Get orbitDeterminationDate
   * @return orbitDeterminationDate
   */
  @javax.annotation.Nullable
  public String getOrbitDeterminationDate() {
    return orbitDeterminationDate;
  }

  public void setOrbitDeterminationDate(String orbitDeterminationDate) {
    this.orbitDeterminationDate = orbitDeterminationDate;
  }


  public OrbitalData orbitId(String orbitId) {
    this.orbitId = orbitId;
    return this;
  }

  /**
   * Get orbitId
   * @return orbitId
   */
  @javax.annotation.Nullable
  public String getOrbitId() {
    return orbitId;
  }

  public void setOrbitId(String orbitId) {
    this.orbitId = orbitId;
  }


  public OrbitalData orbitUncertainty(String orbitUncertainty) {
    this.orbitUncertainty = orbitUncertainty;
    return this;
  }

  /**
   * Get orbitUncertainty
   * @return orbitUncertainty
   */
  @javax.annotation.Nullable
  public String getOrbitUncertainty() {
    return orbitUncertainty;
  }

  public void setOrbitUncertainty(String orbitUncertainty) {
    this.orbitUncertainty = orbitUncertainty;
  }


  public OrbitalData orbitalPeriod(String orbitalPeriod) {
    this.orbitalPeriod = orbitalPeriod;
    return this;
  }

  /**
   * Get orbitalPeriod
   * @return orbitalPeriod
   */
  @javax.annotation.Nullable
  public String getOrbitalPeriod() {
    return orbitalPeriod;
  }

  public void setOrbitalPeriod(String orbitalPeriod) {
    this.orbitalPeriod = orbitalPeriod;
  }


  public OrbitalData perihelionArgument(String perihelionArgument) {
    this.perihelionArgument = perihelionArgument;
    return this;
  }

  /**
   * Get perihelionArgument
   * @return perihelionArgument
   */
  @javax.annotation.Nullable
  public String getPerihelionArgument() {
    return perihelionArgument;
  }

  public void setPerihelionArgument(String perihelionArgument) {
    this.perihelionArgument = perihelionArgument;
  }


  public OrbitalData perihelionDistance(String perihelionDistance) {
    this.perihelionDistance = perihelionDistance;
    return this;
  }

  /**
   * Get perihelionDistance
   * @return perihelionDistance
   */
  @javax.annotation.Nullable
  public String getPerihelionDistance() {
    return perihelionDistance;
  }

  public void setPerihelionDistance(String perihelionDistance) {
    this.perihelionDistance = perihelionDistance;
  }


  public OrbitalData perihelionTime(String perihelionTime) {
    this.perihelionTime = perihelionTime;
    return this;
  }

  /**
   * Get perihelionTime
   * @return perihelionTime
   */
  @javax.annotation.Nullable
  public String getPerihelionTime() {
    return perihelionTime;
  }

  public void setPerihelionTime(String perihelionTime) {
    this.perihelionTime = perihelionTime;
  }


  public OrbitalData semiMajorAxis(String semiMajorAxis) {
    this.semiMajorAxis = semiMajorAxis;
    return this;
  }

  /**
   * Get semiMajorAxis
   * @return semiMajorAxis
   */
  @javax.annotation.Nullable
  public String getSemiMajorAxis() {
    return semiMajorAxis;
  }

  public void setSemiMajorAxis(String semiMajorAxis) {
    this.semiMajorAxis = semiMajorAxis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrbitalData orbitalData = (OrbitalData) o;
    return Objects.equals(this.aphelionDistance, orbitalData.aphelionDistance) &&
        Objects.equals(this.ascendingNodeLongitude, orbitalData.ascendingNodeLongitude) &&
        Objects.equals(this.dataArcInDays, orbitalData.dataArcInDays) &&
        Objects.equals(this.eccentricity, orbitalData.eccentricity) &&
        Objects.equals(this.epochOsculation, orbitalData.epochOsculation) &&
        Objects.equals(this.equinox, orbitalData.equinox) &&
        Objects.equals(this.firstObservationDate, orbitalData.firstObservationDate) &&
        Objects.equals(this.inclination, orbitalData.inclination) &&
        Objects.equals(this.jupiterTisserandInvariant, orbitalData.jupiterTisserandInvariant) &&
        Objects.equals(this.lastObservationDate, orbitalData.lastObservationDate) &&
        Objects.equals(this.meanAnomaly, orbitalData.meanAnomaly) &&
        Objects.equals(this.meanMotion, orbitalData.meanMotion) &&
        Objects.equals(this.minimumOrbitIntersection, orbitalData.minimumOrbitIntersection) &&
        Objects.equals(this.observationsUsed, orbitalData.observationsUsed) &&
        Objects.equals(this.orbitClass, orbitalData.orbitClass) &&
        Objects.equals(this.orbitDeterminationDate, orbitalData.orbitDeterminationDate) &&
        Objects.equals(this.orbitId, orbitalData.orbitId) &&
        Objects.equals(this.orbitUncertainty, orbitalData.orbitUncertainty) &&
        Objects.equals(this.orbitalPeriod, orbitalData.orbitalPeriod) &&
        Objects.equals(this.perihelionArgument, orbitalData.perihelionArgument) &&
        Objects.equals(this.perihelionDistance, orbitalData.perihelionDistance) &&
        Objects.equals(this.perihelionTime, orbitalData.perihelionTime) &&
        Objects.equals(this.semiMajorAxis, orbitalData.semiMajorAxis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aphelionDistance, ascendingNodeLongitude, dataArcInDays, eccentricity, epochOsculation, equinox, firstObservationDate, inclination, jupiterTisserandInvariant, lastObservationDate, meanAnomaly, meanMotion, minimumOrbitIntersection, observationsUsed, orbitClass, orbitDeterminationDate, orbitId, orbitUncertainty, orbitalPeriod, perihelionArgument, perihelionDistance, perihelionTime, semiMajorAxis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrbitalData {\n");
    sb.append("    aphelionDistance: ").append(toIndentedString(aphelionDistance)).append("\n");
    sb.append("    ascendingNodeLongitude: ").append(toIndentedString(ascendingNodeLongitude)).append("\n");
    sb.append("    dataArcInDays: ").append(toIndentedString(dataArcInDays)).append("\n");
    sb.append("    eccentricity: ").append(toIndentedString(eccentricity)).append("\n");
    sb.append("    epochOsculation: ").append(toIndentedString(epochOsculation)).append("\n");
    sb.append("    equinox: ").append(toIndentedString(equinox)).append("\n");
    sb.append("    firstObservationDate: ").append(toIndentedString(firstObservationDate)).append("\n");
    sb.append("    inclination: ").append(toIndentedString(inclination)).append("\n");
    sb.append("    jupiterTisserandInvariant: ").append(toIndentedString(jupiterTisserandInvariant)).append("\n");
    sb.append("    lastObservationDate: ").append(toIndentedString(lastObservationDate)).append("\n");
    sb.append("    meanAnomaly: ").append(toIndentedString(meanAnomaly)).append("\n");
    sb.append("    meanMotion: ").append(toIndentedString(meanMotion)).append("\n");
    sb.append("    minimumOrbitIntersection: ").append(toIndentedString(minimumOrbitIntersection)).append("\n");
    sb.append("    observationsUsed: ").append(toIndentedString(observationsUsed)).append("\n");
    sb.append("    orbitClass: ").append(toIndentedString(orbitClass)).append("\n");
    sb.append("    orbitDeterminationDate: ").append(toIndentedString(orbitDeterminationDate)).append("\n");
    sb.append("    orbitId: ").append(toIndentedString(orbitId)).append("\n");
    sb.append("    orbitUncertainty: ").append(toIndentedString(orbitUncertainty)).append("\n");
    sb.append("    orbitalPeriod: ").append(toIndentedString(orbitalPeriod)).append("\n");
    sb.append("    perihelionArgument: ").append(toIndentedString(perihelionArgument)).append("\n");
    sb.append("    perihelionDistance: ").append(toIndentedString(perihelionDistance)).append("\n");
    sb.append("    perihelionTime: ").append(toIndentedString(perihelionTime)).append("\n");
    sb.append("    semiMajorAxis: ").append(toIndentedString(semiMajorAxis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aphelion_distance");
    openapiFields.add("ascending_node_longitude");
    openapiFields.add("data_arc_in_days");
    openapiFields.add("eccentricity");
    openapiFields.add("epoch_osculation");
    openapiFields.add("equinox");
    openapiFields.add("first_observation_date");
    openapiFields.add("inclination");
    openapiFields.add("jupiter_tisserand_invariant");
    openapiFields.add("last_observation_date");
    openapiFields.add("mean_anomaly");
    openapiFields.add("mean_motion");
    openapiFields.add("minimum_orbit_intersection");
    openapiFields.add("observations_used");
    openapiFields.add("orbit_class");
    openapiFields.add("orbit_determination_date");
    openapiFields.add("orbit_id");
    openapiFields.add("orbit_uncertainty");
    openapiFields.add("orbital_period");
    openapiFields.add("perihelion_argument");
    openapiFields.add("perihelion_distance");
    openapiFields.add("perihelion_time");
    openapiFields.add("semi_major_axis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrbitalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrbitalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrbitalData is not found in the empty JSON string", OrbitalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrbitalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrbitalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aphelion_distance") != null && !jsonObj.get("aphelion_distance").isJsonNull()) && !jsonObj.get("aphelion_distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aphelion_distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aphelion_distance").toString()));
      }
      if ((jsonObj.get("ascending_node_longitude") != null && !jsonObj.get("ascending_node_longitude").isJsonNull()) && !jsonObj.get("ascending_node_longitude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ascending_node_longitude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ascending_node_longitude").toString()));
      }
      if ((jsonObj.get("eccentricity") != null && !jsonObj.get("eccentricity").isJsonNull()) && !jsonObj.get("eccentricity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eccentricity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eccentricity").toString()));
      }
      if ((jsonObj.get("epoch_osculation") != null && !jsonObj.get("epoch_osculation").isJsonNull()) && !jsonObj.get("epoch_osculation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epoch_osculation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epoch_osculation").toString()));
      }
      if ((jsonObj.get("equinox") != null && !jsonObj.get("equinox").isJsonNull()) && !jsonObj.get("equinox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equinox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equinox").toString()));
      }
      if ((jsonObj.get("first_observation_date") != null && !jsonObj.get("first_observation_date").isJsonNull()) && !jsonObj.get("first_observation_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_observation_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_observation_date").toString()));
      }
      if ((jsonObj.get("inclination") != null && !jsonObj.get("inclination").isJsonNull()) && !jsonObj.get("inclination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclination").toString()));
      }
      if ((jsonObj.get("jupiter_tisserand_invariant") != null && !jsonObj.get("jupiter_tisserand_invariant").isJsonNull()) && !jsonObj.get("jupiter_tisserand_invariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jupiter_tisserand_invariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jupiter_tisserand_invariant").toString()));
      }
      if ((jsonObj.get("last_observation_date") != null && !jsonObj.get("last_observation_date").isJsonNull()) && !jsonObj.get("last_observation_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_observation_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_observation_date").toString()));
      }
      if ((jsonObj.get("mean_anomaly") != null && !jsonObj.get("mean_anomaly").isJsonNull()) && !jsonObj.get("mean_anomaly").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mean_anomaly` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mean_anomaly").toString()));
      }
      if ((jsonObj.get("mean_motion") != null && !jsonObj.get("mean_motion").isJsonNull()) && !jsonObj.get("mean_motion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mean_motion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mean_motion").toString()));
      }
      if ((jsonObj.get("minimum_orbit_intersection") != null && !jsonObj.get("minimum_orbit_intersection").isJsonNull()) && !jsonObj.get("minimum_orbit_intersection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_orbit_intersection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_orbit_intersection").toString()));
      }
      // validate the optional field `orbit_class`
      if (jsonObj.get("orbit_class") != null && !jsonObj.get("orbit_class").isJsonNull()) {
        OrbitClass.validateJsonElement(jsonObj.get("orbit_class"));
      }
      if ((jsonObj.get("orbit_determination_date") != null && !jsonObj.get("orbit_determination_date").isJsonNull()) && !jsonObj.get("orbit_determination_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_determination_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_determination_date").toString()));
      }
      if ((jsonObj.get("orbit_id") != null && !jsonObj.get("orbit_id").isJsonNull()) && !jsonObj.get("orbit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_id").toString()));
      }
      if ((jsonObj.get("orbit_uncertainty") != null && !jsonObj.get("orbit_uncertainty").isJsonNull()) && !jsonObj.get("orbit_uncertainty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbit_uncertainty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbit_uncertainty").toString()));
      }
      if ((jsonObj.get("orbital_period") != null && !jsonObj.get("orbital_period").isJsonNull()) && !jsonObj.get("orbital_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orbital_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orbital_period").toString()));
      }
      if ((jsonObj.get("perihelion_argument") != null && !jsonObj.get("perihelion_argument").isJsonNull()) && !jsonObj.get("perihelion_argument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perihelion_argument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perihelion_argument").toString()));
      }
      if ((jsonObj.get("perihelion_distance") != null && !jsonObj.get("perihelion_distance").isJsonNull()) && !jsonObj.get("perihelion_distance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perihelion_distance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perihelion_distance").toString()));
      }
      if ((jsonObj.get("perihelion_time") != null && !jsonObj.get("perihelion_time").isJsonNull()) && !jsonObj.get("perihelion_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perihelion_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perihelion_time").toString()));
      }
      if ((jsonObj.get("semi_major_axis") != null && !jsonObj.get("semi_major_axis").isJsonNull()) && !jsonObj.get("semi_major_axis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `semi_major_axis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("semi_major_axis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrbitalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrbitalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrbitalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrbitalData.class));

       return (TypeAdapter<T>) new TypeAdapter<OrbitalData>() {
           @Override
           public void write(JsonWriter out, OrbitalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrbitalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrbitalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrbitalData
   * @throws IOException if the JSON string is invalid with respect to OrbitalData
   */
  public static OrbitalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrbitalData.class);
  }

  /**
   * Convert an instance of OrbitalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

