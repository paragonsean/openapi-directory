/*
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloseApproachData;
import org.openapitools.client.model.EstimatedDiameterContainer;
import org.openapitools.client.model.OrbitalData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NearEarthObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:15.882853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NearEarthObject {
  public static final String SERIALIZED_NAME_ABSOLUTE_MAGNITUDE_H = "absolute_magnitude_h";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_MAGNITUDE_H)
  private Double absoluteMagnitudeH;

  public static final String SERIALIZED_NAME_CLOSE_APPROACH_DATA = "close_approach_data";
  @SerializedName(SERIALIZED_NAME_CLOSE_APPROACH_DATA)
  private List<CloseApproachData> closeApproachData = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private String designation;

  public static final String SERIALIZED_NAME_ESTIMATED_DIAMETER = "estimated_diameter";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DIAMETER)
  private EstimatedDiameterContainer estimatedDiameter;

  public static final String SERIALIZED_NAME_IS_POTENTIALLY_HAZARDOUS_ASTEROID = "is_potentially_hazardous_asteroid";
  @SerializedName(SERIALIZED_NAME_IS_POTENTIALLY_HAZARDOUS_ASTEROID)
  private Boolean isPotentiallyHazardousAsteroid;

  public static final String SERIALIZED_NAME_IS_SENTRY_OBJECT = "is_sentry_object";
  @SerializedName(SERIALIZED_NAME_IS_SENTRY_OBJECT)
  private Boolean isSentryObject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_LIMITED = "name_limited";
  @SerializedName(SERIALIZED_NAME_NAME_LIMITED)
  private String nameLimited;

  public static final String SERIALIZED_NAME_NASA_JPL_URL = "nasa_jpl_url";
  @SerializedName(SERIALIZED_NAME_NASA_JPL_URL)
  private String nasaJplUrl;

  public static final String SERIALIZED_NAME_NEO_REFERENCE_ID = "neo_reference_id";
  @SerializedName(SERIALIZED_NAME_NEO_REFERENCE_ID)
  private String neoReferenceId;

  public static final String SERIALIZED_NAME_ORBITAL_DATA = "orbital_data";
  @SerializedName(SERIALIZED_NAME_ORBITAL_DATA)
  private OrbitalData orbitalData;

  public static final String SERIALIZED_NAME_SENTRY_DATA = "sentry_data";
  @SerializedName(SERIALIZED_NAME_SENTRY_DATA)
  private String sentryData;

  public NearEarthObject() {
  }

  public NearEarthObject absoluteMagnitudeH(Double absoluteMagnitudeH) {
    this.absoluteMagnitudeH = absoluteMagnitudeH;
    return this;
  }

  /**
   * Is a measure of an asteroids brightness
   * @return absoluteMagnitudeH
   */
  @javax.annotation.Nullable
  public Double getAbsoluteMagnitudeH() {
    return absoluteMagnitudeH;
  }

  public void setAbsoluteMagnitudeH(Double absoluteMagnitudeH) {
    this.absoluteMagnitudeH = absoluteMagnitudeH;
  }


  public NearEarthObject closeApproachData(List<CloseApproachData> closeApproachData) {
    this.closeApproachData = closeApproachData;
    return this;
  }

  public NearEarthObject addCloseApproachDataItem(CloseApproachData closeApproachDataItem) {
    if (this.closeApproachData == null) {
      this.closeApproachData = new ArrayList<>();
    }
    this.closeApproachData.add(closeApproachDataItem);
    return this;
  }

  /**
   * Close approach information of the Asteroid
   * @return closeApproachData
   */
  @javax.annotation.Nullable
  public List<CloseApproachData> getCloseApproachData() {
    return closeApproachData;
  }

  public void setCloseApproachData(List<CloseApproachData> closeApproachData) {
    this.closeApproachData = closeApproachData;
  }


  public NearEarthObject designation(String designation) {
    this.designation = designation;
    return this;
  }

  /**
   * Get designation
   * @return designation
   */
  @javax.annotation.Nullable
  public String getDesignation() {
    return designation;
  }

  public void setDesignation(String designation) {
    this.designation = designation;
  }


  public NearEarthObject estimatedDiameter(EstimatedDiameterContainer estimatedDiameter) {
    this.estimatedDiameter = estimatedDiameter;
    return this;
  }

  /**
   * Get estimatedDiameter
   * @return estimatedDiameter
   */
  @javax.annotation.Nullable
  public EstimatedDiameterContainer getEstimatedDiameter() {
    return estimatedDiameter;
  }

  public void setEstimatedDiameter(EstimatedDiameterContainer estimatedDiameter) {
    this.estimatedDiameter = estimatedDiameter;
  }


  public NearEarthObject isPotentiallyHazardousAsteroid(Boolean isPotentiallyHazardousAsteroid) {
    this.isPotentiallyHazardousAsteroid = isPotentiallyHazardousAsteroid;
    return this;
  }

  /**
   * Get isPotentiallyHazardousAsteroid
   * @return isPotentiallyHazardousAsteroid
   */
  @javax.annotation.Nullable
  public Boolean getIsPotentiallyHazardousAsteroid() {
    return isPotentiallyHazardousAsteroid;
  }

  public void setIsPotentiallyHazardousAsteroid(Boolean isPotentiallyHazardousAsteroid) {
    this.isPotentiallyHazardousAsteroid = isPotentiallyHazardousAsteroid;
  }


  public NearEarthObject isSentryObject(Boolean isSentryObject) {
    this.isSentryObject = isSentryObject;
    return this;
  }

  /**
   * Get isSentryObject
   * @return isSentryObject
   */
  @javax.annotation.Nullable
  public Boolean getIsSentryObject() {
    return isSentryObject;
  }

  public void setIsSentryObject(Boolean isSentryObject) {
    this.isSentryObject = isSentryObject;
  }


  public NearEarthObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NearEarthObject nameLimited(String nameLimited) {
    this.nameLimited = nameLimited;
    return this;
  }

  /**
   * Get nameLimited
   * @return nameLimited
   */
  @javax.annotation.Nullable
  public String getNameLimited() {
    return nameLimited;
  }

  public void setNameLimited(String nameLimited) {
    this.nameLimited = nameLimited;
  }


  public NearEarthObject nasaJplUrl(String nasaJplUrl) {
    this.nasaJplUrl = nasaJplUrl;
    return this;
  }

  /**
   * A Link to the NASA JPL Small-Body Database website
   * @return nasaJplUrl
   */
  @javax.annotation.Nullable
  public String getNasaJplUrl() {
    return nasaJplUrl;
  }

  public void setNasaJplUrl(String nasaJplUrl) {
    this.nasaJplUrl = nasaJplUrl;
  }


  public NearEarthObject neoReferenceId(String neoReferenceId) {
    this.neoReferenceId = neoReferenceId;
    return this;
  }

  /**
   * The reference ID of the Asteroid - This correlates to the SPK ID for the JPL NEO data
   * @return neoReferenceId
   */
  @javax.annotation.Nullable
  public String getNeoReferenceId() {
    return neoReferenceId;
  }

  public void setNeoReferenceId(String neoReferenceId) {
    this.neoReferenceId = neoReferenceId;
  }


  public NearEarthObject orbitalData(OrbitalData orbitalData) {
    this.orbitalData = orbitalData;
    return this;
  }

  /**
   * Get orbitalData
   * @return orbitalData
   */
  @javax.annotation.Nullable
  public OrbitalData getOrbitalData() {
    return orbitalData;
  }

  public void setOrbitalData(OrbitalData orbitalData) {
    this.orbitalData = orbitalData;
  }


  public NearEarthObject sentryData(String sentryData) {
    this.sentryData = sentryData;
    return this;
  }

  /**
   * Get sentryData
   * @return sentryData
   */
  @javax.annotation.Nullable
  public String getSentryData() {
    return sentryData;
  }

  public void setSentryData(String sentryData) {
    this.sentryData = sentryData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NearEarthObject nearEarthObject = (NearEarthObject) o;
    return Objects.equals(this.absoluteMagnitudeH, nearEarthObject.absoluteMagnitudeH) &&
        Objects.equals(this.closeApproachData, nearEarthObject.closeApproachData) &&
        Objects.equals(this.designation, nearEarthObject.designation) &&
        Objects.equals(this.estimatedDiameter, nearEarthObject.estimatedDiameter) &&
        Objects.equals(this.isPotentiallyHazardousAsteroid, nearEarthObject.isPotentiallyHazardousAsteroid) &&
        Objects.equals(this.isSentryObject, nearEarthObject.isSentryObject) &&
        Objects.equals(this.name, nearEarthObject.name) &&
        Objects.equals(this.nameLimited, nearEarthObject.nameLimited) &&
        Objects.equals(this.nasaJplUrl, nearEarthObject.nasaJplUrl) &&
        Objects.equals(this.neoReferenceId, nearEarthObject.neoReferenceId) &&
        Objects.equals(this.orbitalData, nearEarthObject.orbitalData) &&
        Objects.equals(this.sentryData, nearEarthObject.sentryData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteMagnitudeH, closeApproachData, designation, estimatedDiameter, isPotentiallyHazardousAsteroid, isSentryObject, name, nameLimited, nasaJplUrl, neoReferenceId, orbitalData, sentryData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NearEarthObject {\n");
    sb.append("    absoluteMagnitudeH: ").append(toIndentedString(absoluteMagnitudeH)).append("\n");
    sb.append("    closeApproachData: ").append(toIndentedString(closeApproachData)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    estimatedDiameter: ").append(toIndentedString(estimatedDiameter)).append("\n");
    sb.append("    isPotentiallyHazardousAsteroid: ").append(toIndentedString(isPotentiallyHazardousAsteroid)).append("\n");
    sb.append("    isSentryObject: ").append(toIndentedString(isSentryObject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameLimited: ").append(toIndentedString(nameLimited)).append("\n");
    sb.append("    nasaJplUrl: ").append(toIndentedString(nasaJplUrl)).append("\n");
    sb.append("    neoReferenceId: ").append(toIndentedString(neoReferenceId)).append("\n");
    sb.append("    orbitalData: ").append(toIndentedString(orbitalData)).append("\n");
    sb.append("    sentryData: ").append(toIndentedString(sentryData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absolute_magnitude_h");
    openapiFields.add("close_approach_data");
    openapiFields.add("designation");
    openapiFields.add("estimated_diameter");
    openapiFields.add("is_potentially_hazardous_asteroid");
    openapiFields.add("is_sentry_object");
    openapiFields.add("name");
    openapiFields.add("name_limited");
    openapiFields.add("nasa_jpl_url");
    openapiFields.add("neo_reference_id");
    openapiFields.add("orbital_data");
    openapiFields.add("sentry_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NearEarthObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NearEarthObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NearEarthObject is not found in the empty JSON string", NearEarthObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NearEarthObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NearEarthObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("close_approach_data") != null && !jsonObj.get("close_approach_data").isJsonNull()) {
        JsonArray jsonArraycloseApproachData = jsonObj.getAsJsonArray("close_approach_data");
        if (jsonArraycloseApproachData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("close_approach_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `close_approach_data` to be an array in the JSON string but got `%s`", jsonObj.get("close_approach_data").toString()));
          }

          // validate the optional field `close_approach_data` (array)
          for (int i = 0; i < jsonArraycloseApproachData.size(); i++) {
            CloseApproachData.validateJsonElement(jsonArraycloseApproachData.get(i));
          };
        }
      }
      if ((jsonObj.get("designation") != null && !jsonObj.get("designation").isJsonNull()) && !jsonObj.get("designation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `designation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("designation").toString()));
      }
      // validate the optional field `estimated_diameter`
      if (jsonObj.get("estimated_diameter") != null && !jsonObj.get("estimated_diameter").isJsonNull()) {
        EstimatedDiameterContainer.validateJsonElement(jsonObj.get("estimated_diameter"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_limited") != null && !jsonObj.get("name_limited").isJsonNull()) && !jsonObj.get("name_limited").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_limited` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_limited").toString()));
      }
      if ((jsonObj.get("nasa_jpl_url") != null && !jsonObj.get("nasa_jpl_url").isJsonNull()) && !jsonObj.get("nasa_jpl_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nasa_jpl_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nasa_jpl_url").toString()));
      }
      if ((jsonObj.get("neo_reference_id") != null && !jsonObj.get("neo_reference_id").isJsonNull()) && !jsonObj.get("neo_reference_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neo_reference_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neo_reference_id").toString()));
      }
      // validate the optional field `orbital_data`
      if (jsonObj.get("orbital_data") != null && !jsonObj.get("orbital_data").isJsonNull()) {
        OrbitalData.validateJsonElement(jsonObj.get("orbital_data"));
      }
      if ((jsonObj.get("sentry_data") != null && !jsonObj.get("sentry_data").isJsonNull()) && !jsonObj.get("sentry_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentry_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentry_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NearEarthObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NearEarthObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NearEarthObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NearEarthObject.class));

       return (TypeAdapter<T>) new TypeAdapter<NearEarthObject>() {
           @Override
           public void write(JsonWriter out, NearEarthObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NearEarthObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NearEarthObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NearEarthObject
   * @throws IOException if the JSON string is invalid with respect to NearEarthObject
   */
  public static NearEarthObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NearEarthObject.class);
  }

  /**
   * Convert an instance of NearEarthObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

