/*
 * NeoWs - (Near Earth Object Web Service)
 * A web service for near earth objects. All the data is from the <a href=\"http://neo.jpl.nasa.gov/\" target=\"_blank\">NASA JPL Asteroid team</a>.      NeoWs is proud to power AsteroidTracker on <a href=\"https://itunes.apple.com/us/app/asteroid-tracker/id689684901?mt=8\" target=\"_blank\">iOS</a> and <a href=\"https://play.google.com/store/apps/details?id=com.vitruviussoftware.bunifish.asteroidtracker&feature\" target=\"_blank\">Android</a> as well as related apps.    Follow us on <a href=\"https://twitter.com/AsteroidTracker\" target=\"_blank\">Twitter</a>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MissDistance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:15.882853-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MissDistance {
  public static final String SERIALIZED_NAME_ASTRONOMICAL = "astronomical";
  @SerializedName(SERIALIZED_NAME_ASTRONOMICAL)
  private String astronomical;

  public static final String SERIALIZED_NAME_KILOMETERS = "kilometers";
  @SerializedName(SERIALIZED_NAME_KILOMETERS)
  private String kilometers;

  public static final String SERIALIZED_NAME_LUNAR = "lunar";
  @SerializedName(SERIALIZED_NAME_LUNAR)
  private String lunar;

  public static final String SERIALIZED_NAME_MILES = "miles";
  @SerializedName(SERIALIZED_NAME_MILES)
  private String miles;

  public MissDistance() {
  }

  public MissDistance astronomical(String astronomical) {
    this.astronomical = astronomical;
    return this;
  }

  /**
   * Get astronomical
   * @return astronomical
   */
  @javax.annotation.Nullable
  public String getAstronomical() {
    return astronomical;
  }

  public void setAstronomical(String astronomical) {
    this.astronomical = astronomical;
  }


  public MissDistance kilometers(String kilometers) {
    this.kilometers = kilometers;
    return this;
  }

  /**
   * Get kilometers
   * @return kilometers
   */
  @javax.annotation.Nullable
  public String getKilometers() {
    return kilometers;
  }

  public void setKilometers(String kilometers) {
    this.kilometers = kilometers;
  }


  public MissDistance lunar(String lunar) {
    this.lunar = lunar;
    return this;
  }

  /**
   * Get lunar
   * @return lunar
   */
  @javax.annotation.Nullable
  public String getLunar() {
    return lunar;
  }

  public void setLunar(String lunar) {
    this.lunar = lunar;
  }


  public MissDistance miles(String miles) {
    this.miles = miles;
    return this;
  }

  /**
   * Get miles
   * @return miles
   */
  @javax.annotation.Nullable
  public String getMiles() {
    return miles;
  }

  public void setMiles(String miles) {
    this.miles = miles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MissDistance missDistance = (MissDistance) o;
    return Objects.equals(this.astronomical, missDistance.astronomical) &&
        Objects.equals(this.kilometers, missDistance.kilometers) &&
        Objects.equals(this.lunar, missDistance.lunar) &&
        Objects.equals(this.miles, missDistance.miles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(astronomical, kilometers, lunar, miles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MissDistance {\n");
    sb.append("    astronomical: ").append(toIndentedString(astronomical)).append("\n");
    sb.append("    kilometers: ").append(toIndentedString(kilometers)).append("\n");
    sb.append("    lunar: ").append(toIndentedString(lunar)).append("\n");
    sb.append("    miles: ").append(toIndentedString(miles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("astronomical");
    openapiFields.add("kilometers");
    openapiFields.add("lunar");
    openapiFields.add("miles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MissDistance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MissDistance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MissDistance is not found in the empty JSON string", MissDistance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MissDistance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MissDistance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("astronomical") != null && !jsonObj.get("astronomical").isJsonNull()) && !jsonObj.get("astronomical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `astronomical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("astronomical").toString()));
      }
      if ((jsonObj.get("kilometers") != null && !jsonObj.get("kilometers").isJsonNull()) && !jsonObj.get("kilometers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kilometers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kilometers").toString()));
      }
      if ((jsonObj.get("lunar") != null && !jsonObj.get("lunar").isJsonNull()) && !jsonObj.get("lunar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lunar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lunar").toString()));
      }
      if ((jsonObj.get("miles") != null && !jsonObj.get("miles").isJsonNull()) && !jsonObj.get("miles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `miles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("miles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MissDistance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MissDistance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MissDistance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MissDistance.class));

       return (TypeAdapter<T>) new TypeAdapter<MissDistance>() {
           @Override
           public void write(JsonWriter out, MissDistance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MissDistance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MissDistance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MissDistance
   * @throws IOException if the JSON string is invalid with respect to MissDistance
   */
  public static MissDistance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MissDistance.class);
  }

  /**
   * Convert an instance of MissDistance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

