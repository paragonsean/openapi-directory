/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorSchema from '../model/ErrorSchema';
import ObjectSchema from '../model/ObjectSchema';
import Schema3 from '../model/Schema3';

/**
* Records service.
* @module api/RecordsApi
* @version 1.22
*/
export default class RecordsApi {

    /**
    * Constructs a new RecordsApi. 
    * @alias module:api/RecordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRecord operation.
     * @callback module:api/RecordsApi~getRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bucketId 
     * @param {String} collectionId 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] 
     * @param {String} [ifMatch] 
     * @param {String} [ifNoneMatch] 
     * @param {module:api/RecordsApi~getRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectSchema}
     */
    getRecord(bucketId, collectionId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketId' is set
      if (bucketId === undefined || bucketId === null) {
        throw new Error("Missing the required parameter 'bucketId' when calling getRecord");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getRecord");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecord");
      }

      let pathParams = {
        'bucket_id': bucketId,
        'collection_id': collectionId,
        'id': id
      };
      let queryParams = {
        '_fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectSchema;
      return this.apiClient.callApi(
        '/buckets/{bucket_id}/collections/{collection_id}/records/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords operation.
     * @callback module:api/RecordsApi~getRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schema3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} bucketId 
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Array.<String>} [sort] 
     * @param {String} [token] 
     * @param {Number} [since] 
     * @param {Number} [to] 
     * @param {Number} [before] 
     * @param {String} [id] 
     * @param {Number} [lastModified] 
     * @param {Array.<String>} [fields] 
     * @param {String} [ifMatch] 
     * @param {String} [ifNoneMatch] 
     * @param {module:api/RecordsApi~getRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schema3}
     */
    getRecords(bucketId, collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucketId' is set
      if (bucketId === undefined || bucketId === null) {
        throw new Error("Missing the required parameter 'bucketId' when calling getRecords");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getRecords");
      }

      let pathParams = {
        'bucket_id': bucketId,
        'collection_id': collectionId
      };
      let queryParams = {
        '_limit': opts['limit'],
        '_sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        '_token': opts['token'],
        '_since': opts['since'],
        '_to': opts['to'],
        '_before': opts['before'],
        'id': opts['id'],
        'last_modified': opts['lastModified'],
        '_fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schema3;
      return this.apiClient.callApi(
        '/buckets/{bucket_id}/collections/{collection_id}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
