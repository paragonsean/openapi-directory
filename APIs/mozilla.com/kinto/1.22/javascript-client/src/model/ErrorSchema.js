/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorSchema model module.
 * @module model/ErrorSchema
 * @version 1.22
 */
class ErrorSchema {
    /**
     * Constructs a new <code>ErrorSchema</code>.
     * @alias module:model/ErrorSchema
     * @param code {Number} 
     * @param errno {Number} 
     * @param error {String} 
     */
    constructor(code, errno, error) { 
        
        ErrorSchema.initialize(this, code, errno, error);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, errno, error) { 
        obj['code'] = code;
        obj['errno'] = errno;
        obj['error'] = error;
    }

    /**
     * Constructs a <code>ErrorSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorSchema} obj Optional instance to populate.
     * @return {module:model/ErrorSchema} The populated <code>ErrorSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorSchema();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], Object);
            }
            if (data.hasOwnProperty('errno')) {
                obj['errno'] = ApiClient.convertToType(data['errno'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}

ErrorSchema.RequiredProperties = ["code", "errno", "error"];

/**
 * @member {Number} code
 */
ErrorSchema.prototype['code'] = undefined;

/**
 * @member {Object} details
 */
ErrorSchema.prototype['details'] = undefined;

/**
 * @member {Number} errno
 */
ErrorSchema.prototype['errno'] = undefined;

/**
 * @member {String} error
 */
ErrorSchema.prototype['error'] = undefined;

/**
 * @member {String} info
 */
ErrorSchema.prototype['info'] = undefined;

/**
 * @member {String} message
 */
ErrorSchema.prototype['message'] = undefined;






export default ErrorSchema;

