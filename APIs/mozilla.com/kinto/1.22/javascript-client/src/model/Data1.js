/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Data1 model module.
 * @module model/Data1
 * @version 1.22
 */
class Data1 {
    /**
     * Constructs a new <code>Data1</code>.
     * @alias module:model/Data1
     * @param bucket {String} 
     * @param collection {String} 
     * @param host {String} 
     */
    constructor(bucket, collection, host) { 
        
        Data1.initialize(this, bucket, collection, host);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucket, collection, host) { 
        obj['bucket'] = bucket;
        obj['collection'] = collection;
        obj['host'] = host;
    }

    /**
     * Constructs a <code>Data1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data1} obj Optional instance to populate.
     * @return {module:model/Data1} The populated <code>Data1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data1();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('collection')) {
                obj['collection'] = ApiClient.convertToType(data['collection'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Data1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Data1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Data1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['collection'] && !(typeof data['collection'] === 'string' || data['collection'] instanceof String)) {
            throw new Error("Expected the field `collection` to be a primitive type in the JSON string but got " + data['collection']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }

        return true;
    }


}

Data1.RequiredProperties = ["bucket", "collection", "host"];

/**
 * @member {String} bucket
 */
Data1.prototype['bucket'] = undefined;

/**
 * @member {String} collection
 */
Data1.prototype['collection'] = undefined;

/**
 * @member {String} host
 */
Data1.prototype['host'] = undefined;






export default Data1;

