/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Data model module.
 * @module model/Data
 * @version 1.22
 */
class Data {
    /**
     * Constructs a new <code>Data</code>.
     * @alias module:model/Data
     * @extends Object
     */
    constructor() { 
        
        Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data} obj Optional instance to populate.
     * @return {module:model/Data} The populated <code>Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('collection:schema')) {
                obj['collection:schema'] = ApiClient.convertToType(data['collection:schema'], {'String': Object});
            }
            if (data.hasOwnProperty('group:schema')) {
                obj['group:schema'] = ApiClient.convertToType(data['group:schema'], {'String': Object});
            }
            if (data.hasOwnProperty('record:schema')) {
                obj['record:schema'] = ApiClient.convertToType(data['record:schema'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Data</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Data</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Object.<String, Object>} collection:schema
 */
Data.prototype['collection:schema'] = undefined;

/**
 * @member {Object.<String, Object>} group:schema
 */
Data.prototype['group:schema'] = undefined;

/**
 * @member {Object.<String, Object>} record:schema
 */
Data.prototype['record:schema'] = undefined;






export default Data;

