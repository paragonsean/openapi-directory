/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponses_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponses_inner::OAIResponses_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponses_inner::OAIResponses_inner() {
    this->initializeModel();
}

OAIResponses_inner::~OAIResponses_inner() {}

void OAIResponses_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIResponses_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponses_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIResponses_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponses_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body.size() > 0) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIResponses_inner::getBody() const {
    return m_body;
}
void OAIResponses_inner::setBody(const QMap<QString, QJsonValue> &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIResponses_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIResponses_inner::is_body_Valid() const{
    return m_body_isValid;
}

QMap<QString, QJsonValue> OAIResponses_inner::getHeaders() const {
    return m_headers;
}
void OAIResponses_inner::setHeaders(const QMap<QString, QJsonValue> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIResponses_inner::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIResponses_inner::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIResponses_inner::getPath() const {
    return m_path;
}
void OAIResponses_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIResponses_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIResponses_inner::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIResponses_inner::getStatus() const {
    return m_status;
}
void OAIResponses_inner::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResponses_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResponses_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIResponses_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponses_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
