/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData::OAIData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData::OAIData() {
    this->initializeModel();
}

OAIData::~OAIData() {}

void OAIData::initializeModel() {

    m_collectionschema_isSet = false;
    m_collectionschema_isValid = false;

    m_groupschema_isSet = false;
    m_groupschema_isValid = false;

    m_recordschema_isSet = false;
    m_recordschema_isValid = false;
}

void OAIData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData::fromJsonObject(QJsonObject json) {

    m_collectionschema_isValid = ::OpenAPI::fromJsonValue(m_collectionschema, json[QString("collection:schema")]);
    m_collectionschema_isSet = !json[QString("collection:schema")].isNull() && m_collectionschema_isValid;

    m_groupschema_isValid = ::OpenAPI::fromJsonValue(m_groupschema, json[QString("group:schema")]);
    m_groupschema_isSet = !json[QString("group:schema")].isNull() && m_groupschema_isValid;

    m_recordschema_isValid = ::OpenAPI::fromJsonValue(m_recordschema, json[QString("record:schema")]);
    m_recordschema_isSet = !json[QString("record:schema")].isNull() && m_recordschema_isValid;
}

QString OAIData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData::asJsonObject() const {
    QJsonObject obj;
    if (m_collectionschema.size() > 0) {
        obj.insert(QString("collection:schema"), ::OpenAPI::toJsonValue(m_collectionschema));
    }
    if (m_groupschema.size() > 0) {
        obj.insert(QString("group:schema"), ::OpenAPI::toJsonValue(m_groupschema));
    }
    if (m_recordschema.size() > 0) {
        obj.insert(QString("record:schema"), ::OpenAPI::toJsonValue(m_recordschema));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIData::getCollectionschema() const {
    return m_collectionschema;
}
void OAIData::setCollectionschema(const QMap<QString, QJsonValue> &collectionschema) {
    m_collectionschema = collectionschema;
    m_collectionschema_isSet = true;
}

bool OAIData::is_collectionschema_Set() const{
    return m_collectionschema_isSet;
}

bool OAIData::is_collectionschema_Valid() const{
    return m_collectionschema_isValid;
}

QMap<QString, QJsonValue> OAIData::getGroupschema() const {
    return m_groupschema;
}
void OAIData::setGroupschema(const QMap<QString, QJsonValue> &groupschema) {
    m_groupschema = groupschema;
    m_groupschema_isSet = true;
}

bool OAIData::is_groupschema_Set() const{
    return m_groupschema_isSet;
}

bool OAIData::is_groupschema_Valid() const{
    return m_groupschema_isValid;
}

QMap<QString, QJsonValue> OAIData::getRecordschema() const {
    return m_recordschema;
}
void OAIData::setRecordschema(const QMap<QString, QJsonValue> &recordschema) {
    m_recordschema = recordschema;
    m_recordschema_isSet = true;
}

bool OAIData::is_recordschema_Set() const{
    return m_recordschema_isSet;
}

bool OAIData::is_recordschema_Valid() const{
    return m_recordschema_isValid;
}

bool OAIData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collectionschema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupschema.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recordschema.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
