/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData_1::OAIData_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData_1::OAIData_1() {
    this->initializeModel();
}

OAIData_1::~OAIData_1() {}

void OAIData_1::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;
}

void OAIData_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData_1::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("collection")]);
    m_collection_isSet = !json[QString("collection")].isNull() && m_collection_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;
}

QString OAIData_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData_1::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_collection_isSet) {
        obj.insert(QString("collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    return obj;
}

QString OAIData_1::getBucket() const {
    return m_bucket;
}
void OAIData_1::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIData_1::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIData_1::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIData_1::getCollection() const {
    return m_collection;
}
void OAIData_1::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIData_1::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIData_1::is_collection_Valid() const{
    return m_collection_isValid;
}

QString OAIData_1::getHost() const {
    return m_host;
}
void OAIData_1::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIData_1::is_host_Set() const{
    return m_host_isSet;
}

bool OAIData_1::is_host_Valid() const{
    return m_host_isValid;
}

bool OAIData_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_collection_isValid && m_host_isValid && true;
}

} // namespace OpenAPI
