/**
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUtilitiesApi_H
#define OAI_OAIUtilitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUtilitiesApi : public QObject {
    Q_OBJECT

public:
    OAIUtilitiesApi(const int timeOut = 0);
    ~OAIUtilitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void contribute();


    virtual void getOpenapiSpec();


    virtual void heartbeat();


    virtual void lbheartbeat();


    virtual void serverInfo();


    virtual void version();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void contributeCallback(OAIHttpRequestWorker *worker);
    void getOpenapiSpecCallback(OAIHttpRequestWorker *worker);
    void heartbeatCallback(OAIHttpRequestWorker *worker);
    void lbheartbeatCallback(OAIHttpRequestWorker *worker);
    void serverInfoCallback(OAIHttpRequestWorker *worker);
    void versionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void contributeSignal(QMap<QString, QJsonValue> summary);
    void getOpenapiSpecSignal(QMap<QString, QJsonValue> summary);
    void heartbeatSignal(QMap<QString, QJsonValue> summary);
    void lbheartbeatSignal(OAIObject summary);
    void serverInfoSignal(QMap<QString, QJsonValue> summary);
    void versionSignal(QMap<QString, QJsonValue> summary);


    void contributeSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void getOpenapiSpecSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void heartbeatSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void lbheartbeatSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void serverInfoSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void versionSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);

    Q_DECL_DEPRECATED_X("Use contributeSignalError() instead")
    void contributeSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void contributeSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpenapiSpecSignalError() instead")
    void getOpenapiSpecSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpenapiSpecSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartbeatSignalError() instead")
    void heartbeatSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void heartbeatSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lbheartbeatSignalError() instead")
    void lbheartbeatSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lbheartbeatSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverInfoSignalError() instead")
    void serverInfoSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverInfoSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionSignalError() instead")
    void versionSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void versionSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use contributeSignalErrorFull() instead")
    void contributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void contributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOpenapiSpecSignalErrorFull() instead")
    void getOpenapiSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOpenapiSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heartbeatSignalErrorFull() instead")
    void heartbeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heartbeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lbheartbeatSignalErrorFull() instead")
    void lbheartbeatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lbheartbeatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverInfoSignalErrorFull() instead")
    void serverInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use versionSignalErrorFull() instead")
    void versionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void versionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
