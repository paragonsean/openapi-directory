/*
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.ObjectSchema3;
import io.swagger.v3.oas.annotations.media.Schema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BucketsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BucketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BucketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBucket
     * @param id  (required)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the target object. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The object does not exist or was deleted. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBucketCall(String id, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "_fields", fields));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBucketValidateBeforeCall(String id, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBucket(Async)");
        }

        return getBucketCall(id, fields, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @return ObjectSchema3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the target object. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The object does not exist or was deleted. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ObjectSchema3 getBucket(String id, List<String> fields, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<ObjectSchema3> localVarResp = getBucketWithHttpInfo(id, fields, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;ObjectSchema3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the target object. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The object does not exist or was deleted. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectSchema3> getBucketWithHttpInfo(String id, List<String> fields, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getBucketValidateBeforeCall(id, fields, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<ObjectSchema3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the target object. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The object does not exist or was deleted. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBucketAsync(String id, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback<ObjectSchema3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBucketValidateBeforeCall(id, fields, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<ObjectSchema3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBuckets
     * @param limit  (optional)
     * @param sort  (optional)
     * @param token  (optional)
     * @param since  (optional)
     * @param to  (optional)
     * @param before  (optional)
     * @param id  (optional)
     * @param lastModified  (optional)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a list of matching objects. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBucketsCall(Integer limit, List<String> sort, String token, Integer since, Integer to, Integer before, String id, Integer lastModified, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_limit", limit));
        }

        if (sort != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "_sort", sort));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_token", token));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_since", since));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_to", to));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_before", before));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (lastModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_modified", lastModified));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "_fields", fields));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBucketsValidateBeforeCall(Integer limit, List<String> sort, String token, Integer since, Integer to, Integer before, String id, Integer lastModified, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return getBucketsCall(limit, sort, token, since, to, before, id, lastModified, fields, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param sort  (optional)
     * @param token  (optional)
     * @param since  (optional)
     * @param to  (optional)
     * @param before  (optional)
     * @param id  (optional)
     * @param lastModified  (optional)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a list of matching objects. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public Schema getBuckets(Integer limit, List<String> sort, String token, Integer since, Integer to, Integer before, String id, Integer lastModified, List<String> fields, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Schema> localVarResp = getBucketsWithHttpInfo(limit, sort, token, since, to, before, id, lastModified, fields, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit  (optional)
     * @param sort  (optional)
     * @param token  (optional)
     * @param since  (optional)
     * @param to  (optional)
     * @param before  (optional)
     * @param id  (optional)
     * @param lastModified  (optional)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a list of matching objects. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> getBucketsWithHttpInfo(Integer limit, List<String> sort, String token, Integer since, Integer to, Integer before, String id, Integer lastModified, List<String> fields, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = getBucketsValidateBeforeCall(limit, sort, token, since, to, before, id, lastModified, fields, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit  (optional)
     * @param sort  (optional)
     * @param token  (optional)
     * @param since  (optional)
     * @param to  (optional)
     * @param before  (optional)
     * @param id  (optional)
     * @param lastModified  (optional)
     * @param fields  (optional)
     * @param ifMatch  (optional)
     * @param ifNoneMatch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a list of matching objects. </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 304 </td><td> Reponse has not changed since value in If-None-Match header </td><td>  * Etag -  <br>  * Last-Modified -  <br>  </td></tr>
        <tr><td> 400 </td><td> The request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The request is missing authentication headers. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user is not allowed to perform the operation, or the resource is not accessible. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The client doesn&#39;t accept supported responses Content-Type. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Object was changed or deleted since value in &#x60;If-Match&#x60; header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBucketsAsync(Integer limit, List<String> sort, String token, Integer since, Integer to, Integer before, String id, Integer lastModified, List<String> fields, String ifMatch, String ifNoneMatch, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBucketsValidateBeforeCall(limit, sort, token, since, to, before, id, lastModified, fields, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
