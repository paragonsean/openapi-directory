/*
 * Remote Settings PROD
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permissions2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:20.588855-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Permissions2 {
  public static final String SERIALIZED_NAME_COLLECTION_COLON_CREATE = "collection:create";
  @SerializedName(SERIALIZED_NAME_COLLECTION_COLON_CREATE)
  private List<String> collectionColonCreate = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_COLON_CREATE = "group:create";
  @SerializedName(SERIALIZED_NAME_GROUP_COLON_CREATE)
  private List<String> groupColonCreate = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private List<String> read = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE = "write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private List<String> write = new ArrayList<>();

  public Permissions2() {
  }

  public Permissions2 collectionColonCreate(List<String> collectionColonCreate) {
    this.collectionColonCreate = collectionColonCreate;
    return this;
  }

  public Permissions2 addCollectionColonCreateItem(String collectionColonCreateItem) {
    if (this.collectionColonCreate == null) {
      this.collectionColonCreate = new ArrayList<>();
    }
    this.collectionColonCreate.add(collectionColonCreateItem);
    return this;
  }

  /**
   * Get collectionColonCreate
   * @return collectionColonCreate
   */
  @javax.annotation.Nullable
  public List<String> getCollectionColonCreate() {
    return collectionColonCreate;
  }

  public void setCollectionColonCreate(List<String> collectionColonCreate) {
    this.collectionColonCreate = collectionColonCreate;
  }


  public Permissions2 groupColonCreate(List<String> groupColonCreate) {
    this.groupColonCreate = groupColonCreate;
    return this;
  }

  public Permissions2 addGroupColonCreateItem(String groupColonCreateItem) {
    if (this.groupColonCreate == null) {
      this.groupColonCreate = new ArrayList<>();
    }
    this.groupColonCreate.add(groupColonCreateItem);
    return this;
  }

  /**
   * Get groupColonCreate
   * @return groupColonCreate
   */
  @javax.annotation.Nullable
  public List<String> getGroupColonCreate() {
    return groupColonCreate;
  }

  public void setGroupColonCreate(List<String> groupColonCreate) {
    this.groupColonCreate = groupColonCreate;
  }


  public Permissions2 read(List<String> read) {
    this.read = read;
    return this;
  }

  public Permissions2 addReadItem(String readItem) {
    if (this.read == null) {
      this.read = new ArrayList<>();
    }
    this.read.add(readItem);
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public List<String> getRead() {
    return read;
  }

  public void setRead(List<String> read) {
    this.read = read;
  }


  public Permissions2 write(List<String> write) {
    this.write = write;
    return this;
  }

  public Permissions2 addWriteItem(String writeItem) {
    if (this.write == null) {
      this.write = new ArrayList<>();
    }
    this.write.add(writeItem);
    return this;
  }

  /**
   * Get write
   * @return write
   */
  @javax.annotation.Nullable
  public List<String> getWrite() {
    return write;
  }

  public void setWrite(List<String> write) {
    this.write = write;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permissions2 permissions2 = (Permissions2) o;
    return Objects.equals(this.collectionColonCreate, permissions2.collectionColonCreate) &&
        Objects.equals(this.groupColonCreate, permissions2.groupColonCreate) &&
        Objects.equals(this.read, permissions2.read) &&
        Objects.equals(this.write, permissions2.write);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionColonCreate, groupColonCreate, read, write);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permissions2 {\n");
    sb.append("    collectionColonCreate: ").append(toIndentedString(collectionColonCreate)).append("\n");
    sb.append("    groupColonCreate: ").append(toIndentedString(groupColonCreate)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collection:create");
    openapiFields.add("group:create");
    openapiFields.add("read");
    openapiFields.add("write");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Permissions2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permissions2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permissions2 is not found in the empty JSON string", Permissions2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permissions2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permissions2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("collection:create") != null && !jsonObj.get("collection:create").isJsonNull() && !jsonObj.get("collection:create").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection:create` to be an array in the JSON string but got `%s`", jsonObj.get("collection:create").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group:create") != null && !jsonObj.get("group:create").isJsonNull() && !jsonObj.get("group:create").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group:create` to be an array in the JSON string but got `%s`", jsonObj.get("group:create").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("read") != null && !jsonObj.get("read").isJsonNull() && !jsonObj.get("read").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `read` to be an array in the JSON string but got `%s`", jsonObj.get("read").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("write") != null && !jsonObj.get("write").isJsonNull() && !jsonObj.get("write").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `write` to be an array in the JSON string but got `%s`", jsonObj.get("write").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permissions2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permissions2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permissions2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permissions2.class));

       return (TypeAdapter<T>) new TypeAdapter<Permissions2>() {
           @Override
           public void write(JsonWriter out, Permissions2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permissions2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Permissions2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Permissions2
   * @throws IOException if the JSON string is invalid with respect to Permissions2
   */
  public static Permissions2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permissions2.class);
  }

  /**
   * Convert an instance of Permissions2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

