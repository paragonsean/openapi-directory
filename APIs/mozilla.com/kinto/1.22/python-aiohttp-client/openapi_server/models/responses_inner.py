# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponsesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: Dict[str, object]=None, headers: Dict[str, object]=None, path: str=None, status: int=None):
        """ResponsesInner - a model defined in OpenAPI

        :param body: The body of this ResponsesInner.
        :param headers: The headers of this ResponsesInner.
        :param path: The path of this ResponsesInner.
        :param status: The status of this ResponsesInner.
        """
        self.openapi_types = {
            'body': Dict[str, object],
            'headers': Dict[str, object],
            'path': str,
            'status': int
        }

        self.attribute_map = {
            'body': 'body',
            'headers': 'headers',
            'path': 'path',
            'status': 'status'
        }

        self._body = body
        self._headers = headers
        self._path = path
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponsesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Responses_inner of this ResponsesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ResponsesInner.


        :return: The body of this ResponsesInner.
        :rtype: Dict[str, object]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ResponsesInner.


        :param body: The body of this ResponsesInner.
        :type body: Dict[str, object]
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this ResponsesInner.


        :return: The headers of this ResponsesInner.
        :rtype: Dict[str, object]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ResponsesInner.


        :param headers: The headers of this ResponsesInner.
        :type headers: Dict[str, object]
        """

        self._headers = headers

    @property
    def path(self):
        """Gets the path of this ResponsesInner.


        :return: The path of this ResponsesInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ResponsesInner.


        :param path: The path of this ResponsesInner.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def status(self):
        """Gets the status of this ResponsesInner.


        :return: The status of this ResponsesInner.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponsesInner.


        :param status: The status of this ResponsesInner.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
