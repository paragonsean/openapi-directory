# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Data(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collectionschema: Dict[str, object]=None, groupschema: Dict[str, object]=None, recordschema: Dict[str, object]=None):
        """Data - a model defined in OpenAPI

        :param collectionschema: The collectionschema of this Data.
        :param groupschema: The groupschema of this Data.
        :param recordschema: The recordschema of this Data.
        """
        self.openapi_types = {
            'collectionschema': Dict[str, object],
            'groupschema': Dict[str, object],
            'recordschema': Dict[str, object]
        }

        self.attribute_map = {
            'collectionschema': 'collection:schema',
            'groupschema': 'group:schema',
            'recordschema': 'record:schema'
        }

        self._collectionschema = collectionschema
        self._groupschema = groupschema
        self._recordschema = recordschema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data of this Data.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collectionschema(self):
        """Gets the collectionschema of this Data.


        :return: The collectionschema of this Data.
        :rtype: Dict[str, object]
        """
        return self._collectionschema

    @collectionschema.setter
    def collectionschema(self, collectionschema):
        """Sets the collectionschema of this Data.


        :param collectionschema: The collectionschema of this Data.
        :type collectionschema: Dict[str, object]
        """

        self._collectionschema = collectionschema

    @property
    def groupschema(self):
        """Gets the groupschema of this Data.


        :return: The groupschema of this Data.
        :rtype: Dict[str, object]
        """
        return self._groupschema

    @groupschema.setter
    def groupschema(self, groupschema):
        """Sets the groupschema of this Data.


        :param groupschema: The groupschema of this Data.
        :type groupschema: Dict[str, object]
        """

        self._groupschema = groupschema

    @property
    def recordschema(self):
        """Gets the recordschema of this Data.


        :return: The recordschema of this Data.
        :rtype: Dict[str, object]
        """
        return self._recordschema

    @recordschema.setter
    def recordschema(self, recordschema):
        """Sets the recordschema of this Data.


        :param recordschema: The recordschema of this Data.
        :type recordschema: Dict[str, object]
        """

        self._recordschema = recordschema
