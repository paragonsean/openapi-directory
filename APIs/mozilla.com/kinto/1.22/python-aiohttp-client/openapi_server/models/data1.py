# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Data1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, collection: str=None, host: str=None):
        """Data1 - a model defined in OpenAPI

        :param bucket: The bucket of this Data1.
        :param collection: The collection of this Data1.
        :param host: The host of this Data1.
        """
        self.openapi_types = {
            'bucket': str,
            'collection': str,
            'host': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'collection': 'collection',
            'host': 'host'
        }

        self._bucket = bucket
        self._collection = collection
        self._host = host

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Data1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Data_1 of this Data1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this Data1.


        :return: The bucket of this Data1.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Data1.


        :param bucket: The bucket of this Data1.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket

    @property
    def collection(self):
        """Gets the collection of this Data1.


        :return: The collection of this Data1.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Data1.


        :param collection: The collection of this Data1.
        :type collection: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")

        self._collection = collection

    @property
    def host(self):
        """Gets the host of this Data1.


        :return: The host of this Data1.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Data1.


        :param host: The host of this Data1.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host
