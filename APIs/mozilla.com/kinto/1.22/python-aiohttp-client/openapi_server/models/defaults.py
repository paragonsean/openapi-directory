# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Defaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: Dict[str, object]=None, headers: Dict[str, object]=None, method: str=None, path: str=None):
        """Defaults - a model defined in OpenAPI

        :param body: The body of this Defaults.
        :param headers: The headers of this Defaults.
        :param method: The method of this Defaults.
        :param path: The path of this Defaults.
        """
        self.openapi_types = {
            'body': Dict[str, object],
            'headers': Dict[str, object],
            'method': str,
            'path': str
        }

        self.attribute_map = {
            'body': 'body',
            'headers': 'headers',
            'method': 'method',
            'path': 'path'
        }

        self._body = body
        self._headers = headers
        self._method = method
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Defaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Defaults of this Defaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Defaults.


        :return: The body of this Defaults.
        :rtype: Dict[str, object]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Defaults.


        :param body: The body of this Defaults.
        :type body: Dict[str, object]
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this Defaults.


        :return: The headers of this Defaults.
        :rtype: Dict[str, object]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Defaults.


        :param headers: The headers of this Defaults.
        :type headers: Dict[str, object]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this Defaults.


        :return: The method of this Defaults.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Defaults.


        :param method: The method of this Defaults.
        :type method: str
        """
        allowed_values = ["GET", "HEAD", "DELETE", "TRACE", "POST", "PUT", "PATCH"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def path(self):
        """Gets the path of this Defaults.


        :return: The path of this Defaults.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Defaults.


        :param path: The path of this Defaults.
        :type path: str
        """
        if path is not None and not re.search(r'^\/', path):
            raise ValueError("Invalid value for `path`, must be a follow pattern or equal to `/^\//`")

        self._path = path
