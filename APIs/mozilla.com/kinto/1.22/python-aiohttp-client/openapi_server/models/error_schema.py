# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, details: object=None, errno: int=None, error: str=None, info: str=None, message: str=None):
        """ErrorSchema - a model defined in OpenAPI

        :param code: The code of this ErrorSchema.
        :param details: The details of this ErrorSchema.
        :param errno: The errno of this ErrorSchema.
        :param error: The error of this ErrorSchema.
        :param info: The info of this ErrorSchema.
        :param message: The message of this ErrorSchema.
        """
        self.openapi_types = {
            'code': int,
            'details': object,
            'errno': int,
            'error': str,
            'info': str,
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'details': 'details',
            'errno': 'errno',
            'error': 'error',
            'info': 'info',
            'message': 'message'
        }

        self._code = code
        self._details = details
        self._errno = errno
        self._error = error
        self._info = info
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorSchema of this ErrorSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorSchema.


        :return: The code of this ErrorSchema.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorSchema.


        :param code: The code of this ErrorSchema.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this ErrorSchema.


        :return: The details of this ErrorSchema.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorSchema.


        :param details: The details of this ErrorSchema.
        :type details: object
        """

        self._details = details

    @property
    def errno(self):
        """Gets the errno of this ErrorSchema.


        :return: The errno of this ErrorSchema.
        :rtype: int
        """
        return self._errno

    @errno.setter
    def errno(self, errno):
        """Sets the errno of this ErrorSchema.


        :param errno: The errno of this ErrorSchema.
        :type errno: int
        """
        if errno is None:
            raise ValueError("Invalid value for `errno`, must not be `None`")

        self._errno = errno

    @property
    def error(self):
        """Gets the error of this ErrorSchema.


        :return: The error of this ErrorSchema.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorSchema.


        :param error: The error of this ErrorSchema.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def info(self):
        """Gets the info of this ErrorSchema.


        :return: The info of this ErrorSchema.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ErrorSchema.


        :param info: The info of this ErrorSchema.
        :type info: str
        """

        self._info = info

    @property
    def message(self):
        """Gets the message of this ErrorSchema.


        :return: The message of this ErrorSchema.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorSchema.


        :param message: The message of this ErrorSchema.
        :type message: str
        """

        self._message = message
