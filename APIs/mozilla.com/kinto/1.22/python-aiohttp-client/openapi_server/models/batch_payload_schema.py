# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.defaults import Defaults
from openapi_server.models.requests_inner import RequestsInner
from openapi_server import util


class BatchPayloadSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, defaults: Defaults=None, requests: List[RequestsInner]=None):
        """BatchPayloadSchema - a model defined in OpenAPI

        :param defaults: The defaults of this BatchPayloadSchema.
        :param requests: The requests of this BatchPayloadSchema.
        """
        self.openapi_types = {
            'defaults': Defaults,
            'requests': List[RequestsInner]
        }

        self.attribute_map = {
            'defaults': 'defaults',
            'requests': 'requests'
        }

        self._defaults = defaults
        self._requests = requests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPayloadSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPayloadSchema of this BatchPayloadSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def defaults(self):
        """Gets the defaults of this BatchPayloadSchema.


        :return: The defaults of this BatchPayloadSchema.
        :rtype: Defaults
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this BatchPayloadSchema.


        :param defaults: The defaults of this BatchPayloadSchema.
        :type defaults: Defaults
        """

        self._defaults = defaults

    @property
    def requests(self):
        """Gets the requests of this BatchPayloadSchema.


        :return: The requests of this BatchPayloadSchema.
        :rtype: List[RequestsInner]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this BatchPayloadSchema.


        :param requests: The requests of this BatchPayloadSchema.
        :type requests: List[RequestsInner]
        """
        if requests is None:
            raise ValueError("Invalid value for `requests`, must not be `None`")

        self._requests = requests
