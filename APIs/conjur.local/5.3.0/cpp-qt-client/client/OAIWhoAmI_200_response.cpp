/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhoAmI_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhoAmI_200_response::OAIWhoAmI_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhoAmI_200_response::OAIWhoAmI_200_response() {
    this->initializeModel();
}

OAIWhoAmI_200_response::~OAIWhoAmI_200_response() {}

void OAIWhoAmI_200_response::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_token_issued_at_isSet = false;
    m_token_issued_at_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWhoAmI_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhoAmI_200_response::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("client_ip")]);
    m_client_ip_isSet = !json[QString("client_ip")].isNull() && m_client_ip_isValid;

    m_token_issued_at_isValid = ::OpenAPI::fromJsonValue(m_token_issued_at, json[QString("token_issued_at")]);
    m_token_issued_at_isSet = !json[QString("token_issued_at")].isNull() && m_token_issued_at_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWhoAmI_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhoAmI_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("client_ip"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_token_issued_at_isSet) {
        obj.insert(QString("token_issued_at"), ::OpenAPI::toJsonValue(m_token_issued_at));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIWhoAmI_200_response::getAccount() const {
    return m_account;
}
void OAIWhoAmI_200_response::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIWhoAmI_200_response::is_account_Set() const{
    return m_account_isSet;
}

bool OAIWhoAmI_200_response::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIWhoAmI_200_response::getClientIp() const {
    return m_client_ip;
}
void OAIWhoAmI_200_response::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAIWhoAmI_200_response::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAIWhoAmI_200_response::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

QString OAIWhoAmI_200_response::getTokenIssuedAt() const {
    return m_token_issued_at;
}
void OAIWhoAmI_200_response::setTokenIssuedAt(const QString &token_issued_at) {
    m_token_issued_at = token_issued_at;
    m_token_issued_at_isSet = true;
}

bool OAIWhoAmI_200_response::is_token_issued_at_Set() const{
    return m_token_issued_at_isSet;
}

bool OAIWhoAmI_200_response::is_token_issued_at_Valid() const{
    return m_token_issued_at_isValid;
}

QString OAIWhoAmI_200_response::getUserAgent() const {
    return m_user_agent;
}
void OAIWhoAmI_200_response::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIWhoAmI_200_response::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIWhoAmI_200_response::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAIWhoAmI_200_response::getUsername() const {
    return m_username;
}
void OAIWhoAmI_200_response::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWhoAmI_200_response::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWhoAmI_200_response::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWhoAmI_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhoAmI_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
