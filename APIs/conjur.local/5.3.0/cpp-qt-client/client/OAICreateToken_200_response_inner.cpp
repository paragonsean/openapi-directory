/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateToken_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateToken_200_response_inner::OAICreateToken_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateToken_200_response_inner::OAICreateToken_200_response_inner() {
    this->initializeModel();
}

OAICreateToken_200_response_inner::~OAICreateToken_200_response_inner() {}

void OAICreateToken_200_response_inner::initializeModel() {

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAICreateToken_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateToken_200_response_inner::fromJsonObject(QJsonObject json) {

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAICreateToken_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateToken_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr.size() > 0) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QList<QString> OAICreateToken_200_response_inner::getCidr() const {
    return m_cidr;
}
void OAICreateToken_200_response_inner::setCidr(const QList<QString> &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAICreateToken_200_response_inner::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAICreateToken_200_response_inner::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAICreateToken_200_response_inner::getExpiration() const {
    return m_expiration;
}
void OAICreateToken_200_response_inner::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAICreateToken_200_response_inner::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAICreateToken_200_response_inner::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAICreateToken_200_response_inner::getToken() const {
    return m_token;
}
void OAICreateToken_200_response_inner::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICreateToken_200_response_inner::is_token_Set() const{
    return m_token_isSet;
}

bool OAICreateToken_200_response_inner::is_token_Valid() const{
    return m_token_isValid;
}

bool OAICreateToken_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateToken_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cidr_isValid && m_expiration_isValid && m_token_isValid && true;
}

} // namespace OpenAPI
