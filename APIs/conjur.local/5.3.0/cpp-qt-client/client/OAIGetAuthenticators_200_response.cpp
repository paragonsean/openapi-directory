/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAuthenticators_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAuthenticators_200_response::OAIGetAuthenticators_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAuthenticators_200_response::OAIGetAuthenticators_200_response() {
    this->initializeModel();
}

OAIGetAuthenticators_200_response::~OAIGetAuthenticators_200_response() {}

void OAIGetAuthenticators_200_response::initializeModel() {

    m_configured_isSet = false;
    m_configured_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_installed_isSet = false;
    m_installed_isValid = false;
}

void OAIGetAuthenticators_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAuthenticators_200_response::fromJsonObject(QJsonObject json) {

    m_configured_isValid = ::OpenAPI::fromJsonValue(m_configured, json[QString("configured")]);
    m_configured_isSet = !json[QString("configured")].isNull() && m_configured_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_installed_isValid = ::OpenAPI::fromJsonValue(m_installed, json[QString("installed")]);
    m_installed_isSet = !json[QString("installed")].isNull() && m_installed_isValid;
}

QString OAIGetAuthenticators_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAuthenticators_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_configured.size() > 0) {
        obj.insert(QString("configured"), ::OpenAPI::toJsonValue(m_configured));
    }
    if (m_enabled.size() > 0) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_installed.size() > 0) {
        obj.insert(QString("installed"), ::OpenAPI::toJsonValue(m_installed));
    }
    return obj;
}

QList<QString> OAIGetAuthenticators_200_response::getConfigured() const {
    return m_configured;
}
void OAIGetAuthenticators_200_response::setConfigured(const QList<QString> &configured) {
    m_configured = configured;
    m_configured_isSet = true;
}

bool OAIGetAuthenticators_200_response::is_configured_Set() const{
    return m_configured_isSet;
}

bool OAIGetAuthenticators_200_response::is_configured_Valid() const{
    return m_configured_isValid;
}

QList<QString> OAIGetAuthenticators_200_response::getEnabled() const {
    return m_enabled;
}
void OAIGetAuthenticators_200_response::setEnabled(const QList<QString> &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGetAuthenticators_200_response::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGetAuthenticators_200_response::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIGetAuthenticators_200_response::getInstalled() const {
    return m_installed;
}
void OAIGetAuthenticators_200_response::setInstalled(const QList<QString> &installed) {
    m_installed = installed;
    m_installed_isSet = true;
}

bool OAIGetAuthenticators_200_response::is_installed_Set() const{
    return m_installed_isSet;
}

bool OAIGetAuthenticators_200_response::is_installed_Valid() const{
    return m_installed_isValid;
}

bool OAIGetAuthenticators_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configured.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAuthenticators_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
