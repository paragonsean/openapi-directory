/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account QString [required]
    * @param[in]  body QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void changePassword(const QString &account, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authenticator QString [required]
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  enabled bool [optional]
    */
    virtual void enableAuthenticator(const QString &authenticator, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  authenticator OAIUnknownModel [required]
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void enableAuthenticatorInstance(const OAIUnknownModel &authenticator, const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getAPIKey(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getAPIKeyViaLDAP(const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  login QString [required]
    * @param[in]  body OAIObject [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    */
    virtual void getAccessToken(const QString &account, const QString &login, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  login OAIUnknownModel [required]
    * @param[in]  body QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    */
    virtual void getAccessTokenViaAWS(const QString &service_id, const QString &account, const OAIUnknownModel &login, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  login OAIUnknownModel [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    * @param[in]  jwt QString [optional]
    */
    virtual void getAccessTokenViaAzure(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jwt = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    * @param[in]  jwt QString [optional]
    */
    virtual void getAccessTokenViaGCP(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jwt = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  jwt QString [optional]
    */
    virtual void getAccessTokenViaJWT(const QString &account, const QString &service_id, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jwt = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  id QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getAccessTokenViaJWTWithId(const QString &account, const QString &id, const QString &service_id, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  login OAIUnknownModel [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    */
    virtual void getAccessTokenViaKubernetes(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  login OAIUnknownModel [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  accept_encoding QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void getAccessTokenViaLDAP(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  id_token QString [optional]
    */
    virtual void getAccessTokenViaOIDC(const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_id QString [required]
    * @param[in]  body QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  host_id_prefix QString [optional]
    */
    virtual void k8sInjectClientCert(const QString &service_id, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &host_id_prefix = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  role QString [optional]
    */
    virtual void rotateApiKey(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changePasswordCallback(OAIHttpRequestWorker *worker);
    void enableAuthenticatorCallback(OAIHttpRequestWorker *worker);
    void enableAuthenticatorInstanceCallback(OAIHttpRequestWorker *worker);
    void getAPIKeyCallback(OAIHttpRequestWorker *worker);
    void getAPIKeyViaLDAPCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaAWSCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaAzureCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaGCPCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaJWTCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaJWTWithIdCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaKubernetesCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaLDAPCallback(OAIHttpRequestWorker *worker);
    void getAccessTokenViaOIDCCallback(OAIHttpRequestWorker *worker);
    void k8sInjectClientCertCallback(OAIHttpRequestWorker *worker);
    void rotateApiKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changePasswordSignal();
    void enableAuthenticatorSignal();
    void enableAuthenticatorInstanceSignal();
    void getAPIKeySignal(QString summary);
    void getAPIKeyViaLDAPSignal();
    void getAccessTokenSignal(QString summary);
    void getAccessTokenViaAWSSignal();
    void getAccessTokenViaAzureSignal();
    void getAccessTokenViaGCPSignal();
    void getAccessTokenViaJWTSignal();
    void getAccessTokenViaJWTWithIdSignal();
    void getAccessTokenViaKubernetesSignal();
    void getAccessTokenViaLDAPSignal();
    void getAccessTokenViaOIDCSignal();
    void k8sInjectClientCertSignal();
    void rotateApiKeySignal();


    void changePasswordSignalFull(OAIHttpRequestWorker *worker);
    void enableAuthenticatorSignalFull(OAIHttpRequestWorker *worker);
    void enableAuthenticatorInstanceSignalFull(OAIHttpRequestWorker *worker);
    void getAPIKeySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getAPIKeyViaLDAPSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getAccessTokenViaAWSSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaAzureSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaGCPSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaJWTSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaJWTWithIdSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaKubernetesSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaLDAPSignalFull(OAIHttpRequestWorker *worker);
    void getAccessTokenViaOIDCSignalFull(OAIHttpRequestWorker *worker);
    void k8sInjectClientCertSignalFull(OAIHttpRequestWorker *worker);
    void rotateApiKeySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalError() instead")
    void changePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAuthenticatorSignalError() instead")
    void enableAuthenticatorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableAuthenticatorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAuthenticatorInstanceSignalError() instead")
    void enableAuthenticatorInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableAuthenticatorInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPIKeySignalError() instead")
    void getAPIKeySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPIKeySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPIKeyViaLDAPSignalError() instead")
    void getAPIKeyViaLDAPSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAPIKeyViaLDAPSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenSignalError() instead")
    void getAccessTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaAWSSignalError() instead")
    void getAccessTokenViaAWSSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaAWSSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaAzureSignalError() instead")
    void getAccessTokenViaAzureSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaAzureSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaGCPSignalError() instead")
    void getAccessTokenViaGCPSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaGCPSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaJWTSignalError() instead")
    void getAccessTokenViaJWTSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaJWTSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaJWTWithIdSignalError() instead")
    void getAccessTokenViaJWTWithIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaJWTWithIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaKubernetesSignalError() instead")
    void getAccessTokenViaKubernetesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaKubernetesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaLDAPSignalError() instead")
    void getAccessTokenViaLDAPSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaLDAPSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaOIDCSignalError() instead")
    void getAccessTokenViaOIDCSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaOIDCSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use k8sInjectClientCertSignalError() instead")
    void k8sInjectClientCertSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void k8sInjectClientCertSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateApiKeySignalError() instead")
    void rotateApiKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rotateApiKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changePasswordSignalErrorFull() instead")
    void changePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAuthenticatorSignalErrorFull() instead")
    void enableAuthenticatorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAuthenticatorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAuthenticatorInstanceSignalErrorFull() instead")
    void enableAuthenticatorInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAuthenticatorInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPIKeySignalErrorFull() instead")
    void getAPIKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPIKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAPIKeyViaLDAPSignalErrorFull() instead")
    void getAPIKeyViaLDAPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAPIKeyViaLDAPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenSignalErrorFull() instead")
    void getAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaAWSSignalErrorFull() instead")
    void getAccessTokenViaAWSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaAWSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaAzureSignalErrorFull() instead")
    void getAccessTokenViaAzureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaAzureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaGCPSignalErrorFull() instead")
    void getAccessTokenViaGCPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaGCPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaJWTSignalErrorFull() instead")
    void getAccessTokenViaJWTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaJWTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaJWTWithIdSignalErrorFull() instead")
    void getAccessTokenViaJWTWithIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaJWTWithIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaKubernetesSignalErrorFull() instead")
    void getAccessTokenViaKubernetesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaKubernetesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaLDAPSignalErrorFull() instead")
    void getAccessTokenViaLDAPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaLDAPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessTokenViaOIDCSignalErrorFull() instead")
    void getAccessTokenViaOIDCSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessTokenViaOIDCSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use k8sInjectClientCertSignalErrorFull() instead")
    void k8sInjectClientCertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void k8sInjectClientCertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rotateApiKeySignalErrorFull() instead")
    void rotateApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rotateApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
