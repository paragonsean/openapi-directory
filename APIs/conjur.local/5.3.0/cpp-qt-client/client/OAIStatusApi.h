/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStatusApi_H
#define OAI_OAIStatusApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetAuthenticators_200_response.h"
#include "OAIGetServiceAuthenticatorStatus_200_response.h"
#include "OAIInfo_200_response.h"
#include "OAIObject.h"
#include "OAIWhoAmI_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStatusApi : public QObject {
    Q_OBJECT

public:
    OAIStatusApi(const int timeOut = 0);
    ~OAIStatusApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getAuthenticators(const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getGCPAuthenticatorStatus(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authenticator QString [required]
    * @param[in]  service_id QString [required]
    * @param[in]  account QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void getServiceAuthenticatorStatus(const QString &authenticator, const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());


    virtual void health();


    virtual void info();

    /**
    * @param[in]  remote QString [required]
    */
    virtual void remoteHealth(const QString &remote);

    /**
    * @param[in]  x_request_id QString [optional]
    */
    virtual void whoAmI(const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAuthenticatorsCallback(OAIHttpRequestWorker *worker);
    void getGCPAuthenticatorStatusCallback(OAIHttpRequestWorker *worker);
    void getServiceAuthenticatorStatusCallback(OAIHttpRequestWorker *worker);
    void healthCallback(OAIHttpRequestWorker *worker);
    void infoCallback(OAIHttpRequestWorker *worker);
    void remoteHealthCallback(OAIHttpRequestWorker *worker);
    void whoAmICallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAuthenticatorsSignal(OAIGetAuthenticators_200_response summary);
    void getGCPAuthenticatorStatusSignal();
    void getServiceAuthenticatorStatusSignal(OAIGetServiceAuthenticatorStatus_200_response summary);
    void healthSignal(OAIObject summary);
    void infoSignal(OAIInfo_200_response summary);
    void remoteHealthSignal(OAIObject summary);
    void whoAmISignal(OAIWhoAmI_200_response summary);


    void getAuthenticatorsSignalFull(OAIHttpRequestWorker *worker, OAIGetAuthenticators_200_response summary);
    void getGCPAuthenticatorStatusSignalFull(OAIHttpRequestWorker *worker);
    void getServiceAuthenticatorStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetServiceAuthenticatorStatus_200_response summary);
    void healthSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void infoSignalFull(OAIHttpRequestWorker *worker, OAIInfo_200_response summary);
    void remoteHealthSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void whoAmISignalFull(OAIHttpRequestWorker *worker, OAIWhoAmI_200_response summary);

    Q_DECL_DEPRECATED_X("Use getAuthenticatorsSignalError() instead")
    void getAuthenticatorsSignalE(OAIGetAuthenticators_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthenticatorsSignalError(OAIGetAuthenticators_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGCPAuthenticatorStatusSignalError() instead")
    void getGCPAuthenticatorStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGCPAuthenticatorStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceAuthenticatorStatusSignalError() instead")
    void getServiceAuthenticatorStatusSignalE(OAIGetServiceAuthenticatorStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceAuthenticatorStatusSignalError(OAIGetServiceAuthenticatorStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthSignalError() instead")
    void healthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void healthSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoSignalError() instead")
    void infoSignalE(OAIInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infoSignalError(OAIInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remoteHealthSignalError() instead")
    void remoteHealthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void remoteHealthSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whoAmISignalError() instead")
    void whoAmISignalE(OAIWhoAmI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void whoAmISignalError(OAIWhoAmI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAuthenticatorsSignalErrorFull() instead")
    void getAuthenticatorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthenticatorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGCPAuthenticatorStatusSignalErrorFull() instead")
    void getGCPAuthenticatorStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGCPAuthenticatorStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceAuthenticatorStatusSignalErrorFull() instead")
    void getServiceAuthenticatorStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceAuthenticatorStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthSignalErrorFull() instead")
    void healthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoSignalErrorFull() instead")
    void infoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use remoteHealthSignalErrorFull() instead")
    void remoteHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void remoteHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whoAmISignalErrorFull() instead")
    void whoAmISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whoAmISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
