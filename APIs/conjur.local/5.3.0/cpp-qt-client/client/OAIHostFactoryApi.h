/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHostFactoryApi_H
#define OAI_OAIHostFactoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateHost_201_response.h"
#include "OAICreateToken_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHostFactoryApi : public QObject {
    Q_OBJECT

public:
    OAIHostFactoryApi(const int timeOut = 0);
    ~OAIHostFactoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  annotations OAIObject [optional]
    */
    virtual void createHost(const QString &id, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &annotations = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  expiration QString [required]
    * @param[in]  host_factory QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  cidr QList<QString> [optional]
    * @param[in]  count qint32 [optional]
    */
    virtual void createToken(const QString &expiration, const QString &host_factory, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &cidr = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void revokeToken(const QString &token, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createHostCallback(OAIHttpRequestWorker *worker);
    void createTokenCallback(OAIHttpRequestWorker *worker);
    void revokeTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createHostSignal(OAICreateHost_201_response summary);
    void createTokenSignal(QList<OAICreateToken_200_response_inner> summary);
    void revokeTokenSignal();


    void createHostSignalFull(OAIHttpRequestWorker *worker, OAICreateHost_201_response summary);
    void createTokenSignalFull(OAIHttpRequestWorker *worker, QList<OAICreateToken_200_response_inner> summary);
    void revokeTokenSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createHostSignalError() instead")
    void createHostSignalE(OAICreateHost_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostSignalError(OAICreateHost_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTokenSignalError() instead")
    void createTokenSignalE(QList<OAICreateToken_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTokenSignalError(QList<OAICreateToken_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeTokenSignalError() instead")
    void revokeTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createHostSignalErrorFull() instead")
    void createHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTokenSignalErrorFull() instead")
    void createTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeTokenSignalErrorFull() instead")
    void revokeTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
