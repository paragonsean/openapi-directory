/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShowResourcesForAllAccounts_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShowResourcesForAllAccounts_200_response_inner::OAIShowResourcesForAllAccounts_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShowResourcesForAllAccounts_200_response_inner::OAIShowResourcesForAllAccounts_200_response_inner() {
    this->initializeModel();
}

OAIShowResourcesForAllAccounts_200_response_inner::~OAIShowResourcesForAllAccounts_200_response_inner() {}

void OAIShowResourcesForAllAccounts_200_response_inner::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_versions_isSet = false;
    m_policy_versions_isValid = false;

    m_restricted_to_isSet = false;
    m_restricted_to_isValid = false;

    m_secrets_isSet = false;
    m_secrets_isValid = false;
}

void OAIShowResourcesForAllAccounts_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShowResourcesForAllAccounts_200_response_inner::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_versions_isValid = ::OpenAPI::fromJsonValue(m_policy_versions, json[QString("policy_versions")]);
    m_policy_versions_isSet = !json[QString("policy_versions")].isNull() && m_policy_versions_isValid;

    m_restricted_to_isValid = ::OpenAPI::fromJsonValue(m_restricted_to, json[QString("restricted_to")]);
    m_restricted_to_isSet = !json[QString("restricted_to")].isNull() && m_restricted_to_isValid;

    m_secrets_isValid = ::OpenAPI::fromJsonValue(m_secrets, json[QString("secrets")]);
    m_secrets_isSet = !json[QString("secrets")].isNull() && m_secrets_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShowResourcesForAllAccounts_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_versions.size() > 0) {
        obj.insert(QString("policy_versions"), ::OpenAPI::toJsonValue(m_policy_versions));
    }
    if (m_restricted_to.size() > 0) {
        obj.insert(QString("restricted_to"), ::OpenAPI::toJsonValue(m_restricted_to));
    }
    if (m_secrets.size() > 0) {
        obj.insert(QString("secrets"), ::OpenAPI::toJsonValue(m_secrets));
    }
    return obj;
}

QList<QString> OAIShowResourcesForAllAccounts_200_response_inner::getAnnotations() const {
    return m_annotations;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setAnnotations(const QList<QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner::getId() const {
    return m_id;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner::getOwner() const {
    return m_owner;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner> OAIShowResourcesForAllAccounts_200_response_inner::getPermissions() const {
    return m_permissions;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setPermissions(const QList<OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner::getPolicy() const {
    return m_policy;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_policy_Valid() const{
    return m_policy_isValid;
}

QList<OAIShowResourcesForAllAccounts_200_response_inner_policy_versions_inner> OAIShowResourcesForAllAccounts_200_response_inner::getPolicyVersions() const {
    return m_policy_versions;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setPolicyVersions(const QList<OAIShowResourcesForAllAccounts_200_response_inner_policy_versions_inner> &policy_versions) {
    m_policy_versions = policy_versions;
    m_policy_versions_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_policy_versions_Set() const{
    return m_policy_versions_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_policy_versions_Valid() const{
    return m_policy_versions_isValid;
}

QList<QString> OAIShowResourcesForAllAccounts_200_response_inner::getRestrictedTo() const {
    return m_restricted_to;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setRestrictedTo(const QList<QString> &restricted_to) {
    m_restricted_to = restricted_to;
    m_restricted_to_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_restricted_to_Set() const{
    return m_restricted_to_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_restricted_to_Valid() const{
    return m_restricted_to_isValid;
}

QList<OAIShowResourcesForAllAccounts_200_response_inner_secrets_inner> OAIShowResourcesForAllAccounts_200_response_inner::getSecrets() const {
    return m_secrets;
}
void OAIShowResourcesForAllAccounts_200_response_inner::setSecrets(const QList<OAIShowResourcesForAllAccounts_200_response_inner_secrets_inner> &secrets) {
    m_secrets = secrets;
    m_secrets_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_secrets_Set() const{
    return m_secrets_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::is_secrets_Valid() const{
    return m_secrets_isValid;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShowResourcesForAllAccounts_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
