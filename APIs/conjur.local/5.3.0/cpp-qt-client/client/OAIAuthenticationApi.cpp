/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAuthenticationApi::OAIAuthenticationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAuthenticationApi::~OAIAuthenticationApi() {
}

void OAIAuthenticationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://conjur.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("changePassword", defaultConf);
    _serverIndices.insert("changePassword", 0);
    _serverConfigs.insert("enableAuthenticator", defaultConf);
    _serverIndices.insert("enableAuthenticator", 0);
    _serverConfigs.insert("enableAuthenticatorInstance", defaultConf);
    _serverIndices.insert("enableAuthenticatorInstance", 0);
    _serverConfigs.insert("getAPIKey", defaultConf);
    _serverIndices.insert("getAPIKey", 0);
    _serverConfigs.insert("getAPIKeyViaLDAP", defaultConf);
    _serverIndices.insert("getAPIKeyViaLDAP", 0);
    _serverConfigs.insert("getAccessToken", defaultConf);
    _serverIndices.insert("getAccessToken", 0);
    _serverConfigs.insert("getAccessTokenViaAWS", defaultConf);
    _serverIndices.insert("getAccessTokenViaAWS", 0);
    _serverConfigs.insert("getAccessTokenViaAzure", defaultConf);
    _serverIndices.insert("getAccessTokenViaAzure", 0);
    _serverConfigs.insert("getAccessTokenViaGCP", defaultConf);
    _serverIndices.insert("getAccessTokenViaGCP", 0);
    _serverConfigs.insert("getAccessTokenViaJWT", defaultConf);
    _serverIndices.insert("getAccessTokenViaJWT", 0);
    _serverConfigs.insert("getAccessTokenViaJWTWithId", defaultConf);
    _serverIndices.insert("getAccessTokenViaJWTWithId", 0);
    _serverConfigs.insert("getAccessTokenViaKubernetes", defaultConf);
    _serverIndices.insert("getAccessTokenViaKubernetes", 0);
    _serverConfigs.insert("getAccessTokenViaLDAP", defaultConf);
    _serverIndices.insert("getAccessTokenViaLDAP", 0);
    _serverConfigs.insert("getAccessTokenViaOIDC", defaultConf);
    _serverIndices.insert("getAccessTokenViaOIDC", 0);
    _serverConfigs.insert("k8sInjectClientCert", defaultConf);
    _serverIndices.insert("k8sInjectClientCert", 0);
    _serverConfigs.insert("rotateApiKey", defaultConf);
    _serverIndices.insert("rotateApiKey", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAuthenticationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAuthenticationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAuthenticationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAuthenticationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAuthenticationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAuthenticationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAuthenticationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAuthenticationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAuthenticationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAuthenticationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAuthenticationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAuthenticationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAuthenticationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAuthenticationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAuthenticationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAuthenticationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAuthenticationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAuthenticationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAuthenticationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAuthenticationApi::changePassword(const QString &account, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id) {
    QString fullPath = QString(_serverConfigs["changePassword"][_serverIndices.value("changePassword")].URL()+"/authn/{account}/password");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::changePasswordCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::changePasswordCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT changePasswordSignal();
        Q_EMIT changePasswordSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT changePasswordSignalE(error_type, error_str);
        Q_EMIT changePasswordSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT changePasswordSignalError(error_type, error_str);
        Q_EMIT changePasswordSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::enableAuthenticator(const QString &authenticator, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<bool> &enabled) {
    QString fullPath = QString(_serverConfigs["enableAuthenticator"][_serverIndices.value("enableAuthenticator")].URL()+"/{authenticator}/{account}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("conjurAuth")) {
        addHeaders("conjurAuth",_apiKeys.find("conjurAuth").value());
    }
    
    
    {
        QString authenticatorPathParam("{");
        authenticatorPathParam.append("authenticator").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authenticator", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authenticator"+pathSuffix : pathPrefix;
        fullPath.replace(authenticatorPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authenticator)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (enabled.hasValue())
    {
        input.add_var("enabled", ::OpenAPI::toStringValue(enabled.value()));
    }

    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::enableAuthenticatorCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::enableAuthenticatorCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enableAuthenticatorSignal();
        Q_EMIT enableAuthenticatorSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enableAuthenticatorSignalE(error_type, error_str);
        Q_EMIT enableAuthenticatorSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enableAuthenticatorSignalError(error_type, error_str);
        Q_EMIT enableAuthenticatorSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::enableAuthenticatorInstance(const OAIUnknownModel &authenticator, const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id) {
    QString fullPath = QString(_serverConfigs["enableAuthenticatorInstance"][_serverIndices.value("enableAuthenticatorInstance")].URL()+"/{authenticator}/{service_id}/{account}");
    
    if (_apiKeys.contains("conjurAuth")) {
        addHeaders("conjurAuth",_apiKeys.find("conjurAuth").value());
    }
    
    
    {
        QString authenticatorPathParam("{");
        authenticatorPathParam.append("authenticator").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authenticator", false);
        QString paramString = (pathStyle == "matrix" && false) ? pathPrefix : pathPrefix+"authenticator"+pathSuffix;
        QJsonObject parameter = authenticator.asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                pathDelimiter = (pathStyle == "matrix" && false) ? ";" : getParamStyleDelimiter(pathStyle, key, false);
                paramString.append(pathDelimiter);
            }
            QString assignOperator = (false) ? "=" : ",";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(key+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(key+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.replace(authenticatorPathParam, QUrl::toPercentEncoding(paramString));
    }
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::enableAuthenticatorInstanceCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::enableAuthenticatorInstanceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enableAuthenticatorInstanceSignal();
        Q_EMIT enableAuthenticatorInstanceSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enableAuthenticatorInstanceSignalE(error_type, error_str);
        Q_EMIT enableAuthenticatorInstanceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enableAuthenticatorInstanceSignalError(error_type, error_str);
        Q_EMIT enableAuthenticatorInstanceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAPIKey(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id) {
    QString fullPath = QString(_serverConfigs["getAPIKey"][_serverIndices.value("getAPIKey")].URL()+"/authn/{account}/login");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAPIKeyCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAPIKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAPIKeySignal(output);
        Q_EMIT getAPIKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAPIKeySignalE(output, error_type, error_str);
        Q_EMIT getAPIKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAPIKeySignalError(output, error_type, error_str);
        Q_EMIT getAPIKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAPIKeyViaLDAP(const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id) {
    QString fullPath = QString(_serverConfigs["getAPIKeyViaLDAP"][_serverIndices.value("getAPIKeyViaLDAP")].URL()+"/authn-ldap/{service_id}/{account}/login");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAPIKeyViaLDAPCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAPIKeyViaLDAPCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAPIKeyViaLDAPSignal();
        Q_EMIT getAPIKeyViaLDAPSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAPIKeyViaLDAPSignalE(error_type, error_str);
        Q_EMIT getAPIKeyViaLDAPSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAPIKeyViaLDAPSignalError(error_type, error_str);
        Q_EMIT getAPIKeyViaLDAPSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessToken(const QString &account, const QString &login, const OAIObject &body, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding) {
    QString fullPath = QString(_serverConfigs["getAccessToken"][_serverIndices.value("getAccessToken")].URL()+"/authn/{account}/{login}/authenticate");
    
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString loginPathParam("{");
        loginPathParam.append("login").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "login", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"login"+pathSuffix : pathPrefix;
        fullPath.replace(loginPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(login)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = body.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenSignal(output);
        Q_EMIT getAccessTokenSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenSignalE(output, error_type, error_str);
        Q_EMIT getAccessTokenSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenSignalError(output, error_type, error_str);
        Q_EMIT getAccessTokenSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaAWS(const QString &service_id, const QString &account, const OAIUnknownModel &login, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaAWS"][_serverIndices.value("getAccessTokenViaAWS")].URL()+"/authn-iam/{service_id}/{account}/{login}/authenticate");
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString loginPathParam("{");
        loginPathParam.append("login").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "login", false);
        QString paramString = (pathStyle == "matrix" && false) ? pathPrefix : pathPrefix+"login"+pathSuffix;
        QJsonObject parameter = login.asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                pathDelimiter = (pathStyle == "matrix" && false) ? ";" : getParamStyleDelimiter(pathStyle, key, false);
                paramString.append(pathDelimiter);
            }
            QString assignOperator = (false) ? "=" : ",";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(key+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(key+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.replace(loginPathParam, QUrl::toPercentEncoding(paramString));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaAWSCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaAWSCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaAWSSignal();
        Q_EMIT getAccessTokenViaAWSSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaAWSSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaAWSSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaAWSSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaAWSSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaAzure(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding, const ::OpenAPI::OptionalParam<QString> &jwt) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaAzure"][_serverIndices.value("getAccessTokenViaAzure")].URL()+"/authn-azure/{service_id}/{account}/{login}/authenticate");
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString loginPathParam("{");
        loginPathParam.append("login").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "login", false);
        QString paramString = (pathStyle == "matrix" && false) ? pathPrefix : pathPrefix+"login"+pathSuffix;
        QJsonObject parameter = login.asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                pathDelimiter = (pathStyle == "matrix" && false) ? ";" : getParamStyleDelimiter(pathStyle, key, false);
                paramString.append(pathDelimiter);
            }
            QString assignOperator = (false) ? "=" : ",";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(key+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(key+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.replace(loginPathParam, QUrl::toPercentEncoding(paramString));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (jwt.hasValue())
    {
        input.add_var("jwt", ::OpenAPI::toStringValue(jwt.value()));
    }

    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaAzureCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaAzureCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaAzureSignal();
        Q_EMIT getAccessTokenViaAzureSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaAzureSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaAzureSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaAzureSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaAzureSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaGCP(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding, const ::OpenAPI::OptionalParam<QString> &jwt) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaGCP"][_serverIndices.value("getAccessTokenViaGCP")].URL()+"/authn-gcp/{account}/authenticate");
    
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (jwt.hasValue())
    {
        input.add_var("jwt", ::OpenAPI::toStringValue(jwt.value()));
    }

    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaGCPCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaGCPCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaGCPSignal();
        Q_EMIT getAccessTokenViaGCPSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaGCPSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaGCPSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaGCPSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaGCPSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaJWT(const QString &account, const QString &service_id, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &jwt) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaJWT"][_serverIndices.value("getAccessTokenViaJWT")].URL()+"/authn-jwt/{service_id}/{account}/authenticate");
    
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (jwt.hasValue())
    {
        input.add_var("jwt", ::OpenAPI::toStringValue(jwt.value()));
    }

    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaJWTCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaJWTCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaJWTSignal();
        Q_EMIT getAccessTokenViaJWTSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaJWTSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaJWTSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaJWTSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaJWTSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaJWTWithId(const QString &account, const QString &id, const QString &service_id, const ::OpenAPI::OptionalParam<QString> &x_request_id) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaJWTWithId"][_serverIndices.value("getAccessTokenViaJWTWithId")].URL()+"/authn-jwt/{service_id}/{account}/{id}/authenticate");
    
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaJWTWithIdCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaJWTWithIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaJWTWithIdSignal();
        Q_EMIT getAccessTokenViaJWTWithIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaJWTWithIdSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaJWTWithIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaJWTWithIdSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaJWTWithIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaKubernetes(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaKubernetes"][_serverIndices.value("getAccessTokenViaKubernetes")].URL()+"/authn-k8s/{service_id}/{account}/{login}/authenticate");
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString loginPathParam("{");
        loginPathParam.append("login").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "login", false);
        QString paramString = (pathStyle == "matrix" && false) ? pathPrefix : pathPrefix+"login"+pathSuffix;
        QJsonObject parameter = login.asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                pathDelimiter = (pathStyle == "matrix" && false) ? ";" : getParamStyleDelimiter(pathStyle, key, false);
                paramString.append(pathDelimiter);
            }
            QString assignOperator = (false) ? "=" : ",";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(key+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(key+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.replace(loginPathParam, QUrl::toPercentEncoding(paramString));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaKubernetesCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaKubernetesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaKubernetesSignal();
        Q_EMIT getAccessTokenViaKubernetesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaKubernetesSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaKubernetesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaKubernetesSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaKubernetesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaLDAP(const QString &service_id, const QString &account, const OAIUnknownModel &login, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &accept_encoding, const ::OpenAPI::OptionalParam<OAIObject> &body) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaLDAP"][_serverIndices.value("getAccessTokenViaLDAP")].URL()+"/authn-ldap/{service_id}/{account}/{login}/authenticate");
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    
    {
        QString loginPathParam("{");
        loginPathParam.append("login").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "login", false);
        QString paramString = (pathStyle == "matrix" && false) ? pathPrefix : pathPrefix+"login"+pathSuffix;
        QJsonObject parameter = login.asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                pathDelimiter = (pathStyle == "matrix" && false) ? ";" : getParamStyleDelimiter(pathStyle, key, false);
                paramString.append(pathDelimiter);
            }
            QString assignOperator = (false) ? "=" : ",";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(key+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(key+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(key+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.replace(loginPathParam, QUrl::toPercentEncoding(paramString));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept_encoding.value()).isEmpty()) {
            input.headers.insert("Accept-Encoding", ::OpenAPI::toStringValue(accept_encoding.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaLDAPCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaLDAPCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaLDAPSignal();
        Q_EMIT getAccessTokenViaLDAPSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaLDAPSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaLDAPSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaLDAPSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaLDAPSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::getAccessTokenViaOIDC(const QString &service_id, const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &id_token) {
    QString fullPath = QString(_serverConfigs["getAccessTokenViaOIDC"][_serverIndices.value("getAccessTokenViaOIDC")].URL()+"/authn-oidc/{service_id}/{account}/authenticate");
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (id_token.hasValue())
    {
        input.add_var("id_token", ::OpenAPI::toStringValue(id_token.value()));
    }

    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::getAccessTokenViaOIDCCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::getAccessTokenViaOIDCCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccessTokenViaOIDCSignal();
        Q_EMIT getAccessTokenViaOIDCSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccessTokenViaOIDCSignalE(error_type, error_str);
        Q_EMIT getAccessTokenViaOIDCSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccessTokenViaOIDCSignalError(error_type, error_str);
        Q_EMIT getAccessTokenViaOIDCSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::k8sInjectClientCert(const QString &service_id, const QString &body, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &host_id_prefix) {
    QString fullPath = QString(_serverConfigs["k8sInjectClientCert"][_serverIndices.value("k8sInjectClientCert")].URL()+"/authn-k8s/{service_id}/inject_client_cert");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("conjurAuth")) {
        addHeaders("conjurAuth",_apiKeys.find("conjurAuth").value());
    }
    
    
    {
        QString service_idPathParam("{");
        service_idPathParam.append("service_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "service_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"service_id"+pathSuffix : pathPrefix;
        fullPath.replace(service_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(service_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    if (host_id_prefix.hasValue())
    {
        if (!::OpenAPI::toStringValue(host_id_prefix.value()).isEmpty()) {
            input.headers.insert("Host-Id-Prefix", ::OpenAPI::toStringValue(host_id_prefix.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::k8sInjectClientCertCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::k8sInjectClientCertCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT k8sInjectClientCertSignal();
        Q_EMIT k8sInjectClientCertSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT k8sInjectClientCertSignalE(error_type, error_str);
        Q_EMIT k8sInjectClientCertSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT k8sInjectClientCertSignalError(error_type, error_str);
        Q_EMIT k8sInjectClientCertSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::rotateApiKey(const QString &account, const ::OpenAPI::OptionalParam<QString> &x_request_id, const ::OpenAPI::OptionalParam<QString> &role) {
    QString fullPath = QString(_serverConfigs["rotateApiKey"][_serverIndices.value("rotateApiKey")].URL()+"/authn/{account}/api_key");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("conjurAuth")) {
        addHeaders("conjurAuth",_apiKeys.find("conjurAuth").value());
    }
    
    
    {
        QString accountPathParam("{");
        accountPathParam.append("account").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account"+pathSuffix : pathPrefix;
        fullPath.replace(accountPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (role.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "role", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("role")).append(querySuffix).append(QUrl::toPercentEncoding(role.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (x_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_request_id.value()).isEmpty()) {
            input.headers.insert("X-Request-Id", ::OpenAPI::toStringValue(x_request_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAuthenticationApi::rotateApiKeyCallback);
    connect(this, &OAIAuthenticationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAuthenticationApi::rotateApiKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT rotateApiKeySignal();
        Q_EMIT rotateApiKeySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT rotateApiKeySignalE(error_type, error_str);
        Q_EMIT rotateApiKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT rotateApiKeySignalError(error_type, error_str);
        Q_EMIT rotateApiKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAuthenticationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
