/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHost_201_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHost_201_response::OAICreateHost_201_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHost_201_response::OAICreateHost_201_response() {
    this->initializeModel();
}

OAICreateHost_201_response::~OAICreateHost_201_response() {}

void OAICreateHost_201_response::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAICreateHost_201_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHost_201_response::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAICreateHost_201_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHost_201_response::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QList<QString> OAICreateHost_201_response::getAnnotations() const {
    return m_annotations;
}
void OAICreateHost_201_response::setAnnotations(const QList<QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAICreateHost_201_response::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAICreateHost_201_response::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAICreateHost_201_response::getApiKey() const {
    return m_api_key;
}
void OAICreateHost_201_response::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAICreateHost_201_response::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAICreateHost_201_response::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAICreateHost_201_response::getCreatedAt() const {
    return m_created_at;
}
void OAICreateHost_201_response::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateHost_201_response::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateHost_201_response::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateHost_201_response::getId() const {
    return m_id;
}
void OAICreateHost_201_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateHost_201_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateHost_201_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateHost_201_response::getOwner() const {
    return m_owner;
}
void OAICreateHost_201_response::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICreateHost_201_response::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICreateHost_201_response::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<QString> OAICreateHost_201_response::getPermissions() const {
    return m_permissions;
}
void OAICreateHost_201_response::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICreateHost_201_response::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICreateHost_201_response::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAICreateHost_201_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHost_201_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_annotations_isValid && m_api_key_isValid && m_created_at_isValid && m_id_isValid && m_owner_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
