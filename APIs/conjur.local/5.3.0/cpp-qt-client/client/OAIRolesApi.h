/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRolesApi_H
#define OAI_OAIRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRolesApi : public QObject {
    Q_OBJECT

public:
    OAIRolesApi(const int timeOut = 0);
    ~OAIRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account QString [required]
    * @param[in]  kind QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  members QString [required]
    * @param[in]  member QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void addMemberToRole(const QString &account, const QString &kind, const QString &identifier, const QString &members, const QString &member, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  kind QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  members QString [required]
    * @param[in]  member QString [required]
    * @param[in]  x_request_id QString [optional]
    */
    virtual void removeMemberFromRole(const QString &account, const QString &kind, const QString &identifier, const QString &members, const QString &member, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  kind QString [required]
    * @param[in]  identifier QString [required]
    * @param[in]  x_request_id QString [optional]
    * @param[in]  all QString [optional]
    * @param[in]  memberships QString [optional]
    * @param[in]  members QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  count bool [optional]
    * @param[in]  search QString [optional]
    * @param[in]  graph QString [optional]
    */
    virtual void showRole(const QString &account, const QString &kind, const QString &identifier, const ::OpenAPI::OptionalParam<QString> &x_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &memberships = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &members = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &graph = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addMemberToRoleCallback(OAIHttpRequestWorker *worker);
    void removeMemberFromRoleCallback(OAIHttpRequestWorker *worker);
    void showRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addMemberToRoleSignal();
    void removeMemberFromRoleSignal();
    void showRoleSignal(OAIObject summary);


    void addMemberToRoleSignalFull(OAIHttpRequestWorker *worker);
    void removeMemberFromRoleSignalFull(OAIHttpRequestWorker *worker);
    void showRoleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use addMemberToRoleSignalError() instead")
    void addMemberToRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addMemberToRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMemberFromRoleSignalError() instead")
    void removeMemberFromRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeMemberFromRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showRoleSignalError() instead")
    void showRoleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showRoleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addMemberToRoleSignalErrorFull() instead")
    void addMemberToRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMemberToRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeMemberFromRoleSignalErrorFull() instead")
    void removeMemberFromRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeMemberFromRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showRoleSignalErrorFull() instead")
    void showRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
