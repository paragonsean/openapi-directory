/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner() {
    this->initializeModel();
}

OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::~OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner() {}

void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::initializeModel() {

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_privilege_isSet = false;
    m_privilege_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::fromJsonObject(QJsonObject json) {

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_privilege_isValid = ::OpenAPI::fromJsonValue(m_privilege, json[QString("privilege")]);
    m_privilege_isSet = !json[QString("privilege")].isNull() && m_privilege_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_privilege_isSet) {
        obj.insert(QString("privilege"), ::OpenAPI::toJsonValue(m_privilege));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::getPolicy() const {
    return m_policy;
}
void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::getPrivilege() const {
    return m_privilege;
}
void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::setPrivilege(const QString &privilege) {
    m_privilege = privilege;
    m_privilege_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_privilege_Set() const{
    return m_privilege_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_privilege_Valid() const{
    return m_privilege_isValid;
}

QString OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::getRole() const {
    return m_role;
}
void OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_role_Set() const{
    return m_role_isSet;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privilege_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShowResourcesForAllAccounts_200_response_inner_permissions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
