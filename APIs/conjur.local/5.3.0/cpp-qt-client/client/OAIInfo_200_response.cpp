/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfo_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfo_200_response::OAIInfo_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfo_200_response::OAIInfo_200_response() {
    this->initializeModel();
}

OAIInfo_200_response::~OAIInfo_200_response() {}

void OAIInfo_200_response::initializeModel() {

    m_authenticators_isSet = false;
    m_authenticators_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIInfo_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfo_200_response::fromJsonObject(QJsonObject json) {

    m_authenticators_isValid = ::OpenAPI::fromJsonValue(m_authenticators, json[QString("authenticators")]);
    m_authenticators_isSet = !json[QString("authenticators")].isNull() && m_authenticators_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIInfo_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfo_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticators.isSet()) {
        obj.insert(QString("authenticators"), ::OpenAPI::toJsonValue(m_authenticators));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_release_isSet) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_services_isSet) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIInfo_200_response_authenticators OAIInfo_200_response::getAuthenticators() const {
    return m_authenticators;
}
void OAIInfo_200_response::setAuthenticators(const OAIInfo_200_response_authenticators &authenticators) {
    m_authenticators = authenticators;
    m_authenticators_isSet = true;
}

bool OAIInfo_200_response::is_authenticators_Set() const{
    return m_authenticators_isSet;
}

bool OAIInfo_200_response::is_authenticators_Valid() const{
    return m_authenticators_isValid;
}

OAIObject OAIInfo_200_response::getConfiguration() const {
    return m_configuration;
}
void OAIInfo_200_response::setConfiguration(const OAIObject &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIInfo_200_response::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIInfo_200_response::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIInfo_200_response::getContainer() const {
    return m_container;
}
void OAIInfo_200_response::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIInfo_200_response::is_container_Set() const{
    return m_container_isSet;
}

bool OAIInfo_200_response::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIInfo_200_response::getRelease() const {
    return m_release;
}
void OAIInfo_200_response::setRelease(const QString &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIInfo_200_response::is_release_Set() const{
    return m_release_isSet;
}

bool OAIInfo_200_response::is_release_Valid() const{
    return m_release_isValid;
}

QString OAIInfo_200_response::getRole() const {
    return m_role;
}
void OAIInfo_200_response::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIInfo_200_response::is_role_Set() const{
    return m_role_isSet;
}

bool OAIInfo_200_response::is_role_Valid() const{
    return m_role_isValid;
}

OAIObject OAIInfo_200_response::getServices() const {
    return m_services;
}
void OAIInfo_200_response::setServices(const OAIObject &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIInfo_200_response::is_services_Set() const{
    return m_services_isSet;
}

bool OAIInfo_200_response::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIInfo_200_response::getVersion() const {
    return m_version;
}
void OAIInfo_200_response::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIInfo_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIInfo_200_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIInfo_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfo_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
