/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Sign201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificateAuthorityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateAuthorityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateAuthorityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sign
     * @param account Organization account name (required)
     * @param serviceId Name of the Certificate Authority service (required)
     * @param csr  (required)
     * @param ttl  (required)
     * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
     * @param accept Setting the Accept header to &#x60;application/x-pem-file&#x60; allows Conjur to respond with a formatted certificate (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signCall(String account, String serviceId, String csr, String ttl, String xRequestId, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ca/{account}/{service_id}/sign"
            .replace("{" + "account" + "}", localVarApiClient.escapeString(account.toString()))
            .replace("{" + "service_id" + "}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (csr != null) {
            localVarFormParams.put("csr", csr);
        }

        if (ttl != null) {
            localVarFormParams.put("ttl", ttl);
        }

        if (xRequestId != null) {
            localVarHeaderParams.put("X-Request-Id", localVarApiClient.parameterToString(xRequestId));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/x-pem-file"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "conjurAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signValidateBeforeCall(String account, String serviceId, String csr, String ttl, String xRequestId, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling sign(Async)");
        }

        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling sign(Async)");
        }

        // verify the required parameter 'csr' is set
        if (csr == null) {
            throw new ApiException("Missing the required parameter 'csr' when calling sign(Async)");
        }

        // verify the required parameter 'ttl' is set
        if (ttl == null) {
            throw new ApiException("Missing the required parameter 'ttl' when calling sign(Async)");
        }

        return signCall(account, serviceId, csr, ttl, xRequestId, accept, _callback);

    }

    /**
     * Gets a signed certificate from the configured Certificate Authority service.
     * Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future. 
     * @param account Organization account name (required)
     * @param serviceId Name of the Certificate Authority service (required)
     * @param csr  (required)
     * @param ttl  (required)
     * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
     * @param accept Setting the Accept header to &#x60;application/x-pem-file&#x60; allows Conjur to respond with a formatted certificate (optional)
     * @return Sign201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Sign201Response sign(String account, String serviceId, String csr, String ttl, String xRequestId, String accept) throws ApiException {
        ApiResponse<Sign201Response> localVarResp = signWithHttpInfo(account, serviceId, csr, ttl, xRequestId, accept);
        return localVarResp.getData();
    }

    /**
     * Gets a signed certificate from the configured Certificate Authority service.
     * Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future. 
     * @param account Organization account name (required)
     * @param serviceId Name of the Certificate Authority service (required)
     * @param csr  (required)
     * @param ttl  (required)
     * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
     * @param accept Setting the Accept header to &#x60;application/x-pem-file&#x60; allows Conjur to respond with a formatted certificate (optional)
     * @return ApiResponse&lt;Sign201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Sign201Response> signWithHttpInfo(String account, String serviceId, String csr, String ttl, String xRequestId, String accept) throws ApiException {
        okhttp3.Call localVarCall = signValidateBeforeCall(account, serviceId, csr, ttl, xRequestId, accept, null);
        Type localVarReturnType = new TypeToken<Sign201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a signed certificate from the configured Certificate Authority service. (asynchronously)
     * Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future. 
     * @param account Organization account name (required)
     * @param serviceId Name of the Certificate Authority service (required)
     * @param csr  (required)
     * @param ttl  (required)
     * @param xRequestId Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one.  (optional)
     * @param accept Setting the Accept header to &#x60;application/x-pem-file&#x60; allows Conjur to respond with a formatted certificate (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The response body is the newly signed certificate </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot process the request due to malformed request syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication information is missing or invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Either           - The authenticated role is not a Host role, - The authenticated Host does not have &#x60;sign&#x60; privilege for the CA service, or - The authenticated Host ID does not match the of the CSR Common Name (CN).  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> CA Service with the given ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signAsync(String account, String serviceId, String csr, String ttl, String xRequestId, String accept, final ApiCallback<Sign201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signValidateBeforeCall(account, serviceId, csr, ttl, xRequestId, accept, _callback);
        Type localVarReturnType = new TypeToken<Sign201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
