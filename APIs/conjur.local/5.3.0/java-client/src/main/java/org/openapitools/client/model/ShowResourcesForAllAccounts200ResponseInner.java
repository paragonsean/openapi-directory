/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ShowResourcesForAllAccounts200ResponseInnerPermissionsInner;
import org.openapitools.client.model.ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner;
import org.openapitools.client.model.ShowResourcesForAllAccounts200ResponseInnerSecretsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShowResourcesForAllAccounts200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:56.055560-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShowResourcesForAllAccounts200ResponseInner {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<String> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<ShowResourcesForAllAccounts200ResponseInnerPermissionsInner> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public static final String SERIALIZED_NAME_POLICY_VERSIONS = "policy_versions";
  @SerializedName(SERIALIZED_NAME_POLICY_VERSIONS)
  private List<ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner> policyVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTED_TO = "restricted_to";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_TO)
  private List<String> restrictedTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<ShowResourcesForAllAccounts200ResponseInnerSecretsInner> secrets = new ArrayList<>();

  public ShowResourcesForAllAccounts200ResponseInner() {
  }

  public ShowResourcesForAllAccounts200ResponseInner annotations(List<String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ShowResourcesForAllAccounts200ResponseInner addAnnotationsItem(String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<String> annotations) {
    this.annotations = annotations;
  }


  public ShowResourcesForAllAccounts200ResponseInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ShowResourcesForAllAccounts200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ShowResourcesForAllAccounts200ResponseInner owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public ShowResourcesForAllAccounts200ResponseInner permissions(List<ShowResourcesForAllAccounts200ResponseInnerPermissionsInner> permissions) {
    this.permissions = permissions;
    return this;
  }

  public ShowResourcesForAllAccounts200ResponseInner addPermissionsItem(ShowResourcesForAllAccounts200ResponseInnerPermissionsInner permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<ShowResourcesForAllAccounts200ResponseInnerPermissionsInner> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<ShowResourcesForAllAccounts200ResponseInnerPermissionsInner> permissions) {
    this.permissions = permissions;
  }


  public ShowResourcesForAllAccounts200ResponseInner policy(String policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nullable
  public String getPolicy() {
    return policy;
  }

  public void setPolicy(String policy) {
    this.policy = policy;
  }


  public ShowResourcesForAllAccounts200ResponseInner policyVersions(List<ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner> policyVersions) {
    this.policyVersions = policyVersions;
    return this;
  }

  public ShowResourcesForAllAccounts200ResponseInner addPolicyVersionsItem(ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner policyVersionsItem) {
    if (this.policyVersions == null) {
      this.policyVersions = new ArrayList<>();
    }
    this.policyVersions.add(policyVersionsItem);
    return this;
  }

  /**
   * Get policyVersions
   * @return policyVersions
   */
  @javax.annotation.Nullable
  public List<ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner> getPolicyVersions() {
    return policyVersions;
  }

  public void setPolicyVersions(List<ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner> policyVersions) {
    this.policyVersions = policyVersions;
  }


  public ShowResourcesForAllAccounts200ResponseInner restrictedTo(List<String> restrictedTo) {
    this.restrictedTo = restrictedTo;
    return this;
  }

  public ShowResourcesForAllAccounts200ResponseInner addRestrictedToItem(String restrictedToItem) {
    if (this.restrictedTo == null) {
      this.restrictedTo = new ArrayList<>();
    }
    this.restrictedTo.add(restrictedToItem);
    return this;
  }

  /**
   * Get restrictedTo
   * @return restrictedTo
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedTo() {
    return restrictedTo;
  }

  public void setRestrictedTo(List<String> restrictedTo) {
    this.restrictedTo = restrictedTo;
  }


  public ShowResourcesForAllAccounts200ResponseInner secrets(List<ShowResourcesForAllAccounts200ResponseInnerSecretsInner> secrets) {
    this.secrets = secrets;
    return this;
  }

  public ShowResourcesForAllAccounts200ResponseInner addSecretsItem(ShowResourcesForAllAccounts200ResponseInnerSecretsInner secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

  /**
   * Get secrets
   * @return secrets
   */
  @javax.annotation.Nullable
  public List<ShowResourcesForAllAccounts200ResponseInnerSecretsInner> getSecrets() {
    return secrets;
  }

  public void setSecrets(List<ShowResourcesForAllAccounts200ResponseInnerSecretsInner> secrets) {
    this.secrets = secrets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShowResourcesForAllAccounts200ResponseInner showResourcesForAllAccounts200ResponseInner = (ShowResourcesForAllAccounts200ResponseInner) o;
    return Objects.equals(this.annotations, showResourcesForAllAccounts200ResponseInner.annotations) &&
        Objects.equals(this.createdAt, showResourcesForAllAccounts200ResponseInner.createdAt) &&
        Objects.equals(this.id, showResourcesForAllAccounts200ResponseInner.id) &&
        Objects.equals(this.owner, showResourcesForAllAccounts200ResponseInner.owner) &&
        Objects.equals(this.permissions, showResourcesForAllAccounts200ResponseInner.permissions) &&
        Objects.equals(this.policy, showResourcesForAllAccounts200ResponseInner.policy) &&
        Objects.equals(this.policyVersions, showResourcesForAllAccounts200ResponseInner.policyVersions) &&
        Objects.equals(this.restrictedTo, showResourcesForAllAccounts200ResponseInner.restrictedTo) &&
        Objects.equals(this.secrets, showResourcesForAllAccounts200ResponseInner.secrets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, createdAt, id, owner, permissions, policy, policyVersions, restrictedTo, secrets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShowResourcesForAllAccounts200ResponseInner {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    policyVersions: ").append(toIndentedString(policyVersions)).append("\n");
    sb.append("    restrictedTo: ").append(toIndentedString(restrictedTo)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("owner");
    openapiFields.add("permissions");
    openapiFields.add("policy");
    openapiFields.add("policy_versions");
    openapiFields.add("restricted_to");
    openapiFields.add("secrets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShowResourcesForAllAccounts200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShowResourcesForAllAccounts200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShowResourcesForAllAccounts200ResponseInner is not found in the empty JSON string", ShowResourcesForAllAccounts200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShowResourcesForAllAccounts200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShowResourcesForAllAccounts200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull() && !jsonObj.get("annotations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotations` to be an array in the JSON string but got `%s`", jsonObj.get("annotations").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            ShowResourcesForAllAccounts200ResponseInnerPermissionsInner.validateJsonElement(jsonArraypermissions.get(i));
          };
        }
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      if (jsonObj.get("policy_versions") != null && !jsonObj.get("policy_versions").isJsonNull()) {
        JsonArray jsonArraypolicyVersions = jsonObj.getAsJsonArray("policy_versions");
        if (jsonArraypolicyVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policy_versions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policy_versions` to be an array in the JSON string but got `%s`", jsonObj.get("policy_versions").toString()));
          }

          // validate the optional field `policy_versions` (array)
          for (int i = 0; i < jsonArraypolicyVersions.size(); i++) {
            ShowResourcesForAllAccounts200ResponseInnerPolicyVersionsInner.validateJsonElement(jsonArraypolicyVersions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restricted_to") != null && !jsonObj.get("restricted_to").isJsonNull() && !jsonObj.get("restricted_to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restricted_to` to be an array in the JSON string but got `%s`", jsonObj.get("restricted_to").toString()));
      }
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) {
        JsonArray jsonArraysecrets = jsonObj.getAsJsonArray("secrets");
        if (jsonArraysecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
          }

          // validate the optional field `secrets` (array)
          for (int i = 0; i < jsonArraysecrets.size(); i++) {
            ShowResourcesForAllAccounts200ResponseInnerSecretsInner.validateJsonElement(jsonArraysecrets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShowResourcesForAllAccounts200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShowResourcesForAllAccounts200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShowResourcesForAllAccounts200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShowResourcesForAllAccounts200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ShowResourcesForAllAccounts200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ShowResourcesForAllAccounts200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShowResourcesForAllAccounts200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShowResourcesForAllAccounts200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShowResourcesForAllAccounts200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to ShowResourcesForAllAccounts200ResponseInner
   */
  public static ShowResourcesForAllAccounts200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShowResourcesForAllAccounts200ResponseInner.class);
  }

  /**
   * Convert an instance of ShowResourcesForAllAccounts200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

