/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAuthenticators200Response;
import org.openapitools.client.model.GetServiceAuthenticatorStatus200Response;
import org.openapitools.client.model.Info200Response;
import org.openapitools.client.model.WhoAmI200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StatusApi
 */
@Disabled
public class StatusApiTest {

    private final StatusApi api = new StatusApi();

    /**
     * Details about which authenticators are on the Conjur Server
     *
     * Response contains three members: installed, configured, and enabled.  installed: The authenticator is implemented in Conjur and is available for configuration configured: The authenticator has a webservice in the DB that was loaded by policy enabled: The authenticator is enabled (in the DB or in the ENV) and is ready for authentication 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthenticatorsTest() throws ApiException {
        String xRequestId = null;
        GetAuthenticators200Response response = api.getAuthenticators(xRequestId);
        // TODO: test validations
    }

    /**
     * Details whether an authentication service has been configured properly
     *
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  This operation only supports the GCP authenticator  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGCPAuthenticatorStatusTest() throws ApiException {
        String account = null;
        String xRequestId = null;
        api.getGCPAuthenticatorStatus(account, xRequestId);
        // TODO: test validations
    }

    /**
     * Details whether an authentication service has been configured properly
     *
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  Supported Authenticators:   - Azure   - OIDC  Not Supported:   - AWS IAM   - Kubernetes   - LDAP  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest() throws ApiException {
        String authenticator = null;
        String serviceId = null;
        String account = null;
        String xRequestId = null;
        GetServiceAuthenticatorStatus200Response response = api.getServiceAuthenticatorStatus(authenticator, serviceId, account, xRequestId);
        // TODO: test validations
    }

    /**
     * Health info about conjur
     *
     * You can request health checks against any cluster node using the Conjur API. These routes do not require authentication.  The health check attempts an internal HTTP or TCP connection to each Conjur Enterprise service. It also attempts a simple transaction against all internal databases. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthTest() throws ApiException {
        Object response = api.health();
        // TODO: test validations
    }

    /**
     * Basic information about the Conjur Enterprise server
     *
     * Information about the Conjur Enterprise node which was queried against.  Includes authenticator info, release/version info, configuration details, internal services, and role information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTest() throws ApiException {
        Info200Response response = api.info();
        // TODO: test validations
    }

    /**
     * Health info about a given Conjur Enterprise server
     *
     * Use the remote_health route to check the health of any Conjur Enterprise Server from any other Conjur Enterprise Server. With this route, you can check master health relative to a follower, or follower health relative to a standby, and so on. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void remoteHealthTest() throws ApiException {
        String remote = null;
        Object response = api.remoteHealth(remote);
        // TODO: test validations
    }

    /**
     * Provides information about the client making an API request.
     *
     * WhoAmI provides information about the client making an API request. It can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see Host Attributes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void whoAmITest() throws ApiException {
        String xRequestId = null;
        WhoAmI200Response response = api.whoAmI(xRequestId);
        // TODO: test validations
    }

}
