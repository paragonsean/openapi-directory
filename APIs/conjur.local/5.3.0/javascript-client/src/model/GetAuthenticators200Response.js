/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetAuthenticators200Response model module.
 * @module model/GetAuthenticators200Response
 * @version 5.3.0
 */
class GetAuthenticators200Response {
    /**
     * Constructs a new <code>GetAuthenticators200Response</code>.
     * @alias module:model/GetAuthenticators200Response
     */
    constructor() { 
        
        GetAuthenticators200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetAuthenticators200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAuthenticators200Response} obj Optional instance to populate.
     * @return {module:model/GetAuthenticators200Response} The populated <code>GetAuthenticators200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAuthenticators200Response();

            if (data.hasOwnProperty('configured')) {
                obj['configured'] = ApiClient.convertToType(data['configured'], ['String']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], ['String']);
            }
            if (data.hasOwnProperty('installed')) {
                obj['installed'] = ApiClient.convertToType(data['installed'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAuthenticators200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAuthenticators200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['configured'])) {
            throw new Error("Expected the field `configured` to be an array in the JSON data but got " + data['configured']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enabled'])) {
            throw new Error("Expected the field `enabled` to be an array in the JSON data but got " + data['enabled']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['installed'])) {
            throw new Error("Expected the field `installed` to be an array in the JSON data but got " + data['installed']);
        }

        return true;
    }


}



/**
 * The authenticators configured on the Conjur server
 * @member {Array.<String>} configured
 */
GetAuthenticators200Response.prototype['configured'] = undefined;

/**
 * The authenticators enabled on the Conjur server
 * @member {Array.<String>} enabled
 */
GetAuthenticators200Response.prototype['enabled'] = undefined;

/**
 * The authenticators installed on the Conjur server
 * @member {Array.<String>} installed
 */
GetAuthenticators200Response.prototype['installed'] = undefined;






export default GetAuthenticators200Response;

