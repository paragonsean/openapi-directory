/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Info200ResponseAuthenticators from './Info200ResponseAuthenticators';

/**
 * The Info200Response model module.
 * @module model/Info200Response
 * @version 5.3.0
 */
class Info200Response {
    /**
     * Constructs a new <code>Info200Response</code>.
     * @alias module:model/Info200Response
     */
    constructor() { 
        
        Info200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Info200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Info200Response} obj Optional instance to populate.
     * @return {module:model/Info200Response} The populated <code>Info200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Info200Response();

            if (data.hasOwnProperty('authenticators')) {
                obj['authenticators'] = Info200ResponseAuthenticators.constructFromObject(data['authenticators']);
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], Object);
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('release')) {
                obj['release'] = ApiClient.convertToType(data['release'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], Object);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Info200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Info200Response</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authenticators`
        if (data['authenticators']) { // data not null
          Info200ResponseAuthenticators.validateJSON(data['authenticators']);
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['release'] && !(typeof data['release'] === 'string' || data['release'] instanceof String)) {
            throw new Error("Expected the field `release` to be a primitive type in the JSON string but got " + data['release']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/Info200ResponseAuthenticators} authenticators
 */
Info200Response.prototype['authenticators'] = undefined;

/**
 * @member {Object} configuration
 */
Info200Response.prototype['configuration'] = undefined;

/**
 * @member {String} container
 */
Info200Response.prototype['container'] = undefined;

/**
 * @member {String} release
 */
Info200Response.prototype['release'] = undefined;

/**
 * @member {String} role
 */
Info200Response.prototype['role'] = undefined;

/**
 * @member {Object} services
 */
Info200Response.prototype['services'] = undefined;

/**
 * @member {String} version
 */
Info200Response.prototype['version'] = undefined;






export default Info200Response;

