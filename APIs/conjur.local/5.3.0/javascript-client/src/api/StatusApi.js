/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetAuthenticators200Response from '../model/GetAuthenticators200Response';
import GetServiceAuthenticatorStatus200Response from '../model/GetServiceAuthenticatorStatus200Response';
import Info200Response from '../model/Info200Response';
import WhoAmI200Response from '../model/WhoAmI200Response';

/**
* Status service.
* @module api/StatusApi
* @version 5.3.0
*/
export default class StatusApi {

    /**
    * Constructs a new StatusApi. 
    * @alias module:api/StatusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAuthenticators operation.
     * @callback module:api/StatusApi~getAuthenticatorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthenticators200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details about which authenticators are on the Conjur Server
     * Response contains three members: installed, configured, and enabled.  installed: The authenticator is implemented in Conjur and is available for configuration configured: The authenticator has a webservice in the DB that was loaded by policy enabled: The authenticator is enabled (in the DB or in the ENV) and is ready for authentication 
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/StatusApi~getAuthenticatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthenticators200Response}
     */
    getAuthenticators(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'conjurKubernetesMutualTls', 'conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthenticators200Response;
      return this.apiClient.callApi(
        '/authenticators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGCPAuthenticatorStatus operation.
     * @callback module:api/StatusApi~getGCPAuthenticatorStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details whether an authentication service has been configured properly
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  This operation only supports the GCP authenticator  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     * @param {String} account The organization account name
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/StatusApi~getGCPAuthenticatorStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGCPAuthenticatorStatus(account, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling getGCPAuthenticatorStatus");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/authn-gcp/{account}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceAuthenticatorStatus operation.
     * @callback module:api/StatusApi~getServiceAuthenticatorStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceAuthenticatorStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details whether an authentication service has been configured properly
     * Once the status webservice has been properly configured and the relevant user groups have been given permissions to access the status webservice, the users in those groups can check the status of the authenticator.  Supported Authenticators:   - Azure   - OIDC  Not Supported:   - AWS IAM   - Kubernetes   - LDAP  See [Conjur Documentation](https://docs.conjur.org/Latest/en/Content/Integrations/Authn-status.htm) for details on setting up the authenticator status webservice. 
     * @param {String} authenticator The type of authenticator
     * @param {String} serviceId URL-Encoded authenticator service ID
     * @param {String} account The organization account name
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/StatusApi~getServiceAuthenticatorStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceAuthenticatorStatus200Response}
     */
    getServiceAuthenticatorStatus(authenticator, serviceId, account, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authenticator' is set
      if (authenticator === undefined || authenticator === null) {
        throw new Error("Missing the required parameter 'authenticator' when calling getServiceAuthenticatorStatus");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getServiceAuthenticatorStatus");
      }
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling getServiceAuthenticatorStatus");
      }

      let pathParams = {
        'authenticator': authenticator,
        'service_id': serviceId,
        'account': account
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceAuthenticatorStatus200Response;
      return this.apiClient.callApi(
        '/{authenticator}/{service_id}/{account}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the health operation.
     * @callback module:api/StatusApi~healthCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health info about conjur
     * You can request health checks against any cluster node using the Conjur API. These routes do not require authentication.  The health check attempts an internal HTTP or TCP connection to each Conjur Enterprise service. It also attempts a simple transaction against all internal databases. 
     * @param {module:api/StatusApi~healthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    health(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'conjurKubernetesMutualTls', 'conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the info operation.
     * @callback module:api/StatusApi~infoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Info200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic information about the Conjur Enterprise server
     * Information about the Conjur Enterprise node which was queried against.  Includes authenticator info, release/version info, configuration details, internal services, and role information. 
     * @param {module:api/StatusApi~infoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Info200Response}
     */
    info(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'conjurKubernetesMutualTls', 'conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Info200Response;
      return this.apiClient.callApi(
        '/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteHealth operation.
     * @callback module:api/StatusApi~remoteHealthCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Health info about a given Conjur Enterprise server
     * Use the remote_health route to check the health of any Conjur Enterprise Server from any other Conjur Enterprise Server. With this route, you can check master health relative to a follower, or follower health relative to a standby, and so on. 
     * @param {String} remote The hostname of the remote to check
     * @param {module:api/StatusApi~remoteHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    remoteHealth(remote, callback) {
      let postBody = null;
      // verify the required parameter 'remote' is set
      if (remote === undefined || remote === null) {
        throw new Error("Missing the required parameter 'remote' when calling remoteHealth");
      }

      let pathParams = {
        'remote': remote
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'conjurKubernetesMutualTls', 'conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/remote_health/{remote}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whoAmI operation.
     * @callback module:api/StatusApi~whoAmICallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhoAmI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the client making an API request.
     * WhoAmI provides information about the client making an API request. It can be used to help troubleshoot configuration by verifying authentication and the client IP address for audit and network access restrictions. For more information, see Host Attributes. 
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/StatusApi~whoAmICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhoAmI200Response}
     */
    whoAmI(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WhoAmI200Response;
      return this.apiClient.callApi(
        '/whoami', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
