/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateHost201Response from '../model/CreateHost201Response';
import CreateToken200ResponseInner from '../model/CreateToken200ResponseInner';

/**
* HostFactory service.
* @module api/HostFactoryApi
* @version 5.3.0
*/
export default class HostFactoryApi {

    /**
    * Constructs a new HostFactoryApi. 
    * @alias module:api/HostFactoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createHost operation.
     * @callback module:api/HostFactoryApi~createHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Host using the Host Factory.
     * Creates a Host using the Host Factory and returns a JSON description of it.  Requires a host factory token, which can be created using the create tokens API. In practice, this token is usually provided automatically as part of Conjur integration with your host provisioning infrastructure.  Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address. 
     * @param {String} id Identifier of the host to be created. It will be created within the account of the host factory.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {Object.<String, Object>} [annotations] Annotations to apply to the new host
     * @param {module:api/HostFactoryApi~createHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHost201Response}
     */
    createHost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createHost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
        'annotations': opts['annotations'],
        'id': id
      };

      let authNames = ['conjurAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CreateHost201Response;
      return this.apiClient.callApi(
        '/host_factories/hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/HostFactoryApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreateToken200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates one or more host identity tokens.
     * Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.  If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.  ##### Permissions required # `execute` privilege on the Host Factory.\" 
     * @param {String} expiration `ISO 8601 datetime` denoting a requested expiration time.
     * @param {String} hostFactory Fully qualified host factory ID
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {Array.<String>} [cidr] Number of host tokens to create
     * @param {Number} [count] Number of host tokens to create
     * @param {module:api/HostFactoryApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreateToken200ResponseInner>}
     */
    createToken(expiration, hostFactory, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'expiration' is set
      if (expiration === undefined || expiration === null) {
        throw new Error("Missing the required parameter 'expiration' when calling createToken");
      }
      // verify the required parameter 'hostFactory' is set
      if (hostFactory === undefined || hostFactory === null) {
        throw new Error("Missing the required parameter 'hostFactory' when calling createToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
        'cidr': this.apiClient.buildCollectionParam(opts['cidr'], 'csv'),
        'count': opts['count'],
        'expiration': expiration,
        'host_factory': hostFactory
      };

      let authNames = ['conjurAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [CreateToken200ResponseInner];
      return this.apiClient.callApi(
        '/host_factory_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeToken operation.
     * @callback module:api/HostFactoryApi~revokeTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes a token, immediately disabling it.
     * Revokes a token, immediately disabling it.  ##### Permissions required  `update` privilege on the host factory.\" 
     * @param {String} token The host factory token to revoke
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/HostFactoryApi~revokeTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeToken(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling revokeToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/host_factory_tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
