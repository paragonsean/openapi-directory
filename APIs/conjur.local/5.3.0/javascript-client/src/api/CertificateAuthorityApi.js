/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Sign201Response from '../model/Sign201Response';

/**
* CertificateAuthority service.
* @module api/CertificateAuthorityApi
* @version 5.3.0
*/
export default class CertificateAuthorityApi {

    /**
    * Constructs a new CertificateAuthorityApi. 
    * @alias module:api/CertificateAuthorityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sign operation.
     * @callback module:api/CertificateAuthorityApi~signCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sign201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a signed certificate from the configured Certificate Authority service.
     * Gets a signed certificate from the configured Certificate Authority service.  The request must include a valid Certificate Signing Request, and a desired TTL in ISO 8601 format.  *** IMPORTANT *** This endpoint is part of an early implementation of support for using Conjur as a certificate authority, and is currently available at the Community (or early alpha) level. This endpoint is still subject to breaking changes in the future. 
     * @param {String} account Organization account name
     * @param {String} serviceId Name of the Certificate Authority service
     * @param {String} csr 
     * @param {String} ttl 
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {String} [accept] Setting the Accept header to `application/x-pem-file` allows Conjur to respond with a formatted certificate
     * @param {module:api/CertificateAuthorityApi~signCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sign201Response}
     */
    sign(account, serviceId, csr, ttl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling sign");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling sign");
      }
      // verify the required parameter 'csr' is set
      if (csr === undefined || csr === null) {
        throw new Error("Missing the required parameter 'csr' when calling sign");
      }
      // verify the required parameter 'ttl' is set
      if (ttl === undefined || ttl === null) {
        throw new Error("Missing the required parameter 'ttl' when calling sign");
      }

      let pathParams = {
        'account': account,
        'service_id': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'Accept': opts['accept']
      };
      let formParams = {
        'csr': csr,
        'ttl': ttl
      };

      let authNames = ['conjurAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/x-pem-file'];
      let returnType = Sign201Response;
      return this.apiClient.callApi(
        '/ca/{account}/{service_id}/sign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
