/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ShowResourcesForAllAccounts200ResponseInner from '../model/ShowResourcesForAllAccounts200ResponseInner';

/**
* Resources service.
* @module api/ResourcesApi
* @version 5.3.0
*/
export default class ResourcesApi {

    /**
    * Constructs a new ResourcesApi. 
    * @alias module:api/ResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the showResource operation.
     * @callback module:api/ResourcesApi~showResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows a description of a single resource.
     * Details about a single resource.  If `permitted_roles` and `privilege` are given, Conjur lists the roles with the specified privilege on the resource.  If `check`, `privilege` and `role` are given, Conjur checks if the specified role has the privilege on the resource.  If `permitted_roles` and `check` are both given, Conjur responds to the `check` call ONLY.  ##### Permissions Required 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource
     * @param {String} identifier ID of the resource for which to get the information about
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {Boolean} [permittedRoles] Lists the roles which have the named privilege on a resource.
     * @param {String} [privilege] Level of privilege to filter on. Can only be used in combination with `permitted_roles` or `check` parameter.
     * @param {Boolean} [check] Check whether a role has a privilege on a resource.
     * @param {String} [role] Role to check privilege on. Can only be used in combination with `check` parameter.
     * @param {module:api/ResourcesApi~showResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    showResource(account, kind, identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling showResource");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling showResource");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling showResource");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'permitted_roles': opts['permittedRoles'],
        'privilege': opts['privilege'],
        'check': opts['check'],
        'role': opts['role']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resources/{account}/{kind}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showResourcesForAccount operation.
     * @callback module:api/ResourcesApi~showResourcesForAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists resources within an organization account.
     * Lists resources within an organization account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`. 
     * @param {String} account Organization account name
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {String} [kind] Type of resource
     * @param {module:model/ERRORUNKNOWN} [search] Filter resources based on this value by name
     * @param {Number} [offset] When listing resources, start at this item number.
     * @param {Number} [limit] When listing resources, return up to this many results.
     * @param {Boolean} [count] When listing resources, if `true`, return only the count of the results.
     * @param {String} [role] Retrieves the resources list for a different role if the authenticated role has access
     * @param {String} [actingAs] Retrieves the resources list for a different role if the authenticated role has access
     * @param {module:api/ResourcesApi~showResourcesForAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showResourcesForAccount(account, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling showResourcesForAccount");
      }

      let pathParams = {
        'account': account
      };
      let queryParams = {
        'kind': opts['kind'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'count': opts['count'],
        'role': opts['role'],
        'acting_as': opts['actingAs']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/resources/{account}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showResourcesForAllAccounts operation.
     * @callback module:api/ResourcesApi~showResourcesForAllAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowResourcesForAllAccounts200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists resources within an organization account.
     * Lists resources within an organization account.  In the absence of an `account` query parameter, shows results for the account of the authorization token user.  If an `account` query parameter is given, shows results for the specified account.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`.\" 
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {String} [account] Organization account name
     * @param {String} [kind] Type of resource
     * @param {String} [search] Filter resources based on this value by name
     * @param {Number} [offset] When listing resources, start at this item number.
     * @param {Number} [limit] When listing resources, return up to this many results.
     * @param {Boolean} [count] When listing resources, if `true`, return only the count of the results.
     * @param {String} [role] Retrieves the resources list for a different role if the authenticated role has access
     * @param {String} [actingAs] Retrieves the resources list for a different role if the authenticated role has access
     * @param {module:api/ResourcesApi~showResourcesForAllAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowResourcesForAllAccounts200ResponseInner>}
     */
    showResourcesForAllAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account'],
        'kind': opts['kind'],
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'count': opts['count'],
        'role': opts['role'],
        'acting_as': opts['actingAs']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShowResourcesForAllAccounts200ResponseInner];
      return this.apiClient.callApi(
        '/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showResourcesForKind operation.
     * @callback module:api/ResourcesApi~showResourcesForKindCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists resources of the same kind within an organization account.
     * Lists resources of the same kind within an organization account.  Kinds of resources include: policy, user, host, group, layer, or variable  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is `true`, returns only the number of items in the list.  ##### Text search  If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`. 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:model/ERRORUNKNOWN} [search] Filter resources based on this value by name
     * @param {Number} [offset] When listing resources, start at this item number.
     * @param {Number} [limit] When listing resources, return up to this many results.
     * @param {Boolean} [count] When listing resources, if `true`, return only the count of the results.
     * @param {String} [role] Retrieves the resources list for a different role if the authenticated role has access
     * @param {String} [actingAs] Retrieves the resources list for a different role if the authenticated role has access
     * @param {module:api/ResourcesApi~showResourcesForKindCallback} callback The callback function, accepting three arguments: error, data, response
     */
    showResourcesForKind(account, kind, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling showResourcesForKind");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling showResourcesForKind");
      }

      let pathParams = {
        'account': account,
        'kind': kind
      };
      let queryParams = {
        'search': opts['search'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'count': opts['count'],
        'role': opts['role'],
        'acting_as': opts['actingAs']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/resources/{account}/{kind}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
