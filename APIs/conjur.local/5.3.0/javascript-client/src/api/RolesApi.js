/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Roles service.
* @module api/RolesApi
* @version 5.3.0
*/
export default class RolesApi {

    /**
    * Constructs a new RolesApi. 
    * @alias module:api/RolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMemberToRole operation.
     * @callback module:api/RolesApi~addMemberToRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update or modify an existing role membership
     * Updates or modifies an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be added as a member of the role specified in the endpoint URI. 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource
     * @param {String} identifier ID of the role for which to get the information about
     * @param {String} members Returns a list of the Role's members.
     * @param {String} member The identifier of the Role to be added as a member.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/RolesApi~addMemberToRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMemberToRole(account, kind, identifier, members, member, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling addMemberToRole");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling addMemberToRole");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling addMemberToRole");
      }
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling addMemberToRole");
      }
      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling addMemberToRole");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'members': members,
        'member': member
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/roles/{account}/{kind}/{identifier}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeMemberFromRole operation.
     * @callback module:api/RolesApi~removeMemberFromRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing role membership
     * Deletes an existing role membership.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  When the `members` query parameter is provided, you will get the members of a role.  When the `members` and `member` query parameters are provided, the role specfified by `member` will be removed as a member of the role specified in the endpoint URI. 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource
     * @param {String} identifier ID of the role for which to get the information about
     * @param {String} members Returns a list of the Role's members.
     * @param {String} member The identifier of the Role to be added as a member.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:api/RolesApi~removeMemberFromRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeMemberFromRole(account, kind, identifier, members, member, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling removeMemberFromRole");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling removeMemberFromRole");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling removeMemberFromRole");
      }
      // verify the required parameter 'members' is set
      if (members === undefined || members === null) {
        throw new Error("Missing the required parameter 'members' when calling removeMemberFromRole");
      }
      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling removeMemberFromRole");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'members': members,
        'member': member
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/roles/{account}/{kind}/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showRole operation.
     * @callback module:api/RolesApi~showRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role information
     * Gets detailed information about a specific role, including the role members.  If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.  ##### Listing members  If `members` is provided, you will get the members of a role.  If a `kind` query parameter is given, narrows results to only resources of that kind.  If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.  If the parameter `count` is true, returns only the number of items in the list.  ##### Text search  If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.  ##### Parameter Priority  If Conjur is given any combination of optional parameters, it responds with ONLY results for the parameter of the highest priority.  1. `graph` 2. `all` 3. `memberships` 4. `members` 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource
     * @param {String} identifier ID of the role for which to get the information about
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {String} [all] Returns an array of Role IDs representing all role memberships, expanded recursively.
     * @param {String} [memberships] Returns all direct role memberships (members not expanded recursively).
     * @param {String} [members] Returns a list of the Role's members.
     * @param {Number} [offset] When listing members, start at this item number.
     * @param {Number} [limit] When listing members, return up to this many results.
     * @param {Boolean} [count] When listing members, if `true`, return only the count of members.
     * @param {String} [search] When listing members, the results will be narrowed to only those matching the provided string
     * @param {String} [graph] If included in the query returns a graph view of the role
     * @param {module:api/RolesApi~showRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    showRole(account, kind, identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling showRole");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling showRole");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling showRole");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'all': opts['all'],
        'memberships': opts['memberships'],
        'members': opts['members'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'count': opts['count'],
        'search': opts['search'],
        'graph': opts['graph']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/roles/{account}/{kind}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
