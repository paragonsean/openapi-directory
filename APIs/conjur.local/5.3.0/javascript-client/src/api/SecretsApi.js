/**
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Secrets service.
* @module api/SecretsApi
* @version 5.3.0
*/
export default class SecretsApi {

    /**
    * Constructs a new SecretsApi. 
    * @alias module:api/SecretsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSecret operation.
     * @callback module:api/SecretsApi~createSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a secret value within the specified variable.
     * Creates a secret value within the specified Secret.   Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource - in almost all cases this should be `variable`
     * @param {String} identifier URL-encoded variable ID
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {String} [expirations] Tells the server to reset the variables expiration date
     * @param {String} [body] Secret data
     * @param {module:api/SecretsApi~createSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSecret(account, kind, identifier, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling createSecret");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling createSecret");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling createSecret");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'expirations': opts['expirations']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/secrets/{account}/{kind}/{identifier}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecret operation.
     * @callback module:api/SecretsApi~getSecretCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the value of a secret from the specified Secret.
     * Fetches the value of a secret from the specified Secret. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.  The secret data is returned in the response body.  Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     * @param {String} account Organization account name
     * @param {String} kind Type of resource - in almost all cases this should be `variable`
     * @param {String} identifier URL-encoded variable ID
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {Number} [version] (**Optional**) Version you want to retrieve (Conjur keeps the last 20 versions of a secret)
     * @param {module:api/SecretsApi~getSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSecret(account, kind, identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling getSecret");
      }
      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling getSecret");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSecret");
      }

      let pathParams = {
        'account': account,
        'kind': kind,
        'identifier': identifier
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/secrets/{account}/{kind}/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecrets operation.
     * @callback module:api/SecretsApi~getSecretsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch multiple secrets
     * Fetches multiple secret values in one invocation. Itâ€™s faster to fetch secrets in batches than to fetch them one at a time.
     * @param {String} variableIds Comma-delimited, URL-encoded resource IDs of the variables.
     * @param {Object} opts Optional parameters
     * @param {String} [xRequestId] Add an ID to the request being made so it can be tracked in Conjur. If not provided the server will automatically generate one. 
     * @param {module:model/String} [acceptEncoding] Set the encoding of the response object
     * @param {module:api/SecretsApi~getSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSecrets(variableIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variableIds' is set
      if (variableIds === undefined || variableIds === null) {
        throw new Error("Missing the required parameter 'variableIds' when calling getSecrets");
      }

      let pathParams = {
      };
      let queryParams = {
        'variable_ids': variableIds
      };
      let headerParams = {
        'X-Request-Id': opts['xRequestId'],
        'Accept-Encoding': opts['acceptEncoding']
      };
      let formParams = {
      };

      let authNames = ['conjurAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
