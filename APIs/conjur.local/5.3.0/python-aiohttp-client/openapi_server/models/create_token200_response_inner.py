# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateToken200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr: List[str]=None, expiration: str=None, token: str=None):
        """CreateToken200ResponseInner - a model defined in OpenAPI

        :param cidr: The cidr of this CreateToken200ResponseInner.
        :param expiration: The expiration of this CreateToken200ResponseInner.
        :param token: The token of this CreateToken200ResponseInner.
        """
        self.openapi_types = {
            'cidr': List[str],
            'expiration': str,
            'token': str
        }

        self.attribute_map = {
            'cidr': 'cidr',
            'expiration': 'expiration',
            'token': 'token'
        }

        self._cidr = cidr
        self._expiration = expiration
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateToken200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createToken_200_response_inner of this CreateToken200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr(self):
        """Gets the cidr of this CreateToken200ResponseInner.


        :return: The cidr of this CreateToken200ResponseInner.
        :rtype: List[str]
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this CreateToken200ResponseInner.


        :param cidr: The cidr of this CreateToken200ResponseInner.
        :type cidr: List[str]
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr

    @property
    def expiration(self):
        """Gets the expiration of this CreateToken200ResponseInner.


        :return: The expiration of this CreateToken200ResponseInner.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CreateToken200ResponseInner.


        :param expiration: The expiration of this CreateToken200ResponseInner.
        :type expiration: str
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")

        self._expiration = expiration

    @property
    def token(self):
        """Gets the token of this CreateToken200ResponseInner.


        :return: The token of this CreateToken200ResponseInner.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreateToken200ResponseInner.


        :param token: The token of this CreateToken200ResponseInner.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
