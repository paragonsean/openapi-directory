# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateHost201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: List[str]=None, api_key: str=None, created_at: str=None, id: str=None, owner: str=None, permissions: List[str]=None):
        """CreateHost201Response - a model defined in OpenAPI

        :param annotations: The annotations of this CreateHost201Response.
        :param api_key: The api_key of this CreateHost201Response.
        :param created_at: The created_at of this CreateHost201Response.
        :param id: The id of this CreateHost201Response.
        :param owner: The owner of this CreateHost201Response.
        :param permissions: The permissions of this CreateHost201Response.
        """
        self.openapi_types = {
            'annotations': List[str],
            'api_key': str,
            'created_at': str,
            'id': str,
            'owner': str,
            'permissions': List[str]
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'api_key': 'api_key',
            'created_at': 'created_at',
            'id': 'id',
            'owner': 'owner',
            'permissions': 'permissions'
        }

        self._annotations = annotations
        self._api_key = api_key
        self._created_at = created_at
        self._id = id
        self._owner = owner
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHost201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createHost_201_response of this CreateHost201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this CreateHost201Response.


        :return: The annotations of this CreateHost201Response.
        :rtype: List[str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this CreateHost201Response.


        :param annotations: The annotations of this CreateHost201Response.
        :type annotations: List[str]
        """
        if annotations is None:
            raise ValueError("Invalid value for `annotations`, must not be `None`")

        self._annotations = annotations

    @property
    def api_key(self):
        """Gets the api_key of this CreateHost201Response.


        :return: The api_key of this CreateHost201Response.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CreateHost201Response.


        :param api_key: The api_key of this CreateHost201Response.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def created_at(self):
        """Gets the created_at of this CreateHost201Response.


        :return: The created_at of this CreateHost201Response.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateHost201Response.


        :param created_at: The created_at of this CreateHost201Response.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this CreateHost201Response.


        :return: The id of this CreateHost201Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateHost201Response.


        :param id: The id of this CreateHost201Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this CreateHost201Response.


        :return: The owner of this CreateHost201Response.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateHost201Response.


        :param owner: The owner of this CreateHost201Response.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this CreateHost201Response.


        :return: The permissions of this CreateHost201Response.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CreateHost201Response.


        :param permissions: The permissions of this CreateHost201Response.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
