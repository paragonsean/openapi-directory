# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.info200_response_authenticators import Info200ResponseAuthenticators
from openapi_server import util


class Info200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticators: Info200ResponseAuthenticators=None, configuration: object=None, container: str=None, release: str=None, role: str=None, services: object=None, version: str=None):
        """Info200Response - a model defined in OpenAPI

        :param authenticators: The authenticators of this Info200Response.
        :param configuration: The configuration of this Info200Response.
        :param container: The container of this Info200Response.
        :param release: The release of this Info200Response.
        :param role: The role of this Info200Response.
        :param services: The services of this Info200Response.
        :param version: The version of this Info200Response.
        """
        self.openapi_types = {
            'authenticators': Info200ResponseAuthenticators,
            'configuration': object,
            'container': str,
            'release': str,
            'role': str,
            'services': object,
            'version': str
        }

        self.attribute_map = {
            'authenticators': 'authenticators',
            'configuration': 'configuration',
            'container': 'container',
            'release': 'release',
            'role': 'role',
            'services': 'services',
            'version': 'version'
        }

        self._authenticators = authenticators
        self._configuration = configuration
        self._container = container
        self._release = release
        self._role = role
        self._services = services
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Info200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The info_200_response of this Info200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticators(self):
        """Gets the authenticators of this Info200Response.


        :return: The authenticators of this Info200Response.
        :rtype: Info200ResponseAuthenticators
        """
        return self._authenticators

    @authenticators.setter
    def authenticators(self, authenticators):
        """Sets the authenticators of this Info200Response.


        :param authenticators: The authenticators of this Info200Response.
        :type authenticators: Info200ResponseAuthenticators
        """

        self._authenticators = authenticators

    @property
    def configuration(self):
        """Gets the configuration of this Info200Response.


        :return: The configuration of this Info200Response.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Info200Response.


        :param configuration: The configuration of this Info200Response.
        :type configuration: object
        """

        self._configuration = configuration

    @property
    def container(self):
        """Gets the container of this Info200Response.


        :return: The container of this Info200Response.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Info200Response.


        :param container: The container of this Info200Response.
        :type container: str
        """

        self._container = container

    @property
    def release(self):
        """Gets the release of this Info200Response.


        :return: The release of this Info200Response.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Info200Response.


        :param release: The release of this Info200Response.
        :type release: str
        """

        self._release = release

    @property
    def role(self):
        """Gets the role of this Info200Response.


        :return: The role of this Info200Response.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Info200Response.


        :param role: The role of this Info200Response.
        :type role: str
        """

        self._role = role

    @property
    def services(self):
        """Gets the services of this Info200Response.


        :return: The services of this Info200Response.
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Info200Response.


        :param services: The services of this Info200Response.
        :type services: object
        """

        self._services = services

    @property
    def version(self):
        """Gets the version of this Info200Response.


        :return: The version of this Info200Response.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Info200Response.


        :param version: The version of this Info200Response.
        :type version: str
        """

        self._version = version
