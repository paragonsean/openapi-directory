/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILanguageModelsApi_H
#define OAI_OAILanguageModelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletionResponse.h"
#include "OAILearningCurveList.h"
#include "OAIMetrics.h"
#include "OAIModelList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILanguageModelsApi : public QObject {
    Q_OBJECT

public:
    OAILanguageModelsApi(const int timeOut = 0);
    ~OAILanguageModelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void deleteModel(const QString &model_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    */
    virtual void getTrainedModelLearningCurve(const QString &model_id, const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void getTrainedModelMetrics(const QString &model_id);

    /**
    * @param[in]  dataset_id QString [required]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    */
    virtual void getTrainedModels(const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteModelCallback(OAIHttpRequestWorker *worker);
    void getTrainedModelLearningCurveCallback(OAIHttpRequestWorker *worker);
    void getTrainedModelMetricsCallback(OAIHttpRequestWorker *worker);
    void getTrainedModelsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteModelSignal(OAIDeletionResponse summary);
    void getTrainedModelLearningCurveSignal(OAILearningCurveList summary);
    void getTrainedModelMetricsSignal(OAIMetrics summary);
    void getTrainedModelsSignal(OAIModelList summary);


    void deleteModelSignalFull(OAIHttpRequestWorker *worker, OAIDeletionResponse summary);
    void getTrainedModelLearningCurveSignalFull(OAIHttpRequestWorker *worker, OAILearningCurveList summary);
    void getTrainedModelMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void getTrainedModelsSignalFull(OAIHttpRequestWorker *worker, OAIModelList summary);

    Q_DECL_DEPRECATED_X("Use deleteModelSignalError() instead")
    void deleteModelSignalE(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelSignalError(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelLearningCurveSignalError() instead")
    void getTrainedModelLearningCurveSignalE(OAILearningCurveList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelLearningCurveSignalError(OAILearningCurveList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelMetricsSignalError() instead")
    void getTrainedModelMetricsSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelMetricsSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelsSignalError() instead")
    void getTrainedModelsSignalE(OAIModelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelsSignalError(OAIModelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteModelSignalErrorFull() instead")
    void deleteModelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelLearningCurveSignalErrorFull() instead")
    void getTrainedModelLearningCurveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelLearningCurveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelMetricsSignalErrorFull() instead")
    void getTrainedModelMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelsSignalErrorFull() instead")
    void getTrainedModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
