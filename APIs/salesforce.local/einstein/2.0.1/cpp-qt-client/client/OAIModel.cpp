/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_dataset_version_id_isSet = false;
    m_dataset_version_id_isValid = false;

    m_failure_msg_isSet = false;
    m_failure_msg_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_dataset_version_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_version_id, json[QString("datasetVersionId")]);
    m_dataset_version_id_isSet = !json[QString("datasetVersionId")].isNull() && m_dataset_version_id_isValid;

    m_failure_msg_isValid = ::OpenAPI::fromJsonValue(m_failure_msg, json[QString("failureMsg")]);
    m_failure_msg_isSet = !json[QString("failureMsg")].isNull() && m_failure_msg_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_dataset_version_id_isSet) {
        obj.insert(QString("datasetVersionId"), ::OpenAPI::toJsonValue(m_dataset_version_id));
    }
    if (m_failure_msg_isSet) {
        obj.insert(QString("failureMsg"), ::OpenAPI::toJsonValue(m_failure_msg));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIModel::getAlgorithm() const {
    return m_algorithm;
}
void OAIModel::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIModel::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIModel::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QDateTime OAIModel::getCreatedAt() const {
    return m_created_at;
}
void OAIModel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIModel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIModel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIModel::getDatasetId() const {
    return m_dataset_id;
}
void OAIModel::setDatasetId(const qint64 &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIModel::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIModel::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

qint64 OAIModel::getDatasetVersionId() const {
    return m_dataset_version_id;
}
void OAIModel::setDatasetVersionId(const qint64 &dataset_version_id) {
    m_dataset_version_id = dataset_version_id;
    m_dataset_version_id_isSet = true;
}

bool OAIModel::is_dataset_version_id_Set() const{
    return m_dataset_version_id_isSet;
}

bool OAIModel::is_dataset_version_id_Valid() const{
    return m_dataset_version_id_isValid;
}

QString OAIModel::getFailureMsg() const {
    return m_failure_msg;
}
void OAIModel::setFailureMsg(const QString &failure_msg) {
    m_failure_msg = failure_msg;
    m_failure_msg_isSet = true;
}

bool OAIModel::is_failure_msg_Set() const{
    return m_failure_msg_isSet;
}

bool OAIModel::is_failure_msg_Valid() const{
    return m_failure_msg_isValid;
}

QString OAIModel::getLanguage() const {
    return m_language;
}
void OAIModel::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIModel::is_language_Set() const{
    return m_language_isSet;
}

bool OAIModel::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIModel::getModelId() const {
    return m_model_id;
}
void OAIModel::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIModel::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIModel::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIModel::getModelType() const {
    return m_model_type;
}
void OAIModel::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIModel::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIModel::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIModel::getName() const {
    return m_name;
}
void OAIModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIModel::getObject() const {
    return m_object;
}
void OAIModel::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIModel::is_object_Set() const{
    return m_object_isSet;
}

bool OAIModel::is_object_Valid() const{
    return m_object_isValid;
}

double OAIModel::getProgress() const {
    return m_progress;
}
void OAIModel::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIModel::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIModel::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIModel::getStatus() const {
    return m_status;
}
void OAIModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIModel::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIModel::getUpdatedAt() const {
    return m_updated_at;
}
void OAIModel::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIModel::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIModel::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_id_isValid && m_dataset_version_id_isValid && m_model_id_isValid && m_name_isValid && m_progress_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
