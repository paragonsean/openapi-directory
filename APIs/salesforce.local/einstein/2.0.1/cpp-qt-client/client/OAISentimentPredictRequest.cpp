/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentimentPredictRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentimentPredictRequest::OAISentimentPredictRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentimentPredictRequest::OAISentimentPredictRequest() {
    this->initializeModel();
}

OAISentimentPredictRequest::~OAISentimentPredictRequest() {}

void OAISentimentPredictRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;
}

void OAISentimentPredictRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentimentPredictRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("numResults")]);
    m_num_results_isSet = !json[QString("numResults")].isNull() && m_num_results_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;
}

QString OAISentimentPredictRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentimentPredictRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_num_results_isSet) {
        obj.insert(QString("numResults"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    return obj;
}

QString OAISentimentPredictRequest::getDocument() const {
    return m_document;
}
void OAISentimentPredictRequest::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAISentimentPredictRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAISentimentPredictRequest::is_document_Valid() const{
    return m_document_isValid;
}

QString OAISentimentPredictRequest::getModelId() const {
    return m_model_id;
}
void OAISentimentPredictRequest::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAISentimentPredictRequest::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAISentimentPredictRequest::is_model_id_Valid() const{
    return m_model_id_isValid;
}

qint32 OAISentimentPredictRequest::getNumResults() const {
    return m_num_results;
}
void OAISentimentPredictRequest::setNumResults(const qint32 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAISentimentPredictRequest::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAISentimentPredictRequest::is_num_results_Valid() const{
    return m_num_results_isValid;
}

QString OAISentimentPredictRequest::getSampleId() const {
    return m_sample_id;
}
void OAISentimentPredictRequest::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAISentimentPredictRequest::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAISentimentPredictRequest::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

bool OAISentimentPredictRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentimentPredictRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_model_id_isValid && true;
}

} // namespace OpenAPI
