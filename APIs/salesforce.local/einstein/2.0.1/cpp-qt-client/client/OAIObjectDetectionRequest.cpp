/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectDetectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectDetectionRequest::OAIObjectDetectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectDetectionRequest::OAIObjectDetectionRequest() {
    this->initializeModel();
}

OAIObjectDetectionRequest::~OAIObjectDetectionRequest() {}

void OAIObjectDetectionRequest::initializeModel() {

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_sample_base64_content_isSet = false;
    m_sample_base64_content_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;

    m_sample_location_isSet = false;
    m_sample_location_isValid = false;
}

void OAIObjectDetectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectDetectionRequest::fromJsonObject(QJsonObject json) {

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_sample_base64_content_isValid = ::OpenAPI::fromJsonValue(m_sample_base64_content, json[QString("sampleBase64Content")]);
    m_sample_base64_content_isSet = !json[QString("sampleBase64Content")].isNull() && m_sample_base64_content_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;

    m_sample_location_isValid = ::OpenAPI::fromJsonValue(m_sample_location, json[QString("sampleLocation")]);
    m_sample_location_isSet = !json[QString("sampleLocation")].isNull() && m_sample_location_isValid;
}

QString OAIObjectDetectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectDetectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_sample_base64_content_isSet) {
        obj.insert(QString("sampleBase64Content"), ::OpenAPI::toJsonValue(m_sample_base64_content));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    if (m_sample_location_isSet) {
        obj.insert(QString("sampleLocation"), ::OpenAPI::toJsonValue(m_sample_location));
    }
    return obj;
}

QString OAIObjectDetectionRequest::getModelId() const {
    return m_model_id;
}
void OAIObjectDetectionRequest::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAIObjectDetectionRequest::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAIObjectDetectionRequest::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAIObjectDetectionRequest::getSampleBase64Content() const {
    return m_sample_base64_content;
}
void OAIObjectDetectionRequest::setSampleBase64Content(const QString &sample_base64_content) {
    m_sample_base64_content = sample_base64_content;
    m_sample_base64_content_isSet = true;
}

bool OAIObjectDetectionRequest::is_sample_base64_content_Set() const{
    return m_sample_base64_content_isSet;
}

bool OAIObjectDetectionRequest::is_sample_base64_content_Valid() const{
    return m_sample_base64_content_isValid;
}

QString OAIObjectDetectionRequest::getSampleId() const {
    return m_sample_id;
}
void OAIObjectDetectionRequest::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAIObjectDetectionRequest::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAIObjectDetectionRequest::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

QString OAIObjectDetectionRequest::getSampleLocation() const {
    return m_sample_location;
}
void OAIObjectDetectionRequest::setSampleLocation(const QString &sample_location) {
    m_sample_location = sample_location;
    m_sample_location_isSet = true;
}

bool OAIObjectDetectionRequest::is_sample_location_Set() const{
    return m_sample_location_isSet;
}

bool OAIObjectDetectionRequest::is_sample_location_Valid() const{
    return m_sample_location_isValid;
}

bool OAIObjectDetectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_base64_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectDetectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_id_isValid && true;
}

} // namespace OpenAPI
