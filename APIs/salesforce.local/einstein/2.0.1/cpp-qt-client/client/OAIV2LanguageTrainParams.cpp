/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2LanguageTrainParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2LanguageTrainParams::OAIV2LanguageTrainParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2LanguageTrainParams::OAIV2LanguageTrainParams() {
    this->initializeModel();
}

OAIV2LanguageTrainParams::~OAIV2LanguageTrainParams() {}

void OAIV2LanguageTrainParams::initializeModel() {

    m_train_split_ratio_isSet = false;
    m_train_split_ratio_isValid = false;

    m_with_feedback_isSet = false;
    m_with_feedback_isValid = false;

    m_with_global_dataset_id_isSet = false;
    m_with_global_dataset_id_isValid = false;
}

void OAIV2LanguageTrainParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2LanguageTrainParams::fromJsonObject(QJsonObject json) {

    m_train_split_ratio_isValid = ::OpenAPI::fromJsonValue(m_train_split_ratio, json[QString("trainSplitRatio")]);
    m_train_split_ratio_isSet = !json[QString("trainSplitRatio")].isNull() && m_train_split_ratio_isValid;

    m_with_feedback_isValid = ::OpenAPI::fromJsonValue(m_with_feedback, json[QString("withFeedback")]);
    m_with_feedback_isSet = !json[QString("withFeedback")].isNull() && m_with_feedback_isValid;

    m_with_global_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_with_global_dataset_id, json[QString("withGlobalDatasetId")]);
    m_with_global_dataset_id_isSet = !json[QString("withGlobalDatasetId")].isNull() && m_with_global_dataset_id_isValid;
}

QString OAIV2LanguageTrainParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2LanguageTrainParams::asJsonObject() const {
    QJsonObject obj;
    if (m_train_split_ratio_isSet) {
        obj.insert(QString("trainSplitRatio"), ::OpenAPI::toJsonValue(m_train_split_ratio));
    }
    if (m_with_feedback_isSet) {
        obj.insert(QString("withFeedback"), ::OpenAPI::toJsonValue(m_with_feedback));
    }
    if (m_with_global_dataset_id_isSet) {
        obj.insert(QString("withGlobalDatasetId"), ::OpenAPI::toJsonValue(m_with_global_dataset_id));
    }
    return obj;
}

float OAIV2LanguageTrainParams::getTrainSplitRatio() const {
    return m_train_split_ratio;
}
void OAIV2LanguageTrainParams::setTrainSplitRatio(const float &train_split_ratio) {
    m_train_split_ratio = train_split_ratio;
    m_train_split_ratio_isSet = true;
}

bool OAIV2LanguageTrainParams::is_train_split_ratio_Set() const{
    return m_train_split_ratio_isSet;
}

bool OAIV2LanguageTrainParams::is_train_split_ratio_Valid() const{
    return m_train_split_ratio_isValid;
}

bool OAIV2LanguageTrainParams::isWithFeedback() const {
    return m_with_feedback;
}
void OAIV2LanguageTrainParams::setWithFeedback(const bool &with_feedback) {
    m_with_feedback = with_feedback;
    m_with_feedback_isSet = true;
}

bool OAIV2LanguageTrainParams::is_with_feedback_Set() const{
    return m_with_feedback_isSet;
}

bool OAIV2LanguageTrainParams::is_with_feedback_Valid() const{
    return m_with_feedback_isValid;
}

qint64 OAIV2LanguageTrainParams::getWithGlobalDatasetId() const {
    return m_with_global_dataset_id;
}
void OAIV2LanguageTrainParams::setWithGlobalDatasetId(const qint64 &with_global_dataset_id) {
    m_with_global_dataset_id = with_global_dataset_id;
    m_with_global_dataset_id_isSet = true;
}

bool OAIV2LanguageTrainParams::is_with_global_dataset_id_Set() const{
    return m_with_global_dataset_id_isSet;
}

bool OAIV2LanguageTrainParams::is_with_global_dataset_id_Valid() const{
    return m_with_global_dataset_id_isValid;
}

bool OAIV2LanguageTrainParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_train_split_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_global_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2LanguageTrainParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
