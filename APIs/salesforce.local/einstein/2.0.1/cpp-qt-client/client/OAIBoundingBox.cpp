/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBoundingBox.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBoundingBox::OAIBoundingBox(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBoundingBox::OAIBoundingBox() {
    this->initializeModel();
}

OAIBoundingBox::~OAIBoundingBox() {}

void OAIBoundingBox::initializeModel() {

    m_max_x_isSet = false;
    m_max_x_isValid = false;

    m_max_y_isSet = false;
    m_max_y_isValid = false;

    m_min_x_isSet = false;
    m_min_x_isValid = false;

    m_min_y_isSet = false;
    m_min_y_isValid = false;
}

void OAIBoundingBox::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBoundingBox::fromJsonObject(QJsonObject json) {

    m_max_x_isValid = ::OpenAPI::fromJsonValue(m_max_x, json[QString("maxX")]);
    m_max_x_isSet = !json[QString("maxX")].isNull() && m_max_x_isValid;

    m_max_y_isValid = ::OpenAPI::fromJsonValue(m_max_y, json[QString("maxY")]);
    m_max_y_isSet = !json[QString("maxY")].isNull() && m_max_y_isValid;

    m_min_x_isValid = ::OpenAPI::fromJsonValue(m_min_x, json[QString("minX")]);
    m_min_x_isSet = !json[QString("minX")].isNull() && m_min_x_isValid;

    m_min_y_isValid = ::OpenAPI::fromJsonValue(m_min_y, json[QString("minY")]);
    m_min_y_isSet = !json[QString("minY")].isNull() && m_min_y_isValid;
}

QString OAIBoundingBox::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBoundingBox::asJsonObject() const {
    QJsonObject obj;
    if (m_max_x_isSet) {
        obj.insert(QString("maxX"), ::OpenAPI::toJsonValue(m_max_x));
    }
    if (m_max_y_isSet) {
        obj.insert(QString("maxY"), ::OpenAPI::toJsonValue(m_max_y));
    }
    if (m_min_x_isSet) {
        obj.insert(QString("minX"), ::OpenAPI::toJsonValue(m_min_x));
    }
    if (m_min_y_isSet) {
        obj.insert(QString("minY"), ::OpenAPI::toJsonValue(m_min_y));
    }
    return obj;
}

qint32 OAIBoundingBox::getMaxX() const {
    return m_max_x;
}
void OAIBoundingBox::setMaxX(const qint32 &max_x) {
    m_max_x = max_x;
    m_max_x_isSet = true;
}

bool OAIBoundingBox::is_max_x_Set() const{
    return m_max_x_isSet;
}

bool OAIBoundingBox::is_max_x_Valid() const{
    return m_max_x_isValid;
}

qint32 OAIBoundingBox::getMaxY() const {
    return m_max_y;
}
void OAIBoundingBox::setMaxY(const qint32 &max_y) {
    m_max_y = max_y;
    m_max_y_isSet = true;
}

bool OAIBoundingBox::is_max_y_Set() const{
    return m_max_y_isSet;
}

bool OAIBoundingBox::is_max_y_Valid() const{
    return m_max_y_isValid;
}

qint32 OAIBoundingBox::getMinX() const {
    return m_min_x;
}
void OAIBoundingBox::setMinX(const qint32 &min_x) {
    m_min_x = min_x;
    m_min_x_isSet = true;
}

bool OAIBoundingBox::is_min_x_Set() const{
    return m_min_x_isSet;
}

bool OAIBoundingBox::is_min_x_Valid() const{
    return m_min_x_isValid;
}

qint32 OAIBoundingBox::getMinY() const {
    return m_min_y;
}
void OAIBoundingBox::setMinY(const qint32 &min_y) {
    m_min_y = min_y;
    m_min_y_isSet = true;
}

bool OAIBoundingBox::is_min_y_Set() const{
    return m_min_y_isSet;
}

bool OAIBoundingBox::is_min_y_Valid() const{
    return m_min_y_isValid;
}

bool OAIBoundingBox::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBoundingBox::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
