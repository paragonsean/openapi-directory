/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiUsage::OAIApiUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiUsage::OAIApiUsage() {
    this->initializeModel();
}

OAIApiUsage::~OAIApiUsage() {}

void OAIApiUsage::initializeModel() {

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_id_isSet = false;
    m_license_id_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_plan_data_isSet = false;
    m_plan_data_isValid = false;

    m_predictions_max_isSet = false;
    m_predictions_max_isValid = false;

    m_predictions_used_isSet = false;
    m_predictions_used_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;
}

void OAIApiUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiUsage::fromJsonObject(QJsonObject json) {

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("endsAt")]);
    m_ends_at_isSet = !json[QString("endsAt")].isNull() && m_ends_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_id_isValid = ::OpenAPI::fromJsonValue(m_license_id, json[QString("licenseId")]);
    m_license_id_isSet = !json[QString("licenseId")].isNull() && m_license_id_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_plan_data_isValid = ::OpenAPI::fromJsonValue(m_plan_data, json[QString("planData")]);
    m_plan_data_isSet = !json[QString("planData")].isNull() && m_plan_data_isValid;

    m_predictions_max_isValid = ::OpenAPI::fromJsonValue(m_predictions_max, json[QString("predictionsMax")]);
    m_predictions_max_isSet = !json[QString("predictionsMax")].isNull() && m_predictions_max_isValid;

    m_predictions_used_isValid = ::OpenAPI::fromJsonValue(m_predictions_used, json[QString("predictionsUsed")]);
    m_predictions_used_isSet = !json[QString("predictionsUsed")].isNull() && m_predictions_used_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("startsAt")]);
    m_starts_at_isSet = !json[QString("startsAt")].isNull() && m_starts_at_isValid;
}

QString OAIApiUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_ends_at_isSet) {
        obj.insert(QString("endsAt"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_id_isSet) {
        obj.insert(QString("licenseId"), ::OpenAPI::toJsonValue(m_license_id));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_plan_data.size() > 0) {
        obj.insert(QString("planData"), ::OpenAPI::toJsonValue(m_plan_data));
    }
    if (m_predictions_max_isSet) {
        obj.insert(QString("predictionsMax"), ::OpenAPI::toJsonValue(m_predictions_max));
    }
    if (m_predictions_used_isSet) {
        obj.insert(QString("predictionsUsed"), ::OpenAPI::toJsonValue(m_predictions_used));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("startsAt"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    return obj;
}

QDateTime OAIApiUsage::getEndsAt() const {
    return m_ends_at;
}
void OAIApiUsage::setEndsAt(const QDateTime &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAIApiUsage::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAIApiUsage::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

QString OAIApiUsage::getId() const {
    return m_id;
}
void OAIApiUsage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiUsage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiUsage::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApiUsage::getLicenseId() const {
    return m_license_id;
}
void OAIApiUsage::setLicenseId(const QString &license_id) {
    m_license_id = license_id;
    m_license_id_isSet = true;
}

bool OAIApiUsage::is_license_id_Set() const{
    return m_license_id_isSet;
}

bool OAIApiUsage::is_license_id_Valid() const{
    return m_license_id_isValid;
}

QString OAIApiUsage::getObject() const {
    return m_object;
}
void OAIApiUsage::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIApiUsage::is_object_Set() const{
    return m_object_isSet;
}

bool OAIApiUsage::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIApiUsage::getOrganizationId() const {
    return m_organization_id;
}
void OAIApiUsage::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIApiUsage::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIApiUsage::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QList<OAIPlanData> OAIApiUsage::getPlanData() const {
    return m_plan_data;
}
void OAIApiUsage::setPlanData(const QList<OAIPlanData> &plan_data) {
    m_plan_data = plan_data;
    m_plan_data_isSet = true;
}

bool OAIApiUsage::is_plan_data_Set() const{
    return m_plan_data_isSet;
}

bool OAIApiUsage::is_plan_data_Valid() const{
    return m_plan_data_isValid;
}

qint64 OAIApiUsage::getPredictionsMax() const {
    return m_predictions_max;
}
void OAIApiUsage::setPredictionsMax(const qint64 &predictions_max) {
    m_predictions_max = predictions_max;
    m_predictions_max_isSet = true;
}

bool OAIApiUsage::is_predictions_max_Set() const{
    return m_predictions_max_isSet;
}

bool OAIApiUsage::is_predictions_max_Valid() const{
    return m_predictions_max_isValid;
}

qint64 OAIApiUsage::getPredictionsUsed() const {
    return m_predictions_used;
}
void OAIApiUsage::setPredictionsUsed(const qint64 &predictions_used) {
    m_predictions_used = predictions_used;
    m_predictions_used_isSet = true;
}

bool OAIApiUsage::is_predictions_used_Set() const{
    return m_predictions_used_isSet;
}

bool OAIApiUsage::is_predictions_used_Valid() const{
    return m_predictions_used_isValid;
}

QDateTime OAIApiUsage::getStartsAt() const {
    return m_starts_at;
}
void OAIApiUsage::setStartsAt(const QDateTime &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAIApiUsage::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAIApiUsage::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

bool OAIApiUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictions_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
