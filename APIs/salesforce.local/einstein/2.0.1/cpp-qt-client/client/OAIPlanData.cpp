/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanData::OAIPlanData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanData::OAIPlanData() {
    this->initializeModel();
}

OAIPlanData::~OAIPlanData() {}

void OAIPlanData::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIPlanData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanData::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIPlanData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanData::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

qint32 OAIPlanData::getAmount() const {
    return m_amount;
}
void OAIPlanData::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPlanData::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPlanData::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPlanData::getPlan() const {
    return m_plan;
}
void OAIPlanData::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIPlanData::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIPlanData::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIPlanData::getSource() const {
    return m_source;
}
void OAIPlanData::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPlanData::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPlanData::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIPlanData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
