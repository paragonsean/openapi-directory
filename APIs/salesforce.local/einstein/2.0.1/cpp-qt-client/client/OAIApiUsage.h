/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApiUsage.h
 *
 * 
 */

#ifndef OAIApiUsage_H
#define OAIApiUsage_H

#include <QJsonObject>

#include "OAIPlanData.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlanData;

class OAIApiUsage : public OAIObject {
public:
    OAIApiUsage();
    OAIApiUsage(QString json);
    ~OAIApiUsage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndsAt() const;
    void setEndsAt(const QDateTime &ends_at);
    bool is_ends_at_Set() const;
    bool is_ends_at_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLicenseId() const;
    void setLicenseId(const QString &license_id);
    bool is_license_id_Set() const;
    bool is_license_id_Valid() const;

    QString getObject() const;
    void setObject(const QString &object);
    bool is_object_Set() const;
    bool is_object_Valid() const;

    QString getOrganizationId() const;
    void setOrganizationId(const QString &organization_id);
    bool is_organization_id_Set() const;
    bool is_organization_id_Valid() const;

    QList<OAIPlanData> getPlanData() const;
    void setPlanData(const QList<OAIPlanData> &plan_data);
    bool is_plan_data_Set() const;
    bool is_plan_data_Valid() const;

    qint64 getPredictionsMax() const;
    void setPredictionsMax(const qint64 &predictions_max);
    bool is_predictions_max_Set() const;
    bool is_predictions_max_Valid() const;

    qint64 getPredictionsUsed() const;
    void setPredictionsUsed(const qint64 &predictions_used);
    bool is_predictions_used_Set() const;
    bool is_predictions_used_Valid() const;

    QDateTime getStartsAt() const;
    void setStartsAt(const QDateTime &starts_at);
    bool is_starts_at_Set() const;
    bool is_starts_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_ends_at;
    bool m_ends_at_isSet;
    bool m_ends_at_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_license_id;
    bool m_license_id_isSet;
    bool m_license_id_isValid;

    QString m_object;
    bool m_object_isSet;
    bool m_object_isValid;

    QString m_organization_id;
    bool m_organization_id_isSet;
    bool m_organization_id_isValid;

    QList<OAIPlanData> m_plan_data;
    bool m_plan_data_isSet;
    bool m_plan_data_isValid;

    qint64 m_predictions_max;
    bool m_predictions_max_isSet;
    bool m_predictions_max_isValid;

    qint64 m_predictions_used;
    bool m_predictions_used_isSet;
    bool m_predictions_used_isValid;

    QDateTime m_starts_at;
    bool m_starts_at_isSet;
    bool m_starts_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApiUsage)

#endif // OAIApiUsage_H
