/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILanguageExamplesApi_H
#define OAI_OAILanguageExamplesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataset.h"
#include "OAIExample.h"
#include "OAIExampleList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILanguageExamplesApi : public QObject {
    Q_OBJECT

public:
    OAILanguageExamplesApi(const int timeOut = 0);
    ~OAILanguageExamplesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dataset_id QString [required]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void getExamples(const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  label_id QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    */
    virtual void getExamplesByLabel(const ::OpenAPI::OptionalParam<QString> &label_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  document QString [optional]
    * @param[in]  expected_label QString [optional]
    * @param[in]  model_id QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void provideFeedback(const ::OpenAPI::OptionalParam<QString> &document = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expected_label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dataset_id QString [required]
    * @param[in]  data QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void updateDatasetAsync(const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getExamplesCallback(OAIHttpRequestWorker *worker);
    void getExamplesByLabelCallback(OAIHttpRequestWorker *worker);
    void provideFeedbackCallback(OAIHttpRequestWorker *worker);
    void updateDatasetAsyncCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getExamplesSignal(OAIExampleList summary);
    void getExamplesByLabelSignal(OAIExampleList summary);
    void provideFeedbackSignal(OAIExample summary);
    void updateDatasetAsyncSignal(OAIDataset summary);


    void getExamplesSignalFull(OAIHttpRequestWorker *worker, OAIExampleList summary);
    void getExamplesByLabelSignalFull(OAIHttpRequestWorker *worker, OAIExampleList summary);
    void provideFeedbackSignalFull(OAIHttpRequestWorker *worker, OAIExample summary);
    void updateDatasetAsyncSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);

    Q_DECL_DEPRECATED_X("Use getExamplesSignalError() instead")
    void getExamplesSignalE(OAIExampleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesSignalError(OAIExampleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExamplesByLabelSignalError() instead")
    void getExamplesByLabelSignalE(OAIExampleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesByLabelSignalError(OAIExampleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideFeedbackSignalError() instead")
    void provideFeedbackSignalE(OAIExample summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provideFeedbackSignalError(OAIExample summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDatasetAsyncSignalError() instead")
    void updateDatasetAsyncSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDatasetAsyncSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getExamplesSignalErrorFull() instead")
    void getExamplesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExamplesByLabelSignalErrorFull() instead")
    void getExamplesByLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExamplesByLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provideFeedbackSignalErrorFull() instead")
    void provideFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provideFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDatasetAsyncSignalErrorFull() instead")
    void updateDatasetAsyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDatasetAsyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
