/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVisionDatasetsApi_H
#define OAI_OAIVisionDatasetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataset.h"
#include "OAIDatasetList.h"
#include "OAIDeletionResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVisionDatasetsApi : public QObject {
    Q_OBJECT

public:
    OAIVisionDatasetsApi(const int timeOut = 0);
    ~OAIVisionDatasetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  labels QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void createDataset(const ::OpenAPI::OptionalParam<QString> &labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  dataset_id QString [required]
    */
    virtual void deleteDataset1(const QString &dataset_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void get1(const QString &id);

    /**
    * @param[in]  dataset_id QString [required]
    */
    virtual void getDataset1(const QString &dataset_id);

    /**
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  global bool [optional]
    */
    virtual void listDatasets1(const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &global = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  data QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void uploadDatasetAsync1(const ::OpenAPI::OptionalParam<QString> &data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void uploadDatasetSync1(const ::OpenAPI::OptionalParam<QString> &data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDatasetCallback(OAIHttpRequestWorker *worker);
    void deleteDataset1Callback(OAIHttpRequestWorker *worker);
    void get1Callback(OAIHttpRequestWorker *worker);
    void getDataset1Callback(OAIHttpRequestWorker *worker);
    void listDatasets1Callback(OAIHttpRequestWorker *worker);
    void uploadDatasetAsync1Callback(OAIHttpRequestWorker *worker);
    void uploadDatasetSync1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDatasetSignal(OAIDataset summary);
    void deleteDataset1Signal(OAIDeletionResponse summary);
    void get1Signal(OAIDeletionResponse summary);
    void getDataset1Signal(OAIDataset summary);
    void listDatasets1Signal(OAIDatasetList summary);
    void uploadDatasetAsync1Signal(OAIDataset summary);
    void uploadDatasetSync1Signal(OAIDataset summary);


    void createDatasetSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void deleteDataset1SignalFull(OAIHttpRequestWorker *worker, OAIDeletionResponse summary);
    void get1SignalFull(OAIHttpRequestWorker *worker, OAIDeletionResponse summary);
    void getDataset1SignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void listDatasets1SignalFull(OAIHttpRequestWorker *worker, OAIDatasetList summary);
    void uploadDatasetAsync1SignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void uploadDatasetSync1SignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);

    Q_DECL_DEPRECATED_X("Use createDatasetSignalError() instead")
    void createDatasetSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDatasetSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataset1SignalError() instead")
    void deleteDataset1SignalE(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataset1SignalError(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get1SignalError() instead")
    void get1SignalE(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get1SignalError(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataset1SignalError() instead")
    void getDataset1SignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataset1SignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatasets1SignalError() instead")
    void listDatasets1SignalE(OAIDatasetList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatasets1SignalError(OAIDatasetList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadDatasetAsync1SignalError() instead")
    void uploadDatasetAsync1SignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadDatasetAsync1SignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadDatasetSync1SignalError() instead")
    void uploadDatasetSync1SignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadDatasetSync1SignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDatasetSignalErrorFull() instead")
    void createDatasetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDatasetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDataset1SignalErrorFull() instead")
    void deleteDataset1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDataset1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get1SignalErrorFull() instead")
    void get1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataset1SignalErrorFull() instead")
    void getDataset1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataset1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatasets1SignalErrorFull() instead")
    void listDatasets1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatasets1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadDatasetAsync1SignalErrorFull() instead")
    void uploadDatasetAsync1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadDatasetAsync1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadDatasetSync1SignalErrorFull() instead")
    void uploadDatasetSync1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadDatasetSync1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
