/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOCRResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOCRResult::OAIOCRResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOCRResult::OAIOCRResult() {
    this->initializeModel();
}

OAIOCRResult::~OAIOCRResult() {}

void OAIOCRResult::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_probability_isSet = false;
    m_probability_isValid = false;
}

void OAIOCRResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOCRResult::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_probability_isValid = ::OpenAPI::fromJsonValue(m_probability, json[QString("probability")]);
    m_probability_isSet = !json[QString("probability")].isNull() && m_probability_isValid;
}

QString OAIOCRResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOCRResult::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_bounding_box.isSet()) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_probability_isSet) {
        obj.insert(QString("probability"), ::OpenAPI::toJsonValue(m_probability));
    }
    return obj;
}

OAIAttributes OAIOCRResult::getAttributes() const {
    return m_attributes;
}
void OAIOCRResult::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIOCRResult::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIOCRResult::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIBoundingBox OAIOCRResult::getBoundingBox() const {
    return m_bounding_box;
}
void OAIOCRResult::setBoundingBox(const OAIBoundingBox &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIOCRResult::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIOCRResult::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

QString OAIOCRResult::getLabel() const {
    return m_label;
}
void OAIOCRResult::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIOCRResult::is_label_Set() const{
    return m_label_isSet;
}

bool OAIOCRResult::is_label_Valid() const{
    return m_label_isValid;
}

float OAIOCRResult::getProbability() const {
    return m_probability;
}
void OAIOCRResult::setProbability(const float &probability) {
    m_probability = probability;
    m_probability_isSet = true;
}

bool OAIOCRResult::is_probability_Set() const{
    return m_probability_isSet;
}

bool OAIOCRResult::is_probability_Valid() const{
    return m_probability_isValid;
}

bool OAIOCRResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probability_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOCRResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
