/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVisionModelsApi_H
#define OAI_OAIVisionModelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeletionResponse.h"
#include "OAILearningCurveList.h"
#include "OAIMetrics.h"
#include "OAIModelList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVisionModelsApi : public QObject {
    Q_OBJECT

public:
    OAIVisionModelsApi(const int timeOut = 0);
    ~OAIVisionModelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void deleteModel1(const QString &model_id);

    /**
    * @param[in]  model_id QString [required]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    */
    virtual void getTrainedModelLearningCurve1(const QString &model_id, const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  model_id QString [required]
    */
    virtual void getTrainedModelMetrics1(const QString &model_id);

    /**
    * @param[in]  dataset_id QString [required]
    * @param[in]  offset QString [optional]
    * @param[in]  count QString [optional]
    */
    virtual void getTrainedModels1(const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteModel1Callback(OAIHttpRequestWorker *worker);
    void getTrainedModelLearningCurve1Callback(OAIHttpRequestWorker *worker);
    void getTrainedModelMetrics1Callback(OAIHttpRequestWorker *worker);
    void getTrainedModels1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteModel1Signal(OAIDeletionResponse summary);
    void getTrainedModelLearningCurve1Signal(OAILearningCurveList summary);
    void getTrainedModelMetrics1Signal(OAIMetrics summary);
    void getTrainedModels1Signal(OAIModelList summary);


    void deleteModel1SignalFull(OAIHttpRequestWorker *worker, OAIDeletionResponse summary);
    void getTrainedModelLearningCurve1SignalFull(OAIHttpRequestWorker *worker, OAILearningCurveList summary);
    void getTrainedModelMetrics1SignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void getTrainedModels1SignalFull(OAIHttpRequestWorker *worker, OAIModelList summary);

    Q_DECL_DEPRECATED_X("Use deleteModel1SignalError() instead")
    void deleteModel1SignalE(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModel1SignalError(OAIDeletionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelLearningCurve1SignalError() instead")
    void getTrainedModelLearningCurve1SignalE(OAILearningCurveList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelLearningCurve1SignalError(OAILearningCurveList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelMetrics1SignalError() instead")
    void getTrainedModelMetrics1SignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelMetrics1SignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModels1SignalError() instead")
    void getTrainedModels1SignalE(OAIModelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModels1SignalError(OAIModelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteModel1SignalErrorFull() instead")
    void deleteModel1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteModel1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelLearningCurve1SignalErrorFull() instead")
    void getTrainedModelLearningCurve1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelLearningCurve1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModelMetrics1SignalErrorFull() instead")
    void getTrainedModelMetrics1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModelMetrics1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainedModels1SignalErrorFull() instead")
    void getTrainedModels1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainedModels1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
