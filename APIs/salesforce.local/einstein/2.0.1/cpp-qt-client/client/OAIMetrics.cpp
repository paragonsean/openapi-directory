/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics::OAIMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics::OAIMetrics() {
    this->initializeModel();
}

OAIMetrics::~OAIMetrics() {}

void OAIMetrics::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_metrics_data_isSet = false;
    m_metrics_data_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;
}

void OAIMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_metrics_data_isValid = ::OpenAPI::fromJsonValue(m_metrics_data, json[QString("metricsData")]);
    m_metrics_data_isSet = !json[QString("metricsData")].isNull() && m_metrics_data_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;
}

QString OAIMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_metrics_data_isSet) {
        obj.insert(QString("metricsData"), ::OpenAPI::toJsonValue(m_metrics_data));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    return obj;
}

QString OAIMetrics::getAlgorithm() const {
    return m_algorithm;
}
void OAIMetrics::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIMetrics::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIMetrics::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QDateTime OAIMetrics::getCreatedAt() const {
    return m_created_at;
}
void OAIMetrics::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMetrics::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMetrics::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMetrics::getId() const {
    return m_id;
}
void OAIMetrics::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetrics::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetrics::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMetrics::getLanguage() const {
    return m_language;
}
void OAIMetrics::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMetrics::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMetrics::is_language_Valid() const{
    return m_language_isValid;
}

OAIObject OAIMetrics::getMetricsData() const {
    return m_metrics_data;
}
void OAIMetrics::setMetricsData(const OAIObject &metrics_data) {
    m_metrics_data = metrics_data;
    m_metrics_data_isSet = true;
}

bool OAIMetrics::is_metrics_data_Set() const{
    return m_metrics_data_isSet;
}

bool OAIMetrics::is_metrics_data_Valid() const{
    return m_metrics_data_isValid;
}

QString OAIMetrics::getObject() const {
    return m_object;
}
void OAIMetrics::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIMetrics::is_object_Set() const{
    return m_object_isSet;
}

bool OAIMetrics::is_object_Valid() const{
    return m_object_isValid;
}

bool OAIMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
