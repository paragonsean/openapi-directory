/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainResponse::OAITrainResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainResponse::OAITrainResponse() {
    this->initializeModel();
}

OAITrainResponse::~OAITrainResponse() {}

void OAITrainResponse::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_dataset_version_id_isSet = false;
    m_dataset_version_id_isValid = false;

    m_epochs_isSet = false;
    m_epochs_isValid = false;

    m_failure_msg_isSet = false;
    m_failure_msg_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_learning_rate_isSet = false;
    m_learning_rate_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_queue_position_isSet = false;
    m_queue_position_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_train_params_isSet = false;
    m_train_params_isValid = false;

    m_train_stats_isSet = false;
    m_train_stats_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITrainResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainResponse::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_dataset_version_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_version_id, json[QString("datasetVersionId")]);
    m_dataset_version_id_isSet = !json[QString("datasetVersionId")].isNull() && m_dataset_version_id_isValid;

    m_epochs_isValid = ::OpenAPI::fromJsonValue(m_epochs, json[QString("epochs")]);
    m_epochs_isSet = !json[QString("epochs")].isNull() && m_epochs_isValid;

    m_failure_msg_isValid = ::OpenAPI::fromJsonValue(m_failure_msg, json[QString("failureMsg")]);
    m_failure_msg_isSet = !json[QString("failureMsg")].isNull() && m_failure_msg_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_learning_rate_isValid = ::OpenAPI::fromJsonValue(m_learning_rate, json[QString("learningRate")]);
    m_learning_rate_isSet = !json[QString("learningRate")].isNull() && m_learning_rate_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("modelId")]);
    m_model_id_isSet = !json[QString("modelId")].isNull() && m_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_queue_position_isValid = ::OpenAPI::fromJsonValue(m_queue_position, json[QString("queuePosition")]);
    m_queue_position_isSet = !json[QString("queuePosition")].isNull() && m_queue_position_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_train_params_isValid = ::OpenAPI::fromJsonValue(m_train_params, json[QString("trainParams")]);
    m_train_params_isSet = !json[QString("trainParams")].isNull() && m_train_params_isValid;

    m_train_stats_isValid = ::OpenAPI::fromJsonValue(m_train_stats, json[QString("trainStats")]);
    m_train_stats_isSet = !json[QString("trainStats")].isNull() && m_train_stats_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAITrainResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_dataset_version_id_isSet) {
        obj.insert(QString("datasetVersionId"), ::OpenAPI::toJsonValue(m_dataset_version_id));
    }
    if (m_epochs_isSet) {
        obj.insert(QString("epochs"), ::OpenAPI::toJsonValue(m_epochs));
    }
    if (m_failure_msg_isSet) {
        obj.insert(QString("failureMsg"), ::OpenAPI::toJsonValue(m_failure_msg));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_learning_rate_isSet) {
        obj.insert(QString("learningRate"), ::OpenAPI::toJsonValue(m_learning_rate));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("modelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_queue_position_isSet) {
        obj.insert(QString("queuePosition"), ::OpenAPI::toJsonValue(m_queue_position));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_train_params_isSet) {
        obj.insert(QString("trainParams"), ::OpenAPI::toJsonValue(m_train_params));
    }
    if (m_train_stats_isSet) {
        obj.insert(QString("trainStats"), ::OpenAPI::toJsonValue(m_train_stats));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAITrainResponse::getAlgorithm() const {
    return m_algorithm;
}
void OAITrainResponse::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAITrainResponse::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAITrainResponse::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QDateTime OAITrainResponse::getCreatedAt() const {
    return m_created_at;
}
void OAITrainResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITrainResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITrainResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAITrainResponse::getDatasetId() const {
    return m_dataset_id;
}
void OAITrainResponse::setDatasetId(const qint64 &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAITrainResponse::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAITrainResponse::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

qint64 OAITrainResponse::getDatasetVersionId() const {
    return m_dataset_version_id;
}
void OAITrainResponse::setDatasetVersionId(const qint64 &dataset_version_id) {
    m_dataset_version_id = dataset_version_id;
    m_dataset_version_id_isSet = true;
}

bool OAITrainResponse::is_dataset_version_id_Set() const{
    return m_dataset_version_id_isSet;
}

bool OAITrainResponse::is_dataset_version_id_Valid() const{
    return m_dataset_version_id_isValid;
}

qint32 OAITrainResponse::getEpochs() const {
    return m_epochs;
}
void OAITrainResponse::setEpochs(const qint32 &epochs) {
    m_epochs = epochs;
    m_epochs_isSet = true;
}

bool OAITrainResponse::is_epochs_Set() const{
    return m_epochs_isSet;
}

bool OAITrainResponse::is_epochs_Valid() const{
    return m_epochs_isValid;
}

QString OAITrainResponse::getFailureMsg() const {
    return m_failure_msg;
}
void OAITrainResponse::setFailureMsg(const QString &failure_msg) {
    m_failure_msg = failure_msg;
    m_failure_msg_isSet = true;
}

bool OAITrainResponse::is_failure_msg_Set() const{
    return m_failure_msg_isSet;
}

bool OAITrainResponse::is_failure_msg_Valid() const{
    return m_failure_msg_isValid;
}

QString OAITrainResponse::getLanguage() const {
    return m_language;
}
void OAITrainResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAITrainResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAITrainResponse::is_language_Valid() const{
    return m_language_isValid;
}

double OAITrainResponse::getLearningRate() const {
    return m_learning_rate;
}
void OAITrainResponse::setLearningRate(const double &learning_rate) {
    m_learning_rate = learning_rate;
    m_learning_rate_isSet = true;
}

bool OAITrainResponse::is_learning_rate_Set() const{
    return m_learning_rate_isSet;
}

bool OAITrainResponse::is_learning_rate_Valid() const{
    return m_learning_rate_isValid;
}

QString OAITrainResponse::getModelId() const {
    return m_model_id;
}
void OAITrainResponse::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAITrainResponse::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAITrainResponse::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAITrainResponse::getModelType() const {
    return m_model_type;
}
void OAITrainResponse::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAITrainResponse::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAITrainResponse::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAITrainResponse::getName() const {
    return m_name;
}
void OAITrainResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrainResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrainResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrainResponse::getObject() const {
    return m_object;
}
void OAITrainResponse::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAITrainResponse::is_object_Set() const{
    return m_object_isSet;
}

bool OAITrainResponse::is_object_Valid() const{
    return m_object_isValid;
}

double OAITrainResponse::getProgress() const {
    return m_progress;
}
void OAITrainResponse::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAITrainResponse::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAITrainResponse::is_progress_Valid() const{
    return m_progress_isValid;
}

qint32 OAITrainResponse::getQueuePosition() const {
    return m_queue_position;
}
void OAITrainResponse::setQueuePosition(const qint32 &queue_position) {
    m_queue_position = queue_position;
    m_queue_position_isSet = true;
}

bool OAITrainResponse::is_queue_position_Set() const{
    return m_queue_position_isSet;
}

bool OAITrainResponse::is_queue_position_Valid() const{
    return m_queue_position_isValid;
}

QString OAITrainResponse::getStatus() const {
    return m_status;
}
void OAITrainResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrainResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrainResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITrainResponse::getTrainParams() const {
    return m_train_params;
}
void OAITrainResponse::setTrainParams(const QString &train_params) {
    m_train_params = train_params;
    m_train_params_isSet = true;
}

bool OAITrainResponse::is_train_params_Set() const{
    return m_train_params_isSet;
}

bool OAITrainResponse::is_train_params_Valid() const{
    return m_train_params_isValid;
}

QString OAITrainResponse::getTrainStats() const {
    return m_train_stats;
}
void OAITrainResponse::setTrainStats(const QString &train_stats) {
    m_train_stats = train_stats;
    m_train_stats_isSet = true;
}

bool OAITrainResponse::is_train_stats_Set() const{
    return m_train_stats_isSet;
}

bool OAITrainResponse::is_train_stats_Valid() const{
    return m_train_stats_isValid;
}

QDateTime OAITrainResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAITrainResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITrainResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITrainResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITrainResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epochs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_learning_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_stats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_id_isValid && m_dataset_version_id_isValid && m_language_isValid && m_model_id_isValid && m_name_isValid && m_progress_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
