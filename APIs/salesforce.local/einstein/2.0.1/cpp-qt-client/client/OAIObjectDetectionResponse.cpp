/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectDetectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectDetectionResponse::OAIObjectDetectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectDetectionResponse::OAIObjectDetectionResponse() {
    this->initializeModel();
}

OAIObjectDetectionResponse::~OAIObjectDetectionResponse() {}

void OAIObjectDetectionResponse::initializeModel() {

    m_object_isSet = false;
    m_object_isValid = false;

    m_probabilities_isSet = false;
    m_probabilities_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;
}

void OAIObjectDetectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectDetectionResponse::fromJsonObject(QJsonObject json) {

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_probabilities_isValid = ::OpenAPI::fromJsonValue(m_probabilities, json[QString("probabilities")]);
    m_probabilities_isSet = !json[QString("probabilities")].isNull() && m_probabilities_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;
}

QString OAIObjectDetectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectDetectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_probabilities.size() > 0) {
        obj.insert(QString("probabilities"), ::OpenAPI::toJsonValue(m_probabilities));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    return obj;
}

QString OAIObjectDetectionResponse::getObject() const {
    return m_object;
}
void OAIObjectDetectionResponse::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIObjectDetectionResponse::is_object_Set() const{
    return m_object_isSet;
}

bool OAIObjectDetectionResponse::is_object_Valid() const{
    return m_object_isValid;
}

QList<OAIDetectionResult> OAIObjectDetectionResponse::getProbabilities() const {
    return m_probabilities;
}
void OAIObjectDetectionResponse::setProbabilities(const QList<OAIDetectionResult> &probabilities) {
    m_probabilities = probabilities;
    m_probabilities_isSet = true;
}

bool OAIObjectDetectionResponse::is_probabilities_Set() const{
    return m_probabilities_isSet;
}

bool OAIObjectDetectionResponse::is_probabilities_Valid() const{
    return m_probabilities_isValid;
}

QString OAIObjectDetectionResponse::getSampleId() const {
    return m_sample_id;
}
void OAIObjectDetectionResponse::setSampleId(const QString &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAIObjectDetectionResponse::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAIObjectDetectionResponse::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

bool OAIObjectDetectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_probabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectDetectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
