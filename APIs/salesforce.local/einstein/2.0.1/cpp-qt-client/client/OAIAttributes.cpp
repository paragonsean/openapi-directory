/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes::OAIAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes::OAIAttributes() {
    this->initializeModel();
}

OAIAttributes::~OAIAttributes() {}

void OAIAttributes::initializeModel() {

    m_cell_location_isSet = false;
    m_cell_location_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes::fromJsonObject(QJsonObject json) {

    m_cell_location_isValid = ::OpenAPI::fromJsonValue(m_cell_location, json[QString("cellLocation")]);
    m_cell_location_isSet = !json[QString("cellLocation")].isNull() && m_cell_location_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("pageNumber")]);
    m_page_number_isSet = !json[QString("pageNumber")].isNull() && m_page_number_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_cell_location.isSet()) {
        obj.insert(QString("cellLocation"), ::OpenAPI::toJsonValue(m_cell_location));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("pageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAICellLocation OAIAttributes::getCellLocation() const {
    return m_cell_location;
}
void OAIAttributes::setCellLocation(const OAICellLocation &cell_location) {
    m_cell_location = cell_location;
    m_cell_location_isSet = true;
}

bool OAIAttributes::is_cell_location_Set() const{
    return m_cell_location_isSet;
}

bool OAIAttributes::is_cell_location_Valid() const{
    return m_cell_location_isValid;
}

QString OAIAttributes::getLanguage() const {
    return m_language;
}
void OAIAttributes::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAttributes::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAttributes::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIAttributes::getPageNumber() const {
    return m_page_number;
}
void OAIAttributes::setPageNumber(const QString &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIAttributes::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIAttributes::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QString OAIAttributes::getTag() const {
    return m_tag;
}
void OAIAttributes::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIAttributes::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIAttributes::is_tag_Valid() const{
    return m_tag_isValid;
}

OAIEntityObject OAIAttributes::getValue() const {
    return m_value;
}
void OAIAttributes::setValue(const OAIEntityObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAttributes::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAttributes::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
