/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabel::OAILabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabel::OAILabel() {
    this->initializeModel();
}

OAILabel::~OAILabel() {}

void OAILabel::initializeModel() {

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_examples_isSet = false;
    m_num_examples_isValid = false;
}

void OAILabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabel::fromJsonObject(QJsonObject json) {

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_examples_isValid = ::OpenAPI::fromJsonValue(m_num_examples, json[QString("numExamples")]);
    m_num_examples_isSet = !json[QString("numExamples")].isNull() && m_num_examples_isValid;
}

QString OAILabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabel::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_examples_isSet) {
        obj.insert(QString("numExamples"), ::OpenAPI::toJsonValue(m_num_examples));
    }
    return obj;
}

qint64 OAILabel::getDatasetId() const {
    return m_dataset_id;
}
void OAILabel::setDatasetId(const qint64 &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAILabel::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAILabel::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

qint64 OAILabel::getId() const {
    return m_id;
}
void OAILabel::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILabel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILabel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILabel::getName() const {
    return m_name;
}
void OAILabel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILabel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILabel::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAILabel::getNumExamples() const {
    return m_num_examples;
}
void OAILabel::setNumExamples(const qint64 &num_examples) {
    m_num_examples = num_examples;
    m_num_examples_isSet = true;
}

bool OAILabel::is_num_examples_Set() const{
    return m_num_examples_isSet;
}

bool OAILabel::is_num_examples_Valid() const{
    return m_num_examples_isValid;
}

bool OAILabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_examples_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
