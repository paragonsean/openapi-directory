/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_summary_isSet = false;
    m_label_summary_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_of_duplicates_isSet = false;
    m_num_of_duplicates_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_status_msg_isSet = false;
    m_status_msg_isValid = false;

    m_total_examples_isSet = false;
    m_total_examples_isValid = false;

    m_total_labels_isSet = false;
    m_total_labels_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_summary_isValid = ::OpenAPI::fromJsonValue(m_label_summary, json[QString("labelSummary")]);
    m_label_summary_isSet = !json[QString("labelSummary")].isNull() && m_label_summary_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_of_duplicates_isValid = ::OpenAPI::fromJsonValue(m_num_of_duplicates, json[QString("numOfDuplicates")]);
    m_num_of_duplicates_isSet = !json[QString("numOfDuplicates")].isNull() && m_num_of_duplicates_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_status_msg_isValid = ::OpenAPI::fromJsonValue(m_status_msg, json[QString("statusMsg")]);
    m_status_msg_isSet = !json[QString("statusMsg")].isNull() && m_status_msg_isValid;

    m_total_examples_isValid = ::OpenAPI::fromJsonValue(m_total_examples, json[QString("totalExamples")]);
    m_total_examples_isSet = !json[QString("totalExamples")].isNull() && m_total_examples_isValid;

    m_total_labels_isValid = ::OpenAPI::fromJsonValue(m_total_labels, json[QString("totalLabels")]);
    m_total_labels_isSet = !json[QString("totalLabels")].isNull() && m_total_labels_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_summary.isSet()) {
        obj.insert(QString("labelSummary"), ::OpenAPI::toJsonValue(m_label_summary));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_of_duplicates_isSet) {
        obj.insert(QString("numOfDuplicates"), ::OpenAPI::toJsonValue(m_num_of_duplicates));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_status_msg_isSet) {
        obj.insert(QString("statusMsg"), ::OpenAPI::toJsonValue(m_status_msg));
    }
    if (m_total_examples_isSet) {
        obj.insert(QString("totalExamples"), ::OpenAPI::toJsonValue(m_total_examples));
    }
    if (m_total_labels_isSet) {
        obj.insert(QString("totalLabels"), ::OpenAPI::toJsonValue(m_total_labels));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIDataset::isAvailable() const {
    return m_available;
}
void OAIDataset::setAvailable(const bool &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIDataset::is_available_Set() const{
    return m_available_isSet;
}

bool OAIDataset::is_available_Valid() const{
    return m_available_isValid;
}

QDateTime OAIDataset::getCreatedAt() const {
    return m_created_at;
}
void OAIDataset::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDataset::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDataset::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint64 OAIDataset::getId() const {
    return m_id;
}
void OAIDataset::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataset::is_id_Valid() const{
    return m_id_isValid;
}

OAILabelSummary OAIDataset::getLabelSummary() const {
    return m_label_summary;
}
void OAIDataset::setLabelSummary(const OAILabelSummary &label_summary) {
    m_label_summary = label_summary;
    m_label_summary_isSet = true;
}

bool OAIDataset::is_label_summary_Set() const{
    return m_label_summary_isSet;
}

bool OAIDataset::is_label_summary_Valid() const{
    return m_label_summary_isValid;
}

QString OAIDataset::getLanguage() const {
    return m_language;
}
void OAIDataset::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDataset::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDataset::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIDataset::getName() const {
    return m_name;
}
void OAIDataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataset::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDataset::getNumOfDuplicates() const {
    return m_num_of_duplicates;
}
void OAIDataset::setNumOfDuplicates(const qint32 &num_of_duplicates) {
    m_num_of_duplicates = num_of_duplicates;
    m_num_of_duplicates_isSet = true;
}

bool OAIDataset::is_num_of_duplicates_Set() const{
    return m_num_of_duplicates_isSet;
}

bool OAIDataset::is_num_of_duplicates_Valid() const{
    return m_num_of_duplicates_isValid;
}

QString OAIDataset::getObject() const {
    return m_object;
}
void OAIDataset::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIDataset::is_object_Set() const{
    return m_object_isSet;
}

bool OAIDataset::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIDataset::getStatusMsg() const {
    return m_status_msg;
}
void OAIDataset::setStatusMsg(const QString &status_msg) {
    m_status_msg = status_msg;
    m_status_msg_isSet = true;
}

bool OAIDataset::is_status_msg_Set() const{
    return m_status_msg_isSet;
}

bool OAIDataset::is_status_msg_Valid() const{
    return m_status_msg_isValid;
}

qint32 OAIDataset::getTotalExamples() const {
    return m_total_examples;
}
void OAIDataset::setTotalExamples(const qint32 &total_examples) {
    m_total_examples = total_examples;
    m_total_examples_isSet = true;
}

bool OAIDataset::is_total_examples_Set() const{
    return m_total_examples_isSet;
}

bool OAIDataset::is_total_examples_Valid() const{
    return m_total_examples_isValid;
}

qint32 OAIDataset::getTotalLabels() const {
    return m_total_labels;
}
void OAIDataset::setTotalLabels(const qint32 &total_labels) {
    m_total_labels = total_labels;
    m_total_labels_isSet = true;
}

bool OAIDataset::is_total_labels_Set() const{
    return m_total_labels_isSet;
}

bool OAIDataset::is_total_labels_Valid() const{
    return m_total_labels_isValid;
}

QString OAIDataset::getType() const {
    return m_type;
}
void OAIDataset::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataset::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataset::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDataset::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDataset::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDataset::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDataset::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_of_duplicates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_examples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
