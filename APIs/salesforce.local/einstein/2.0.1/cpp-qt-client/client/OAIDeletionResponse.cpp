/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletionResponse::OAIDeletionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletionResponse::OAIDeletionResponse() {
    this->initializeModel();
}

OAIDeletionResponse::~OAIDeletionResponse() {}

void OAIDeletionResponse::initializeModel() {

    m_deleted_object_id_isSet = false;
    m_deleted_object_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_object_isSet = false;
    m_object_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDeletionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletionResponse::fromJsonObject(QJsonObject json) {

    m_deleted_object_id_isValid = ::OpenAPI::fromJsonValue(m_deleted_object_id, json[QString("deletedObjectId")]);
    m_deleted_object_id_isSet = !json[QString("deletedObjectId")].isNull() && m_deleted_object_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_object_isValid = ::OpenAPI::fromJsonValue(m_object, json[QString("object")]);
    m_object_isSet = !json[QString("object")].isNull() && m_object_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDeletionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_object_id_isSet) {
        obj.insert(QString("deletedObjectId"), ::OpenAPI::toJsonValue(m_deleted_object_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_object_isSet) {
        obj.insert(QString("object"), ::OpenAPI::toJsonValue(m_object));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDeletionResponse::getDeletedObjectId() const {
    return m_deleted_object_id;
}
void OAIDeletionResponse::setDeletedObjectId(const QString &deleted_object_id) {
    m_deleted_object_id = deleted_object_id;
    m_deleted_object_id_isSet = true;
}

bool OAIDeletionResponse::is_deleted_object_id_Set() const{
    return m_deleted_object_id_isSet;
}

bool OAIDeletionResponse::is_deleted_object_id_Valid() const{
    return m_deleted_object_id_isValid;
}

QString OAIDeletionResponse::getId() const {
    return m_id;
}
void OAIDeletionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeletionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeletionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeletionResponse::getMessage() const {
    return m_message;
}
void OAIDeletionResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDeletionResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDeletionResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDeletionResponse::getObject() const {
    return m_object;
}
void OAIDeletionResponse::setObject(const QString &object) {
    m_object = object;
    m_object_isSet = true;
}

bool OAIDeletionResponse::is_object_Set() const{
    return m_object_isSet;
}

bool OAIDeletionResponse::is_object_Valid() const{
    return m_object_isValid;
}

QString OAIDeletionResponse::getOrganizationId() const {
    return m_organization_id;
}
void OAIDeletionResponse::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIDeletionResponse::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIDeletionResponse::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

double OAIDeletionResponse::getProgress() const {
    return m_progress;
}
void OAIDeletionResponse::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIDeletionResponse::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIDeletionResponse::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIDeletionResponse::getStatus() const {
    return m_status;
}
void OAIDeletionResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeletionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeletionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeletionResponse::getType() const {
    return m_type;
}
void OAIDeletionResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeletionResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeletionResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDeletionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
