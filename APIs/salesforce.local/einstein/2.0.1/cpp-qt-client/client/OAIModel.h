/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModel.h
 *
 * 
 */

#ifndef OAIModel_H
#define OAIModel_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModel : public OAIObject {
public:
    OAIModel();
    OAIModel(QString json);
    ~OAIModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlgorithm() const;
    void setAlgorithm(const QString &algorithm);
    bool is_algorithm_Set() const;
    bool is_algorithm_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint64 getDatasetId() const;
    void setDatasetId(const qint64 &dataset_id);
    bool is_dataset_id_Set() const;
    bool is_dataset_id_Valid() const;

    qint64 getDatasetVersionId() const;
    void setDatasetVersionId(const qint64 &dataset_version_id);
    bool is_dataset_version_id_Set() const;
    bool is_dataset_version_id_Valid() const;

    QString getFailureMsg() const;
    void setFailureMsg(const QString &failure_msg);
    bool is_failure_msg_Set() const;
    bool is_failure_msg_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QString getModelId() const;
    void setModelId(const QString &model_id);
    bool is_model_id_Set() const;
    bool is_model_id_Valid() const;

    QString getModelType() const;
    void setModelType(const QString &model_type);
    bool is_model_type_Set() const;
    bool is_model_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getObject() const;
    void setObject(const QString &object);
    bool is_object_Set() const;
    bool is_object_Valid() const;

    double getProgress() const;
    void setProgress(const double &progress);
    bool is_progress_Set() const;
    bool is_progress_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_algorithm;
    bool m_algorithm_isSet;
    bool m_algorithm_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint64 m_dataset_id;
    bool m_dataset_id_isSet;
    bool m_dataset_id_isValid;

    qint64 m_dataset_version_id;
    bool m_dataset_version_id_isSet;
    bool m_dataset_version_id_isValid;

    QString m_failure_msg;
    bool m_failure_msg_isSet;
    bool m_failure_msg_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QString m_model_id;
    bool m_model_id_isSet;
    bool m_model_id_isValid;

    QString m_model_type;
    bool m_model_type_isSet;
    bool m_model_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_object;
    bool m_object_isSet;
    bool m_object_isValid;

    double m_progress;
    bool m_progress_isSet;
    bool m_progress_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModel)

#endif // OAIModel_H
