/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GenerateAccessTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateTokenV2
     * @param assertion encrypted payload to identify yourself (optional)
     * @param grantType specify the authentication method desired (optional)
     * @param refreshToken The refresh token you created previously. (optional)
     * @param scope set to &#x60;offline&#x60; to generate a refresh token (optional)
     * @param validFor Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days (optional, default to 60)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access token result </td><td>  -  </td></tr>
     </table>
     * authentication guid
     * @see <a href="https://metamind.readme.io/docs/generate-an-oauth-access-token">Generate an OAuth Token Documentation</a>
     */
    public okhttp3.Call generateTokenV2Call(String assertion, String grantType, String refreshToken, String scope, Integer validFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assertion != null) {
            localVarFormParams.put("assertion", assertion);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (validFor != null) {
            localVarFormParams.put("valid_for", validFor);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenV2ValidateBeforeCall(String assertion, String grantType, String refreshToken, String scope, Integer validFor, final ApiCallback _callback) throws ApiException {
        return generateTokenV2Call(assertion, grantType, refreshToken, scope, validFor, _callback);

    }

    /**
     * Generate an OAuth Token
     * Returns an OAuth access token or a refresh token. You must pass a valid access token in the header of each API call.
     * @param assertion encrypted payload to identify yourself (optional)
     * @param grantType specify the authentication method desired (optional)
     * @param refreshToken The refresh token you created previously. (optional)
     * @param scope set to &#x60;offline&#x60; to generate a refresh token (optional)
     * @param validFor Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days (optional, default to 60)
     * @return GenerateAccessTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access token result </td><td>  -  </td></tr>
     </table>
     * authentication guid
     * @see <a href="https://metamind.readme.io/docs/generate-an-oauth-access-token">Generate an OAuth Token Documentation</a>
     */
    public GenerateAccessTokenResponse generateTokenV2(String assertion, String grantType, String refreshToken, String scope, Integer validFor) throws ApiException {
        ApiResponse<GenerateAccessTokenResponse> localVarResp = generateTokenV2WithHttpInfo(assertion, grantType, refreshToken, scope, validFor);
        return localVarResp.getData();
    }

    /**
     * Generate an OAuth Token
     * Returns an OAuth access token or a refresh token. You must pass a valid access token in the header of each API call.
     * @param assertion encrypted payload to identify yourself (optional)
     * @param grantType specify the authentication method desired (optional)
     * @param refreshToken The refresh token you created previously. (optional)
     * @param scope set to &#x60;offline&#x60; to generate a refresh token (optional)
     * @param validFor Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days (optional, default to 60)
     * @return ApiResponse&lt;GenerateAccessTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access token result </td><td>  -  </td></tr>
     </table>
     * authentication guid
     * @see <a href="https://metamind.readme.io/docs/generate-an-oauth-access-token">Generate an OAuth Token Documentation</a>
     */
    public ApiResponse<GenerateAccessTokenResponse> generateTokenV2WithHttpInfo(String assertion, String grantType, String refreshToken, String scope, Integer validFor) throws ApiException {
        okhttp3.Call localVarCall = generateTokenV2ValidateBeforeCall(assertion, grantType, refreshToken, scope, validFor, null);
        Type localVarReturnType = new TypeToken<GenerateAccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate an OAuth Token (asynchronously)
     * Returns an OAuth access token or a refresh token. You must pass a valid access token in the header of each API call.
     * @param assertion encrypted payload to identify yourself (optional)
     * @param grantType specify the authentication method desired (optional)
     * @param refreshToken The refresh token you created previously. (optional)
     * @param scope set to &#x60;offline&#x60; to generate a refresh token (optional)
     * @param validFor Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days (optional, default to 60)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access token result </td><td>  -  </td></tr>
     </table>
     * authentication guid
     * @see <a href="https://metamind.readme.io/docs/generate-an-oauth-access-token">Generate an OAuth Token Documentation</a>
     */
    public okhttp3.Call generateTokenV2Async(String assertion, String grantType, String refreshToken, String scope, Integer validFor, final ApiCallback<GenerateAccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenV2ValidateBeforeCall(assertion, grantType, refreshToken, scope, validFor, _callback);
        Type localVarReturnType = new TypeToken<GenerateAccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeRefreshTokenV2
     * @param token the token to revoke (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted, with no content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> token cannot be removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> token not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeRefreshTokenV2Call(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/oauth2/tokens/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeRefreshTokenV2ValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling revokeRefreshTokenV2(Async)");
        }

        return revokeRefreshTokenV2Call(token, _callback);

    }

    /**
     * Delete a Refresh Token
     * 
     * @param token the token to revoke (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted, with no content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> token cannot be removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> token not found </td><td>  -  </td></tr>
     </table>
     */
    public void revokeRefreshTokenV2(String token) throws ApiException {
        revokeRefreshTokenV2WithHttpInfo(token);
    }

    /**
     * Delete a Refresh Token
     * 
     * @param token the token to revoke (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted, with no content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> token cannot be removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> token not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeRefreshTokenV2WithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = revokeRefreshTokenV2ValidateBeforeCall(token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Refresh Token (asynchronously)
     * 
     * @param token the token to revoke (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> deleted, with no content returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> token cannot be removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> token not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeRefreshTokenV2Async(String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeRefreshTokenV2ValidateBeforeCall(token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
