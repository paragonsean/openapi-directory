/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrainResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.549798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrainResponse {
  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private String algorithm;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private Long datasetId;

  public static final String SERIALIZED_NAME_DATASET_VERSION_ID = "datasetVersionId";
  @SerializedName(SERIALIZED_NAME_DATASET_VERSION_ID)
  private Long datasetVersionId;

  public static final String SERIALIZED_NAME_EPOCHS = "epochs";
  @SerializedName(SERIALIZED_NAME_EPOCHS)
  private Integer epochs;

  public static final String SERIALIZED_NAME_FAILURE_MSG = "failureMsg";
  @SerializedName(SERIALIZED_NAME_FAILURE_MSG)
  private String failureMsg;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LEARNING_RATE = "learningRate";
  @SerializedName(SERIALIZED_NAME_LEARNING_RATE)
  private Double learningRate;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private String modelType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private BigDecimal progress;

  public static final String SERIALIZED_NAME_QUEUE_POSITION = "queuePosition";
  @SerializedName(SERIALIZED_NAME_QUEUE_POSITION)
  private Integer queuePosition;

  /**
   * Status of the model.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("QUEUED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    KILLED("KILLED"),
    
    FAILED_WITH_RETRIES("FAILED_WITH_RETRIES");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRAIN_PARAMS = "trainParams";
  @SerializedName(SERIALIZED_NAME_TRAIN_PARAMS)
  private String trainParams;

  public static final String SERIALIZED_NAME_TRAIN_STATS = "trainStats";
  @SerializedName(SERIALIZED_NAME_TRAIN_STATS)
  private String trainStats;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public TrainResponse() {
  }

  public TrainResponse algorithm(String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Algorithm used to create the model. Returned only when the modelType is image-detection.
   * @return algorithm
   */
  @javax.annotation.Nullable
  public String getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(String algorithm) {
    this.algorithm = algorithm;
  }


  public TrainResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time that the model was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TrainResponse datasetId(Long datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * ID of the dataset trained to create the model.
   * @return datasetId
   */
  @javax.annotation.Nonnull
  public Long getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(Long datasetId) {
    this.datasetId = datasetId;
  }


  public TrainResponse datasetVersionId(Long datasetVersionId) {
    this.datasetVersionId = datasetVersionId;
    return this;
  }

  /**
   * Not available yet
   * @return datasetVersionId
   */
  @javax.annotation.Nonnull
  public Long getDatasetVersionId() {
    return datasetVersionId;
  }

  public void setDatasetVersionId(Long datasetVersionId) {
    this.datasetVersionId = datasetVersionId;
  }


  public TrainResponse epochs(Integer epochs) {
    this.epochs = epochs;
    return this;
  }

  /**
   * Number of epochs used during training.
   * @return epochs
   */
  @javax.annotation.Nullable
  public Integer getEpochs() {
    return epochs;
  }

  public void setEpochs(Integer epochs) {
    this.epochs = epochs;
  }


  public TrainResponse failureMsg(String failureMsg) {
    this.failureMsg = failureMsg;
    return this;
  }

  /**
   * Reason the dataset training failed. Returned only if the training status is FAILED.
   * @return failureMsg
   */
  @javax.annotation.Nullable
  public String getFailureMsg() {
    return failureMsg;
  }

  public void setFailureMsg(String failureMsg) {
    this.failureMsg = failureMsg;
  }


  public TrainResponse language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public TrainResponse learningRate(Double learningRate) {
    this.learningRate = learningRate;
    return this;
  }

  /**
   * Learning rate used during training.
   * @return learningRate
   */
  @javax.annotation.Nullable
  public Double getLearningRate() {
    return learningRate;
  }

  public void setLearningRate(Double learningRate) {
    this.learningRate = learningRate;
  }


  public TrainResponse modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * ID of the model. Contains letters and numbers.
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public TrainResponse modelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Type of data from which the model was created.
   * @return modelType
   */
  @javax.annotation.Nullable
  public String getModelType() {
    return modelType;
  }

  public void setModelType(String modelType) {
    this.modelType = modelType;
  }


  public TrainResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the model.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TrainResponse _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Object returned; in this case, training.
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public TrainResponse progress(BigDecimal progress) {
    this.progress = progress;
    return this;
  }

  /**
   * How far the dataset training has progressed. Values are between 0�1.
   * @return progress
   */
  @javax.annotation.Nonnull
  public BigDecimal getProgress() {
    return progress;
  }

  public void setProgress(BigDecimal progress) {
    this.progress = progress;
  }


  public TrainResponse queuePosition(Integer queuePosition) {
    this.queuePosition = queuePosition;
    return this;
  }

  /**
   * Where the training job is in the queue. This field appears in the response only if the status is QUEUED.
   * @return queuePosition
   */
  @javax.annotation.Nullable
  public Integer getQueuePosition() {
    return queuePosition;
  }

  public void setQueuePosition(Integer queuePosition) {
    this.queuePosition = queuePosition;
  }


  public TrainResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the model.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TrainResponse trainParams(String trainParams) {
    this.trainParams = trainParams;
    return this;
  }

  /**
   * Training parameters passed into the request.
   * @return trainParams
   */
  @javax.annotation.Nullable
  public String getTrainParams() {
    return trainParams;
  }

  public void setTrainParams(String trainParams) {
    this.trainParams = trainParams;
  }


  public TrainResponse trainStats(String trainStats) {
    this.trainStats = trainStats;
    return this;
  }

  /**
   * Returns null when you train a dataset. Training statistics are returned when the status is SUCCEEDED or FAILED.
   * @return trainStats
   */
  @javax.annotation.Nullable
  public String getTrainStats() {
    return trainStats;
  }

  public void setTrainStats(String trainStats) {
    this.trainStats = trainStats;
  }


  public TrainResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date and time that the model was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainResponse trainResponse = (TrainResponse) o;
    return Objects.equals(this.algorithm, trainResponse.algorithm) &&
        Objects.equals(this.createdAt, trainResponse.createdAt) &&
        Objects.equals(this.datasetId, trainResponse.datasetId) &&
        Objects.equals(this.datasetVersionId, trainResponse.datasetVersionId) &&
        Objects.equals(this.epochs, trainResponse.epochs) &&
        Objects.equals(this.failureMsg, trainResponse.failureMsg) &&
        Objects.equals(this.language, trainResponse.language) &&
        Objects.equals(this.learningRate, trainResponse.learningRate) &&
        Objects.equals(this.modelId, trainResponse.modelId) &&
        Objects.equals(this.modelType, trainResponse.modelType) &&
        Objects.equals(this.name, trainResponse.name) &&
        Objects.equals(this._object, trainResponse._object) &&
        Objects.equals(this.progress, trainResponse.progress) &&
        Objects.equals(this.queuePosition, trainResponse.queuePosition) &&
        Objects.equals(this.status, trainResponse.status) &&
        Objects.equals(this.trainParams, trainResponse.trainParams) &&
        Objects.equals(this.trainStats, trainResponse.trainStats) &&
        Objects.equals(this.updatedAt, trainResponse.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, createdAt, datasetId, datasetVersionId, epochs, failureMsg, language, learningRate, modelId, modelType, name, _object, progress, queuePosition, status, trainParams, trainStats, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainResponse {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    datasetVersionId: ").append(toIndentedString(datasetVersionId)).append("\n");
    sb.append("    epochs: ").append(toIndentedString(epochs)).append("\n");
    sb.append("    failureMsg: ").append(toIndentedString(failureMsg)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    learningRate: ").append(toIndentedString(learningRate)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    queuePosition: ").append(toIndentedString(queuePosition)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trainParams: ").append(toIndentedString(trainParams)).append("\n");
    sb.append("    trainStats: ").append(toIndentedString(trainStats)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("createdAt");
    openapiFields.add("datasetId");
    openapiFields.add("datasetVersionId");
    openapiFields.add("epochs");
    openapiFields.add("failureMsg");
    openapiFields.add("language");
    openapiFields.add("learningRate");
    openapiFields.add("modelId");
    openapiFields.add("modelType");
    openapiFields.add("name");
    openapiFields.add("object");
    openapiFields.add("progress");
    openapiFields.add("queuePosition");
    openapiFields.add("status");
    openapiFields.add("trainParams");
    openapiFields.add("trainStats");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("datasetId");
    openapiRequiredFields.add("datasetVersionId");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("progress");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrainResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrainResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrainResponse is not found in the empty JSON string", TrainResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrainResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrainResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrainResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      if ((jsonObj.get("failureMsg") != null && !jsonObj.get("failureMsg").isJsonNull()) && !jsonObj.get("failureMsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureMsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureMsg").toString()));
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("trainParams") != null && !jsonObj.get("trainParams").isJsonNull()) && !jsonObj.get("trainParams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainParams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainParams").toString()));
      }
      if ((jsonObj.get("trainStats") != null && !jsonObj.get("trainStats").isJsonNull()) && !jsonObj.get("trainStats").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainStats` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainStats").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrainResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrainResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrainResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrainResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TrainResponse>() {
           @Override
           public void write(JsonWriter out, TrainResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrainResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrainResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrainResponse
   * @throws IOException if the JSON string is invalid with respect to TrainResponse
   */
  public static TrainResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrainResponse.class);
  }

  /**
   * Convert an instance of TrainResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

