/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LabelSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dataset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.549798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dataset {
  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_LABEL_SUMMARY = "labelSummary";
  @SerializedName(SERIALIZED_NAME_LABEL_SUMMARY)
  private LabelSummary labelSummary;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM_OF_DUPLICATES = "numOfDuplicates";
  @SerializedName(SERIALIZED_NAME_NUM_OF_DUPLICATES)
  private Integer numOfDuplicates;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_STATUS_MSG = "statusMsg";
  @SerializedName(SERIALIZED_NAME_STATUS_MSG)
  private String statusMsg;

  public static final String SERIALIZED_NAME_TOTAL_EXAMPLES = "totalExamples";
  @SerializedName(SERIALIZED_NAME_TOTAL_EXAMPLES)
  private Integer totalExamples;

  public static final String SERIALIZED_NAME_TOTAL_LABELS = "totalLabels";
  @SerializedName(SERIALIZED_NAME_TOTAL_LABELS)
  private Integer totalLabels;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Dataset() {
  }

  public Dataset available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nullable
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public Dataset createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time that the dataset was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Dataset id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Dataset labelSummary(LabelSummary labelSummary) {
    this.labelSummary = labelSummary;
    return this;
  }

  /**
   * Get labelSummary
   * @return labelSummary
   */
  @javax.annotation.Nullable
  public LabelSummary getLabelSummary() {
    return labelSummary;
  }

  public void setLabelSummary(LabelSummary labelSummary) {
    this.labelSummary = labelSummary;
  }


  public Dataset language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Dataset language.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Dataset name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Dataset numOfDuplicates(Integer numOfDuplicates) {
    this.numOfDuplicates = numOfDuplicates;
    return this;
  }

  /**
   * Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.
   * @return numOfDuplicates
   */
  @javax.annotation.Nullable
  public Integer getNumOfDuplicates() {
    return numOfDuplicates;
  }

  public void setNumOfDuplicates(Integer numOfDuplicates) {
    this.numOfDuplicates = numOfDuplicates;
  }


  public Dataset _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Object returned; in this case, dataset.
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public Dataset statusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  /**
   * Get statusMsg
   * @return statusMsg
   */
  @javax.annotation.Nullable
  public String getStatusMsg() {
    return statusMsg;
  }

  public void setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
  }


  public Dataset totalExamples(Integer totalExamples) {
    this.totalExamples = totalExamples;
    return this;
  }

  /**
   * Total number of examples in the dataset.
   * @return totalExamples
   */
  @javax.annotation.Nullable
  public Integer getTotalExamples() {
    return totalExamples;
  }

  public void setTotalExamples(Integer totalExamples) {
    this.totalExamples = totalExamples;
  }


  public Dataset totalLabels(Integer totalLabels) {
    this.totalLabels = totalLabels;
    return this;
  }

  /**
   * Total number of labels in the dataset.
   * @return totalLabels
   */
  @javax.annotation.Nullable
  public Integer getTotalLabels() {
    return totalLabels;
  }

  public void setTotalLabels(Integer totalLabels) {
    this.totalLabels = totalLabels;
  }


  public Dataset type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Dataset updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.available, dataset.available) &&
        Objects.equals(this.createdAt, dataset.createdAt) &&
        Objects.equals(this.id, dataset.id) &&
        Objects.equals(this.labelSummary, dataset.labelSummary) &&
        Objects.equals(this.language, dataset.language) &&
        Objects.equals(this.name, dataset.name) &&
        Objects.equals(this.numOfDuplicates, dataset.numOfDuplicates) &&
        Objects.equals(this._object, dataset._object) &&
        Objects.equals(this.statusMsg, dataset.statusMsg) &&
        Objects.equals(this.totalExamples, dataset.totalExamples) &&
        Objects.equals(this.totalLabels, dataset.totalLabels) &&
        Objects.equals(this.type, dataset.type) &&
        Objects.equals(this.updatedAt, dataset.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, createdAt, id, labelSummary, language, name, numOfDuplicates, _object, statusMsg, totalExamples, totalLabels, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labelSummary: ").append(toIndentedString(labelSummary)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numOfDuplicates: ").append(toIndentedString(numOfDuplicates)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    statusMsg: ").append(toIndentedString(statusMsg)).append("\n");
    sb.append("    totalExamples: ").append(toIndentedString(totalExamples)).append("\n");
    sb.append("    totalLabels: ").append(toIndentedString(totalLabels)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available");
    openapiFields.add("createdAt");
    openapiFields.add("id");
    openapiFields.add("labelSummary");
    openapiFields.add("language");
    openapiFields.add("name");
    openapiFields.add("numOfDuplicates");
    openapiFields.add("object");
    openapiFields.add("statusMsg");
    openapiFields.add("totalExamples");
    openapiFields.add("totalLabels");
    openapiFields.add("type");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dataset is not found in the empty JSON string", Dataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dataset.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `labelSummary`
      if (jsonObj.get("labelSummary") != null && !jsonObj.get("labelSummary").isJsonNull()) {
        LabelSummary.validateJsonElement(jsonObj.get("labelSummary"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("statusMsg") != null && !jsonObj.get("statusMsg").isJsonNull()) && !jsonObj.get("statusMsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMsg").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dataset.class));

       return (TypeAdapter<T>) new TypeAdapter<Dataset>() {
           @Override
           public void write(JsonWriter out, Dataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dataset
   * @throws IOException if the JSON string is invalid with respect to Dataset
   */
  public static Dataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dataset.class);
  }

  /**
   * Convert an instance of Dataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

