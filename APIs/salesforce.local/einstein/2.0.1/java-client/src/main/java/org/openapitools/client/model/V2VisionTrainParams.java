/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON that contains parameters that specify how the model is created
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.549798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V2VisionTrainParams {
  public static final String SERIALIZED_NAME_TRAIN_SPLIT_RATIO = "trainSplitRatio";
  @SerializedName(SERIALIZED_NAME_TRAIN_SPLIT_RATIO)
  private Float trainSplitRatio;

  public static final String SERIALIZED_NAME_WITH_FEEDBACK = "withFeedback";
  @SerializedName(SERIALIZED_NAME_WITH_FEEDBACK)
  private Boolean withFeedback;

  public static final String SERIALIZED_NAME_WITH_GLOBAL_DATASET_ID = "withGlobalDatasetId";
  @SerializedName(SERIALIZED_NAME_WITH_GLOBAL_DATASET_ID)
  private Long withGlobalDatasetId;

  public V2VisionTrainParams() {
  }

  public V2VisionTrainParams trainSplitRatio(Float trainSplitRatio) {
    this.trainSplitRatio = trainSplitRatio;
    return this;
  }

  /**
   * Lets you specify the ratio of data used to train the dataset and the data used to test the model.
   * @return trainSplitRatio
   */
  @javax.annotation.Nullable
  public Float getTrainSplitRatio() {
    return trainSplitRatio;
  }

  public void setTrainSplitRatio(Float trainSplitRatio) {
    this.trainSplitRatio = trainSplitRatio;
  }


  public V2VisionTrainParams withFeedback(Boolean withFeedback) {
    this.withFeedback = withFeedback;
    return this;
  }

  /**
   * Lets you specify that feedback examples are included in the data to be trained to create the model.
   * @return withFeedback
   */
  @javax.annotation.Nullable
  public Boolean getWithFeedback() {
    return withFeedback;
  }

  public void setWithFeedback(Boolean withFeedback) {
    this.withFeedback = withFeedback;
  }


  public V2VisionTrainParams withGlobalDatasetId(Long withGlobalDatasetId) {
    this.withGlobalDatasetId = withGlobalDatasetId;
    return this;
  }

  /**
   * Lets you specify that a global dataset is used in addition to the specified dataset to create the model.
   * @return withGlobalDatasetId
   */
  @javax.annotation.Nullable
  public Long getWithGlobalDatasetId() {
    return withGlobalDatasetId;
  }

  public void setWithGlobalDatasetId(Long withGlobalDatasetId) {
    this.withGlobalDatasetId = withGlobalDatasetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2VisionTrainParams v2VisionTrainParams = (V2VisionTrainParams) o;
    return Objects.equals(this.trainSplitRatio, v2VisionTrainParams.trainSplitRatio) &&
        Objects.equals(this.withFeedback, v2VisionTrainParams.withFeedback) &&
        Objects.equals(this.withGlobalDatasetId, v2VisionTrainParams.withGlobalDatasetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trainSplitRatio, withFeedback, withGlobalDatasetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2VisionTrainParams {\n");
    sb.append("    trainSplitRatio: ").append(toIndentedString(trainSplitRatio)).append("\n");
    sb.append("    withFeedback: ").append(toIndentedString(withFeedback)).append("\n");
    sb.append("    withGlobalDatasetId: ").append(toIndentedString(withGlobalDatasetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trainSplitRatio");
    openapiFields.add("withFeedback");
    openapiFields.add("withGlobalDatasetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V2VisionTrainParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2VisionTrainParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2VisionTrainParams is not found in the empty JSON string", V2VisionTrainParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2VisionTrainParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2VisionTrainParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2VisionTrainParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2VisionTrainParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2VisionTrainParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2VisionTrainParams.class));

       return (TypeAdapter<T>) new TypeAdapter<V2VisionTrainParams>() {
           @Override
           public void write(JsonWriter out, V2VisionTrainParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2VisionTrainParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V2VisionTrainParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V2VisionTrainParams
   * @throws IOException if the JSON string is invalid with respect to V2VisionTrainParams
   */
  public static V2VisionTrainParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2VisionTrainParams.class);
  }

  /**
   * Convert an instance of V2VisionTrainParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

