/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.DatasetList;
import org.openapitools.client.model.DeletionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisionDatasetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VisionDatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VisionDatasetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDataset
     * @param labels Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250. (optional)
     * @param name Name of the dataset. Maximum length is 180 characters. (optional)
     * @param type Type of dataset data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creation success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetCall(String labels, String name, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasetValidateBeforeCall(String labels, String name, String type, final ApiCallback _callback) throws ApiException {
        return createDatasetCall(labels, name, type, _callback);

    }

    /**
     * Create a Dataset
     * Creates a dataset and labels, if they&#39;re specified.
     * @param labels Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250. (optional)
     * @param name Name of the dataset. Maximum length is 180 characters. (optional)
     * @param type Type of dataset data (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creation success </td><td>  -  </td></tr>
     </table>
     */
    public Dataset createDataset(String labels, String name, String type) throws ApiException {
        ApiResponse<Dataset> localVarResp = createDatasetWithHttpInfo(labels, name, type);
        return localVarResp.getData();
    }

    /**
     * Create a Dataset
     * Creates a dataset and labels, if they&#39;re specified.
     * @param labels Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250. (optional)
     * @param name Name of the dataset. Maximum length is 180 characters. (optional)
     * @param type Type of dataset data (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creation success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> createDatasetWithHttpInfo(String labels, String name, String type) throws ApiException {
        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(labels, name, type, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Dataset (asynchronously)
     * Creates a dataset and labels, if they&#39;re specified.
     * @param labels Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250. (optional)
     * @param name Name of the dataset. Maximum length is 180 characters. (optional)
     * @param type Type of dataset data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creation success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetAsync(String labels, String name, String type, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(labels, name, type, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset1
     * @param datasetId Dataset Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataset1Call(String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataset1ValidateBeforeCall(String datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling deleteDataset1(Async)");
        }

        return deleteDataset1Call(datasetId, _callback);

    }

    /**
     * Delete a Dataset
     * Deletes the specified dataset and associated labels and examples.
     * @param datasetId Dataset Id (required)
     * @return DeletionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeletionResponse deleteDataset1(String datasetId) throws ApiException {
        ApiResponse<DeletionResponse> localVarResp = deleteDataset1WithHttpInfo(datasetId);
        return localVarResp.getData();
    }

    /**
     * Delete a Dataset
     * Deletes the specified dataset and associated labels and examples.
     * @param datasetId Dataset Id (required)
     * @return ApiResponse&lt;DeletionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletionResponse> deleteDataset1WithHttpInfo(String datasetId) throws ApiException {
        okhttp3.Call localVarCall = deleteDataset1ValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Dataset (asynchronously)
     * Deletes the specified dataset and associated labels and examples.
     * @param datasetId Dataset Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDataset1Async(String datasetId, final ApiCallback<DeletionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataset1ValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get1
     * @param id Deletion Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call get1Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/deletion/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call get1ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling get1(Async)");
        }

        return get1Call(id, _callback);

    }

    /**
     * Get Deletion Status
     * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
     * @param id Deletion Id (required)
     * @return DeletionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion status </td><td>  -  </td></tr>
     </table>
     */
    public DeletionResponse get1(String id) throws ApiException {
        ApiResponse<DeletionResponse> localVarResp = get1WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Deletion Status
     * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
     * @param id Deletion Id (required)
     * @return ApiResponse&lt;DeletionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletionResponse> get1WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = get1ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Deletion Status (asynchronously)
     * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
     * @param id Deletion Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deletion status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call get1Async(String id, final ApiCallback<DeletionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = get1ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataset1
     * @param datasetId Dataset Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataset1Call(String datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets/{datasetId}"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataset1ValidateBeforeCall(String datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getDataset1(Async)");
        }

        return getDataset1Call(datasetId, _callback);

    }

    /**
     * Get a Dataset
     * Returns a single dataset.
     * @param datasetId Dataset Id (required)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Dataset getDataset1(String datasetId) throws ApiException {
        ApiResponse<Dataset> localVarResp = getDataset1WithHttpInfo(datasetId);
        return localVarResp.getData();
    }

    /**
     * Get a Dataset
     * Returns a single dataset.
     * @param datasetId Dataset Id (required)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> getDataset1WithHttpInfo(String datasetId) throws ApiException {
        okhttp3.Call localVarCall = getDataset1ValidateBeforeCall(datasetId, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Dataset (asynchronously)
     * Returns a single dataset.
     * @param datasetId Dataset Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataset1Async(String datasetId, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataset1ValidateBeforeCall(datasetId, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDatasets1
     * @param offset Index of the dataset from which you want to start paging (optional, default to 0)
     * @param count Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets. (optional, default to 25)
     * @param global If true, returns all global datasets. Global datasets are public datasets that Salesforce provides. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDatasets1Call(String offset, String count, Boolean global, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (global != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("global", global));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDatasets1ValidateBeforeCall(String offset, String count, Boolean global, final ApiCallback _callback) throws ApiException {
        return listDatasets1Call(offset, count, global, _callback);

    }

    /**
     * Get All Datasets
     * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
     * @param offset Index of the dataset from which you want to start paging (optional, default to 0)
     * @param count Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets. (optional, default to 25)
     * @param global If true, returns all global datasets. Global datasets are public datasets that Salesforce provides. (optional, default to false)
     * @return DatasetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DatasetList listDatasets1(String offset, String count, Boolean global) throws ApiException {
        ApiResponse<DatasetList> localVarResp = listDatasets1WithHttpInfo(offset, count, global);
        return localVarResp.getData();
    }

    /**
     * Get All Datasets
     * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
     * @param offset Index of the dataset from which you want to start paging (optional, default to 0)
     * @param count Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets. (optional, default to 25)
     * @param global If true, returns all global datasets. Global datasets are public datasets that Salesforce provides. (optional, default to false)
     * @return ApiResponse&lt;DatasetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DatasetList> listDatasets1WithHttpInfo(String offset, String count, Boolean global) throws ApiException {
        okhttp3.Call localVarCall = listDatasets1ValidateBeforeCall(offset, count, global, null);
        Type localVarReturnType = new TypeToken<DatasetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Datasets (asynchronously)
     * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
     * @param offset Index of the dataset from which you want to start paging (optional, default to 0)
     * @param count Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets. (optional, default to 25)
     * @param global If true, returns all global datasets. Global datasets are public datasets that Salesforce provides. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDatasets1Async(String offset, String count, Boolean global, final ApiCallback<DatasetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDatasets1ValidateBeforeCall(offset, count, global, _callback);
        Type localVarReturnType = new TypeToken<DatasetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDatasetAsync1
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload initiated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatasetAsync1Call(String data, String name, String path, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDatasetAsync1ValidateBeforeCall(String data, String name, String path, String type, final ApiCallback _callback) throws ApiException {
        return uploadDatasetAsync1Call(data, name, path, type, _callback);

    }

    /**
     * Create a Dataset From a Zip File Asynchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload initiated </td><td>  -  </td></tr>
     </table>
     */
    public Dataset uploadDatasetAsync1(String data, String name, String path, String type) throws ApiException {
        ApiResponse<Dataset> localVarResp = uploadDatasetAsync1WithHttpInfo(data, name, path, type);
        return localVarResp.getData();
    }

    /**
     * Create a Dataset From a Zip File Asynchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload initiated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> uploadDatasetAsync1WithHttpInfo(String data, String name, String path, String type) throws ApiException {
        okhttp3.Call localVarCall = uploadDatasetAsync1ValidateBeforeCall(data, name, path, type, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Dataset From a Zip File Asynchronously (asynchronously)
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload initiated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatasetAsync1Async(String data, String name, String path, String type, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDatasetAsync1ValidateBeforeCall(data, name, path, type, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDatasetSync1
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatasetSync1Call(String data, String name, String path, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets/upload/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDatasetSync1ValidateBeforeCall(String data, String name, String path, String type, final ApiCallback _callback) throws ApiException {
        return uploadDatasetSync1Call(data, name, path, type, _callback);

    }

    /**
     * Create a Dataset From a Zip File Synchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public Dataset uploadDatasetSync1(String data, String name, String path, String type) throws ApiException {
        ApiResponse<Dataset> localVarResp = uploadDatasetSync1WithHttpInfo(data, name, path, type);
        return localVarResp.getData();
    }

    /**
     * Create a Dataset From a Zip File Synchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> uploadDatasetSync1WithHttpInfo(String data, String name, String path, String type) throws ApiException {
        okhttp3.Call localVarCall = uploadDatasetSync1ValidateBeforeCall(data, name, path, type, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Dataset From a Zip File Synchronously (asynchronously)
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
     * @param data Path to the .zip file on the local drive (FilePart). (optional)
     * @param name Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name. (optional)
     * @param path URL of the .zip file. (optional)
     * @param type Type of dataset data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatasetSync1Async(String data, String name, String path, String type, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDatasetSync1ValidateBeforeCall(data, name, path, type, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
