/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ImageClassificationRequest;
import org.openapitools.client.model.ImageClassificationResponse;
import org.openapitools.client.model.OCRPredictResponse;
import org.openapitools.client.model.ObjectDetectionRequest;
import org.openapitools.client.model.ObjectDetectionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisionPredictionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VisionPredictionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VisionPredictionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for detectMultipart
     * @param objectDetectionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detection Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectMultipartCall(ObjectDetectionRequest objectDetectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectDetectionRequest;

        // create path and map variables
        String localVarPath = "/v2/vision/detect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectMultipartValidateBeforeCall(ObjectDetectionRequest objectDetectionRequest, final ApiCallback _callback) throws ApiException {
        return detectMultipartCall(objectDetectionRequest, _callback);

    }

    /**
     * Detection with Image File
     * Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file.
     * @param objectDetectionRequest  (optional)
     * @return ObjectDetectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detection Result </td><td>  -  </td></tr>
     </table>
     */
    public ObjectDetectionResponse detectMultipart(ObjectDetectionRequest objectDetectionRequest) throws ApiException {
        ApiResponse<ObjectDetectionResponse> localVarResp = detectMultipartWithHttpInfo(objectDetectionRequest);
        return localVarResp.getData();
    }

    /**
     * Detection with Image File
     * Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file.
     * @param objectDetectionRequest  (optional)
     * @return ApiResponse&lt;ObjectDetectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detection Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectDetectionResponse> detectMultipartWithHttpInfo(ObjectDetectionRequest objectDetectionRequest) throws ApiException {
        okhttp3.Call localVarCall = detectMultipartValidateBeforeCall(objectDetectionRequest, null);
        Type localVarReturnType = new TypeToken<ObjectDetectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detection with Image File (asynchronously)
     * Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file.
     * @param objectDetectionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Detection Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectMultipartAsync(ObjectDetectionRequest objectDetectionRequest, final ApiCallback<ObjectDetectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectMultipartValidateBeforeCall(objectDetectionRequest, _callback);
        Type localVarReturnType = new TypeToken<ObjectDetectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ocrMultipart
     * @param modelId ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2. (optional)
     * @param sampleContent Binary content of image file uploaded as multipart/form-data. Optional. (optional)
     * @param sampleId String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response. (optional)
     * @param sampleLocation URL of the image file. Use this parameter when sending in a file from a web location. Optional. (optional)
     * @param task Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text. (optional, default to text)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OCR Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ocrMultipartCall(String modelId, File sampleContent, String sampleId, String sampleLocation, String task, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/ocr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelId != null) {
            localVarFormParams.put("modelId", modelId);
        }

        if (sampleContent != null) {
            localVarFormParams.put("sampleContent", sampleContent);
        }

        if (sampleId != null) {
            localVarFormParams.put("sampleId", sampleId);
        }

        if (sampleLocation != null) {
            localVarFormParams.put("sampleLocation", sampleLocation);
        }

        if (task != null) {
            localVarFormParams.put("task", task);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ocrMultipartValidateBeforeCall(String modelId, File sampleContent, String sampleId, String sampleLocation, String task, final ApiCallback _callback) throws ApiException {
        return ocrMultipartCall(modelId, sampleContent, sampleId, sampleLocation, task, _callback);

    }

    /**
     * Detect Text
     * Returns a prediction from an OCR model for the specified image URL or local image file.
     * @param modelId ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2. (optional)
     * @param sampleContent Binary content of image file uploaded as multipart/form-data. Optional. (optional)
     * @param sampleId String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response. (optional)
     * @param sampleLocation URL of the image file. Use this parameter when sending in a file from a web location. Optional. (optional)
     * @param task Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text. (optional, default to text)
     * @return OCRPredictResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OCR Result </td><td>  -  </td></tr>
     </table>
     */
    public OCRPredictResponse ocrMultipart(String modelId, File sampleContent, String sampleId, String sampleLocation, String task) throws ApiException {
        ApiResponse<OCRPredictResponse> localVarResp = ocrMultipartWithHttpInfo(modelId, sampleContent, sampleId, sampleLocation, task);
        return localVarResp.getData();
    }

    /**
     * Detect Text
     * Returns a prediction from an OCR model for the specified image URL or local image file.
     * @param modelId ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2. (optional)
     * @param sampleContent Binary content of image file uploaded as multipart/form-data. Optional. (optional)
     * @param sampleId String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response. (optional)
     * @param sampleLocation URL of the image file. Use this parameter when sending in a file from a web location. Optional. (optional)
     * @param task Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text. (optional, default to text)
     * @return ApiResponse&lt;OCRPredictResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OCR Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OCRPredictResponse> ocrMultipartWithHttpInfo(String modelId, File sampleContent, String sampleId, String sampleLocation, String task) throws ApiException {
        okhttp3.Call localVarCall = ocrMultipartValidateBeforeCall(modelId, sampleContent, sampleId, sampleLocation, task, null);
        Type localVarReturnType = new TypeToken<OCRPredictResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect Text (asynchronously)
     * Returns a prediction from an OCR model for the specified image URL or local image file.
     * @param modelId ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2. (optional)
     * @param sampleContent Binary content of image file uploaded as multipart/form-data. Optional. (optional)
     * @param sampleId String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response. (optional)
     * @param sampleLocation URL of the image file. Use this parameter when sending in a file from a web location. Optional. (optional)
     * @param task Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text. (optional, default to text)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OCR Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ocrMultipartAsync(String modelId, File sampleContent, String sampleId, String sampleLocation, String task, final ApiCallback<OCRPredictResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ocrMultipartValidateBeforeCall(modelId, sampleContent, sampleId, sampleLocation, task, _callback);
        Type localVarReturnType = new TypeToken<OCRPredictResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictMultipart
     * @param imageClassificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prediction Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictMultipartCall(ImageClassificationRequest imageClassificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageClassificationRequest;

        // create path and map variables
        String localVarPath = "/v2/vision/predict";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictMultipartValidateBeforeCall(ImageClassificationRequest imageClassificationRequest, final ApiCallback _callback) throws ApiException {
        return predictMultipartCall(imageClassificationRequest, _callback);

    }

    /**
     * Make Prediction
     * Returns a prediction from an image or multi-label model for the specified image.
     * @param imageClassificationRequest  (optional)
     * @return ImageClassificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prediction Result </td><td>  -  </td></tr>
     </table>
     */
    public ImageClassificationResponse predictMultipart(ImageClassificationRequest imageClassificationRequest) throws ApiException {
        ApiResponse<ImageClassificationResponse> localVarResp = predictMultipartWithHttpInfo(imageClassificationRequest);
        return localVarResp.getData();
    }

    /**
     * Make Prediction
     * Returns a prediction from an image or multi-label model for the specified image.
     * @param imageClassificationRequest  (optional)
     * @return ApiResponse&lt;ImageClassificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prediction Result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageClassificationResponse> predictMultipartWithHttpInfo(ImageClassificationRequest imageClassificationRequest) throws ApiException {
        okhttp3.Call localVarCall = predictMultipartValidateBeforeCall(imageClassificationRequest, null);
        Type localVarReturnType = new TypeToken<ImageClassificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make Prediction (asynchronously)
     * Returns a prediction from an image or multi-label model for the specified image.
     * @param imageClassificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Prediction Result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictMultipartAsync(ImageClassificationRequest imageClassificationRequest, final ApiCallback<ImageClassificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictMultipartValidateBeforeCall(imageClassificationRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageClassificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
