/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TrainResponse;
import org.openapitools.client.model.V2LanguageTrainParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LanguageTrainingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LanguageTrainingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LanguageTrainingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTrainStatusAndProgress
     * @param modelId Model Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainStatusAndProgressCall(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/train/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrainStatusAndProgressValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getTrainStatusAndProgress(Async)");
        }

        return getTrainStatusAndProgressCall(modelId, _callback);

    }

    /**
     * Get Training Status
     * Returns the status of a model&#39;s training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
     * @param modelId Model Id (required)
     * @return TrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public TrainResponse getTrainStatusAndProgress(String modelId) throws ApiException {
        ApiResponse<TrainResponse> localVarResp = getTrainStatusAndProgressWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Get Training Status
     * Returns the status of a model&#39;s training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
     * @param modelId Model Id (required)
     * @return ApiResponse&lt;TrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrainResponse> getTrainStatusAndProgressWithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = getTrainStatusAndProgressValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Training Status (asynchronously)
     * Returns the status of a model&#39;s training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1.
     * @param modelId Model Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainStatusAndProgressAsync(String modelId, final ApiCallback<TrainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrainStatusAndProgressValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrain
     * @param algorithm Algorithm used for train (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param modelId ID of the model to be updated from the training. (optional)
     * @param trainParams  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrainCall(String algorithm, Integer epochs, Float learningRate, String modelId, V2LanguageTrainParams trainParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/retrain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algorithm != null) {
            localVarFormParams.put("algorithm", algorithm);
        }

        if (epochs != null) {
            localVarFormParams.put("epochs", epochs);
        }

        if (learningRate != null) {
            localVarFormParams.put("learningRate", learningRate);
        }

        if (modelId != null) {
            localVarFormParams.put("modelId", modelId);
        }

        if (trainParams != null) {
            localVarFormParams.put("trainParams", trainParams);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrainValidateBeforeCall(String algorithm, Integer epochs, Float learningRate, String modelId, V2LanguageTrainParams trainParams, final ApiCallback _callback) throws ApiException {
        return retrainCall(algorithm, epochs, learningRate, modelId, trainParams, _callback);

    }

    /**
     * Retrain a Dataset
     * Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model.
     * @param algorithm Algorithm used for train (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param modelId ID of the model to be updated from the training. (optional)
     * @param trainParams  (optional)
     * @return TrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public TrainResponse retrain(String algorithm, Integer epochs, Float learningRate, String modelId, V2LanguageTrainParams trainParams) throws ApiException {
        ApiResponse<TrainResponse> localVarResp = retrainWithHttpInfo(algorithm, epochs, learningRate, modelId, trainParams);
        return localVarResp.getData();
    }

    /**
     * Retrain a Dataset
     * Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model.
     * @param algorithm Algorithm used for train (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param modelId ID of the model to be updated from the training. (optional)
     * @param trainParams  (optional)
     * @return ApiResponse&lt;TrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrainResponse> retrainWithHttpInfo(String algorithm, Integer epochs, Float learningRate, String modelId, V2LanguageTrainParams trainParams) throws ApiException {
        okhttp3.Call localVarCall = retrainValidateBeforeCall(algorithm, epochs, learningRate, modelId, trainParams, null);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrain a Dataset (asynchronously)
     * Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model.
     * @param algorithm Algorithm used for train (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param modelId ID of the model to be updated from the training. (optional)
     * @param trainParams  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrainAsync(String algorithm, Integer epochs, Float learningRate, String modelId, V2LanguageTrainParams trainParams, final ApiCallback<TrainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrainValidateBeforeCall(algorithm, epochs, learningRate, modelId, trainParams, _callback);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for train
     * @param algorithm Algorithm used for train (optional)
     * @param datasetId ID of the dataset to train. (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param name Name of the model. Maximum length is 180 characters. (optional)
     * @param trainParams  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainCall(String algorithm, Long datasetId, Integer epochs, Double learningRate, String name, V2LanguageTrainParams trainParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/train";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algorithm != null) {
            localVarFormParams.put("algorithm", algorithm);
        }

        if (datasetId != null) {
            localVarFormParams.put("datasetId", datasetId);
        }

        if (epochs != null) {
            localVarFormParams.put("epochs", epochs);
        }

        if (learningRate != null) {
            localVarFormParams.put("learningRate", learningRate);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (trainParams != null) {
            localVarFormParams.put("trainParams", trainParams);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainValidateBeforeCall(String algorithm, Long datasetId, Integer epochs, Double learningRate, String name, V2LanguageTrainParams trainParams, final ApiCallback _callback) throws ApiException {
        return trainCall(algorithm, datasetId, epochs, learningRate, name, trainParams, _callback);

    }

    /**
     * Train a Dataset
     * Trains a dataset and creates a model.
     * @param algorithm Algorithm used for train (optional)
     * @param datasetId ID of the dataset to train. (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param name Name of the model. Maximum length is 180 characters. (optional)
     * @param trainParams  (optional)
     * @return TrainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public TrainResponse train(String algorithm, Long datasetId, Integer epochs, Double learningRate, String name, V2LanguageTrainParams trainParams) throws ApiException {
        ApiResponse<TrainResponse> localVarResp = trainWithHttpInfo(algorithm, datasetId, epochs, learningRate, name, trainParams);
        return localVarResp.getData();
    }

    /**
     * Train a Dataset
     * Trains a dataset and creates a model.
     * @param algorithm Algorithm used for train (optional)
     * @param datasetId ID of the dataset to train. (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param name Name of the model. Maximum length is 180 characters. (optional)
     * @param trainParams  (optional)
     * @return ApiResponse&lt;TrainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrainResponse> trainWithHttpInfo(String algorithm, Long datasetId, Integer epochs, Double learningRate, String name, V2LanguageTrainParams trainParams) throws ApiException {
        okhttp3.Call localVarCall = trainValidateBeforeCall(algorithm, datasetId, epochs, learningRate, name, trainParams, null);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Train a Dataset (asynchronously)
     * Trains a dataset and creates a model.
     * @param algorithm Algorithm used for train (optional)
     * @param datasetId ID of the dataset to train. (optional)
     * @param epochs Number of training iterations for the neural network. Optional. (optional)
     * @param learningRate N/A for intent or sentiment models. (optional)
     * @param name Name of the model. Maximum length is 180 characters. (optional)
     * @param trainParams  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Training Status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainAsync(String algorithm, Long datasetId, Integer epochs, Double learningRate, String name, V2LanguageTrainParams trainParams, final ApiCallback<TrainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainValidateBeforeCall(algorithm, datasetId, epochs, learningRate, name, trainParams, _callback);
        Type localVarReturnType = new TypeToken<TrainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
