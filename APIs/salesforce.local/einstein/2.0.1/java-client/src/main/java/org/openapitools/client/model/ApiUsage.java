/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlanData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiUsage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.549798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiUsage {
  public static final String SERIALIZED_NAME_ENDS_AT = "endsAt";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private OffsetDateTime endsAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LICENSE_ID = "licenseId";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_PLAN_DATA = "planData";
  @SerializedName(SERIALIZED_NAME_PLAN_DATA)
  private List<PlanData> planData = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREDICTIONS_MAX = "predictionsMax";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS_MAX)
  private Long predictionsMax;

  public static final String SERIALIZED_NAME_PREDICTIONS_USED = "predictionsUsed";
  @SerializedName(SERIALIZED_NAME_PREDICTIONS_USED)
  private Long predictionsUsed;

  public static final String SERIALIZED_NAME_STARTS_AT = "startsAt";
  @SerializedName(SERIALIZED_NAME_STARTS_AT)
  private OffsetDateTime startsAt;

  public ApiUsage() {
  }

  public ApiUsage endsAt(OffsetDateTime endsAt) {
    this.endsAt = endsAt;
    return this;
  }

  /**
   * Get endsAt
   * @return endsAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndsAt() {
    return endsAt;
  }

  public void setEndsAt(OffsetDateTime endsAt) {
    this.endsAt = endsAt;
  }


  public ApiUsage id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApiUsage licenseId(String licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * Get licenseId
   * @return licenseId
   */
  @javax.annotation.Nullable
  public String getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(String licenseId) {
    this.licenseId = licenseId;
  }


  public ApiUsage _object(String _object) {
    this._object = _object;
    return this;
  }

  /**
   * Get _object
   * @return _object
   */
  @javax.annotation.Nullable
  public String getObject() {
    return _object;
  }

  public void setObject(String _object) {
    this._object = _object;
  }


  public ApiUsage organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public ApiUsage planData(List<PlanData> planData) {
    this.planData = planData;
    return this;
  }

  public ApiUsage addPlanDataItem(PlanData planDataItem) {
    if (this.planData == null) {
      this.planData = new ArrayList<>();
    }
    this.planData.add(planDataItem);
    return this;
  }

  /**
   * Get planData
   * @return planData
   */
  @javax.annotation.Nullable
  public List<PlanData> getPlanData() {
    return planData;
  }

  public void setPlanData(List<PlanData> planData) {
    this.planData = planData;
  }


  public ApiUsage predictionsMax(Long predictionsMax) {
    this.predictionsMax = predictionsMax;
    return this;
  }

  /**
   * Get predictionsMax
   * @return predictionsMax
   */
  @javax.annotation.Nullable
  public Long getPredictionsMax() {
    return predictionsMax;
  }

  public void setPredictionsMax(Long predictionsMax) {
    this.predictionsMax = predictionsMax;
  }


  public ApiUsage predictionsUsed(Long predictionsUsed) {
    this.predictionsUsed = predictionsUsed;
    return this;
  }

  /**
   * Get predictionsUsed
   * @return predictionsUsed
   */
  @javax.annotation.Nullable
  public Long getPredictionsUsed() {
    return predictionsUsed;
  }

  public void setPredictionsUsed(Long predictionsUsed) {
    this.predictionsUsed = predictionsUsed;
  }


  public ApiUsage startsAt(OffsetDateTime startsAt) {
    this.startsAt = startsAt;
    return this;
  }

  /**
   * Get startsAt
   * @return startsAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartsAt() {
    return startsAt;
  }

  public void setStartsAt(OffsetDateTime startsAt) {
    this.startsAt = startsAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiUsage apiUsage = (ApiUsage) o;
    return Objects.equals(this.endsAt, apiUsage.endsAt) &&
        Objects.equals(this.id, apiUsage.id) &&
        Objects.equals(this.licenseId, apiUsage.licenseId) &&
        Objects.equals(this._object, apiUsage._object) &&
        Objects.equals(this.organizationId, apiUsage.organizationId) &&
        Objects.equals(this.planData, apiUsage.planData) &&
        Objects.equals(this.predictionsMax, apiUsage.predictionsMax) &&
        Objects.equals(this.predictionsUsed, apiUsage.predictionsUsed) &&
        Objects.equals(this.startsAt, apiUsage.startsAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endsAt, id, licenseId, _object, organizationId, planData, predictionsMax, predictionsUsed, startsAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiUsage {\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    planData: ").append(toIndentedString(planData)).append("\n");
    sb.append("    predictionsMax: ").append(toIndentedString(predictionsMax)).append("\n");
    sb.append("    predictionsUsed: ").append(toIndentedString(predictionsUsed)).append("\n");
    sb.append("    startsAt: ").append(toIndentedString(startsAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endsAt");
    openapiFields.add("id");
    openapiFields.add("licenseId");
    openapiFields.add("object");
    openapiFields.add("organizationId");
    openapiFields.add("planData");
    openapiFields.add("predictionsMax");
    openapiFields.add("predictionsUsed");
    openapiFields.add("startsAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiUsage is not found in the empty JSON string", ApiUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("licenseId") != null && !jsonObj.get("licenseId").isJsonNull()) && !jsonObj.get("licenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseId").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if (jsonObj.get("planData") != null && !jsonObj.get("planData").isJsonNull()) {
        JsonArray jsonArrayplanData = jsonObj.getAsJsonArray("planData");
        if (jsonArrayplanData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("planData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `planData` to be an array in the JSON string but got `%s`", jsonObj.get("planData").toString()));
          }

          // validate the optional field `planData` (array)
          for (int i = 0; i < jsonArrayplanData.size(); i++) {
            PlanData.validateJsonElement(jsonArrayplanData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiUsage>() {
           @Override
           public void write(JsonWriter out, ApiUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiUsage
   * @throws IOException if the JSON string is invalid with respect to ApiUsage
   */
  public static ApiUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiUsage.class);
  }

  /**
   * Convert an instance of ApiUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

