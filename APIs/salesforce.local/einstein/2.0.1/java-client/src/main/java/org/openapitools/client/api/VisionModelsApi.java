/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeletionResponse;
import org.openapitools.client.model.LearningCurveList;
import org.openapitools.client.model.Metrics;
import org.openapitools.client.model.ModelList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VisionModelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VisionModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VisionModelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteModel1
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deletion submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModel1Call(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModel1ValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteModel1(Async)");
        }

        return deleteModel1Call(modelId, _callback);

    }

    /**
     * Delete a Model
     * Deletes the specified model.
     * @param modelId  (required)
     * @return DeletionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deletion submitted </td><td>  -  </td></tr>
     </table>
     */
    public DeletionResponse deleteModel1(String modelId) throws ApiException {
        ApiResponse<DeletionResponse> localVarResp = deleteModel1WithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Delete a Model
     * Deletes the specified model.
     * @param modelId  (required)
     * @return ApiResponse&lt;DeletionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deletion submitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletionResponse> deleteModel1WithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = deleteModel1ValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Model (asynchronously)
     * Deletes the specified model.
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deletion submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModel1Async(String modelId, final ApiCallback<DeletionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModel1ValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<DeletionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrainedModelLearningCurve1
     * @param modelId  (required)
     * @param offset Index of the epoch from which you want to start paging (optional, default to 0)
     * @param count Number of epoch to return. Maximum valid value is 25. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Learning Curve </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModelLearningCurve1Call(String modelId, String offset, String count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/models/{modelId}/lc"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrainedModelLearningCurve1ValidateBeforeCall(String modelId, String offset, String count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getTrainedModelLearningCurve1(Async)");
        }

        return getTrainedModelLearningCurve1Call(modelId, offset, count, _callback);

    }

    /**
     * Get Model Learning Curve
     * Returns the metrics for each epoch in a model.
     * @param modelId  (required)
     * @param offset Index of the epoch from which you want to start paging (optional, default to 0)
     * @param count Number of epoch to return. Maximum valid value is 25. (optional, default to 25)
     * @return LearningCurveList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Learning Curve </td><td>  -  </td></tr>
     </table>
     */
    public LearningCurveList getTrainedModelLearningCurve1(String modelId, String offset, String count) throws ApiException {
        ApiResponse<LearningCurveList> localVarResp = getTrainedModelLearningCurve1WithHttpInfo(modelId, offset, count);
        return localVarResp.getData();
    }

    /**
     * Get Model Learning Curve
     * Returns the metrics for each epoch in a model.
     * @param modelId  (required)
     * @param offset Index of the epoch from which you want to start paging (optional, default to 0)
     * @param count Number of epoch to return. Maximum valid value is 25. (optional, default to 25)
     * @return ApiResponse&lt;LearningCurveList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Learning Curve </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LearningCurveList> getTrainedModelLearningCurve1WithHttpInfo(String modelId, String offset, String count) throws ApiException {
        okhttp3.Call localVarCall = getTrainedModelLearningCurve1ValidateBeforeCall(modelId, offset, count, null);
        Type localVarReturnType = new TypeToken<LearningCurveList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Model Learning Curve (asynchronously)
     * Returns the metrics for each epoch in a model.
     * @param modelId  (required)
     * @param offset Index of the epoch from which you want to start paging (optional, default to 0)
     * @param count Number of epoch to return. Maximum valid value is 25. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Learning Curve </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModelLearningCurve1Async(String modelId, String offset, String count, final ApiCallback<LearningCurveList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrainedModelLearningCurve1ValidateBeforeCall(modelId, offset, count, _callback);
        Type localVarReturnType = new TypeToken<LearningCurveList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrainedModelMetrics1
     * @param modelId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model Metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModelMetrics1Call(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/models/{modelId}"
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrainedModelMetrics1ValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getTrainedModelMetrics1(Async)");
        }

        return getTrainedModelMetrics1Call(modelId, _callback);

    }

    /**
     * Get Model Metrics
     * Returns the metrics for a model
     * @param modelId  (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model Metrics </td><td>  -  </td></tr>
     </table>
     */
    public Metrics getTrainedModelMetrics1(String modelId) throws ApiException {
        ApiResponse<Metrics> localVarResp = getTrainedModelMetrics1WithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Get Model Metrics
     * Returns the metrics for a model
     * @param modelId  (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model Metrics </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> getTrainedModelMetrics1WithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = getTrainedModelMetrics1ValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Model Metrics (asynchronously)
     * Returns the metrics for a model
     * @param modelId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Model Metrics </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModelMetrics1Async(String modelId, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrainedModelMetrics1ValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrainedModels1
     * @param datasetId Dataset Id (required)
     * @param offset Index of the model from which you want to start paging. (optional, default to 0)
     * @param count Number of models to return. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModels1Call(String datasetId, String offset, String count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/vision/datasets/{datasetId}/models"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrainedModels1ValidateBeforeCall(String datasetId, String offset, String count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getTrainedModels1(Async)");
        }

        return getTrainedModels1Call(datasetId, offset, count, _callback);

    }

    /**
     * Get All Models
     * Returns all models for the specified dataset.
     * @param datasetId Dataset Id (required)
     * @param offset Index of the model from which you want to start paging. (optional, default to 0)
     * @param count Number of models to return. (optional, default to 100)
     * @return ModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ModelList getTrainedModels1(String datasetId, String offset, String count) throws ApiException {
        ApiResponse<ModelList> localVarResp = getTrainedModels1WithHttpInfo(datasetId, offset, count);
        return localVarResp.getData();
    }

    /**
     * Get All Models
     * Returns all models for the specified dataset.
     * @param datasetId Dataset Id (required)
     * @param offset Index of the model from which you want to start paging. (optional, default to 0)
     * @param count Number of models to return. (optional, default to 100)
     * @return ApiResponse&lt;ModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelList> getTrainedModels1WithHttpInfo(String datasetId, String offset, String count) throws ApiException {
        okhttp3.Call localVarCall = getTrainedModels1ValidateBeforeCall(datasetId, offset, count, null);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Models (asynchronously)
     * Returns all models for the specified dataset.
     * @param datasetId Dataset Id (required)
     * @param offset Index of the model from which you want to start paging. (optional, default to 0)
     * @param count Number of models to return. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrainedModels1Async(String datasetId, String offset, String count, final ApiCallback<ModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrainedModels1ValidateBeforeCall(datasetId, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
