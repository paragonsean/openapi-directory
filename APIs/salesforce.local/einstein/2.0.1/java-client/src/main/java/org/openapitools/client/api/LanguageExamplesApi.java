/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.Example;
import org.openapitools.client.model.ExampleList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LanguageExamplesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LanguageExamplesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LanguageExamplesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getExamples
     * @param datasetId Dataset Id (required)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param source return examples that were created in the dataset as feedback (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesCall(String datasetId, String offset, String count, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/datasets/{datasetId}/examples"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExamplesValidateBeforeCall(String datasetId, String offset, String count, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling getExamples(Async)");
        }

        return getExamplesCall(datasetId, offset, count, source, _callback);

    }

    /**
     * Get All Examples
     * Returns all the examples for the specified dataset,
     * @param datasetId Dataset Id (required)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param source return examples that were created in the dataset as feedback (optional)
     * @return ExampleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExampleList getExamples(String datasetId, String offset, String count, String source) throws ApiException {
        ApiResponse<ExampleList> localVarResp = getExamplesWithHttpInfo(datasetId, offset, count, source);
        return localVarResp.getData();
    }

    /**
     * Get All Examples
     * Returns all the examples for the specified dataset,
     * @param datasetId Dataset Id (required)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param source return examples that were created in the dataset as feedback (optional)
     * @return ApiResponse&lt;ExampleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExampleList> getExamplesWithHttpInfo(String datasetId, String offset, String count, String source) throws ApiException {
        okhttp3.Call localVarCall = getExamplesValidateBeforeCall(datasetId, offset, count, source, null);
        Type localVarReturnType = new TypeToken<ExampleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Examples (asynchronously)
     * Returns all the examples for the specified dataset,
     * @param datasetId Dataset Id (required)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param source return examples that were created in the dataset as feedback (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesAsync(String datasetId, String offset, String count, String source, final ApiCallback<ExampleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExamplesValidateBeforeCall(datasetId, offset, count, source, _callback);
        Type localVarReturnType = new TypeToken<ExampleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExamplesByLabel
     * @param labelId Label Id (optional)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesByLabelCall(String labelId, String offset, String count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/examples";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labelId", labelId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExamplesByLabelValidateBeforeCall(String labelId, String offset, String count, final ApiCallback _callback) throws ApiException {
        return getExamplesByLabelCall(labelId, offset, count, _callback);

    }

    /**
     * Get All Examples for Label
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * @param labelId Label Id (optional)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @return ExampleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ExampleList getExamplesByLabel(String labelId, String offset, String count) throws ApiException {
        ApiResponse<ExampleList> localVarResp = getExamplesByLabelWithHttpInfo(labelId, offset, count);
        return localVarResp.getData();
    }

    /**
     * Get All Examples for Label
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * @param labelId Label Id (optional)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @return ApiResponse&lt;ExampleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExampleList> getExamplesByLabelWithHttpInfo(String labelId, String offset, String count) throws ApiException {
        okhttp3.Call localVarCall = getExamplesByLabelValidateBeforeCall(labelId, offset, count, null);
        Type localVarReturnType = new TypeToken<ExampleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Examples for Label (asynchronously)
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * @param labelId Label Id (optional)
     * @param offset Index of the example from which you want to start paging. (optional, default to 0)
     * @param count Number of examples to return. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExamplesByLabelAsync(String labelId, String offset, String count, final ApiCallback<ExampleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExamplesByLabelValidateBeforeCall(labelId, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ExampleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provideFeedback
     * @param document Intent or sentiment string to add to the dataset. (optional)
     * @param expectedLabel Correct label for the example. Must be a label that exists in the dataset. (optional)
     * @param modelId ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model. (optional)
     * @param name Name of the example. Optional. Maximum length is 180 characters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provideFeedbackCall(String document, String expectedLabel, String modelId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (document != null) {
            localVarFormParams.put("document", document);
        }

        if (expectedLabel != null) {
            localVarFormParams.put("expectedLabel", expectedLabel);
        }

        if (modelId != null) {
            localVarFormParams.put("modelId", modelId);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provideFeedbackValidateBeforeCall(String document, String expectedLabel, String modelId, String name, final ApiCallback _callback) throws ApiException {
        return provideFeedbackCall(document, expectedLabel, modelId, name, _callback);

    }

    /**
     * Create a Feedback Example
     * Adds a feedback example to the dataset associated with the specified model.
     * @param document Intent or sentiment string to add to the dataset. (optional)
     * @param expectedLabel Correct label for the example. Must be a label that exists in the dataset. (optional)
     * @param modelId ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model. (optional)
     * @param name Name of the example. Optional. Maximum length is 180 characters. (optional)
     * @return Example
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public Example provideFeedback(String document, String expectedLabel, String modelId, String name) throws ApiException {
        ApiResponse<Example> localVarResp = provideFeedbackWithHttpInfo(document, expectedLabel, modelId, name);
        return localVarResp.getData();
    }

    /**
     * Create a Feedback Example
     * Adds a feedback example to the dataset associated with the specified model.
     * @param document Intent or sentiment string to add to the dataset. (optional)
     * @param expectedLabel Correct label for the example. Must be a label that exists in the dataset. (optional)
     * @param modelId ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model. (optional)
     * @param name Name of the example. Optional. Maximum length is 180 characters. (optional)
     * @return ApiResponse&lt;Example&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example> provideFeedbackWithHttpInfo(String document, String expectedLabel, String modelId, String name) throws ApiException {
        okhttp3.Call localVarCall = provideFeedbackValidateBeforeCall(document, expectedLabel, modelId, name, null);
        Type localVarReturnType = new TypeToken<Example>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Feedback Example (asynchronously)
     * Adds a feedback example to the dataset associated with the specified model.
     * @param document Intent or sentiment string to add to the dataset. (optional)
     * @param expectedLabel Correct label for the example. Must be a label that exists in the dataset. (optional)
     * @param modelId ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model. (optional)
     * @param name Name of the example. Optional. Maximum length is 180 characters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provideFeedbackAsync(String document, String expectedLabel, String modelId, String name, final ApiCallback<Example> _callback) throws ApiException {

        okhttp3.Call localVarCall = provideFeedbackValidateBeforeCall(document, expectedLabel, modelId, name, _callback);
        Type localVarReturnType = new TypeToken<Example>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatasetAsync
     * @param datasetId Dataset Id (required)
     * @param data Path to the .csv, .tsv, or .json file on a local drive.  (optional)
     * @param type URL of the .csv, .tsv, or .json file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAsyncCall(String datasetId, String data, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/language/datasets/{datasetId}/upload"
            .replace("{" + "datasetId" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarFormParams.put("data", data);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetAsyncValidateBeforeCall(String datasetId, String data, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling updateDatasetAsync(Async)");
        }

        return updateDatasetAsyncCall(datasetId, data, type, _callback);

    }

    /**
     * Create Examples From a File
     * Adds examples from a .csv, .tsv, or .json file to a dataset.
     * @param datasetId Dataset Id (required)
     * @param data Path to the .csv, .tsv, or .json file on a local drive.  (optional)
     * @param type URL of the .csv, .tsv, or .json file. (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public Dataset updateDatasetAsync(String datasetId, String data, String type) throws ApiException {
        ApiResponse<Dataset> localVarResp = updateDatasetAsyncWithHttpInfo(datasetId, data, type);
        return localVarResp.getData();
    }

    /**
     * Create Examples From a File
     * Adds examples from a .csv, .tsv, or .json file to a dataset.
     * @param datasetId Dataset Id (required)
     * @param data Path to the .csv, .tsv, or .json file on a local drive.  (optional)
     * @param type URL of the .csv, .tsv, or .json file. (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> updateDatasetAsyncWithHttpInfo(String datasetId, String data, String type) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetAsyncValidateBeforeCall(datasetId, data, type, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Examples From a File (asynchronously)
     * Adds examples from a .csv, .tsv, or .json file to a dataset.
     * @param datasetId Dataset Id (required)
     * @param data Path to the .csv, .tsv, or .json file on a local drive.  (optional)
     * @param type URL of the .csv, .tsv, or .json file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetAsyncAsync(String datasetId, String data, String type, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetAsyncValidateBeforeCall(datasetId, data, type, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
