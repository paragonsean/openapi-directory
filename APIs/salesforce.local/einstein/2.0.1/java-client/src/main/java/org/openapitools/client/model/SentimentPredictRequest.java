/*
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SentimentPredictRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.549798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SentimentPredictRequest {
  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_NUM_RESULTS = "numResults";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Integer numResults;

  public static final String SERIALIZED_NAME_SAMPLE_ID = "sampleId";
  @SerializedName(SERIALIZED_NAME_SAMPLE_ID)
  private String sampleId;

  public SentimentPredictRequest() {
  }

  public SentimentPredictRequest document(String document) {
    this.document = document;
    return this;
  }

  /**
   * Text for which you want to return a sentiment prediction.
   * @return document
   */
  @javax.annotation.Nonnull
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public SentimentPredictRequest modelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  /**
   * ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.
   * @return modelId
   */
  @javax.annotation.Nonnull
  public String getModelId() {
    return modelId;
  }

  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public SentimentPredictRequest numResults(Integer numResults) {
    this.numResults = numResults;
    return this;
  }

  /**
   * Number of probabilities to return. 
   * minimum: 1
   * @return numResults
   */
  @javax.annotation.Nullable
  public Integer getNumResults() {
    return numResults;
  }

  public void setNumResults(Integer numResults) {
    this.numResults = numResults;
  }


  public SentimentPredictRequest sampleId(String sampleId) {
    this.sampleId = sampleId;
    return this;
  }

  /**
   * String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
   * @return sampleId
   */
  @javax.annotation.Nullable
  public String getSampleId() {
    return sampleId;
  }

  public void setSampleId(String sampleId) {
    this.sampleId = sampleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentPredictRequest sentimentPredictRequest = (SentimentPredictRequest) o;
    return Objects.equals(this.document, sentimentPredictRequest.document) &&
        Objects.equals(this.modelId, sentimentPredictRequest.modelId) &&
        Objects.equals(this.numResults, sentimentPredictRequest.numResults) &&
        Objects.equals(this.sampleId, sentimentPredictRequest.sampleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, modelId, numResults, sampleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentPredictRequest {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    sampleId: ").append(toIndentedString(sampleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("document");
    openapiFields.add("modelId");
    openapiFields.add("numResults");
    openapiFields.add("sampleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("modelId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentimentPredictRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentimentPredictRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentimentPredictRequest is not found in the empty JSON string", SentimentPredictRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentimentPredictRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentimentPredictRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SentimentPredictRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if ((jsonObj.get("sampleId") != null && !jsonObj.get("sampleId").isJsonNull()) && !jsonObj.get("sampleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentimentPredictRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentimentPredictRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentimentPredictRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentimentPredictRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SentimentPredictRequest>() {
           @Override
           public void write(JsonWriter out, SentimentPredictRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentimentPredictRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentimentPredictRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentimentPredictRequest
   * @throws IOException if the JSON string is invalid with respect to SentimentPredictRequest
   */
  public static SentimentPredictRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentimentPredictRequest.class);
  }

  /**
   * Convert an instance of SentimentPredictRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

