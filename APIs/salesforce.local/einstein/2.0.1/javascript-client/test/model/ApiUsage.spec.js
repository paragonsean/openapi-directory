/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EinsteinVisionAndEinsteinLanguage);
  }
}(this, function(expect, EinsteinVisionAndEinsteinLanguage) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiUsage', function() {
    it('should create an instance of ApiUsage', function() {
      // uncomment below and update the code to test ApiUsage
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be.a(EinsteinVisionAndEinsteinLanguage.ApiUsage);
    });

    it('should have the property endsAt (base name: "endsAt")', function() {
      // uncomment below and update the code to test the property endsAt
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property licenseId (base name: "licenseId")', function() {
      // uncomment below and update the code to test the property licenseId
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property object (base name: "object")', function() {
      // uncomment below and update the code to test the property object
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property organizationId (base name: "organizationId")', function() {
      // uncomment below and update the code to test the property organizationId
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property planData (base name: "planData")', function() {
      // uncomment below and update the code to test the property planData
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property predictionsMax (base name: "predictionsMax")', function() {
      // uncomment below and update the code to test the property predictionsMax
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property predictionsUsed (base name: "predictionsUsed")', function() {
      // uncomment below and update the code to test the property predictionsUsed
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

    it('should have the property startsAt (base name: "startsAt")', function() {
      // uncomment below and update the code to test the property startsAt
      //var instance = new EinsteinVisionAndEinsteinLanguage.ApiUsage();
      //expect(instance).to.be();
    });

  });

}));
