/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanData from './PlanData';

/**
 * The ApiUsage model module.
 * @module model/ApiUsage
 * @version 2.0.1
 */
class ApiUsage {
    /**
     * Constructs a new <code>ApiUsage</code>.
     * @alias module:model/ApiUsage
     */
    constructor() { 
        
        ApiUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiUsage} obj Optional instance to populate.
     * @return {module:model/ApiUsage} The populated <code>ApiUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiUsage();

            if (data.hasOwnProperty('endsAt')) {
                obj['endsAt'] = ApiClient.convertToType(data['endsAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseId')) {
                obj['licenseId'] = ApiClient.convertToType(data['licenseId'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('planData')) {
                obj['planData'] = ApiClient.convertToType(data['planData'], [PlanData]);
            }
            if (data.hasOwnProperty('predictionsMax')) {
                obj['predictionsMax'] = ApiClient.convertToType(data['predictionsMax'], 'Number');
            }
            if (data.hasOwnProperty('predictionsUsed')) {
                obj['predictionsUsed'] = ApiClient.convertToType(data['predictionsUsed'], 'Number');
            }
            if (data.hasOwnProperty('startsAt')) {
                obj['startsAt'] = ApiClient.convertToType(data['startsAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['licenseId'] && !(typeof data['licenseId'] === 'string' || data['licenseId'] instanceof String)) {
            throw new Error("Expected the field `licenseId` to be a primitive type in the JSON string but got " + data['licenseId']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        if (data['planData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['planData'])) {
                throw new Error("Expected the field `planData` to be an array in the JSON data but got " + data['planData']);
            }
            // validate the optional field `planData` (array)
            for (const item of data['planData']) {
                PlanData.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Date} endsAt
 */
ApiUsage.prototype['endsAt'] = undefined;

/**
 * @member {String} id
 */
ApiUsage.prototype['id'] = undefined;

/**
 * @member {String} licenseId
 */
ApiUsage.prototype['licenseId'] = undefined;

/**
 * @member {String} object
 */
ApiUsage.prototype['object'] = undefined;

/**
 * @member {String} organizationId
 */
ApiUsage.prototype['organizationId'] = undefined;

/**
 * @member {Array.<module:model/PlanData>} planData
 */
ApiUsage.prototype['planData'] = undefined;

/**
 * @member {Number} predictionsMax
 */
ApiUsage.prototype['predictionsMax'] = undefined;

/**
 * @member {Number} predictionsUsed
 */
ApiUsage.prototype['predictionsUsed'] = undefined;

/**
 * @member {Date} startsAt
 */
ApiUsage.prototype['startsAt'] = undefined;






export default ApiUsage;

