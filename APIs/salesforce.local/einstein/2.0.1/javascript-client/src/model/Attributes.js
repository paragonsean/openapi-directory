/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CellLocation from './CellLocation';
import EntityObject from './EntityObject';

/**
 * The Attributes model module.
 * @module model/Attributes
 * @version 2.0.1
 */
class Attributes {
    /**
     * Constructs a new <code>Attributes</code>.
     * Contains additional attributes related to the task parameter. If the task parameter is table, the row and column IDs for the detected text are returned. If the task parameter is contact, the detected entity tags will be returned.
     * @alias module:model/Attributes
     */
    constructor() { 
        
        Attributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes} obj Optional instance to populate.
     * @return {module:model/Attributes} The populated <code>Attributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes();

            if (data.hasOwnProperty('cellLocation')) {
                obj['cellLocation'] = CellLocation.constructFromObject(data['cellLocation']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('pageNumber')) {
                obj['pageNumber'] = ApiClient.convertToType(data['pageNumber'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = EntityObject.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cellLocation`
        if (data['cellLocation']) { // data not null
          CellLocation.validateJSON(data['cellLocation']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['pageNumber'] && !(typeof data['pageNumber'] === 'string' || data['pageNumber'] instanceof String)) {
            throw new Error("Expected the field `pageNumber` to be a primitive type in the JSON string but got " + data['pageNumber']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          EntityObject.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/CellLocation} cellLocation
 */
Attributes.prototype['cellLocation'] = undefined;

/**
 * @member {String} language
 */
Attributes.prototype['language'] = undefined;

/**
 * @member {String} pageNumber
 */
Attributes.prototype['pageNumber'] = undefined;

/**
 * @member {String} tag
 */
Attributes.prototype['tag'] = undefined;

/**
 * @member {module:model/EntityObject} value
 */
Attributes.prototype['value'] = undefined;






export default Attributes;

