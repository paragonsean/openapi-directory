/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectDetectionRequest model module.
 * @module model/ObjectDetectionRequest
 * @version 2.0.1
 */
class ObjectDetectionRequest {
    /**
     * Constructs a new <code>ObjectDetectionRequest</code>.
     * @alias module:model/ObjectDetectionRequest
     * @param modelId {String} ID of the model that makes the detection.
     */
    constructor(modelId) { 
        
        ObjectDetectionRequest.initialize(this, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId) { 
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>ObjectDetectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectDetectionRequest} obj Optional instance to populate.
     * @return {module:model/ObjectDetectionRequest} The populated <code>ObjectDetectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectDetectionRequest();

            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('sampleBase64Content')) {
                obj['sampleBase64Content'] = ApiClient.convertToType(data['sampleBase64Content'], 'String');
            }
            if (data.hasOwnProperty('sampleId')) {
                obj['sampleId'] = ApiClient.convertToType(data['sampleId'], 'String');
            }
            if (data.hasOwnProperty('sampleLocation')) {
                obj['sampleLocation'] = ApiClient.convertToType(data['sampleLocation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectDetectionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectDetectionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjectDetectionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['sampleBase64Content'] && !(typeof data['sampleBase64Content'] === 'string' || data['sampleBase64Content'] instanceof String)) {
            throw new Error("Expected the field `sampleBase64Content` to be a primitive type in the JSON string but got " + data['sampleBase64Content']);
        }
        // ensure the json data is a string
        if (data['sampleId'] && !(typeof data['sampleId'] === 'string' || data['sampleId'] instanceof String)) {
            throw new Error("Expected the field `sampleId` to be a primitive type in the JSON string but got " + data['sampleId']);
        }
        // ensure the json data is a string
        if (data['sampleLocation'] && !(typeof data['sampleLocation'] === 'string' || data['sampleLocation'] instanceof String)) {
            throw new Error("Expected the field `sampleLocation` to be a primitive type in the JSON string but got " + data['sampleLocation']);
        }

        return true;
    }


}

ObjectDetectionRequest.RequiredProperties = ["modelId"];

/**
 * ID of the model that makes the detection.
 * @member {String} modelId
 */
ObjectDetectionRequest.prototype['modelId'] = undefined;

/**
 * The image contained in a base64 string.
 * @member {String} sampleBase64Content
 */
ObjectDetectionRequest.prototype['sampleBase64Content'] = undefined;

/**
 * String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
 * @member {String} sampleId
 */
ObjectDetectionRequest.prototype['sampleId'] = undefined;

/**
 * URL of the image file.
 * @member {String} sampleLocation
 */
ObjectDetectionRequest.prototype['sampleLocation'] = undefined;






export default ObjectDetectionRequest;

