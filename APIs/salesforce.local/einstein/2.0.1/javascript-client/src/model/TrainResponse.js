/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrainResponse model module.
 * @module model/TrainResponse
 * @version 2.0.1
 */
class TrainResponse {
    /**
     * Constructs a new <code>TrainResponse</code>.
     * @alias module:model/TrainResponse
     * @param datasetId {Number} ID of the dataset trained to create the model.
     * @param datasetVersionId {Number} Not available yet
     * @param language {String} Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
     * @param modelId {String} ID of the model. Contains letters and numbers.
     * @param name {String} Name of the model.
     * @param progress {Number} How far the dataset training has progressed. Values are between 0�1.
     * @param status {module:model/TrainResponse.StatusEnum} Status of the model.
     */
    constructor(datasetId, datasetVersionId, language, modelId, name, progress, status) { 
        
        TrainResponse.initialize(this, datasetId, datasetVersionId, language, modelId, name, progress, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetId, datasetVersionId, language, modelId, name, progress, status) { 
        obj['datasetId'] = datasetId;
        obj['datasetVersionId'] = datasetVersionId;
        obj['language'] = language;
        obj['modelId'] = modelId;
        obj['name'] = name;
        obj['progress'] = progress;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>TrainResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrainResponse} obj Optional instance to populate.
     * @return {module:model/TrainResponse} The populated <code>TrainResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrainResponse();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'Number');
            }
            if (data.hasOwnProperty('datasetVersionId')) {
                obj['datasetVersionId'] = ApiClient.convertToType(data['datasetVersionId'], 'Number');
            }
            if (data.hasOwnProperty('epochs')) {
                obj['epochs'] = ApiClient.convertToType(data['epochs'], 'Number');
            }
            if (data.hasOwnProperty('failureMsg')) {
                obj['failureMsg'] = ApiClient.convertToType(data['failureMsg'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('learningRate')) {
                obj['learningRate'] = ApiClient.convertToType(data['learningRate'], 'Number');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('modelType')) {
                obj['modelType'] = ApiClient.convertToType(data['modelType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('queuePosition')) {
                obj['queuePosition'] = ApiClient.convertToType(data['queuePosition'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('trainParams')) {
                obj['trainParams'] = ApiClient.convertToType(data['trainParams'], 'String');
            }
            if (data.hasOwnProperty('trainStats')) {
                obj['trainStats'] = ApiClient.convertToType(data['trainStats'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrainResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrainResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrainResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['failureMsg'] && !(typeof data['failureMsg'] === 'string' || data['failureMsg'] instanceof String)) {
            throw new Error("Expected the field `failureMsg` to be a primitive type in the JSON string but got " + data['failureMsg']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['modelType'] && !(typeof data['modelType'] === 'string' || data['modelType'] instanceof String)) {
            throw new Error("Expected the field `modelType` to be a primitive type in the JSON string but got " + data['modelType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['trainParams'] && !(typeof data['trainParams'] === 'string' || data['trainParams'] instanceof String)) {
            throw new Error("Expected the field `trainParams` to be a primitive type in the JSON string but got " + data['trainParams']);
        }
        // ensure the json data is a string
        if (data['trainStats'] && !(typeof data['trainStats'] === 'string' || data['trainStats'] instanceof String)) {
            throw new Error("Expected the field `trainStats` to be a primitive type in the JSON string but got " + data['trainStats']);
        }

        return true;
    }


}

TrainResponse.RequiredProperties = ["datasetId", "datasetVersionId", "language", "modelId", "name", "progress", "status"];

/**
 * Algorithm used to create the model. Returned only when the modelType is image-detection.
 * @member {String} algorithm
 */
TrainResponse.prototype['algorithm'] = undefined;

/**
 * Date and time that the model was created.
 * @member {Date} createdAt
 */
TrainResponse.prototype['createdAt'] = undefined;

/**
 * ID of the dataset trained to create the model.
 * @member {Number} datasetId
 */
TrainResponse.prototype['datasetId'] = undefined;

/**
 * Not available yet
 * @member {Number} datasetVersionId
 */
TrainResponse.prototype['datasetVersionId'] = undefined;

/**
 * Number of epochs used during training.
 * @member {Number} epochs
 */
TrainResponse.prototype['epochs'] = undefined;

/**
 * Reason the dataset training failed. Returned only if the training status is FAILED.
 * @member {String} failureMsg
 */
TrainResponse.prototype['failureMsg'] = undefined;

/**
 * Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.
 * @member {String} language
 */
TrainResponse.prototype['language'] = undefined;

/**
 * Learning rate used during training.
 * @member {Number} learningRate
 */
TrainResponse.prototype['learningRate'] = undefined;

/**
 * ID of the model. Contains letters and numbers.
 * @member {String} modelId
 */
TrainResponse.prototype['modelId'] = undefined;

/**
 * Type of data from which the model was created.
 * @member {String} modelType
 */
TrainResponse.prototype['modelType'] = undefined;

/**
 * Name of the model.
 * @member {String} name
 */
TrainResponse.prototype['name'] = undefined;

/**
 * Object returned; in this case, training.
 * @member {String} object
 */
TrainResponse.prototype['object'] = undefined;

/**
 * How far the dataset training has progressed. Values are between 0�1.
 * @member {Number} progress
 */
TrainResponse.prototype['progress'] = undefined;

/**
 * Where the training job is in the queue. This field appears in the response only if the status is QUEUED.
 * @member {Number} queuePosition
 */
TrainResponse.prototype['queuePosition'] = undefined;

/**
 * Status of the model.
 * @member {module:model/TrainResponse.StatusEnum} status
 */
TrainResponse.prototype['status'] = undefined;

/**
 * Training parameters passed into the request.
 * @member {String} trainParams
 */
TrainResponse.prototype['trainParams'] = undefined;

/**
 * Returns null when you train a dataset. Training statistics are returned when the status is SUCCEEDED or FAILED.
 * @member {String} trainStats
 */
TrainResponse.prototype['trainStats'] = undefined;

/**
 * Date and time that the model was last updated.
 * @member {Date} updatedAt
 */
TrainResponse.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TrainResponse['StatusEnum'] = {

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "KILLED"
     * @const
     */
    "KILLED": "KILLED",

    /**
     * value: "FAILED_WITH_RETRIES"
     * @const
     */
    "FAILED_WITH_RETRIES": "FAILED_WITH_RETRIES"
};



export default TrainResponse;

