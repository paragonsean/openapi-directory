/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelSummary from './LabelSummary';

/**
 * The Dataset model module.
 * @module model/Dataset
 * @version 2.0.1
 */
class Dataset {
    /**
     * Constructs a new <code>Dataset</code>.
     * @alias module:model/Dataset
     * @param id {Number} 
     * @param name {String} 
     */
    constructor(id, name) { 
        
        Dataset.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Dataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dataset} obj Optional instance to populate.
     * @return {module:model/Dataset} The populated <code>Dataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dataset();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('labelSummary')) {
                obj['labelSummary'] = LabelSummary.constructFromObject(data['labelSummary']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numOfDuplicates')) {
                obj['numOfDuplicates'] = ApiClient.convertToType(data['numOfDuplicates'], 'Number');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('statusMsg')) {
                obj['statusMsg'] = ApiClient.convertToType(data['statusMsg'], 'String');
            }
            if (data.hasOwnProperty('totalExamples')) {
                obj['totalExamples'] = ApiClient.convertToType(data['totalExamples'], 'Number');
            }
            if (data.hasOwnProperty('totalLabels')) {
                obj['totalLabels'] = ApiClient.convertToType(data['totalLabels'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dataset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dataset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `labelSummary`
        if (data['labelSummary']) { // data not null
          LabelSummary.validateJSON(data['labelSummary']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['statusMsg'] && !(typeof data['statusMsg'] === 'string' || data['statusMsg'] instanceof String)) {
            throw new Error("Expected the field `statusMsg` to be a primitive type in the JSON string but got " + data['statusMsg']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Dataset.RequiredProperties = ["id", "name"];

/**
 * @member {Boolean} available
 */
Dataset.prototype['available'] = undefined;

/**
 * Date and time that the dataset was created.
 * @member {Date} createdAt
 */
Dataset.prototype['createdAt'] = undefined;

/**
 * @member {Number} id
 */
Dataset.prototype['id'] = undefined;

/**
 * @member {module:model/LabelSummary} labelSummary
 */
Dataset.prototype['labelSummary'] = undefined;

/**
 * Dataset language.
 * @member {String} language
 */
Dataset.prototype['language'] = undefined;

/**
 * @member {String} name
 */
Dataset.prototype['name'] = undefined;

/**
 * Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.
 * @member {Number} numOfDuplicates
 */
Dataset.prototype['numOfDuplicates'] = undefined;

/**
 * Object returned; in this case, dataset.
 * @member {String} object
 */
Dataset.prototype['object'] = undefined;

/**
 * @member {String} statusMsg
 */
Dataset.prototype['statusMsg'] = undefined;

/**
 * Total number of examples in the dataset.
 * @member {Number} totalExamples
 */
Dataset.prototype['totalExamples'] = undefined;

/**
 * Total number of labels in the dataset.
 * @member {Number} totalLabels
 */
Dataset.prototype['totalLabels'] = undefined;

/**
 * @member {String} type
 */
Dataset.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
Dataset.prototype['updatedAt'] = undefined;






export default Dataset;

