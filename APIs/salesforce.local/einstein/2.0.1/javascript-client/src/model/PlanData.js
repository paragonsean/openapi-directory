/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlanData model module.
 * @module model/PlanData
 * @version 2.0.1
 */
class PlanData {
    /**
     * Constructs a new <code>PlanData</code>.
     * @alias module:model/PlanData
     */
    constructor() { 
        
        PlanData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PlanData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlanData} obj Optional instance to populate.
     * @return {module:model/PlanData} The populated <code>PlanData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlanData();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlanData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlanData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * @member {Number} amount
 */
PlanData.prototype['amount'] = undefined;

/**
 * @member {module:model/PlanData.PlanEnum} plan
 */
PlanData.prototype['plan'] = undefined;

/**
 * @member {module:model/PlanData.SourceEnum} source
 */
PlanData.prototype['source'] = undefined;





/**
 * Allowed values for the <code>plan</code> property.
 * @enum {String}
 * @readonly
 */
PlanData['PlanEnum'] = {

    /**
     * value: "STARTER"
     * @const
     */
    "STARTER": "STARTER",

    /**
     * value: "SFDC_1M_EDITION"
     * @const
     */
    "SFDC_1M_EDITION": "SFDC_1M_EDITION",

    /**
     * value: "BRONZE"
     * @const
     */
    "BRONZE": "BRONZE",

    /**
     * value: "SILVER"
     * @const
     */
    "SILVER": "SILVER",

    /**
     * value: "GOLD"
     * @const
     */
    "GOLD": "GOLD",

    /**
     * value: "DATASET_DOWNLOAD"
     * @const
     */
    "DATASET_DOWNLOAD": "DATASET_DOWNLOAD"
};


/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
PlanData['SourceEnum'] = {

    /**
     * value: "SALESFORCE"
     * @const
     */
    "SALESFORCE": "SALESFORCE",

    /**
     * value: "HEROKU"
     * @const
     */
    "HEROKU": "HEROKU",

    /**
     * value: "SF_AUTO_PROVISION"
     * @const
     */
    "SF_AUTO_PROVISION": "SF_AUTO_PROVISION",

    /**
     * value: "SF_AUTO_PROVISION_BOUND"
     * @const
     */
    "SF_AUTO_PROVISION_BOUND": "SF_AUTO_PROVISION_BOUND"
};



export default PlanData;

