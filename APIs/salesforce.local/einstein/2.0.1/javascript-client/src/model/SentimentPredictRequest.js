/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SentimentPredictRequest model module.
 * @module model/SentimentPredictRequest
 * @version 2.0.1
 */
class SentimentPredictRequest {
    /**
     * Constructs a new <code>SentimentPredictRequest</code>.
     * @alias module:model/SentimentPredictRequest
     * @param document {String} Text for which you want to return a sentiment prediction.
     * @param modelId {String} ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.
     */
    constructor(document, modelId) { 
        
        SentimentPredictRequest.initialize(this, document, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, document, modelId) { 
        obj['document'] = document;
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>SentimentPredictRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SentimentPredictRequest} obj Optional instance to populate.
     * @return {module:model/SentimentPredictRequest} The populated <code>SentimentPredictRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SentimentPredictRequest();

            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'String');
            }
            if (data.hasOwnProperty('numResults')) {
                obj['numResults'] = ApiClient.convertToType(data['numResults'], 'Number');
            }
            if (data.hasOwnProperty('sampleId')) {
                obj['sampleId'] = ApiClient.convertToType(data['sampleId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SentimentPredictRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SentimentPredictRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SentimentPredictRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['modelId'] && !(typeof data['modelId'] === 'string' || data['modelId'] instanceof String)) {
            throw new Error("Expected the field `modelId` to be a primitive type in the JSON string but got " + data['modelId']);
        }
        // ensure the json data is a string
        if (data['sampleId'] && !(typeof data['sampleId'] === 'string' || data['sampleId'] instanceof String)) {
            throw new Error("Expected the field `sampleId` to be a primitive type in the JSON string but got " + data['sampleId']);
        }

        return true;
    }


}

SentimentPredictRequest.RequiredProperties = ["document", "modelId"];

/**
 * Text for which you want to return a sentiment prediction.
 * @member {String} document
 */
SentimentPredictRequest.prototype['document'] = undefined;

/**
 * ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.
 * @member {String} modelId
 */
SentimentPredictRequest.prototype['modelId'] = undefined;

/**
 * Number of probabilities to return. 
 * @member {Number} numResults
 */
SentimentPredictRequest.prototype['numResults'] = undefined;

/**
 * String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
 * @member {String} sampleId
 */
SentimentPredictRequest.prototype['sampleId'] = undefined;






export default SentimentPredictRequest;

