/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImageClassificationRequest from '../model/ImageClassificationRequest';
import ImageClassificationResponse from '../model/ImageClassificationResponse';
import OCRPredictResponse from '../model/OCRPredictResponse';
import ObjectDetectionRequest from '../model/ObjectDetectionRequest';
import ObjectDetectionResponse from '../model/ObjectDetectionResponse';

/**
* VisionPrediction service.
* @module api/VisionPredictionApi
* @version 2.0.1
*/
export default class VisionPredictionApi {

    /**
    * Constructs a new VisionPredictionApi. 
    * @alias module:api/VisionPredictionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the detectMultipart operation.
     * @callback module:api/VisionPredictionApi~detectMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectDetectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detection with Image File
     * Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file.
     * @param {Object} opts Optional parameters
     * @param {module:model/ObjectDetectionRequest} [objectDetectionRequest] 
     * @param {module:api/VisionPredictionApi~detectMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectDetectionResponse}
     */
    detectMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['objectDetectionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ObjectDetectionResponse;
      return this.apiClient.callApi(
        '/v2/vision/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ocrMultipart operation.
     * @callback module:api/VisionPredictionApi~ocrMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCRPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Text
     * Returns a prediction from an OCR model for the specified image URL or local image file.
     * @param {Object} opts Optional parameters
     * @param {String} [modelId] ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2.
     * @param {File} [sampleContent] Binary content of image file uploaded as multipart/form-data. Optional.
     * @param {String} [sampleId] String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.
     * @param {String} [sampleLocation] URL of the image file. Use this parameter when sending in a file from a web location. Optional.
     * @param {String} [task = 'text')] Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text.
     * @param {module:api/VisionPredictionApi~ocrMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCRPredictResponse}
     */
    ocrMultipart(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'modelId': opts['modelId'],
        'sampleContent': opts['sampleContent'],
        'sampleId': opts['sampleId'],
        'sampleLocation': opts['sampleLocation'],
        'task': opts['task']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OCRPredictResponse;
      return this.apiClient.callApi(
        '/v2/vision/ocr', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictMultipart operation.
     * @callback module:api/VisionPredictionApi~predictMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageClassificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make Prediction
     * Returns a prediction from an image or multi-label model for the specified image.
     * @param {Object} opts Optional parameters
     * @param {module:model/ImageClassificationRequest} [imageClassificationRequest] 
     * @param {module:api/VisionPredictionApi~predictMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageClassificationResponse}
     */
    predictMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['imageClassificationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImageClassificationResponse;
      return this.apiClient.callApi(
        '/v2/vision/predict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
