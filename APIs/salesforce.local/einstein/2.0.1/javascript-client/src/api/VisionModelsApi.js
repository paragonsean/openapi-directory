/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeletionResponse from '../model/DeletionResponse';
import LearningCurveList from '../model/LearningCurveList';
import Metrics from '../model/Metrics';
import ModelList from '../model/ModelList';

/**
* VisionModels service.
* @module api/VisionModelsApi
* @version 2.0.1
*/
export default class VisionModelsApi {

    /**
    * Constructs a new VisionModelsApi. 
    * @alias module:api/VisionModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteModel1 operation.
     * @callback module:api/VisionModelsApi~deleteModel1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Model
     * Deletes the specified model.
     * @param {String} modelId 
     * @param {module:api/VisionModelsApi~deleteModel1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletionResponse}
     */
    deleteModel1(modelId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteModel1");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletionResponse;
      return this.apiClient.callApi(
        '/v2/vision/models/{modelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrainedModelLearningCurve1 operation.
     * @callback module:api/VisionModelsApi~getTrainedModelLearningCurve1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LearningCurveList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Model Learning Curve
     * Returns the metrics for each epoch in a model.
     * @param {String} modelId 
     * @param {Object} opts Optional parameters
     * @param {String} [offset = '0')] Index of the epoch from which you want to start paging
     * @param {String} [count = '25')] Number of epoch to return. Maximum valid value is 25.
     * @param {module:api/VisionModelsApi~getTrainedModelLearningCurve1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearningCurveList}
     */
    getTrainedModelLearningCurve1(modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getTrainedModelLearningCurve1");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
        'offset': opts['offset'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LearningCurveList;
      return this.apiClient.callApi(
        '/v2/vision/models/{modelId}/lc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrainedModelMetrics1 operation.
     * @callback module:api/VisionModelsApi~getTrainedModelMetrics1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Model Metrics
     * Returns the metrics for a model
     * @param {String} modelId 
     * @param {module:api/VisionModelsApi~getTrainedModelMetrics1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    getTrainedModelMetrics1(modelId, callback) {
      let postBody = null;
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getTrainedModelMetrics1");
      }

      let pathParams = {
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/v2/vision/models/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrainedModels1 operation.
     * @callback module:api/VisionModelsApi~getTrainedModels1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Models
     * Returns all models for the specified dataset.
     * @param {String} datasetId Dataset Id
     * @param {Object} opts Optional parameters
     * @param {String} [offset = '0')] Index of the model from which you want to start paging.
     * @param {String} [count = '100')] Number of models to return.
     * @param {module:api/VisionModelsApi~getTrainedModels1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelList}
     */
    getTrainedModels1(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getTrainedModels1");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
        'offset': opts['offset'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelList;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
