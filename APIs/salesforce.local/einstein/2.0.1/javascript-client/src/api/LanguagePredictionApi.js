/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntentPredictRequest from '../model/IntentPredictRequest';
import IntentPredictResponse from '../model/IntentPredictResponse';
import PredictionErrorResponse from '../model/PredictionErrorResponse';
import SentimentPredictRequest from '../model/SentimentPredictRequest';
import SentimentPredictResponse from '../model/SentimentPredictResponse';

/**
* LanguagePrediction service.
* @module api/LanguagePredictionApi
* @version 2.0.1
*/
export default class LanguagePredictionApi {

    /**
    * Constructs a new LanguagePredictionApi. 
    * @alias module:api/LanguagePredictionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the intentMultipart operation.
     * @callback module:api/LanguagePredictionApi~intentMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntentPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prediction for Intent
     * Returns an intent prediction for the given string.
     * @param {Object} opts Optional parameters
     * @param {module:model/IntentPredictRequest} [intentPredictRequest] 
     * @param {module:api/LanguagePredictionApi~intentMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntentPredictResponse}
     */
    intentMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['intentPredictRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = IntentPredictResponse;
      return this.apiClient.callApi(
        '/v2/language/intent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentimentMultipart operation.
     * @callback module:api/LanguagePredictionApi~sentimentMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentimentPredictResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prediction for Sentiment
     * Returns a sentiment prediction for the given string.
     * @param {Object} opts Optional parameters
     * @param {module:model/SentimentPredictRequest} [sentimentPredictRequest] 
     * @param {module:api/LanguagePredictionApi~sentimentMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentimentPredictResponse}
     */
    sentimentMultipart(opts, callback) {
      opts = opts || {};
      let postBody = opts['sentimentPredictRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SentimentPredictResponse;
      return this.apiClient.callApi(
        '/v2/language/sentiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
