/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import Example from '../model/Example';
import ExampleList from '../model/ExampleList';

/**
* VisionExamples service.
* @module api/VisionExamplesApi
* @version 2.0.1
*/
export default class VisionExamplesApi {

    /**
    * Constructs a new VisionExamplesApi. 
    * @alias module:api/VisionExamplesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addExample operation.
     * @callback module:api/VisionExamplesApi~addExampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Example} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Example
     * Adds an example with the specified label to a dataset.
     * @param {String} datasetId Dataset Id
     * @param {Object} opts Optional parameters
     * @param {String} [data] Location of the local image file to upload.
     * @param {Number} [labelId] ID of the label to add to the example.
     * @param {String} [name] Name of the example. Maximum length is 180 characters.
     * @param {module:api/VisionExamplesApi~addExampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example}
     */
    addExample(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling addExample");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'labelId': opts['labelId'],
        'name': opts['name']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Example;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}/examples', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExamples1 operation.
     * @callback module:api/VisionExamplesApi~getExamples1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ExampleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Examples
     * Returns all the examples for the specified dataset. By default, returns examples created by uploading them from a .zip file.
     * @param {String} datasetId Dataset Id
     * @param {Object} opts Optional parameters
     * @param {String} [offset = '0')] Index of the example from which you want to start paging.
     * @param {String} [count = '100')] Number of examples to return.
     * @param {module:model/String} [source] return examples that were created in the dataset as feedback
     * @param {module:api/VisionExamplesApi~getExamples1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExampleList}
     */
    getExamples1(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getExamples1");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
        'offset': opts['offset'],
        'count': opts['count'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExampleList;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}/examples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExamplesByLabel1 operation.
     * @callback module:api/VisionExamplesApi~getExamplesByLabel1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ExampleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Examples for Label
     * Returns all the examples for the specified label. Returns both uploaded examples and feedback examples.
     * @param {Object} opts Optional parameters
     * @param {String} [labelId] Label Id
     * @param {String} [offset = '0')] Index of the example from which you want to start paging.
     * @param {String} [count = '100')] Number of examples to return.
     * @param {module:api/VisionExamplesApi~getExamplesByLabel1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExampleList}
     */
    getExamplesByLabel1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'labelId': opts['labelId'],
        'offset': opts['offset'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExampleList;
      return this.apiClient.callApi(
        '/v2/vision/examples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provideFeedback1 operation.
     * @callback module:api/VisionExamplesApi~provideFeedback1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Example} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Feedback Example
     * Adds a feedback example to the dataset associated with the specified model.
     * @param {Object} opts Optional parameters
     * @param {String} [data] Local image file to upload.
     * @param {String} [expectedLabel] Correct label for the example. Must be a label that exists in the dataset.
     * @param {String} [modelId] ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model.
     * @param {String} [name] Name of the example. Optional. Maximum length is 180 characters.
     * @param {module:api/VisionExamplesApi~provideFeedback1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example}
     */
    provideFeedback1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'expectedLabel': opts['expectedLabel'],
        'modelId': opts['modelId'],
        'name': opts['name']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Example;
      return this.apiClient.callApi(
        '/v2/vision/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatasetAsync1 operation.
     * @callback module:api/VisionExamplesApi~updateDatasetAsync1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Feedback Examples From a Zip File
     * Adds feedback examples to the dataset associated with the specified object detection model.
     * @param {Object} opts Optional parameters
     * @param {String} [data] Local .zip file to upload. The maximum .zip file size you can upload from a local drive is 50 MB.
     * @param {String} [modelId] ID of the model that misclassified the images. The feedback examples are added to the dataset associated with this model.
     * @param {module:api/VisionExamplesApi~updateDatasetAsync1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    updateDatasetAsync1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'modelId': opts['modelId']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/bulkfeedback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatasetAsync2 operation.
     * @callback module:api/VisionExamplesApi~updateDatasetAsync2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Examples From a Zip File
     * Adds examples from a .zip file to a dataset. You can use this call only with a dataset that was created from a .zip file.
     * @param {String} datasetId Dataset Id
     * @param {Object} opts Optional parameters
     * @param {String} [data] Location of the local image file to upload.
     * @param {String} [path] URL of the .zip file.
     * @param {module:api/VisionExamplesApi~updateDatasetAsync2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    updateDatasetAsync2(datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateDatasetAsync2");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'path': opts['path']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}/upload', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
