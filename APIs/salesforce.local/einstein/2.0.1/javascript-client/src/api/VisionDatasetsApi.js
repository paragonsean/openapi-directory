/**
 * Einstein Vision and Einstein Language
 * Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import DatasetList from '../model/DatasetList';
import DeletionResponse from '../model/DeletionResponse';

/**
* VisionDatasets service.
* @module api/VisionDatasetsApi
* @version 2.0.1
*/
export default class VisionDatasetsApi {

    /**
    * Constructs a new VisionDatasetsApi. 
    * @alias module:api/VisionDatasetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/VisionDatasetsApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Dataset
     * Creates a dataset and labels, if they're specified.
     * @param {Object} opts Optional parameters
     * @param {String} [labels] Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250.
     * @param {String} [name] Name of the dataset. Maximum length is 180 characters.
     * @param {module:model/String} [type] Type of dataset data
     * @param {module:api/VisionDatasetsApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    createDataset(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'labels': opts['labels'],
        'name': opts['name'],
        'type': opts['type']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset1 operation.
     * @callback module:api/VisionDatasetsApi~deleteDataset1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Dataset
     * Deletes the specified dataset and associated labels and examples.
     * @param {String} datasetId Dataset Id
     * @param {module:api/VisionDatasetsApi~deleteDataset1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletionResponse}
     */
    deleteDataset1(datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling deleteDataset1");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletionResponse;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get1 operation.
     * @callback module:api/VisionDatasetsApi~get1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Deletion Status
     * Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete.
     * @param {String} id Deletion Id
     * @param {module:api/VisionDatasetsApi~get1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletionResponse}
     */
    get1(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling get1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletionResponse;
      return this.apiClient.callApi(
        '/v2/vision/deletion/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataset1 operation.
     * @callback module:api/VisionDatasetsApi~getDataset1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Dataset
     * Returns a single dataset.
     * @param {String} datasetId Dataset Id
     * @param {module:api/VisionDatasetsApi~getDataset1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    getDataset1(datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDataset1");
      }

      let pathParams = {
        'datasetId': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/datasets/{datasetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasets1 operation.
     * @callback module:api/VisionDatasetsApi~listDatasets1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DatasetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Datasets
     * Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID.
     * @param {Object} opts Optional parameters
     * @param {String} [offset = '0')] Index of the dataset from which you want to start paging
     * @param {String} [count = '25')] Number of datsets to return. Maximum valid value is 25. If you specify a number greater than 25, the call returns 25 datasets.
     * @param {Boolean} [global = false)] If true, returns all global datasets. Global datasets are public datasets that Salesforce provides.
     * @param {module:api/VisionDatasetsApi~listDatasets1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatasetList}
     */
    listDatasets1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'count': opts['count'],
        'global': opts['global']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetList;
      return this.apiClient.callApi(
        '/v2/vision/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDatasetAsync1 operation.
     * @callback module:api/VisionDatasetsApi~uploadDatasetAsync1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Dataset From a Zip File Asynchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background.
     * @param {Object} opts Optional parameters
     * @param {String} [data] Path to the .zip file on the local drive (FilePart).
     * @param {String} [name] Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name.
     * @param {String} [path] URL of the .zip file.
     * @param {module:model/String} [type] Type of dataset data.
     * @param {module:api/VisionDatasetsApi~uploadDatasetAsync1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    uploadDatasetAsync1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'name': opts['name'],
        'path': opts['path'],
        'type': opts['type']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/datasets/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDatasetSync1 operation.
     * @callback module:api/VisionDatasetsApi~uploadDatasetSync1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Dataset From a Zip File Synchronously
     * Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded.
     * @param {Object} opts Optional parameters
     * @param {String} [data] Path to the .zip file on the local drive (FilePart).
     * @param {String} [name] Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name.
     * @param {String} [path] URL of the .zip file.
     * @param {module:model/String} [type] Type of dataset data.
     * @param {module:api/VisionDatasetsApi~uploadDatasetSync1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    uploadDatasetSync1(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': opts['data'],
        'name': opts['name'],
        'path': opts['path'],
        'type': opts['type']
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/v2/vision/datasets/upload/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
