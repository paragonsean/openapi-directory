# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LearningCurve(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epoch: object=None, epoch_results: object=None, metrics_data: object=None, object: str=None):
        """LearningCurve - a model defined in OpenAPI

        :param epoch: The epoch of this LearningCurve.
        :param epoch_results: The epoch_results of this LearningCurve.
        :param metrics_data: The metrics_data of this LearningCurve.
        :param object: The object of this LearningCurve.
        """
        self.openapi_types = {
            'epoch': object,
            'epoch_results': object,
            'metrics_data': object,
            'object': str
        }

        self.attribute_map = {
            'epoch': 'epoch',
            'epoch_results': 'epochResults',
            'metrics_data': 'metricsData',
            'object': 'object'
        }

        self._epoch = epoch
        self._epoch_results = epoch_results
        self._metrics_data = metrics_data
        self._object = object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LearningCurve':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LearningCurve of this LearningCurve.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epoch(self):
        """Gets the epoch of this LearningCurve.

        Epoch to which the metrics correspond.

        :return: The epoch of this LearningCurve.
        :rtype: object
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this LearningCurve.

        Epoch to which the metrics correspond.

        :param epoch: The epoch of this LearningCurve.
        :type epoch: object
        """

        self._epoch = epoch

    @property
    def epoch_results(self):
        """Gets the epoch_results of this LearningCurve.

        Prediction results for the set of data used to test the model during training.

        :return: The epoch_results of this LearningCurve.
        :rtype: object
        """
        return self._epoch_results

    @epoch_results.setter
    def epoch_results(self, epoch_results):
        """Sets the epoch_results of this LearningCurve.

        Prediction results for the set of data used to test the model during training.

        :param epoch_results: The epoch_results of this LearningCurve.
        :type epoch_results: object
        """

        self._epoch_results = epoch_results

    @property
    def metrics_data(self):
        """Gets the metrics_data of this LearningCurve.

        Model metrics values.

        :return: The metrics_data of this LearningCurve.
        :rtype: object
        """
        return self._metrics_data

    @metrics_data.setter
    def metrics_data(self, metrics_data):
        """Sets the metrics_data of this LearningCurve.

        Model metrics values.

        :param metrics_data: The metrics_data of this LearningCurve.
        :type metrics_data: object
        """

        self._metrics_data = metrics_data

    @property
    def object(self):
        """Gets the object of this LearningCurve.

        Object returned; in this case, learningcurve.

        :return: The object of this LearningCurve.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this LearningCurve.

        Object returned; in this case, learningcurve.

        :param object: The object of this LearningCurve.
        :type object: str
        """

        self._object = object
