# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, created_at: datetime=None, id: str=None, language: str=None, metrics_data: object=None, object: str=None):
        """Metrics - a model defined in OpenAPI

        :param algorithm: The algorithm of this Metrics.
        :param created_at: The created_at of this Metrics.
        :param id: The id of this Metrics.
        :param language: The language of this Metrics.
        :param metrics_data: The metrics_data of this Metrics.
        :param object: The object of this Metrics.
        """
        self.openapi_types = {
            'algorithm': str,
            'created_at': datetime,
            'id': str,
            'language': str,
            'metrics_data': object,
            'object': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'created_at': 'createdAt',
            'id': 'id',
            'language': 'language',
            'metrics_data': 'metricsData',
            'object': 'object'
        }

        self._algorithm = algorithm
        self._created_at = created_at
        self._id = id
        self._language = language
        self._metrics_data = metrics_data
        self._object = object

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this Metrics.


        :return: The algorithm of this Metrics.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Metrics.


        :param algorithm: The algorithm of this Metrics.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def created_at(self):
        """Gets the created_at of this Metrics.

        Date and time that the model was created.

        :return: The created_at of this Metrics.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Metrics.

        Date and time that the model was created.

        :param created_at: The created_at of this Metrics.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Metrics.

        Model Id

        :return: The id of this Metrics.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metrics.

        Model Id

        :param id: The id of this Metrics.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Metrics.


        :return: The language of this Metrics.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Metrics.


        :param language: The language of this Metrics.
        :type language: str
        """

        self._language = language

    @property
    def metrics_data(self):
        """Gets the metrics_data of this Metrics.

        Model metrics values.

        :return: The metrics_data of this Metrics.
        :rtype: object
        """
        return self._metrics_data

    @metrics_data.setter
    def metrics_data(self, metrics_data):
        """Sets the metrics_data of this Metrics.

        Model metrics values.

        :param metrics_data: The metrics_data of this Metrics.
        :type metrics_data: object
        """

        self._metrics_data = metrics_data

    @property
    def object(self):
        """Gets the object of this Metrics.


        :return: The object of this Metrics.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Metrics.


        :param object: The object of this Metrics.
        :type object: str
        """

        self._object = object
