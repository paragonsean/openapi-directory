# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id: int=None, id: int=None, name: str=None, num_examples: int=None):
        """Label - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this Label.
        :param id: The id of this Label.
        :param name: The name of this Label.
        :param num_examples: The num_examples of this Label.
        """
        self.openapi_types = {
            'dataset_id': int,
            'id': int,
            'name': str,
            'num_examples': int
        }

        self.attribute_map = {
            'dataset_id': 'datasetId',
            'id': 'id',
            'name': 'name',
            'num_examples': 'numExamples'
        }

        self._dataset_id = dataset_id
        self._id = id
        self._name = name
        self._num_examples = num_examples

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Label.

        ID of the dataset that the label belongs to.

        :return: The dataset_id of this Label.
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Label.

        ID of the dataset that the label belongs to.

        :param dataset_id: The dataset_id of this Label.
        :type dataset_id: int
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")

        self._dataset_id = dataset_id

    @property
    def id(self):
        """Gets the id of this Label.

        ID of the label.

        :return: The id of this Label.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Label.

        ID of the label.

        :param id: The id of this Label.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Label.

        Name of the label.

        :return: The name of this Label.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Label.

        Name of the label.

        :param name: The name of this Label.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def num_examples(self):
        """Gets the num_examples of this Label.

        Number of examples that have the label.

        :return: The num_examples of this Label.
        :rtype: int
        """
        return self._num_examples

    @num_examples.setter
    def num_examples(self, num_examples):
        """Sets the num_examples of this Label.

        Number of examples that have the label.

        :param num_examples: The num_examples of this Label.
        :type num_examples: int
        """

        self._num_examples = num_examples
