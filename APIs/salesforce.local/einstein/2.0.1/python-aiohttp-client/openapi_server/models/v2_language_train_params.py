# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class V2LanguageTrainParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, train_split_ratio: float=None, with_feedback: bool=None, with_global_dataset_id: int=None):
        """V2LanguageTrainParams - a model defined in OpenAPI

        :param train_split_ratio: The train_split_ratio of this V2LanguageTrainParams.
        :param with_feedback: The with_feedback of this V2LanguageTrainParams.
        :param with_global_dataset_id: The with_global_dataset_id of this V2LanguageTrainParams.
        """
        self.openapi_types = {
            'train_split_ratio': float,
            'with_feedback': bool,
            'with_global_dataset_id': int
        }

        self.attribute_map = {
            'train_split_ratio': 'trainSplitRatio',
            'with_feedback': 'withFeedback',
            'with_global_dataset_id': 'withGlobalDatasetId'
        }

        self._train_split_ratio = train_split_ratio
        self._with_feedback = with_feedback
        self._with_global_dataset_id = with_global_dataset_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2LanguageTrainParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V2LanguageTrainParams of this V2LanguageTrainParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def train_split_ratio(self):
        """Gets the train_split_ratio of this V2LanguageTrainParams.

        Lets you specify the ratio of data used to train the dataset and the data used to test the model.

        :return: The train_split_ratio of this V2LanguageTrainParams.
        :rtype: float
        """
        return self._train_split_ratio

    @train_split_ratio.setter
    def train_split_ratio(self, train_split_ratio):
        """Sets the train_split_ratio of this V2LanguageTrainParams.

        Lets you specify the ratio of data used to train the dataset and the data used to test the model.

        :param train_split_ratio: The train_split_ratio of this V2LanguageTrainParams.
        :type train_split_ratio: float
        """

        self._train_split_ratio = train_split_ratio

    @property
    def with_feedback(self):
        """Gets the with_feedback of this V2LanguageTrainParams.

        Lets you specify that feedback examples are included in the data to be trained to create the model.

        :return: The with_feedback of this V2LanguageTrainParams.
        :rtype: bool
        """
        return self._with_feedback

    @with_feedback.setter
    def with_feedback(self, with_feedback):
        """Sets the with_feedback of this V2LanguageTrainParams.

        Lets you specify that feedback examples are included in the data to be trained to create the model.

        :param with_feedback: The with_feedback of this V2LanguageTrainParams.
        :type with_feedback: bool
        """

        self._with_feedback = with_feedback

    @property
    def with_global_dataset_id(self):
        """Gets the with_global_dataset_id of this V2LanguageTrainParams.

        Lets you specify that a global dataset is used in addition to the specified dataset to create the model.

        :return: The with_global_dataset_id of this V2LanguageTrainParams.
        :rtype: int
        """
        return self._with_global_dataset_id

    @with_global_dataset_id.setter
    def with_global_dataset_id(self, with_global_dataset_id):
        """Sets the with_global_dataset_id of this V2LanguageTrainParams.

        Lets you specify that a global dataset is used in addition to the specified dataset to create the model.

        :param with_global_dataset_id: The with_global_dataset_id of this V2LanguageTrainParams.
        :type with_global_dataset_id: int
        """

        self._with_global_dataset_id = with_global_dataset_id
