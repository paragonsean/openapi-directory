# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ocr_result import OCRResult
from openapi_server import util


class OCRPredictResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object: str=None, probabilities: List[OCRResult]=None, sample_id: str=None, task: str=None):
        """OCRPredictResponse - a model defined in OpenAPI

        :param object: The object of this OCRPredictResponse.
        :param probabilities: The probabilities of this OCRPredictResponse.
        :param sample_id: The sample_id of this OCRPredictResponse.
        :param task: The task of this OCRPredictResponse.
        """
        self.openapi_types = {
            'object': str,
            'probabilities': List[OCRResult],
            'sample_id': str,
            'task': str
        }

        self.attribute_map = {
            'object': 'object',
            'probabilities': 'probabilities',
            'sample_id': 'sampleId',
            'task': 'task'
        }

        self._object = object
        self._probabilities = probabilities
        self._sample_id = sample_id
        self._task = task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OCRPredictResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OCRPredictResponse of this OCRPredictResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object(self):
        """Gets the object of this OCRPredictResponse.


        :return: The object of this OCRPredictResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this OCRPredictResponse.


        :param object: The object of this OCRPredictResponse.
        :type object: str
        """

        self._object = object

    @property
    def probabilities(self):
        """Gets the probabilities of this OCRPredictResponse.


        :return: The probabilities of this OCRPredictResponse.
        :rtype: List[OCRResult]
        """
        return self._probabilities

    @probabilities.setter
    def probabilities(self, probabilities):
        """Sets the probabilities of this OCRPredictResponse.


        :param probabilities: The probabilities of this OCRPredictResponse.
        :type probabilities: List[OCRResult]
        """

        self._probabilities = probabilities

    @property
    def sample_id(self):
        """Gets the sample_id of this OCRPredictResponse.

        Same value as request parameter. Returned only if the sampleId request parameter is provided.

        :return: The sample_id of this OCRPredictResponse.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this OCRPredictResponse.

        Same value as request parameter. Returned only if the sampleId request parameter is provided.

        :param sample_id: The sample_id of this OCRPredictResponse.
        :type sample_id: str
        """

        self._sample_id = sample_id

    @property
    def task(self):
        """Gets the task of this OCRPredictResponse.

        Same value as request parameter. Returns text if the request parameter isn't supplied.

        :return: The task of this OCRPredictResponse.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this OCRPredictResponse.

        Same value as request parameter. Returns text if the request parameter isn't supplied.

        :param task: The task of this OCRPredictResponse.
        :type task: str
        """

        self._task = task
