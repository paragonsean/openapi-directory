# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, plan: str=None, source: str=None):
        """PlanData - a model defined in OpenAPI

        :param amount: The amount of this PlanData.
        :param plan: The plan of this PlanData.
        :param source: The source of this PlanData.
        """
        self.openapi_types = {
            'amount': int,
            'plan': str,
            'source': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'plan': 'plan',
            'source': 'source'
        }

        self._amount = amount
        self._plan = plan
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanData of this PlanData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PlanData.


        :return: The amount of this PlanData.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PlanData.


        :param amount: The amount of this PlanData.
        :type amount: int
        """

        self._amount = amount

    @property
    def plan(self):
        """Gets the plan of this PlanData.


        :return: The plan of this PlanData.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this PlanData.


        :param plan: The plan of this PlanData.
        :type plan: str
        """
        allowed_values = ["STARTER", "SFDC_1M_EDITION", "BRONZE", "SILVER", "GOLD", "DATASET_DOWNLOAD"]  # noqa: E501
        if plan not in allowed_values:
            raise ValueError(
                "Invalid value for `plan` ({0}), must be one of {1}"
                .format(plan, allowed_values)
            )

        self._plan = plan

    @property
    def source(self):
        """Gets the source of this PlanData.


        :return: The source of this PlanData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PlanData.


        :param source: The source of this PlanData.
        :type source: str
        """
        allowed_values = ["SALESFORCE", "HEROKU", "SF_AUTO_PROVISION", "SF_AUTO_PROVISION_BOUND"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
