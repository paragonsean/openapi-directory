# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageClassificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_id: str=None, num_results: int=None, sample_base64_content: str=None, sample_id: str=None, sample_location: str=None):
        """ImageClassificationRequest - a model defined in OpenAPI

        :param model_id: The model_id of this ImageClassificationRequest.
        :param num_results: The num_results of this ImageClassificationRequest.
        :param sample_base64_content: The sample_base64_content of this ImageClassificationRequest.
        :param sample_id: The sample_id of this ImageClassificationRequest.
        :param sample_location: The sample_location of this ImageClassificationRequest.
        """
        self.openapi_types = {
            'model_id': str,
            'num_results': int,
            'sample_base64_content': str,
            'sample_id': str,
            'sample_location': str
        }

        self.attribute_map = {
            'model_id': 'modelId',
            'num_results': 'numResults',
            'sample_base64_content': 'sampleBase64Content',
            'sample_id': 'sampleId',
            'sample_location': 'sampleLocation'
        }

        self._model_id = model_id
        self._num_results = num_results
        self._sample_base64_content = sample_base64_content
        self._sample_id = sample_id
        self._sample_location = sample_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageClassificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageClassificationRequest of this ImageClassificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self):
        """Gets the model_id of this ImageClassificationRequest.

        ID of the model that makes the prediction.

        :return: The model_id of this ImageClassificationRequest.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ImageClassificationRequest.

        ID of the model that makes the prediction.

        :param model_id: The model_id of this ImageClassificationRequest.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def num_results(self):
        """Gets the num_results of this ImageClassificationRequest.

        Number of probabilities to return.

        :return: The num_results of this ImageClassificationRequest.
        :rtype: int
        """
        return self._num_results

    @num_results.setter
    def num_results(self, num_results):
        """Sets the num_results of this ImageClassificationRequest.

        Number of probabilities to return.

        :param num_results: The num_results of this ImageClassificationRequest.
        :type num_results: int
        """
        if num_results is not None and num_results < 1:
            raise ValueError("Invalid value for `num_results`, must be a value greater than or equal to `1`")

        self._num_results = num_results

    @property
    def sample_base64_content(self):
        """Gets the sample_base64_content of this ImageClassificationRequest.

        The image contained in a base64 string.

        :return: The sample_base64_content of this ImageClassificationRequest.
        :rtype: str
        """
        return self._sample_base64_content

    @sample_base64_content.setter
    def sample_base64_content(self, sample_base64_content):
        """Sets the sample_base64_content of this ImageClassificationRequest.

        The image contained in a base64 string.

        :param sample_base64_content: The sample_base64_content of this ImageClassificationRequest.
        :type sample_base64_content: str
        """

        self._sample_base64_content = sample_base64_content

    @property
    def sample_id(self):
        """Gets the sample_id of this ImageClassificationRequest.

        String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.

        :return: The sample_id of this ImageClassificationRequest.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this ImageClassificationRequest.

        String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.

        :param sample_id: The sample_id of this ImageClassificationRequest.
        :type sample_id: str
        """

        self._sample_id = sample_id

    @property
    def sample_location(self):
        """Gets the sample_location of this ImageClassificationRequest.

        URL of the image file.

        :return: The sample_location of this ImageClassificationRequest.
        :rtype: str
        """
        return self._sample_location

    @sample_location.setter
    def sample_location(self, sample_location):
        """Sets the sample_location of this ImageClassificationRequest.

        URL of the image file.

        :param sample_location: The sample_location of this ImageClassificationRequest.
        :type sample_location: str
        """

        self._sample_location = sample_location
