# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_box import BoundingBox
from openapi_server import util


class DetectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: BoundingBox=None, label: str=None, probability: float=None):
        """DetectionResult - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this DetectionResult.
        :param label: The label of this DetectionResult.
        :param probability: The probability of this DetectionResult.
        """
        self.openapi_types = {
            'bounding_box': BoundingBox,
            'label': str,
            'probability': float
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'label': 'label',
            'probability': 'probability'
        }

        self._bounding_box = bounding_box
        self._label = label
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectionResult of this DetectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this DetectionResult.


        :return: The bounding_box of this DetectionResult.
        :rtype: BoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this DetectionResult.


        :param bounding_box: The bounding_box of this DetectionResult.
        :type bounding_box: BoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def label(self):
        """Gets the label of this DetectionResult.

        Probability lable for the input. 

        :return: The label of this DetectionResult.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DetectionResult.

        Probability lable for the input. 

        :param label: The label of this DetectionResult.
        :type label: str
        """

        self._label = label

    @property
    def probability(self):
        """Gets the probability of this DetectionResult.

        Probability value for the input. Values are between 0�1.

        :return: The probability of this DetectionResult.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this DetectionResult.

        Probability value for the input. Values are between 0�1.

        :param probability: The probability of this DetectionResult.
        :type probability: float
        """

        self._probability = probability
