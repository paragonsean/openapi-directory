# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_object_id: str=None, id: str=None, message: str=None, object: str=None, organization_id: str=None, progress: float=None, status: str=None, type: str=None):
        """DeletionResponse - a model defined in OpenAPI

        :param deleted_object_id: The deleted_object_id of this DeletionResponse.
        :param id: The id of this DeletionResponse.
        :param message: The message of this DeletionResponse.
        :param object: The object of this DeletionResponse.
        :param organization_id: The organization_id of this DeletionResponse.
        :param progress: The progress of this DeletionResponse.
        :param status: The status of this DeletionResponse.
        :param type: The type of this DeletionResponse.
        """
        self.openapi_types = {
            'deleted_object_id': str,
            'id': str,
            'message': str,
            'object': str,
            'organization_id': str,
            'progress': float,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'deleted_object_id': 'deletedObjectId',
            'id': 'id',
            'message': 'message',
            'object': 'object',
            'organization_id': 'organizationId',
            'progress': 'progress',
            'status': 'status',
            'type': 'type'
        }

        self._deleted_object_id = deleted_object_id
        self._id = id
        self._message = message
        self._object = object
        self._organization_id = organization_id
        self._progress = progress
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletionResponse of this DeletionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_object_id(self):
        """Gets the deleted_object_id of this DeletionResponse.


        :return: The deleted_object_id of this DeletionResponse.
        :rtype: str
        """
        return self._deleted_object_id

    @deleted_object_id.setter
    def deleted_object_id(self, deleted_object_id):
        """Sets the deleted_object_id of this DeletionResponse.


        :param deleted_object_id: The deleted_object_id of this DeletionResponse.
        :type deleted_object_id: str
        """

        self._deleted_object_id = deleted_object_id

    @property
    def id(self):
        """Gets the id of this DeletionResponse.


        :return: The id of this DeletionResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeletionResponse.


        :param id: The id of this DeletionResponse.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this DeletionResponse.


        :return: The message of this DeletionResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeletionResponse.


        :param message: The message of this DeletionResponse.
        :type message: str
        """

        self._message = message

    @property
    def object(self):
        """Gets the object of this DeletionResponse.


        :return: The object of this DeletionResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this DeletionResponse.


        :param object: The object of this DeletionResponse.
        :type object: str
        """

        self._object = object

    @property
    def organization_id(self):
        """Gets the organization_id of this DeletionResponse.


        :return: The organization_id of this DeletionResponse.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DeletionResponse.


        :param organization_id: The organization_id of this DeletionResponse.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def progress(self):
        """Gets the progress of this DeletionResponse.


        :return: The progress of this DeletionResponse.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DeletionResponse.


        :param progress: The progress of this DeletionResponse.
        :type progress: float
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this DeletionResponse.


        :return: The status of this DeletionResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeletionResponse.


        :param status: The status of this DeletionResponse.
        :type status: str
        """
        allowed_values = ["QUEUED", "RUNNING", "SUCCEEDED_WAITING_FOR_CACHE_REMOVAL", "SUCCEEDED", "KILLED", "FAILED", "RETRY"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this DeletionResponse.


        :return: The type of this DeletionResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeletionResponse.


        :param type: The type of this DeletionResponse.
        :type type: str
        """
        allowed_values = ["DATASET", "MODEL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
