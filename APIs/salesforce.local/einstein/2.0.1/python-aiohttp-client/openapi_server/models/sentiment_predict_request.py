# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SentimentPredictRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: str=None, model_id: str=None, num_results: int=None, sample_id: str=None):
        """SentimentPredictRequest - a model defined in OpenAPI

        :param document: The document of this SentimentPredictRequest.
        :param model_id: The model_id of this SentimentPredictRequest.
        :param num_results: The num_results of this SentimentPredictRequest.
        :param sample_id: The sample_id of this SentimentPredictRequest.
        """
        self.openapi_types = {
            'document': str,
            'model_id': str,
            'num_results': int,
            'sample_id': str
        }

        self.attribute_map = {
            'document': 'document',
            'model_id': 'modelId',
            'num_results': 'numResults',
            'sample_id': 'sampleId'
        }

        self._document = document
        self._model_id = model_id
        self._num_results = num_results
        self._sample_id = sample_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentPredictRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentPredictRequest of this SentimentPredictRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this SentimentPredictRequest.

        Text for which you want to return a sentiment prediction.

        :return: The document of this SentimentPredictRequest.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this SentimentPredictRequest.

        Text for which you want to return a sentiment prediction.

        :param document: The document of this SentimentPredictRequest.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def model_id(self):
        """Gets the model_id of this SentimentPredictRequest.

        ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.

        :return: The model_id of this SentimentPredictRequest.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this SentimentPredictRequest.

        ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.

        :param model_id: The model_id of this SentimentPredictRequest.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def num_results(self):
        """Gets the num_results of this SentimentPredictRequest.

        Number of probabilities to return. 

        :return: The num_results of this SentimentPredictRequest.
        :rtype: int
        """
        return self._num_results

    @num_results.setter
    def num_results(self, num_results):
        """Sets the num_results of this SentimentPredictRequest.

        Number of probabilities to return. 

        :param num_results: The num_results of this SentimentPredictRequest.
        :type num_results: int
        """
        if num_results is not None and num_results < 1:
            raise ValueError("Invalid value for `num_results`, must be a value greater than or equal to `1`")

        self._num_results = num_results

    @property
    def sample_id(self):
        """Gets the sample_id of this SentimentPredictRequest.

        String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.

        :return: The sample_id of this SentimentPredictRequest.
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this SentimentPredictRequest.

        String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.

        :param sample_id: The sample_id of this SentimentPredictRequest.
        :type sample_id: str
        """

        self._sample_id = sample_id
