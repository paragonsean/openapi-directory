# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label_summary import LabelSummary
from openapi_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, created_at: datetime=None, id: int=None, label_summary: LabelSummary=None, language: str=None, name: str=None, num_of_duplicates: int=None, object: str=None, status_msg: str=None, total_examples: int=None, total_labels: int=None, type: str=None, updated_at: datetime=None):
        """Dataset - a model defined in OpenAPI

        :param available: The available of this Dataset.
        :param created_at: The created_at of this Dataset.
        :param id: The id of this Dataset.
        :param label_summary: The label_summary of this Dataset.
        :param language: The language of this Dataset.
        :param name: The name of this Dataset.
        :param num_of_duplicates: The num_of_duplicates of this Dataset.
        :param object: The object of this Dataset.
        :param status_msg: The status_msg of this Dataset.
        :param total_examples: The total_examples of this Dataset.
        :param total_labels: The total_labels of this Dataset.
        :param type: The type of this Dataset.
        :param updated_at: The updated_at of this Dataset.
        """
        self.openapi_types = {
            'available': bool,
            'created_at': datetime,
            'id': int,
            'label_summary': LabelSummary,
            'language': str,
            'name': str,
            'num_of_duplicates': int,
            'object': str,
            'status_msg': str,
            'total_examples': int,
            'total_labels': int,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'available': 'available',
            'created_at': 'createdAt',
            'id': 'id',
            'label_summary': 'labelSummary',
            'language': 'language',
            'name': 'name',
            'num_of_duplicates': 'numOfDuplicates',
            'object': 'object',
            'status_msg': 'statusMsg',
            'total_examples': 'totalExamples',
            'total_labels': 'totalLabels',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._available = available
        self._created_at = created_at
        self._id = id
        self._label_summary = label_summary
        self._language = language
        self._name = name
        self._num_of_duplicates = num_of_duplicates
        self._object = object
        self._status_msg = status_msg
        self._total_examples = total_examples
        self._total_labels = total_labels
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dataset of this Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this Dataset.


        :return: The available of this Dataset.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Dataset.


        :param available: The available of this Dataset.
        :type available: bool
        """

        self._available = available

    @property
    def created_at(self):
        """Gets the created_at of this Dataset.

        Date and time that the dataset was created.

        :return: The created_at of this Dataset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dataset.

        Date and time that the dataset was created.

        :param created_at: The created_at of this Dataset.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Dataset.


        :return: The id of this Dataset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dataset.


        :param id: The id of this Dataset.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label_summary(self):
        """Gets the label_summary of this Dataset.


        :return: The label_summary of this Dataset.
        :rtype: LabelSummary
        """
        return self._label_summary

    @label_summary.setter
    def label_summary(self, label_summary):
        """Sets the label_summary of this Dataset.


        :param label_summary: The label_summary of this Dataset.
        :type label_summary: LabelSummary
        """

        self._label_summary = label_summary

    @property
    def language(self):
        """Gets the language of this Dataset.

        Dataset language.

        :return: The language of this Dataset.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Dataset.

        Dataset language.

        :param language: The language of this Dataset.
        :type language: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this Dataset.


        :return: The name of this Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.


        :param name: The name of this Dataset.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def num_of_duplicates(self):
        """Gets the num_of_duplicates of this Dataset.

        Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.

        :return: The num_of_duplicates of this Dataset.
        :rtype: int
        """
        return self._num_of_duplicates

    @num_of_duplicates.setter
    def num_of_duplicates(self, num_of_duplicates):
        """Sets the num_of_duplicates of this Dataset.

        Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.

        :param num_of_duplicates: The num_of_duplicates of this Dataset.
        :type num_of_duplicates: int
        """

        self._num_of_duplicates = num_of_duplicates

    @property
    def object(self):
        """Gets the object of this Dataset.

        Object returned; in this case, dataset.

        :return: The object of this Dataset.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Dataset.

        Object returned; in this case, dataset.

        :param object: The object of this Dataset.
        :type object: str
        """

        self._object = object

    @property
    def status_msg(self):
        """Gets the status_msg of this Dataset.


        :return: The status_msg of this Dataset.
        :rtype: str
        """
        return self._status_msg

    @status_msg.setter
    def status_msg(self, status_msg):
        """Sets the status_msg of this Dataset.


        :param status_msg: The status_msg of this Dataset.
        :type status_msg: str
        """

        self._status_msg = status_msg

    @property
    def total_examples(self):
        """Gets the total_examples of this Dataset.

        Total number of examples in the dataset.

        :return: The total_examples of this Dataset.
        :rtype: int
        """
        return self._total_examples

    @total_examples.setter
    def total_examples(self, total_examples):
        """Sets the total_examples of this Dataset.

        Total number of examples in the dataset.

        :param total_examples: The total_examples of this Dataset.
        :type total_examples: int
        """

        self._total_examples = total_examples

    @property
    def total_labels(self):
        """Gets the total_labels of this Dataset.

        Total number of labels in the dataset.

        :return: The total_labels of this Dataset.
        :rtype: int
        """
        return self._total_labels

    @total_labels.setter
    def total_labels(self, total_labels):
        """Sets the total_labels of this Dataset.

        Total number of labels in the dataset.

        :param total_labels: The total_labels of this Dataset.
        :type total_labels: int
        """

        self._total_labels = total_labels

    @property
    def type(self):
        """Gets the type of this Dataset.


        :return: The type of this Dataset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dataset.


        :param type: The type of this Dataset.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Dataset.


        :return: The updated_at of this Dataset.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Dataset.


        :param updated_at: The updated_at of this Dataset.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
