# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_data import PlanData
from openapi_server import util


class ApiUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ends_at: datetime=None, id: str=None, license_id: str=None, object: str=None, organization_id: str=None, plan_data: List[PlanData]=None, predictions_max: int=None, predictions_used: int=None, starts_at: datetime=None):
        """ApiUsage - a model defined in OpenAPI

        :param ends_at: The ends_at of this ApiUsage.
        :param id: The id of this ApiUsage.
        :param license_id: The license_id of this ApiUsage.
        :param object: The object of this ApiUsage.
        :param organization_id: The organization_id of this ApiUsage.
        :param plan_data: The plan_data of this ApiUsage.
        :param predictions_max: The predictions_max of this ApiUsage.
        :param predictions_used: The predictions_used of this ApiUsage.
        :param starts_at: The starts_at of this ApiUsage.
        """
        self.openapi_types = {
            'ends_at': datetime,
            'id': str,
            'license_id': str,
            'object': str,
            'organization_id': str,
            'plan_data': List[PlanData],
            'predictions_max': int,
            'predictions_used': int,
            'starts_at': datetime
        }

        self.attribute_map = {
            'ends_at': 'endsAt',
            'id': 'id',
            'license_id': 'licenseId',
            'object': 'object',
            'organization_id': 'organizationId',
            'plan_data': 'planData',
            'predictions_max': 'predictionsMax',
            'predictions_used': 'predictionsUsed',
            'starts_at': 'startsAt'
        }

        self._ends_at = ends_at
        self._id = id
        self._license_id = license_id
        self._object = object
        self._organization_id = organization_id
        self._plan_data = plan_data
        self._predictions_max = predictions_max
        self._predictions_used = predictions_used
        self._starts_at = starts_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiUsage of this ApiUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ends_at(self):
        """Gets the ends_at of this ApiUsage.


        :return: The ends_at of this ApiUsage.
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this ApiUsage.


        :param ends_at: The ends_at of this ApiUsage.
        :type ends_at: datetime
        """

        self._ends_at = ends_at

    @property
    def id(self):
        """Gets the id of this ApiUsage.


        :return: The id of this ApiUsage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiUsage.


        :param id: The id of this ApiUsage.
        :type id: str
        """

        self._id = id

    @property
    def license_id(self):
        """Gets the license_id of this ApiUsage.


        :return: The license_id of this ApiUsage.
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this ApiUsage.


        :param license_id: The license_id of this ApiUsage.
        :type license_id: str
        """

        self._license_id = license_id

    @property
    def object(self):
        """Gets the object of this ApiUsage.


        :return: The object of this ApiUsage.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ApiUsage.


        :param object: The object of this ApiUsage.
        :type object: str
        """

        self._object = object

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiUsage.


        :return: The organization_id of this ApiUsage.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiUsage.


        :param organization_id: The organization_id of this ApiUsage.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def plan_data(self):
        """Gets the plan_data of this ApiUsage.


        :return: The plan_data of this ApiUsage.
        :rtype: List[PlanData]
        """
        return self._plan_data

    @plan_data.setter
    def plan_data(self, plan_data):
        """Sets the plan_data of this ApiUsage.


        :param plan_data: The plan_data of this ApiUsage.
        :type plan_data: List[PlanData]
        """

        self._plan_data = plan_data

    @property
    def predictions_max(self):
        """Gets the predictions_max of this ApiUsage.


        :return: The predictions_max of this ApiUsage.
        :rtype: int
        """
        return self._predictions_max

    @predictions_max.setter
    def predictions_max(self, predictions_max):
        """Sets the predictions_max of this ApiUsage.


        :param predictions_max: The predictions_max of this ApiUsage.
        :type predictions_max: int
        """

        self._predictions_max = predictions_max

    @property
    def predictions_used(self):
        """Gets the predictions_used of this ApiUsage.


        :return: The predictions_used of this ApiUsage.
        :rtype: int
        """
        return self._predictions_used

    @predictions_used.setter
    def predictions_used(self, predictions_used):
        """Sets the predictions_used of this ApiUsage.


        :param predictions_used: The predictions_used of this ApiUsage.
        :type predictions_used: int
        """

        self._predictions_used = predictions_used

    @property
    def starts_at(self):
        """Gets the starts_at of this ApiUsage.


        :return: The starts_at of this ApiUsage.
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this ApiUsage.


        :param starts_at: The starts_at of this ApiUsage.
        :type starts_at: datetime
        """

        self._starts_at = starts_at
