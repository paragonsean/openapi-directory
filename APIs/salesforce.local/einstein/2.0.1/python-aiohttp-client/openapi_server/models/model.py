# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, created_at: datetime=None, dataset_id: int=None, dataset_version_id: int=None, failure_msg: str=None, language: str=None, model_id: str=None, model_type: str=None, name: str=None, object: str=None, progress: float=None, status: str=None, updated_at: datetime=None):
        """Model - a model defined in OpenAPI

        :param algorithm: The algorithm of this Model.
        :param created_at: The created_at of this Model.
        :param dataset_id: The dataset_id of this Model.
        :param dataset_version_id: The dataset_version_id of this Model.
        :param failure_msg: The failure_msg of this Model.
        :param language: The language of this Model.
        :param model_id: The model_id of this Model.
        :param model_type: The model_type of this Model.
        :param name: The name of this Model.
        :param object: The object of this Model.
        :param progress: The progress of this Model.
        :param status: The status of this Model.
        :param updated_at: The updated_at of this Model.
        """
        self.openapi_types = {
            'algorithm': str,
            'created_at': datetime,
            'dataset_id': int,
            'dataset_version_id': int,
            'failure_msg': str,
            'language': str,
            'model_id': str,
            'model_type': str,
            'name': str,
            'object': str,
            'progress': float,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'created_at': 'createdAt',
            'dataset_id': 'datasetId',
            'dataset_version_id': 'datasetVersionId',
            'failure_msg': 'failureMsg',
            'language': 'language',
            'model_id': 'modelId',
            'model_type': 'modelType',
            'name': 'name',
            'object': 'object',
            'progress': 'progress',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._algorithm = algorithm
        self._created_at = created_at
        self._dataset_id = dataset_id
        self._dataset_version_id = dataset_version_id
        self._failure_msg = failure_msg
        self._language = language
        self._model_id = model_id
        self._model_type = model_type
        self._name = name
        self._object = object
        self._progress = progress
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this Model.

        Algorithm used to create the model. Returned only when the modelType is image-detection.

        :return: The algorithm of this Model.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Model.

        Algorithm used to create the model. Returned only when the modelType is image-detection.

        :param algorithm: The algorithm of this Model.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def created_at(self):
        """Gets the created_at of this Model.

        Date and time that the model was created.

        :return: The created_at of this Model.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Model.

        Date and time that the model was created.

        :param created_at: The created_at of this Model.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Model.

        ID of the dataset trained to create the model.

        :return: The dataset_id of this Model.
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Model.

        ID of the dataset trained to create the model.

        :param dataset_id: The dataset_id of this Model.
        :type dataset_id: int
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")

        self._dataset_id = dataset_id

    @property
    def dataset_version_id(self):
        """Gets the dataset_version_id of this Model.

        Not available yet

        :return: The dataset_version_id of this Model.
        :rtype: int
        """
        return self._dataset_version_id

    @dataset_version_id.setter
    def dataset_version_id(self, dataset_version_id):
        """Sets the dataset_version_id of this Model.

        Not available yet

        :param dataset_version_id: The dataset_version_id of this Model.
        :type dataset_version_id: int
        """
        if dataset_version_id is None:
            raise ValueError("Invalid value for `dataset_version_id`, must not be `None`")

        self._dataset_version_id = dataset_version_id

    @property
    def failure_msg(self):
        """Gets the failure_msg of this Model.

        Reason the dataset training failed. Returned only if the training status is FAILED.

        :return: The failure_msg of this Model.
        :rtype: str
        """
        return self._failure_msg

    @failure_msg.setter
    def failure_msg(self, failure_msg):
        """Sets the failure_msg of this Model.

        Reason the dataset training failed. Returned only if the training status is FAILED.

        :param failure_msg: The failure_msg of this Model.
        :type failure_msg: str
        """

        self._failure_msg = failure_msg

    @property
    def language(self):
        """Gets the language of this Model.

        Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.

        :return: The language of this Model.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Model.

        Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.

        :param language: The language of this Model.
        :type language: str
        """

        self._language = language

    @property
    def model_id(self):
        """Gets the model_id of this Model.

        ID of the model. Contains letters and numbers.

        :return: The model_id of this Model.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Model.

        ID of the model. Contains letters and numbers.

        :param model_id: The model_id of this Model.
        :type model_id: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")

        self._model_id = model_id

    @property
    def model_type(self):
        """Gets the model_type of this Model.

        Type of data from which the model was created.

        :return: The model_type of this Model.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Model.

        Type of data from which the model was created.

        :param model_type: The model_type of this Model.
        :type model_type: str
        """

        self._model_type = model_type

    @property
    def name(self):
        """Gets the name of this Model.

        Name of the model.

        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Model.

        Name of the model.

        :param name: The name of this Model.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def object(self):
        """Gets the object of this Model.

        Object returned; in this case, model.

        :return: The object of this Model.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Model.

        Object returned; in this case, model.

        :param object: The object of this Model.
        :type object: str
        """

        self._object = object

    @property
    def progress(self):
        """Gets the progress of this Model.

        How far the dataset training has progressed. Values are between 0�1.

        :return: The progress of this Model.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Model.

        How far the dataset training has progressed. Values are between 0�1.

        :param progress: The progress of this Model.
        :type progress: float
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this Model.

        Status of the model.

        :return: The status of this Model.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Model.

        Status of the model.

        :param status: The status of this Model.
        :type status: str
        """
        allowed_values = ["QUEUED", "RUNNING", "SUCCEEDED", "FAILED", "KILLED", "FAILED_WITH_RETRIES"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Model.

        Date and time that the model was last updated.

        :return: The updated_at of this Model.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Model.

        Date and time that the model was last updated.

        :param updated_at: The updated_at of this Model.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
