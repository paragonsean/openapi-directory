/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemindersAddErrorSchema from '../model/RemindersAddErrorSchema';
import RemindersAddSchema from '../model/RemindersAddSchema';
import RemindersCompleteErrorSchema from '../model/RemindersCompleteErrorSchema';
import RemindersCompleteSchema from '../model/RemindersCompleteSchema';
import RemindersDeleteErrorSchema from '../model/RemindersDeleteErrorSchema';
import RemindersDeleteSchema from '../model/RemindersDeleteSchema';
import RemindersInfoErrorSchema from '../model/RemindersInfoErrorSchema';
import RemindersInfoSchema from '../model/RemindersInfoSchema';
import RemindersListErrorSchema from '../model/RemindersListErrorSchema';
import RemindersListSchema from '../model/RemindersListSchema';

/**
* Reminders service.
* @module api/RemindersApi
* @version 1.7.0
*/
export default class RemindersApi {

    /**
    * Constructs a new RemindersApi. 
    * @alias module:api/RemindersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the remindersAdd operation.
     * @callback module:api/RemindersApi~remindersAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemindersAddSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a reminder.
     * @param {String} token Authentication token. Requires scope: `reminders:write`
     * @param {String} text The content of the reminder
     * @param {String} time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\"in 15 minutes,\\\" or \\\"every Thursday\\\")
     * @param {Object} opts Optional parameters
     * @param {String} [user] The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
     * @param {module:api/RemindersApi~remindersAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemindersAddSchema}
     */
    remindersAdd(token, text, time, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling remindersAdd");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling remindersAdd");
      }
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling remindersAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'text': text,
        'time': time,
        'user': opts['user']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RemindersAddSchema;
      return this.apiClient.callApi(
        '/reminders.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersComplete operation.
     * @callback module:api/RemindersApi~remindersCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemindersCompleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks a reminder as complete.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `reminders:write`
     * @param {String} [reminder] The ID of the reminder to be marked as complete
     * @param {module:api/RemindersApi~remindersCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemindersCompleteSchema}
     */
    remindersComplete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'reminder': opts['reminder']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RemindersCompleteSchema;
      return this.apiClient.callApi(
        '/reminders.complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersDelete operation.
     * @callback module:api/RemindersApi~remindersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemindersDeleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a reminder.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `reminders:write`
     * @param {String} [reminder] The ID of the reminder
     * @param {module:api/RemindersApi~remindersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemindersDeleteSchema}
     */
    remindersDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'reminder': opts['reminder']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = RemindersDeleteSchema;
      return this.apiClient.callApi(
        '/reminders.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersInfo operation.
     * @callback module:api/RemindersApi~remindersInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemindersInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a reminder.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `reminders:read`
     * @param {String} [reminder] The ID of the reminder
     * @param {module:api/RemindersApi~remindersInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemindersInfoSchema}
     */
    remindersInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'reminder': opts['reminder']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemindersInfoSchema;
      return this.apiClient.callApi(
        '/reminders.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remindersList operation.
     * @callback module:api/RemindersApi~remindersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemindersListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all reminders created by or for a given user.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `reminders:read`
     * @param {module:api/RemindersApi~remindersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemindersListSchema}
     */
    remindersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemindersListSchema;
      return this.apiClient.callApi(
        '/reminders.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
