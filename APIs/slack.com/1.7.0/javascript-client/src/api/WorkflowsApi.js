/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* Workflows service.
* @module api/WorkflowsApi
* @version 1.7.0
*/
export default class WorkflowsApi {

    /**
    * Constructs a new WorkflowsApi. 
    * @alias module:api/WorkflowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowsStepCompleted operation.
     * @callback module:api/WorkflowsApi~workflowsStepCompletedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indicate that an app's step in a workflow completed execution.
     * @param {String} token Authentication token. Requires scope: `workflow.steps:execute`
     * @param {String} workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param {Object} opts Optional parameters
     * @param {String} [outputs] Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.
     * @param {module:api/WorkflowsApi~workflowsStepCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    workflowsStepCompleted(token, workflowStepExecuteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling workflowsStepCompleted");
      }
      // verify the required parameter 'workflowStepExecuteId' is set
      if (workflowStepExecuteId === undefined || workflowStepExecuteId === null) {
        throw new Error("Missing the required parameter 'workflowStepExecuteId' when calling workflowsStepCompleted");
      }

      let pathParams = {
      };
      let queryParams = {
        'workflow_step_execute_id': workflowStepExecuteId,
        'outputs': opts['outputs']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/workflows.stepCompleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsStepFailed operation.
     * @callback module:api/WorkflowsApi~workflowsStepFailedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indicate that an app's step in a workflow failed to execute.
     * @param {String} token Authentication token. Requires scope: `workflow.steps:execute`
     * @param {String} workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param {String} error A JSON-based object with a `message` property that should contain a human readable error message.
     * @param {module:api/WorkflowsApi~workflowsStepFailedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    workflowsStepFailed(token, workflowStepExecuteId, error, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling workflowsStepFailed");
      }
      // verify the required parameter 'workflowStepExecuteId' is set
      if (workflowStepExecuteId === undefined || workflowStepExecuteId === null) {
        throw new Error("Missing the required parameter 'workflowStepExecuteId' when calling workflowsStepFailed");
      }
      // verify the required parameter 'error' is set
      if (error === undefined || error === null) {
        throw new Error("Missing the required parameter 'error' when calling workflowsStepFailed");
      }

      let pathParams = {
      };
      let queryParams = {
        'workflow_step_execute_id': workflowStepExecuteId,
        'error': error
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/workflows.stepFailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowsUpdateStep operation.
     * @callback module:api/WorkflowsApi~workflowsUpdateStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration for a workflow extension step.
     * @param {String} token Authentication token. Requires scope: `workflow.steps:execute`
     * @param {String} workflowStepEditId A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.
     * @param {Object} opts Optional parameters
     * @param {String} [inputs] A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
     * @param {String} [outputs] An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
     * @param {String} [stepName] An optional field that can be used to override the step name that is shown in the Workflow Builder.
     * @param {String} [stepImageUrl] An optional field that can be used to override app image that is shown in the Workflow Builder.
     * @param {module:api/WorkflowsApi~workflowsUpdateStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    workflowsUpdateStep(token, workflowStepEditId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling workflowsUpdateStep");
      }
      // verify the required parameter 'workflowStepEditId' is set
      if (workflowStepEditId === undefined || workflowStepEditId === null) {
        throw new Error("Missing the required parameter 'workflowStepEditId' when calling workflowsUpdateStep");
      }

      let pathParams = {
      };
      let queryParams = {
        'workflow_step_edit_id': workflowStepEditId,
        'inputs': opts['inputs'],
        'outputs': opts['outputs'],
        'step_name': opts['stepName'],
        'step_image_url': opts['stepImageUrl']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/workflows.updateStep', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
