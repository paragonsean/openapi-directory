/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminConversationsArchiveErrorSchema from '../model/AdminConversationsArchiveErrorSchema';
import AdminConversationsArchiveSchema from '../model/AdminConversationsArchiveSchema';
import AdminConversationsConvertToPrivateErrorSchema from '../model/AdminConversationsConvertToPrivateErrorSchema';
import AdminConversationsConvertToPrivateSchema from '../model/AdminConversationsConvertToPrivateSchema';
import AdminConversationsCreateErrorSchema from '../model/AdminConversationsCreateErrorSchema';
import AdminConversationsCreateSchema from '../model/AdminConversationsCreateSchema';
import AdminConversationsDeleteErrorSchema from '../model/AdminConversationsDeleteErrorSchema';
import AdminConversationsDeleteSchema from '../model/AdminConversationsDeleteSchema';
import AdminConversationsDisconnectSharedErrorSchema from '../model/AdminConversationsDisconnectSharedErrorSchema';
import AdminConversationsGetConversationPrefsSchema from '../model/AdminConversationsGetConversationPrefsSchema';
import AdminConversationsGetTeamsErrorSchema from '../model/AdminConversationsGetTeamsErrorSchema';
import AdminConversationsGetTeamsSchema from '../model/AdminConversationsGetTeamsSchema';
import AdminConversationsInviteErrorSchema from '../model/AdminConversationsInviteErrorSchema';
import AdminConversationsInviteSchema from '../model/AdminConversationsInviteSchema';
import AdminConversationsRenameSchema from '../model/AdminConversationsRenameSchema';
import AdminConversationsRenameSchema1 from '../model/AdminConversationsRenameSchema1';
import AdminConversationsSearchErrorSchema from '../model/AdminConversationsSearchErrorSchema';
import AdminConversationsSearchSchema from '../model/AdminConversationsSearchSchema';
import AdminConversationsSetConversationPrefsErrorSchema from '../model/AdminConversationsSetConversationPrefsErrorSchema';
import AdminConversationsSetConversationPrefsSchema from '../model/AdminConversationsSetConversationPrefsSchema';
import AdminConversationsUnarchiveErrorSchema from '../model/AdminConversationsUnarchiveErrorSchema';
import AdminConversationsUnarchiveErrorSchema1 from '../model/AdminConversationsUnarchiveErrorSchema1';
import AdminConversationsUnarchiveErrorSchema2 from '../model/AdminConversationsUnarchiveErrorSchema2';
import AdminConversationsUnarchiveSchema from '../model/AdminConversationsUnarchiveSchema';
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminConversations service.
* @module api/AdminConversationsApi
* @version 1.7.0
*/
export default class AdminConversationsApi {

    /**
    * Constructs a new AdminConversationsApi. 
    * @alias module:api/AdminConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminConversationsArchive operation.
     * @callback module:api/AdminConversationsApi~adminConversationsArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsArchiveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to archive.
     * @param {module:api/AdminConversationsApi~adminConversationsArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsArchiveSchema}
     */
    adminConversationsArchive(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsArchive");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsArchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsArchiveSchema;
      return this.apiClient.callApi(
        '/admin.conversations.archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsConvertToPrivate operation.
     * @callback module:api/AdminConversationsApi~adminConversationsConvertToPrivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsConvertToPrivateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a public channel to a private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to convert to private.
     * @param {module:api/AdminConversationsApi~adminConversationsConvertToPrivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsConvertToPrivateSchema}
     */
    adminConversationsConvertToPrivate(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsConvertToPrivate");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsConvertToPrivate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsConvertToPrivateSchema;
      return this.apiClient.callApi(
        '/admin.conversations.convertToPrivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsCreate operation.
     * @callback module:api/AdminConversationsApi~adminConversationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsCreateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a public or private channel-based conversation.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {Boolean} isPrivate When `true`, creates a private channel instead of a public channel
     * @param {String} name Name of the public or private channel to create.
     * @param {Object} opts Optional parameters
     * @param {String} [description] Description of the public or private channel to create.
     * @param {Boolean} [orgWide] When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
     * @param {String} [teamId] The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
     * @param {module:api/AdminConversationsApi~adminConversationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsCreateSchema}
     */
    adminConversationsCreate(token, isPrivate, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsCreate");
      }
      // verify the required parameter 'isPrivate' is set
      if (isPrivate === undefined || isPrivate === null) {
        throw new Error("Missing the required parameter 'isPrivate' when calling adminConversationsCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminConversationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'description': opts['description'],
        'is_private': isPrivate,
        'name': name,
        'org_wide': opts['orgWide'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsCreateSchema;
      return this.apiClient.callApi(
        '/admin.conversations.create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsDelete operation.
     * @callback module:api/AdminConversationsApi~adminConversationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsDeleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to delete.
     * @param {module:api/AdminConversationsApi~adminConversationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsDeleteSchema}
     */
    adminConversationsDelete(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsDelete");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsDeleteSchema;
      return this.apiClient.callApi(
        '/admin.conversations.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsDisconnectShared operation.
     * @callback module:api/AdminConversationsApi~adminConversationsDisconnectSharedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsRenameSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnect a connected channel from one or more workspaces.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to be disconnected from some workspaces.
     * @param {Object} opts Optional parameters
     * @param {String} [leavingTeamIds] The team to be removed from the channel. Currently only a single team id can be specified.
     * @param {module:api/AdminConversationsApi~adminConversationsDisconnectSharedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsRenameSchema}
     */
    adminConversationsDisconnectShared(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsDisconnectShared");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsDisconnectShared");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'leaving_team_ids': opts['leavingTeamIds']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsRenameSchema;
      return this.apiClient.callApi(
        '/admin.conversations.disconnectShared', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsGetConversationPrefs operation.
     * @callback module:api/AdminConversationsApi~adminConversationsGetConversationPrefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsGetConversationPrefsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get conversation preferences for a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId The channel to get preferences for.
     * @param {module:api/AdminConversationsApi~adminConversationsGetConversationPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsGetConversationPrefsSchema}
     */
    adminConversationsGetConversationPrefs(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsGetConversationPrefs");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsGetConversationPrefs");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel_id': channelId
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsGetConversationPrefsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.getConversationPrefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsGetTeams operation.
     * @callback module:api/AdminConversationsApi~adminConversationsGetTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsGetTeamsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId The channel to determine connected workspaces within the organization for.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {module:api/AdminConversationsApi~adminConversationsGetTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsGetTeamsSchema}
     */
    adminConversationsGetTeams(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsGetTeams");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsGetTeams");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel_id': channelId,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsGetTeamsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.getTeams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsInvite operation.
     * @callback module:api/AdminConversationsApi~adminConversationsInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsInviteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a user to a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel that the users will be invited to.
     * @param {String} userIds The users to invite.
     * @param {module:api/AdminConversationsApi~adminConversationsInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsInviteSchema}
     */
    adminConversationsInvite(token, channelId, userIds, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsInvite");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsInvite");
      }
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling adminConversationsInvite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'user_ids': userIds
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsInviteSchema;
      return this.apiClient.callApi(
        '/admin.conversations.invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRename operation.
     * @callback module:api/AdminConversationsApi~adminConversationsRenameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsRenameSchema1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to rename.
     * @param {String} name 
     * @param {module:api/AdminConversationsApi~adminConversationsRenameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsRenameSchema1}
     */
    adminConversationsRename(token, channelId, name, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRename");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRename");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminConversationsRename");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'name': name
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsRenameSchema1;
      return this.apiClient.callApi(
        '/admin.conversations.rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSearch operation.
     * @callback module:api/AdminConversationsApi~adminConversationsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsSearchSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for public or private channels in an Enterprise organization.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {Object} opts Optional parameters
     * @param {String} [teamIds] Comma separated string of team IDs, signifying the workspaces to search through.
     * @param {String} [query] Name of the the channel to query by.
     * @param {Number} [limit] Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {String} [searchChannelTypes] The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
     * @param {String} [sort] Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
     * @param {String} [sortDir] Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
     * @param {module:api/AdminConversationsApi~adminConversationsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsSearchSchema}
     */
    adminConversationsSearch(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_ids': opts['teamIds'],
        'query': opts['query'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'search_channel_types': opts['searchChannelTypes'],
        'sort': opts['sort'],
        'sort_dir': opts['sortDir']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsSearchSchema;
      return this.apiClient.callApi(
        '/admin.conversations.search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSetConversationPrefs operation.
     * @callback module:api/AdminConversationsApi~adminConversationsSetConversationPrefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsSetConversationPrefsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the posting permissions for a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to set the prefs for
     * @param {String} prefs The prefs for this channel in a stringified JSON format.
     * @param {module:api/AdminConversationsApi~adminConversationsSetConversationPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsSetConversationPrefsSchema}
     */
    adminConversationsSetConversationPrefs(token, channelId, prefs, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSetConversationPrefs");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsSetConversationPrefs");
      }
      // verify the required parameter 'prefs' is set
      if (prefs === undefined || prefs === null) {
        throw new Error("Missing the required parameter 'prefs' when calling adminConversationsSetConversationPrefs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'prefs': prefs
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsSetConversationPrefsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.setConversationPrefs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSetTeams operation.
     * @callback module:api/AdminConversationsApi~adminConversationsSetTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The encoded `channel_id` to add or remove to workspaces.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [orgChannel] True if channel has to be converted to an org channel
     * @param {String} [targetTeamIds] A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
     * @param {String} [teamId] The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
     * @param {module:api/AdminConversationsApi~adminConversationsSetTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsSetTeams(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSetTeams");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsSetTeams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'org_channel': opts['orgChannel'],
        'target_team_ids': opts['targetTeamIds'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.setTeams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsUnarchive operation.
     * @callback module:api/AdminConversationsApi~adminConversationsUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsUnarchiveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to unarchive.
     * @param {module:api/AdminConversationsApi~adminConversationsUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsUnarchiveSchema}
     */
    adminConversationsUnarchive(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsUnarchive");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsUnarchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsUnarchiveSchema;
      return this.apiClient.callApi(
        '/admin.conversations.unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
