/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPermissionsScopesListSuccessSchema from '../model/ApiPermissionsScopesListSuccessSchema';
import AppsPermissionsInfoErrorSchema from '../model/AppsPermissionsInfoErrorSchema';
import AppsPermissionsInfoSchema from '../model/AppsPermissionsInfoSchema';
import AppsPermissionsRequestErrorSchema from '../model/AppsPermissionsRequestErrorSchema';
import AppsPermissionsRequestSchema from '../model/AppsPermissionsRequestSchema';
import AppsPermissionsResourcesListErrorSchema from '../model/AppsPermissionsResourcesListErrorSchema';
import AppsPermissionsResourcesListSuccessSchema from '../model/AppsPermissionsResourcesListSuccessSchema';
import AppsPermissionsScopesListErrorSchema from '../model/AppsPermissionsScopesListErrorSchema';
import AppsUninstallErrorSchema from '../model/AppsUninstallErrorSchema';
import AppsUninstallSchema from '../model/AppsUninstallSchema';
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* Apps service.
* @module api/AppsApi
* @version 1.7.0
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsEventAuthorizationsList_0 operation.
     * @callback module:api/AppsApi~appsEventAuthorizationsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
     * @param {String} token Authentication token. Requires scope: `authorizations:read`
     * @param {String} eventContext 
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/AppsApi~appsEventAuthorizationsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    appsEventAuthorizationsList_0(token, eventContext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsEventAuthorizationsList_0");
      }
      // verify the required parameter 'eventContext' is set
      if (eventContext === undefined || eventContext === null) {
        throw new Error("Missing the required parameter 'eventContext' when calling appsEventAuthorizationsList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'event_context': eventContext,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/apps.event.authorizations.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsInfo_0 operation.
     * @callback module:api/AppsApi~appsPermissionsInfo_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsPermissionsInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of permissions this app has on a team.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `none`
     * @param {module:api/AppsApi~appsPermissionsInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsPermissionsInfoSchema}
     */
    appsPermissionsInfo_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsPermissionsInfoSchema;
      return this.apiClient.callApi(
        '/apps.permissions.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsRequest_0 operation.
     * @callback module:api/AppsApi~appsPermissionsRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsPermissionsRequestSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows an app to request additional scopes
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} scopes A comma separated list of scopes to request for
     * @param {String} triggerId Token used to trigger the permissions API
     * @param {module:api/AppsApi~appsPermissionsRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsPermissionsRequestSchema}
     */
    appsPermissionsRequest_0(token, scopes, triggerId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsRequest_0");
      }
      // verify the required parameter 'scopes' is set
      if (scopes === undefined || scopes === null) {
        throw new Error("Missing the required parameter 'scopes' when calling appsPermissionsRequest_0");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling appsPermissionsRequest_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scopes': scopes,
        'trigger_id': triggerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsPermissionsRequestSchema;
      return this.apiClient.callApi(
        '/apps.permissions.request', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsResourcesList_0 operation.
     * @callback module:api/AppsApi~appsPermissionsResourcesList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsPermissionsResourcesListSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of resource grants this app has on a team.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {Number} [limit] The maximum number of items to return.
     * @param {module:api/AppsApi~appsPermissionsResourcesList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsPermissionsResourcesListSuccessSchema}
     */
    appsPermissionsResourcesList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsResourcesList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsPermissionsResourcesListSuccessSchema;
      return this.apiClient.callApi(
        '/apps.permissions.resources.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsScopesList_0 operation.
     * @callback module:api/AppsApi~appsPermissionsScopesList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiPermissionsScopesListSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of scopes this app has on a team.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {module:api/AppsApi~appsPermissionsScopesList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiPermissionsScopesListSuccessSchema}
     */
    appsPermissionsScopesList_0(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsScopesList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiPermissionsScopesListSuccessSchema;
      return this.apiClient.callApi(
        '/apps.permissions.scopes.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsUsersList_0 operation.
     * @callback module:api/AppsApi~appsPermissionsUsersList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {Number} [limit] The maximum number of items to return.
     * @param {module:api/AppsApi~appsPermissionsUsersList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    appsPermissionsUsersList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsUsersList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/apps.permissions.users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsUsersRequest_0 operation.
     * @callback module:api/AppsApi~appsPermissionsUsersRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} scopes A comma separated list of user scopes to request for
     * @param {String} triggerId Token used to trigger the request
     * @param {String} user The user this scope is being requested for
     * @param {module:api/AppsApi~appsPermissionsUsersRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    appsPermissionsUsersRequest_0(token, scopes, triggerId, user, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsUsersRequest_0");
      }
      // verify the required parameter 'scopes' is set
      if (scopes === undefined || scopes === null) {
        throw new Error("Missing the required parameter 'scopes' when calling appsPermissionsUsersRequest_0");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling appsPermissionsUsersRequest_0");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling appsPermissionsUsersRequest_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scopes': scopes,
        'trigger_id': triggerId,
        'user': user
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/apps.permissions.users.request', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUninstall operation.
     * @callback module:api/AppsApi~appsUninstallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsUninstallSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uninstalls your app from a workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `none`
     * @param {String} [clientId] Issued when you created your application.
     * @param {String} [clientSecret] Issued when you created your application.
     * @param {module:api/AppsApi~appsUninstallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsUninstallSchema}
     */
    appsUninstall(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsUninstallSchema;
      return this.apiClient.callApi(
        '/apps.uninstall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
