/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';
import FilesCommentsDeleteErrorSchema from '../model/FilesCommentsDeleteErrorSchema';
import FilesCommentsDeleteSchema from '../model/FilesCommentsDeleteSchema';
import FilesDeleteErrorSchema from '../model/FilesDeleteErrorSchema';
import FilesDeleteSchema from '../model/FilesDeleteSchema';
import FilesInfoErrorSchema from '../model/FilesInfoErrorSchema';
import FilesInfoSchema from '../model/FilesInfoSchema';
import FilesListErrorSchema from '../model/FilesListErrorSchema';
import FilesListSchema from '../model/FilesListSchema';
import FilesRevokePublicURLErrorSchema from '../model/FilesRevokePublicURLErrorSchema';
import FilesRevokePublicURLSchema from '../model/FilesRevokePublicURLSchema';
import FilesSharedPublicURLErrorSchema from '../model/FilesSharedPublicURLErrorSchema';
import FilesSharedPublicURLSchema from '../model/FilesSharedPublicURLSchema';
import FilesUploadErrorSchema from '../model/FilesUploadErrorSchema';
import FilesUploadSchema from '../model/FilesUploadSchema';

/**
* Files service.
* @module api/FilesApi
* @version 1.7.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesCommentsDelete_0 operation.
     * @callback module:api/FilesApi~filesCommentsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesCommentsDeleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing comment on a file.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:write:user`
     * @param {String} [file] File to delete a comment from.
     * @param {String} [id] The comment to delete.
     * @param {module:api/FilesApi~filesCommentsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesCommentsDeleteSchema}
     */
    filesCommentsDelete_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'file': opts['file'],
        'id': opts['id']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FilesCommentsDeleteSchema;
      return this.apiClient.callApi(
        '/files.comments.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesDelete operation.
     * @callback module:api/FilesApi~filesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesDeleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a file.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:write:user`
     * @param {String} [file] ID of file to delete.
     * @param {module:api/FilesApi~filesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesDeleteSchema}
     */
    filesDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FilesDeleteSchema;
      return this.apiClient.callApi(
        '/files.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesInfo operation.
     * @callback module:api/FilesApi~filesInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a file.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:read`
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [count] 
     * @param {String} [page] 
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
     * @param {String} [cursor] Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details.
     * @param {module:api/FilesApi~filesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesInfoSchema}
     */
    filesInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'file': opts['file'],
        'count': opts['count'],
        'page': opts['page'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesInfoSchema;
      return this.apiClient.callApi(
        '/files.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesList operation.
     * @callback module:api/FilesApi~filesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List for a team, in a channel, or from a user with applied filters.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:read`
     * @param {String} [user] Filter files created by a single user.
     * @param {String} [channel] Filter files appearing in a specific channel, indicated by its ID.
     * @param {Number} [tsFrom] Filter files created after this timestamp (inclusive).
     * @param {Number} [tsTo] Filter files created before this timestamp (inclusive).
     * @param {String} [types] Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.
     * @param {String} [count] 
     * @param {String} [page] 
     * @param {Boolean} [showFilesHiddenByLimit] Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
     * @param {module:api/FilesApi~filesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesListSchema}
     */
    filesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'user': opts['user'],
        'channel': opts['channel'],
        'ts_from': opts['tsFrom'],
        'ts_to': opts['tsTo'],
        'types': opts['types'],
        'count': opts['count'],
        'page': opts['page'],
        'show_files_hidden_by_limit': opts['showFilesHiddenByLimit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilesListSchema;
      return this.apiClient.callApi(
        '/files.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteAdd_0 operation.
     * @callback module:api/FilesApi~filesRemoteAdd_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a file from a remote service
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [externalUrl] URL of the remote file.
     * @param {String} [filetype] type of file
     * @param {String} [indexableFileContents] A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
     * @param {String} [previewImage] Preview of the document via `multipart/form-data`.
     * @param {String} [title] Title of the file being shared.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesApi~filesRemoteAdd_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteAdd_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'external_url': opts['externalUrl'],
        'filetype': opts['filetype'],
        'indexable_file_contents': opts['indexableFileContents'],
        'preview_image': opts['previewImage'],
        'title': opts['title'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteInfo_0 operation.
     * @callback module:api/FilesApi~filesRemoteInfo_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a remote file added to Slack
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:read`
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {module:api/FilesApi~filesRemoteInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteInfo_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'file': opts['file'],
        'external_id': opts['externalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteList_0 operation.
     * @callback module:api/FilesApi~filesRemoteList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a remote file added to Slack
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:read`
     * @param {String} [channel] Filter files appearing in a specific channel, indicated by its ID.
     * @param {Number} [tsFrom] Filter files created after this timestamp (inclusive).
     * @param {Number} [tsTo] Filter files created before this timestamp (inclusive).
     * @param {Number} [limit] The maximum number of items to return.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/FilesApi~filesRemoteList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteList_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'ts_from': opts['tsFrom'],
        'ts_to': opts['tsTo'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteRemove_0 operation.
     * @callback module:api/FilesApi~filesRemoteRemove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a remote file.
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesApi~filesRemoteRemove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteRemove_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'file': opts['file'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteShare_0 operation.
     * @callback module:api/FilesApi~filesRemoteShare_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a remote file into a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:share`
     * @param {String} [file] Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.
     * @param {String} [externalId] The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.
     * @param {String} [channels] Comma-separated list of channel IDs where the file will be shared.
     * @param {module:api/FilesApi~filesRemoteShare_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteShare_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'file': opts['file'],
        'external_id': opts['externalId'],
        'channels': opts['channels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteUpdate_0 operation.
     * @callback module:api/FilesApi~filesRemoteUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing remote file.
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [externalUrl] URL of the remote file.
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [filetype] type of file
     * @param {String} [indexableFileContents] File containing contents that can be used to improve searchability for the remote file.
     * @param {String} [previewImage] Preview of the document via `multipart/form-data`.
     * @param {String} [title] Title of the file being shared.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesApi~filesRemoteUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteUpdate_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'external_url': opts['externalUrl'],
        'file': opts['file'],
        'filetype': opts['filetype'],
        'indexable_file_contents': opts['indexableFileContents'],
        'preview_image': opts['previewImage'],
        'title': opts['title'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRevokePublicURL operation.
     * @callback module:api/FilesApi~filesRevokePublicURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesRevokePublicURLSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes public/external sharing access for a file
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:write:user`
     * @param {String} [file] File to revoke
     * @param {module:api/FilesApi~filesRevokePublicURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesRevokePublicURLSchema}
     */
    filesRevokePublicURL(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FilesRevokePublicURLSchema;
      return this.apiClient.callApi(
        '/files.revokePublicURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesSharedPublicURL operation.
     * @callback module:api/FilesApi~filesSharedPublicURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesSharedPublicURLSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a file for public/external sharing.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `files:write:user`
     * @param {String} [file] File to share
     * @param {module:api/FilesApi~filesSharedPublicURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesSharedPublicURLSchema}
     */
    filesSharedPublicURL(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FilesSharedPublicURLSchema;
      return this.apiClient.callApi(
        '/files.sharedPublicURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesUpload operation.
     * @callback module:api/FilesApi~filesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesUploadSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads or creates a file.
     * @param {Object} opts Optional parameters
     * @param {String} [channels] Comma-separated list of channel names or IDs where the file will be shared.
     * @param {String} [content] File contents via a POST variable. If omitting this parameter, you must provide a `file`.
     * @param {String} [file] File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.
     * @param {String} [filename] Filename of file.
     * @param {String} [filetype] A [file type](/types/file#file_types) identifier.
     * @param {String} [initialComment] The message text introducing the file in specified `channels`.
     * @param {Number} [threadTs] Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.
     * @param {String} [title] Title of file.
     * @param {String} [token] Authentication token. Requires scope: `files:write:user`
     * @param {module:api/FilesApi~filesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesUploadSchema}
     */
    filesUpload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channels': opts['channels'],
        'content': opts['content'],
        'file': opts['file'],
        'filename': opts['filename'],
        'filetype': opts['filetype'],
        'initial_comment': opts['initialComment'],
        'thread_ts': opts['threadTs'],
        'title': opts['title'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = FilesUploadSchema;
      return this.apiClient.callApi(
        '/files.upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
