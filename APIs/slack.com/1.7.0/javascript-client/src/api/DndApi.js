/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';
import DndEndDndErrorSchema from '../model/DndEndDndErrorSchema';
import DndEndDndSchema from '../model/DndEndDndSchema';
import DndEndSnoozeErrorSchema from '../model/DndEndSnoozeErrorSchema';
import DndEndSnoozeSchema from '../model/DndEndSnoozeSchema';
import DndInfoErrorSchema from '../model/DndInfoErrorSchema';
import DndInfoSchema from '../model/DndInfoSchema';
import DndSetSnoozeErrorSchema from '../model/DndSetSnoozeErrorSchema';
import DndSetSnoozeSchema from '../model/DndSetSnoozeSchema';

/**
* Dnd service.
* @module api/DndApi
* @version 1.7.0
*/
export default class DndApi {

    /**
    * Constructs a new DndApi. 
    * @alias module:api/DndApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dndEndDnd operation.
     * @callback module:api/DndApi~dndEndDndCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DndEndDndSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ends the current user's Do Not Disturb session immediately.
     * @param {String} token Authentication token. Requires scope: `dnd:write`
     * @param {module:api/DndApi~dndEndDndCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DndEndDndSchema}
     */
    dndEndDnd(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling dndEndDnd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DndEndDndSchema;
      return this.apiClient.callApi(
        '/dnd.endDnd', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dndEndSnooze operation.
     * @callback module:api/DndApi~dndEndSnoozeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DndEndSnoozeSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ends the current user's snooze mode immediately.
     * @param {String} token Authentication token. Requires scope: `dnd:write`
     * @param {module:api/DndApi~dndEndSnoozeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DndEndSnoozeSchema}
     */
    dndEndSnooze(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling dndEndSnooze");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DndEndSnoozeSchema;
      return this.apiClient.callApi(
        '/dnd.endSnooze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dndInfo operation.
     * @callback module:api/DndApi~dndInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DndInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a user's current Do Not Disturb status.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `dnd:read`
     * @param {String} [user] User to fetch status for (defaults to current user)
     * @param {module:api/DndApi~dndInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DndInfoSchema}
     */
    dndInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DndInfoSchema;
      return this.apiClient.callApi(
        '/dnd.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dndSetSnooze operation.
     * @callback module:api/DndApi~dndSetSnoozeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DndSetSnoozeSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param {String} numMinutes Number of minutes, from now, to snooze until.
     * @param {String} token Authentication token. Requires scope: `dnd:write`
     * @param {module:api/DndApi~dndSetSnoozeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DndSetSnoozeSchema}
     */
    dndSetSnooze(numMinutes, token, callback) {
      let postBody = null;
      // verify the required parameter 'numMinutes' is set
      if (numMinutes === undefined || numMinutes === null) {
        throw new Error("Missing the required parameter 'numMinutes' when calling dndSetSnooze");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling dndSetSnooze");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'num_minutes': numMinutes,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DndSetSnoozeSchema;
      return this.apiClient.callApi(
        '/dnd.setSnooze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dndTeamInfo operation.
     * @callback module:api/DndApi~dndTeamInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `dnd:read`
     * @param {String} [users] Comma-separated list of users to fetch Do Not Disturb status for
     * @param {module:api/DndApi~dndTeamInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    dndTeamInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'users': opts['users']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/dnd.teamInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
