/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminUsergroups service.
* @module api/AdminUsergroupsApi
* @version 1.7.0
*/
export default class AdminUsergroupsApi {

    /**
    * Constructs a new AdminUsergroupsApi. 
    * @alias module:api/AdminUsergroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminUsergroupsAddChannels operation.
     * @callback module:api/AdminUsergroupsApi~adminUsergroupsAddChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add one or more default channels to an IDP group.
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:write`
     * @param {String} channelIds Comma separated string of channel IDs.
     * @param {String} usergroupId ID of the IDP group to add default channels for.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace to add default channels in.
     * @param {module:api/AdminUsergroupsApi~adminUsergroupsAddChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsAddChannels(token, channelIds, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsAddChannels");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsergroupsAddChannels");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'team_id': opts['teamId'],
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.addChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsAddTeams operation.
     * @callback module:api/AdminUsergroupsApi~adminUsergroupsAddTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
     * @param {String} usergroupId An encoded usergroup (IDP Group) ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoProvision] When `true`, this method automatically creates new workspace accounts for the IDP group members.
     * @param {module:api/AdminUsergroupsApi~adminUsergroupsAddTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsAddTeams(token, teamIds, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsAddTeams");
      }
      // verify the required parameter 'teamIds' is set
      if (teamIds === undefined || teamIds === null) {
        throw new Error("Missing the required parameter 'teamIds' when calling adminUsergroupsAddTeams");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddTeams");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'auto_provision': opts['autoProvision'],
        'team_ids': teamIds,
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.addTeams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsListChannels operation.
     * @callback module:api/AdminUsergroupsApi~adminUsergroupsListChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the channels linked to an org-level IDP group (user group).
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:read`
     * @param {String} usergroupId ID of the IDP group to list default channels for.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID of the the workspace.
     * @param {Boolean} [includeNumMembers] Flag to include or exclude the count of members per channel.
     * @param {module:api/AdminUsergroupsApi~adminUsergroupsListChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsListChannels(token, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsListChannels");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsListChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'usergroup_id': usergroupId,
        'team_id': opts['teamId'],
        'include_num_members': opts['includeNumMembers']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.listChannels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsRemoveChannels operation.
     * @callback module:api/AdminUsergroupsApi~adminUsergroupsRemoveChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:write`
     * @param {String} channelIds Comma-separated string of channel IDs
     * @param {String} usergroupId ID of the IDP Group
     * @param {module:api/AdminUsergroupsApi~adminUsergroupsRemoveChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsRemoveChannels(token, channelIds, usergroupId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsRemoveChannels");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsergroupsRemoveChannels");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsRemoveChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.removeChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
