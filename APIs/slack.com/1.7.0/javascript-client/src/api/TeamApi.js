/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';
import TeamAccessLogsErrorSchema from '../model/TeamAccessLogsErrorSchema';
import TeamAccessLogsSchema from '../model/TeamAccessLogsSchema';
import TeamInfoErrorSchema from '../model/TeamInfoErrorSchema';
import TeamInfoSchema from '../model/TeamInfoSchema';
import TeamIntegrationLogsErrorSchema from '../model/TeamIntegrationLogsErrorSchema';
import TeamIntegrationLogsSchema from '../model/TeamIntegrationLogsSchema';
import TeamProfileGetErrorSchema from '../model/TeamProfileGetErrorSchema';
import TeamProfileGetSuccessSchema from '../model/TeamProfileGetSuccessSchema';

/**
* Team service.
* @module api/TeamApi
* @version 1.7.0
*/
export default class TeamApi {

    /**
    * Constructs a new TeamApi. 
    * @alias module:api/TeamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamAccessLogs operation.
     * @callback module:api/TeamApi~teamAccessLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamAccessLogsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the access logs for the current team.
     * @param {String} token Authentication token. Requires scope: `admin`
     * @param {Object} opts Optional parameters
     * @param {String} [before] End of time range of logs to include in results (inclusive).
     * @param {String} [count] 
     * @param {String} [page] 
     * @param {module:api/TeamApi~teamAccessLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamAccessLogsSchema}
     */
    teamAccessLogs(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling teamAccessLogs");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'before': opts['before'],
        'count': opts['count'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamAccessLogsSchema;
      return this.apiClient.callApi(
        '/team.accessLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamBillableInfo operation.
     * @callback module:api/TeamApi~teamBillableInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets billable users information for the current team.
     * @param {String} token Authentication token. Requires scope: `admin`
     * @param {Object} opts Optional parameters
     * @param {String} [user] A user to retrieve the billable information for. Defaults to all users.
     * @param {module:api/TeamApi~teamBillableInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    teamBillableInfo(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling teamBillableInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/team.billableInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamInfo operation.
     * @callback module:api/TeamApi~teamInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the current team.
     * @param {String} token Authentication token. Requires scope: `team:read`
     * @param {Object} opts Optional parameters
     * @param {String} [team] Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels
     * @param {module:api/TeamApi~teamInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamInfoSchema}
     */
    teamInfo(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling teamInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'team': opts['team']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamInfoSchema;
      return this.apiClient.callApi(
        '/team.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamIntegrationLogs operation.
     * @callback module:api/TeamApi~teamIntegrationLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamIntegrationLogsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the integration logs for the current team.
     * @param {String} token Authentication token. Requires scope: `admin`
     * @param {Object} opts Optional parameters
     * @param {String} [appId] Filter logs to this Slack app. Defaults to all logs.
     * @param {String} [changeType] Filter logs with this change type. Defaults to all logs.
     * @param {String} [count] 
     * @param {String} [page] 
     * @param {String} [serviceId] Filter logs to this service. Defaults to all logs.
     * @param {String} [user] Filter logs generated by this userâ€™s actions. Defaults to all logs.
     * @param {module:api/TeamApi~teamIntegrationLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamIntegrationLogsSchema}
     */
    teamIntegrationLogs(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling teamIntegrationLogs");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'app_id': opts['appId'],
        'change_type': opts['changeType'],
        'count': opts['count'],
        'page': opts['page'],
        'service_id': opts['serviceId'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamIntegrationLogsSchema;
      return this.apiClient.callApi(
        '/team.integrationLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamProfileGet_0 operation.
     * @callback module:api/TeamApi~teamProfileGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamProfileGetSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a team's profile.
     * @param {String} token Authentication token. Requires scope: `users.profile:read`
     * @param {Object} opts Optional parameters
     * @param {String} [visibility] Filter by visibility.
     * @param {module:api/TeamApi~teamProfileGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamProfileGetSuccessSchema}
     */
    teamProfileGet_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling teamProfileGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'visibility': opts['visibility']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamProfileGetSuccessSchema;
      return this.apiClient.callApi(
        '/team.profile.get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
