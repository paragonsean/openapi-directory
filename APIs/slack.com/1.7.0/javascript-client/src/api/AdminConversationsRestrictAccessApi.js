/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminConversationsRestrictAccess service.
* @module api/AdminConversationsRestrictAccessApi
* @version 1.7.0
*/
export default class AdminConversationsRestrictAccessApi {

    /**
    * Constructs a new AdminConversationsRestrictAccessApi. 
    * @alias module:api/AdminConversationsRestrictAccessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessAddGroup operation.
     * @callback module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessAddGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an allowlist of IDP groups for accessing a channel
     * @param {String} channelId The channel to link this group to.
     * @param {String} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessAddGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessAddGroup(channelId, groupId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessAddGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling adminConversationsRestrictAccessAddGroup");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessAddGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_id': channelId,
        'group_id': groupId,
        'team_id': opts['teamId'],
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.addGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessListGroups operation.
     * @callback module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessListGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all IDP Groups linked to a channel
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessListGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessListGroups(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessListGroups");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessListGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel_id': channelId,
        'team_id': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.listGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessRemoveGroup operation.
     * @callback module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessRemoveGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a linked IDP group linked from a private channel
     * @param {String} channelId The channel to remove the linked group from.
     * @param {String} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
     * @param {String} teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {module:api/AdminConversationsRestrictAccessApi~adminConversationsRestrictAccessRemoveGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessRemoveGroup(channelId, groupId, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessRemoveGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling adminConversationsRestrictAccessRemoveGroup");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminConversationsRestrictAccessRemoveGroup");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessRemoveGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_id': channelId,
        'group_id': groupId,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.removeGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
