/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsersProfileGetErrorSchema from '../model/UsersProfileGetErrorSchema';
import UsersProfileGetSchema from '../model/UsersProfileGetSchema';
import UsersProfileSetErrorSchema from '../model/UsersProfileSetErrorSchema';
import UsersProfileSetSchema from '../model/UsersProfileSetSchema';

/**
* UsersProfile service.
* @module api/UsersProfileApi
* @version 1.7.0
*/
export default class UsersProfileApi {

    /**
    * Constructs a new UsersProfileApi. 
    * @alias module:api/UsersProfileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersProfileGet operation.
     * @callback module:api/UsersProfileApi~usersProfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersProfileGetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a user's profile information.
     * @param {String} token Authentication token. Requires scope: `users.profile:read`
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeLabels] Include labels for each ID in custom profile fields
     * @param {String} [user] User to retrieve profile info for
     * @param {module:api/UsersProfileApi~usersProfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersProfileGetSchema}
     */
    usersProfileGet(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersProfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'include_labels': opts['includeLabels'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersProfileGetSchema;
      return this.apiClient.callApi(
        '/users.profile.get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileSet operation.
     * @callback module:api/UsersProfileApi~usersProfileSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersProfileSetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the profile information for a user.
     * @param {String} token Authentication token. Requires scope: `users.profile:write`
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name of a single key to set. Usable only if `profile` is not passed.
     * @param {String} [profile] Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
     * @param {String} [user] ID of user to change. This argument may only be specified by team admins on paid teams.
     * @param {String} [value] Value to set a single key to. Usable only if `profile` is not passed.
     * @param {module:api/UsersProfileApi~usersProfileSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersProfileSetSchema}
     */
    usersProfileSet(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersProfileSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'name': opts['name'],
        'profile': opts['profile'],
        'user': opts['user'],
        'value': opts['value']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsersProfileSetSchema;
      return this.apiClient.callApi(
        '/users.profile.set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
