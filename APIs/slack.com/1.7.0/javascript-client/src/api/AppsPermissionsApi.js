/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppsPermissionsInfoErrorSchema from '../model/AppsPermissionsInfoErrorSchema';
import AppsPermissionsInfoSchema from '../model/AppsPermissionsInfoSchema';
import AppsPermissionsRequestErrorSchema from '../model/AppsPermissionsRequestErrorSchema';
import AppsPermissionsRequestSchema from '../model/AppsPermissionsRequestSchema';

/**
* AppsPermissions service.
* @module api/AppsPermissionsApi
* @version 1.7.0
*/
export default class AppsPermissionsApi {

    /**
    * Constructs a new AppsPermissionsApi. 
    * @alias module:api/AppsPermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appsPermissionsInfo operation.
     * @callback module:api/AppsPermissionsApi~appsPermissionsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsPermissionsInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list of permissions this app has on a team.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `none`
     * @param {module:api/AppsPermissionsApi~appsPermissionsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsPermissionsInfoSchema}
     */
    appsPermissionsInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsPermissionsInfoSchema;
      return this.apiClient.callApi(
        '/apps.permissions.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsPermissionsRequest operation.
     * @callback module:api/AppsPermissionsApi~appsPermissionsRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppsPermissionsRequestSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows an app to request additional scopes
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} scopes A comma separated list of scopes to request for
     * @param {String} triggerId Token used to trigger the permissions API
     * @param {module:api/AppsPermissionsApi~appsPermissionsRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppsPermissionsRequestSchema}
     */
    appsPermissionsRequest(token, scopes, triggerId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling appsPermissionsRequest");
      }
      // verify the required parameter 'scopes' is set
      if (scopes === undefined || scopes === null) {
        throw new Error("Missing the required parameter 'scopes' when calling appsPermissionsRequest");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling appsPermissionsRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'scopes': scopes,
        'trigger_id': triggerId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppsPermissionsRequestSchema;
      return this.apiClient.callApi(
        '/apps.permissions.request', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
