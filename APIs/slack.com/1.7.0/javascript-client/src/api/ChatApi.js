/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatDeleteErrorSchema from '../model/ChatDeleteErrorSchema';
import ChatDeleteScheduledMessageErrorSchema from '../model/ChatDeleteScheduledMessageErrorSchema';
import ChatDeleteScheduledMessageSchema from '../model/ChatDeleteScheduledMessageSchema';
import ChatDeleteSuccessSchema from '../model/ChatDeleteSuccessSchema';
import ChatGetPermalinkErrorSchema from '../model/ChatGetPermalinkErrorSchema';
import ChatGetPermalinkSuccessSchema from '../model/ChatGetPermalinkSuccessSchema';
import ChatMeMessageErrorSchema from '../model/ChatMeMessageErrorSchema';
import ChatMeMessageSchema from '../model/ChatMeMessageSchema';
import ChatPostEphemeralErrorSchema from '../model/ChatPostEphemeralErrorSchema';
import ChatPostEphemeralSuccessSchema from '../model/ChatPostEphemeralSuccessSchema';
import ChatPostMessageErrorSchema from '../model/ChatPostMessageErrorSchema';
import ChatPostMessageSuccessSchema from '../model/ChatPostMessageSuccessSchema';
import ChatScheduleMessageErrorSchema from '../model/ChatScheduleMessageErrorSchema';
import ChatScheduleMessageSuccessSchema from '../model/ChatScheduleMessageSuccessSchema';
import ChatScheduledMessagesListErrorSchema from '../model/ChatScheduledMessagesListErrorSchema';
import ChatScheduledMessagesListSchema from '../model/ChatScheduledMessagesListSchema';
import ChatUnfurlErrorSchema from '../model/ChatUnfurlErrorSchema';
import ChatUnfurlSuccessSchema from '../model/ChatUnfurlSuccessSchema';
import ChatUpdateErrorSchema from '../model/ChatUpdateErrorSchema';
import ChatUpdateSuccessSchema from '../model/ChatUpdateSuccessSchema';

/**
* Chat service.
* @module api/ChatApi
* @version 1.7.0
*/
export default class ChatApi {

    /**
    * Constructs a new ChatApi. 
    * @alias module:api/ChatApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the chatDelete operation.
     * @callback module:api/ChatApi~chatDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatDeleteSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `chat:write`
     * @param {Boolean} [asUser] Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
     * @param {String} [channel] Channel containing the message to be deleted.
     * @param {Number} [ts] Timestamp of the message to be deleted.
     * @param {module:api/ChatApi~chatDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatDeleteSuccessSchema}
     */
    chatDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'as_user': opts['asUser'],
        'channel': opts['channel'],
        'ts': opts['ts']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatDeleteSuccessSchema;
      return this.apiClient.callApi(
        '/chat.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatDeleteScheduledMessage operation.
     * @callback module:api/ChatApi~chatDeleteScheduledMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatDeleteScheduledMessageSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pending scheduled message from the queue.
     * @param {String} token Authentication token. Requires scope: `chat:write`
     * @param {String} channel The channel the scheduled_message is posting to
     * @param {String} scheduledMessageId `scheduled_message_id` returned from call to chat.scheduleMessage
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asUser] Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
     * @param {module:api/ChatApi~chatDeleteScheduledMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatDeleteScheduledMessageSchema}
     */
    chatDeleteScheduledMessage(token, channel, scheduledMessageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatDeleteScheduledMessage");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatDeleteScheduledMessage");
      }
      // verify the required parameter 'scheduledMessageId' is set
      if (scheduledMessageId === undefined || scheduledMessageId === null) {
        throw new Error("Missing the required parameter 'scheduledMessageId' when calling chatDeleteScheduledMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'as_user': opts['asUser'],
        'channel': channel,
        'scheduled_message_id': scheduledMessageId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatDeleteScheduledMessageSchema;
      return this.apiClient.callApi(
        '/chat.deleteScheduledMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatGetPermalink operation.
     * @callback module:api/ChatApi~chatGetPermalinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatGetPermalinkSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a permalink URL for a specific extant message
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} channel The ID of the conversation or channel containing the message
     * @param {String} messageTs A message's `ts` value, uniquely identifying it within a channel
     * @param {module:api/ChatApi~chatGetPermalinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatGetPermalinkSuccessSchema}
     */
    chatGetPermalink(token, channel, messageTs, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatGetPermalink");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatGetPermalink");
      }
      // verify the required parameter 'messageTs' is set
      if (messageTs === undefined || messageTs === null) {
        throw new Error("Missing the required parameter 'messageTs' when calling chatGetPermalink");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel': channel,
        'message_ts': messageTs
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatGetPermalinkSuccessSchema;
      return this.apiClient.callApi(
        '/chat.getPermalink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatMeMessage operation.
     * @callback module:api/ChatApi~chatMeMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatMeMessageSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a me message into a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `chat:write`
     * @param {String} [channel] Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
     * @param {String} [text] Text of the message to send.
     * @param {module:api/ChatApi~chatMeMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatMeMessageSchema}
     */
    chatMeMessage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'text': opts['text']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatMeMessageSchema;
      return this.apiClient.callApi(
        '/chat.meMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatPostEphemeral operation.
     * @callback module:api/ChatApi~chatPostEphemeralCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatPostEphemeralSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an ephemeral message to a user in a channel.
     * @param {String} token Authentication token. Requires scope: `chat:write`
     * @param {String} channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
     * @param {String} user `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asUser] Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
     * @param {String} [attachments] A JSON-based array of structured attachments, presented as a URL-encoded string.
     * @param {String} [blocks] A JSON-based array of structured blocks, presented as a URL-encoded string.
     * @param {String} [iconEmoji] Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
     * @param {String} [iconUrl] URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * @param {Boolean} [linkNames] Find and link channel names and usernames.
     * @param {String} [parse] Change how messages are treated. Defaults to `none`. See [below](#formatting).
     * @param {String} [text] How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     * @param {String} [threadTs] Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
     * @param {String} [username] Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * @param {module:api/ChatApi~chatPostEphemeralCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatPostEphemeralSuccessSchema}
     */
    chatPostEphemeral(token, channel, user, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatPostEphemeral");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatPostEphemeral");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling chatPostEphemeral");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'as_user': opts['asUser'],
        'attachments': opts['attachments'],
        'blocks': opts['blocks'],
        'channel': channel,
        'icon_emoji': opts['iconEmoji'],
        'icon_url': opts['iconUrl'],
        'link_names': opts['linkNames'],
        'parse': opts['parse'],
        'text': opts['text'],
        'thread_ts': opts['threadTs'],
        'user': user,
        'username': opts['username']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatPostEphemeralSuccessSchema;
      return this.apiClient.callApi(
        '/chat.postEphemeral', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatPostMessage operation.
     * @callback module:api/ChatApi~chatPostMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatPostMessageSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a message to a channel.
     * @param {String} token Authentication token. Requires scope: `chat:write`
     * @param {String} channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * @param {Object} opts Optional parameters
     * @param {String} [asUser] Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
     * @param {String} [attachments] A JSON-based array of structured attachments, presented as a URL-encoded string.
     * @param {String} [blocks] A JSON-based array of structured blocks, presented as a URL-encoded string.
     * @param {String} [iconEmoji] Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
     * @param {String} [iconUrl] URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * @param {Boolean} [linkNames] Find and link channel names and usernames.
     * @param {Boolean} [mrkdwn] Disable Slack markup parsing by setting to `false`. Enabled by default.
     * @param {String} [parse] Change how messages are treated. Defaults to `none`. See [below](#formatting).
     * @param {Boolean} [replyBroadcast] Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
     * @param {String} [text] How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     * @param {String} [threadTs] Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
     * @param {Boolean} [unfurlLinks] Pass true to enable unfurling of primarily text-based content.
     * @param {Boolean} [unfurlMedia] Pass false to disable unfurling of media content.
     * @param {String} [username] Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     * @param {module:api/ChatApi~chatPostMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatPostMessageSuccessSchema}
     */
    chatPostMessage(token, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatPostMessage");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatPostMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'as_user': opts['asUser'],
        'attachments': opts['attachments'],
        'blocks': opts['blocks'],
        'channel': channel,
        'icon_emoji': opts['iconEmoji'],
        'icon_url': opts['iconUrl'],
        'link_names': opts['linkNames'],
        'mrkdwn': opts['mrkdwn'],
        'parse': opts['parse'],
        'reply_broadcast': opts['replyBroadcast'],
        'text': opts['text'],
        'thread_ts': opts['threadTs'],
        'unfurl_links': opts['unfurlLinks'],
        'unfurl_media': opts['unfurlMedia'],
        'username': opts['username']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatPostMessageSuccessSchema;
      return this.apiClient.callApi(
        '/chat.postMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatScheduleMessage operation.
     * @callback module:api/ChatApi~chatScheduleMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatScheduleMessageSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a message to be sent to a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `chat:write`
     * @param {Boolean} [asUser] Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
     * @param {String} [attachments] A JSON-based array of structured attachments, presented as a URL-encoded string.
     * @param {String} [blocks] A JSON-based array of structured blocks, presented as a URL-encoded string.
     * @param {String} [channel] Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * @param {Boolean} [linkNames] Find and link channel names and usernames.
     * @param {String} [parse] Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).
     * @param {String} [postAt] Unix EPOCH timestamp of time in future to send the message.
     * @param {Boolean} [replyBroadcast] Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
     * @param {String} [text] How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     * @param {Number} [threadTs] Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
     * @param {Boolean} [unfurlLinks] Pass true to enable unfurling of primarily text-based content.
     * @param {Boolean} [unfurlMedia] Pass false to disable unfurling of media content.
     * @param {module:api/ChatApi~chatScheduleMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatScheduleMessageSuccessSchema}
     */
    chatScheduleMessage(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'as_user': opts['asUser'],
        'attachments': opts['attachments'],
        'blocks': opts['blocks'],
        'channel': opts['channel'],
        'link_names': opts['linkNames'],
        'parse': opts['parse'],
        'post_at': opts['postAt'],
        'reply_broadcast': opts['replyBroadcast'],
        'text': opts['text'],
        'thread_ts': opts['threadTs'],
        'unfurl_links': opts['unfurlLinks'],
        'unfurl_media': opts['unfurlMedia']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatScheduleMessageSuccessSchema;
      return this.apiClient.callApi(
        '/chat.scheduleMessage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatScheduledMessagesList_0 operation.
     * @callback module:api/ChatApi~chatScheduledMessagesList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatScheduledMessagesListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of scheduled messages.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `none`
     * @param {String} [channel] The channel of the scheduled messages
     * @param {Number} [latest] A UNIX timestamp of the latest value in the time range
     * @param {Number} [oldest] A UNIX timestamp of the oldest value in the time range
     * @param {Number} [limit] Maximum number of original entries to return.
     * @param {String} [cursor] For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
     * @param {module:api/ChatApi~chatScheduledMessagesList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatScheduledMessagesListSchema}
     */
    chatScheduledMessagesList_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'channel': opts['channel'],
        'latest': opts['latest'],
        'oldest': opts['oldest'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChatScheduledMessagesListSchema;
      return this.apiClient.callApi(
        '/chat.scheduledMessages.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatUnfurl operation.
     * @callback module:api/ChatApi~chatUnfurlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatUnfurlSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provide custom unfurl behavior for user-posted URLs
     * @param {String} token Authentication token. Requires scope: `links:write`
     * @param {String} channel Channel ID of the message
     * @param {String} ts Timestamp of the message to add unfurl behavior to.
     * @param {Object} opts Optional parameters
     * @param {String} [unfurls] URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
     * @param {String} [userAuthMessage] Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
     * @param {Boolean} [userAuthRequired] Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
     * @param {String} [userAuthUrl] Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
     * @param {module:api/ChatApi~chatUnfurlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatUnfurlSuccessSchema}
     */
    chatUnfurl(token, channel, ts, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatUnfurl");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatUnfurl");
      }
      // verify the required parameter 'ts' is set
      if (ts === undefined || ts === null) {
        throw new Error("Missing the required parameter 'ts' when calling chatUnfurl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': channel,
        'ts': ts,
        'unfurls': opts['unfurls'],
        'user_auth_message': opts['userAuthMessage'],
        'user_auth_required': opts['userAuthRequired'],
        'user_auth_url': opts['userAuthUrl']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatUnfurlSuccessSchema;
      return this.apiClient.callApi(
        '/chat.unfurl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chatUpdate operation.
     * @callback module:api/ChatApi~chatUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatUpdateSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a message.
     * @param {String} token Authentication token. Requires scope: `chat:write`
     * @param {String} channel Channel containing the message to be updated.
     * @param {String} ts Timestamp of the message to be updated.
     * @param {Object} opts Optional parameters
     * @param {String} [asUser] Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
     * @param {String} [attachments] A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
     * @param {String} [blocks] A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
     * @param {String} [linkNames] Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
     * @param {String} [parse] Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
     * @param {String} [text] New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
     * @param {module:api/ChatApi~chatUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatUpdateSuccessSchema}
     */
    chatUpdate(token, channel, ts, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling chatUpdate");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling chatUpdate");
      }
      // verify the required parameter 'ts' is set
      if (ts === undefined || ts === null) {
        throw new Error("Missing the required parameter 'ts' when calling chatUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'as_user': opts['asUser'],
        'attachments': opts['attachments'],
        'blocks': opts['blocks'],
        'channel': channel,
        'link_names': opts['linkNames'],
        'parse': opts['parse'],
        'text': opts['text'],
        'ts': ts
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ChatUpdateSuccessSchema;
      return this.apiClient.callApi(
        '/chat.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
