/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsergroupsUsersListErrorSchema from '../model/UsergroupsUsersListErrorSchema';
import UsergroupsUsersListSchema from '../model/UsergroupsUsersListSchema';
import UsergroupsUsersUpdateErrorSchema from '../model/UsergroupsUsersUpdateErrorSchema';
import UsergroupsUsersUpdateSchema from '../model/UsergroupsUsersUpdateSchema';

/**
* UsergroupsUsers service.
* @module api/UsergroupsUsersApi
* @version 1.7.0
*/
export default class UsergroupsUsersApi {

    /**
    * Constructs a new UsergroupsUsersApi. 
    * @alias module:api/UsergroupsUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usergroupsUsersList operation.
     * @callback module:api/UsergroupsUsersApi~usergroupsUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsUsersListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users in a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:read`
     * @param {String} usergroup The encoded ID of the User Group to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDisabled] Allow results that involve disabled User Groups.
     * @param {module:api/UsergroupsUsersApi~usergroupsUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsUsersListSchema}
     */
    usergroupsUsersList(token, usergroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsUsersList");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsUsersList");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'include_disabled': opts['includeDisabled'],
        'usergroup': usergroup
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsergroupsUsersListSchema;
      return this.apiClient.callApi(
        '/usergroups.users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsUsersUpdate operation.
     * @callback module:api/UsergroupsUsersApi~usergroupsUsersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsUsersUpdateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the list of users for a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} usergroup The encoded ID of the User Group to update.
     * @param {String} users A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCount] Include the number of users in the User Group.
     * @param {module:api/UsergroupsUsersApi~usergroupsUsersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsUsersUpdateSchema}
     */
    usergroupsUsersUpdate(token, usergroup, users, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsUsersUpdate");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsUsersUpdate");
      }
      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling usergroupsUsersUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'include_count': opts['includeCount'],
        'usergroup': usergroup,
        'users': users
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsUsersUpdateSchema;
      return this.apiClient.callApi(
        '/usergroups.users.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
