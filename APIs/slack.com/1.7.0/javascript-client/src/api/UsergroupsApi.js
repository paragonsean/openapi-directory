/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsergroupsCreateErrorSchema from '../model/UsergroupsCreateErrorSchema';
import UsergroupsCreateSchema from '../model/UsergroupsCreateSchema';
import UsergroupsDisableErrorSchema from '../model/UsergroupsDisableErrorSchema';
import UsergroupsDisableSchema from '../model/UsergroupsDisableSchema';
import UsergroupsEnableErrorSchema from '../model/UsergroupsEnableErrorSchema';
import UsergroupsEnableSchema from '../model/UsergroupsEnableSchema';
import UsergroupsListErrorSchema from '../model/UsergroupsListErrorSchema';
import UsergroupsListSchema from '../model/UsergroupsListSchema';
import UsergroupsUpdateErrorSchema from '../model/UsergroupsUpdateErrorSchema';
import UsergroupsUpdateSchema from '../model/UsergroupsUpdateSchema';
import UsergroupsUsersListErrorSchema from '../model/UsergroupsUsersListErrorSchema';
import UsergroupsUsersListSchema from '../model/UsergroupsUsersListSchema';
import UsergroupsUsersUpdateErrorSchema from '../model/UsergroupsUsersUpdateErrorSchema';
import UsergroupsUsersUpdateSchema from '../model/UsergroupsUsersUpdateSchema';

/**
* Usergroups service.
* @module api/UsergroupsApi
* @version 1.7.0
*/
export default class UsergroupsApi {

    /**
    * Constructs a new UsergroupsApi. 
    * @alias module:api/UsergroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usergroupsCreate operation.
     * @callback module:api/UsergroupsApi~usergroupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsCreateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} name A name for the User Group. Must be unique among User Groups.
     * @param {Object} opts Optional parameters
     * @param {String} [channels] A comma separated string of encoded channel IDs for which the User Group uses as a default.
     * @param {String} [description] A short description of the User Group.
     * @param {String} [handle] A mention handle. Must be unique among channels, users and User Groups.
     * @param {Boolean} [includeCount] Include the number of users in each User Group.
     * @param {module:api/UsergroupsApi~usergroupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsCreateSchema}
     */
    usergroupsCreate(token, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling usergroupsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channels': opts['channels'],
        'description': opts['description'],
        'handle': opts['handle'],
        'include_count': opts['includeCount'],
        'name': name
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsCreateSchema;
      return this.apiClient.callApi(
        '/usergroups.create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsDisable operation.
     * @callback module:api/UsergroupsApi~usergroupsDisableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsDisableSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an existing User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} usergroup The encoded ID of the User Group to disable.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCount] Include the number of users in the User Group.
     * @param {module:api/UsergroupsApi~usergroupsDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsDisableSchema}
     */
    usergroupsDisable(token, usergroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsDisable");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsDisable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'include_count': opts['includeCount'],
        'usergroup': usergroup
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsDisableSchema;
      return this.apiClient.callApi(
        '/usergroups.disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsEnable operation.
     * @callback module:api/UsergroupsApi~usergroupsEnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsEnableSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} usergroup The encoded ID of the User Group to enable.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCount] Include the number of users in the User Group.
     * @param {module:api/UsergroupsApi~usergroupsEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsEnableSchema}
     */
    usergroupsEnable(token, usergroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsEnable");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsEnable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'include_count': opts['includeCount'],
        'usergroup': usergroup
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsEnableSchema;
      return this.apiClient.callApi(
        '/usergroups.enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsList operation.
     * @callback module:api/UsergroupsApi~usergroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all User Groups for a team
     * @param {String} token Authentication token. Requires scope: `usergroups:read`
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeUsers] Include the list of users for each User Group.
     * @param {Boolean} [includeCount] Include the number of users in each User Group.
     * @param {Boolean} [includeDisabled] Include disabled User Groups.
     * @param {module:api/UsergroupsApi~usergroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsListSchema}
     */
    usergroupsList(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'include_users': opts['includeUsers'],
        'token': token,
        'include_count': opts['includeCount'],
        'include_disabled': opts['includeDisabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsergroupsListSchema;
      return this.apiClient.callApi(
        '/usergroups.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsUpdate operation.
     * @callback module:api/UsergroupsApi~usergroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsUpdateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} usergroup The encoded ID of the User Group to update.
     * @param {Object} opts Optional parameters
     * @param {String} [channels] A comma separated string of encoded channel IDs for which the User Group uses as a default.
     * @param {String} [description] A short description of the User Group.
     * @param {String} [handle] A mention handle. Must be unique among channels, users and User Groups.
     * @param {Boolean} [includeCount] Include the number of users in the User Group.
     * @param {String} [name] A name for the User Group. Must be unique among User Groups.
     * @param {module:api/UsergroupsApi~usergroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsUpdateSchema}
     */
    usergroupsUpdate(token, usergroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsUpdate");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channels': opts['channels'],
        'description': opts['description'],
        'handle': opts['handle'],
        'include_count': opts['includeCount'],
        'name': opts['name'],
        'usergroup': usergroup
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsUpdateSchema;
      return this.apiClient.callApi(
        '/usergroups.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsUsersList_0 operation.
     * @callback module:api/UsergroupsApi~usergroupsUsersList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsUsersListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all users in a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:read`
     * @param {String} usergroup The encoded ID of the User Group to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDisabled] Allow results that involve disabled User Groups.
     * @param {module:api/UsergroupsApi~usergroupsUsersList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsUsersListSchema}
     */
    usergroupsUsersList_0(token, usergroup, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsUsersList_0");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsUsersList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'include_disabled': opts['includeDisabled'],
        'usergroup': usergroup
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsergroupsUsersListSchema;
      return this.apiClient.callApi(
        '/usergroups.users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usergroupsUsersUpdate_0 operation.
     * @callback module:api/UsergroupsApi~usergroupsUsersUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UsergroupsUsersUpdateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the list of users for a User Group
     * @param {String} token Authentication token. Requires scope: `usergroups:write`
     * @param {String} usergroup The encoded ID of the User Group to update.
     * @param {String} users A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeCount] Include the number of users in the User Group.
     * @param {module:api/UsergroupsApi~usergroupsUsersUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsergroupsUsersUpdateSchema}
     */
    usergroupsUsersUpdate_0(token, usergroup, users, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usergroupsUsersUpdate_0");
      }
      // verify the required parameter 'usergroup' is set
      if (usergroup === undefined || usergroup === null) {
        throw new Error("Missing the required parameter 'usergroup' when calling usergroupsUsersUpdate_0");
      }
      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling usergroupsUsersUpdate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'include_count': opts['includeCount'],
        'usergroup': usergroup,
        'users': users
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsergroupsUsersUpdateSchema;
      return this.apiClient.callApi(
        '/usergroups.users.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
