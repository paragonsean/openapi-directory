/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReactionsAddErrorSchema from '../model/ReactionsAddErrorSchema';
import ReactionsAddSchema from '../model/ReactionsAddSchema';
import ReactionsGetErrorSchema from '../model/ReactionsGetErrorSchema';
import ReactionsGetSuccessSchemaInner from '../model/ReactionsGetSuccessSchemaInner';
import ReactionsListErrorSchema from '../model/ReactionsListErrorSchema';
import ReactionsListSchema from '../model/ReactionsListSchema';
import ReactionsRemoveErrorSchema from '../model/ReactionsRemoveErrorSchema';
import ReactionsRemoveSchema from '../model/ReactionsRemoveSchema';

/**
* Reactions service.
* @module api/ReactionsApi
* @version 1.7.0
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reactionsAdd operation.
     * @callback module:api/ReactionsApi~reactionsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionsAddSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a reaction to an item.
     * @param {String} token Authentication token. Requires scope: `reactions:write`
     * @param {String} channel Channel where the message to add reaction to was posted.
     * @param {String} name Reaction (emoji) name.
     * @param {String} timestamp Timestamp of the message to add reaction to.
     * @param {module:api/ReactionsApi~reactionsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionsAddSchema}
     */
    reactionsAdd(token, channel, name, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reactionsAdd");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling reactionsAdd");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling reactionsAdd");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling reactionsAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': channel,
        'name': name,
        'timestamp': timestamp
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ReactionsAddSchema;
      return this.apiClient.callApi(
        '/reactions.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsGet operation.
     * @callback module:api/ReactionsApi~reactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReactionsGetSuccessSchemaInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets reactions for an item.
     * @param {String} token Authentication token. Requires scope: `reactions:read`
     * @param {Object} opts Optional parameters
     * @param {String} [channel] Channel where the message to get reactions for was posted.
     * @param {String} [file] File to get reactions for.
     * @param {String} [fileComment] File comment to get reactions for.
     * @param {Boolean} [full] If true always return the complete reaction list.
     * @param {String} [timestamp] Timestamp of the message to get reactions for.
     * @param {module:api/ReactionsApi~reactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReactionsGetSuccessSchemaInner>}
     */
    reactionsGet(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reactionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel': opts['channel'],
        'file': opts['file'],
        'file_comment': opts['fileComment'],
        'full': opts['full'],
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReactionsGetSuccessSchemaInner];
      return this.apiClient.callApi(
        '/reactions.get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsList operation.
     * @callback module:api/ReactionsApi~reactionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionsListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists reactions made by a user.
     * @param {String} token Authentication token. Requires scope: `reactions:read`
     * @param {Object} opts Optional parameters
     * @param {String} [user] Show reactions made by this user. Defaults to the authed user.
     * @param {Boolean} [full] If true always return the complete reaction list.
     * @param {Number} [count] 
     * @param {Number} [page] 
     * @param {String} [cursor] Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
     * @param {module:api/ReactionsApi~reactionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionsListSchema}
     */
    reactionsList(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reactionsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user'],
        'full': opts['full'],
        'count': opts['count'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReactionsListSchema;
      return this.apiClient.callApi(
        '/reactions.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactionsRemove operation.
     * @callback module:api/ReactionsApi~reactionsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionsRemoveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a reaction from an item.
     * @param {String} token Authentication token. Requires scope: `reactions:write`
     * @param {String} name Reaction (emoji) name.
     * @param {Object} opts Optional parameters
     * @param {String} [channel] Channel where the message to remove reaction from was posted.
     * @param {String} [file] File to remove reaction from.
     * @param {String} [fileComment] File comment to remove reaction from.
     * @param {String} [timestamp] Timestamp of the message to remove reaction from.
     * @param {module:api/ReactionsApi~reactionsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionsRemoveSchema}
     */
    reactionsRemove(token, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling reactionsRemove");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling reactionsRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': opts['channel'],
        'file': opts['file'],
        'file_comment': opts['fileComment'],
        'name': name,
        'timestamp': opts['timestamp']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ReactionsRemoveSchema;
      return this.apiClient.callApi(
        '/reactions.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
