/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminUsers service.
* @module api/AdminUsersApi
* @version 1.7.0
*/
export default class AdminUsersApi {

    /**
    * Constructs a new AdminUsersApi. 
    * @alias module:api/AdminUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminUsersAssign operation.
     * @callback module:api/AdminUsersApi~adminUsersAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Enterprise user to a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to add to the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [channelIds] Comma separated values of channel IDs to add user in the new workspace.
     * @param {Boolean} [isRestricted] True if user should be added to the workspace as a guest.
     * @param {Boolean} [isUltraRestricted] True if user should be added to the workspace as a single-channel guest.
     * @param {module:api/AdminUsersApi~adminUsersAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersAssign(token, teamId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersAssign");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersAssign");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersAssign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': opts['channelIds'],
        'is_restricted': opts['isRestricted'],
        'is_ultra_restricted': opts['isUltraRestricted'],
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.assign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersInvite operation.
     * @callback module:api/AdminUsersApi~adminUsersInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a user to a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} channelIds A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
     * @param {String} email The email address of the person to invite.
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [customMessage] An optional message to send to the user in the invite email.
     * @param {String} [guestExpirationTs] Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
     * @param {Boolean} [isRestricted] Is this user a multi-channel guest user? (default: false)
     * @param {Boolean} [isUltraRestricted] Is this user a single channel guest user? (default: false)
     * @param {String} [realName] Full name of the user.
     * @param {Boolean} [resend] Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
     * @param {module:api/AdminUsersApi~adminUsersInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersInvite(token, channelIds, email, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersInvite");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsersInvite");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling adminUsersInvite");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersInvite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'custom_message': opts['customMessage'],
        'email': email,
        'guest_expiration_ts': opts['guestExpirationTs'],
        'is_restricted': opts['isRestricted'],
        'is_ultra_restricted': opts['isUltraRestricted'],
        'real_name': opts['realName'],
        'resend': opts['resend'],
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersList operation.
     * @callback module:api/AdminUsersApi~adminUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users on a workspace
     * @param {String} token Authentication token. Requires scope: `admin.users:read`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {Number} [limit] Limit for how many users to be retrieved per page
     * @param {module:api/AdminUsersApi~adminUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersList(token, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersList");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersList");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': teamId,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersRemove operation.
     * @callback module:api/AdminUsersApi~adminUsersRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to remove.
     * @param {module:api/AdminUsersApi~adminUsersRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersRemove(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersRemove");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersRemove");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetAdmin operation.
     * @callback module:api/AdminUsersApi~adminUsersSetAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to designate as an admin.
     * @param {module:api/AdminUsersApi~adminUsersSetAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetAdmin(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetAdmin");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetAdmin");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetAdmin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetExpiration operation.
     * @callback module:api/AdminUsersApi~adminUsersSetExpirationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an expiration for a guest user
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {Number} expirationTs Timestamp when guest account should be disabled.
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to set an expiration for.
     * @param {module:api/AdminUsersApi~adminUsersSetExpirationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetExpiration(token, expirationTs, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetExpiration");
      }
      // verify the required parameter 'expirationTs' is set
      if (expirationTs === undefined || expirationTs === null) {
        throw new Error("Missing the required parameter 'expirationTs' when calling adminUsersSetExpiration");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetExpiration");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetExpiration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'expiration_ts': expirationTs,
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setExpiration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetOwner operation.
     * @callback module:api/AdminUsersApi~adminUsersSetOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId Id of the user to promote to owner.
     * @param {module:api/AdminUsersApi~adminUsersSetOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetOwner(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetOwner");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetOwner");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetOwner");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setOwner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetRegular operation.
     * @callback module:api/AdminUsersApi~adminUsersSetRegularCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to designate as a regular user.
     * @param {module:api/AdminUsersApi~adminUsersSetRegularCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetRegular(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetRegular");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetRegular");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetRegular");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setRegular', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
