/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminTeamsSettings service.
* @module api/AdminTeamsSettingsApi
* @version 1.7.0
*/
export default class AdminTeamsSettingsApi {

    /**
    * Constructs a new AdminTeamsSettingsApi. 
    * @alias module:api/AdminTeamsSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminTeamsSettingsInfo operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch information about settings in a workspace
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {String} teamId 
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsInfo(token, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsInfo");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': teamId
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDefaultChannels operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDefaultChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default channels of a workspace.
     * @param {String} channelIds An array of channel IDs.
     * @param {String} teamId ID for the workspace to set the default channel for.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDefaultChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDefaultChannels(channelIds, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminTeamsSettingsSetDefaultChannels");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDefaultChannels");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDefaultChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_ids': channelIds,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDefaultChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDescription operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the description of a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} description The new description for the workspace.
     * @param {String} teamId ID for the workspace to set the description for.
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDescription(token, description, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDescription");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling adminTeamsSettingsSetDescription");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDescription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'description': description,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDescription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDiscoverability operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDiscoverabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An API method that allows admins to set the discoverability of a given workspace
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} discoverability This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
     * @param {String} teamId The ID of the workspace to set discoverability on.
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetDiscoverabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDiscoverability(token, discoverability, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDiscoverability");
      }
      // verify the required parameter 'discoverability' is set
      if (discoverability === undefined || discoverability === null) {
        throw new Error("Missing the required parameter 'discoverability' when calling adminTeamsSettingsSetDiscoverability");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDiscoverability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'discoverability': discoverability,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDiscoverability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetIcon operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetIconCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the icon of a workspace.
     * @param {String} imageUrl Image URL for the icon
     * @param {String} teamId ID for the workspace to set the icon for.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetIconCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetIcon(imageUrl, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling adminTeamsSettingsSetIcon");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetIcon");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetIcon");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image_url': imageUrl,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setIcon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetName operation.
     * @callback module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the name of a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} name The new name of the workspace.
     * @param {String} teamId ID for the workspace to set the name for.
     * @param {module:api/AdminTeamsSettingsApi~adminTeamsSettingsSetNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetName(token, name, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminTeamsSettingsSetName");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'name': name,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
