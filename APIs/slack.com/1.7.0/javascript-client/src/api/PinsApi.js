/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PinsAddErrorSchema from '../model/PinsAddErrorSchema';
import PinsAddSchema from '../model/PinsAddSchema';
import PinsListErrorSchema from '../model/PinsListErrorSchema';
import PinsListSuccessSchemaInner from '../model/PinsListSuccessSchemaInner';
import PinsRemoveErrorSchema from '../model/PinsRemoveErrorSchema';
import PinsRemoveSchema from '../model/PinsRemoveSchema';

/**
* Pins service.
* @module api/PinsApi
* @version 1.7.0
*/
export default class PinsApi {

    /**
    * Constructs a new PinsApi. 
    * @alias module:api/PinsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pinsAdd operation.
     * @callback module:api/PinsApi~pinsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinsAddSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pins an item to a channel.
     * @param {String} token Authentication token. Requires scope: `pins:write`
     * @param {String} channel Channel to pin the item in.
     * @param {Object} opts Optional parameters
     * @param {String} [timestamp] Timestamp of the message to pin.
     * @param {module:api/PinsApi~pinsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinsAddSchema}
     */
    pinsAdd(token, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling pinsAdd");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling pinsAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': channel,
        'timestamp': opts['timestamp']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PinsAddSchema;
      return this.apiClient.callApi(
        '/pins.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsList operation.
     * @callback module:api/PinsApi~pinsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PinsListSuccessSchemaInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists items pinned to a channel.
     * @param {String} token Authentication token. Requires scope: `pins:read`
     * @param {String} channel Channel to get pinned items for.
     * @param {module:api/PinsApi~pinsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PinsListSuccessSchemaInner>}
     */
    pinsList(token, channel, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling pinsList");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling pinsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel': channel
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PinsListSuccessSchemaInner];
      return this.apiClient.callApi(
        '/pins.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinsRemove operation.
     * @callback module:api/PinsApi~pinsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinsRemoveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Un-pins an item from a channel.
     * @param {String} token Authentication token. Requires scope: `pins:write`
     * @param {String} channel Channel where the item is pinned to.
     * @param {Object} opts Optional parameters
     * @param {String} [timestamp] Timestamp of the message to un-pin.
     * @param {module:api/PinsApi~pinsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinsRemoveSchema}
     */
    pinsRemove(token, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling pinsRemove");
      }
      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling pinsRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': channel,
        'timestamp': opts['timestamp']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = PinsRemoveSchema;
      return this.apiClient.callApi(
        '/pins.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
