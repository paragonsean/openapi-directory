/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* FilesRemote service.
* @module api/FilesRemoteApi
* @version 1.7.0
*/
export default class FilesRemoteApi {

    /**
    * Constructs a new FilesRemoteApi. 
    * @alias module:api/FilesRemoteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filesRemoteAdd operation.
     * @callback module:api/FilesRemoteApi~filesRemoteAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a file from a remote service
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [externalUrl] URL of the remote file.
     * @param {String} [filetype] type of file
     * @param {String} [indexableFileContents] A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
     * @param {String} [previewImage] Preview of the document via `multipart/form-data`.
     * @param {String} [title] Title of the file being shared.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesRemoteApi~filesRemoteAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteAdd(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'external_url': opts['externalUrl'],
        'filetype': opts['filetype'],
        'indexable_file_contents': opts['indexableFileContents'],
        'preview_image': opts['previewImage'],
        'title': opts['title'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteInfo operation.
     * @callback module:api/FilesRemoteApi~filesRemoteInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a remote file added to Slack
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:read`
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {module:api/FilesRemoteApi~filesRemoteInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'file': opts['file'],
        'external_id': opts['externalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteList operation.
     * @callback module:api/FilesRemoteApi~filesRemoteListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a remote file added to Slack
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:read`
     * @param {String} [channel] Filter files appearing in a specific channel, indicated by its ID.
     * @param {Number} [tsFrom] Filter files created after this timestamp (inclusive).
     * @param {Number} [tsTo] Filter files created before this timestamp (inclusive).
     * @param {Number} [limit] The maximum number of items to return.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/FilesRemoteApi~filesRemoteListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'ts_from': opts['tsFrom'],
        'ts_to': opts['tsTo'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteRemove operation.
     * @callback module:api/FilesRemoteApi~filesRemoteRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a remote file.
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesRemoteApi~filesRemoteRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteRemove(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'file': opts['file'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteShare operation.
     * @callback module:api/FilesRemoteApi~filesRemoteShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a remote file into a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `remote_files:share`
     * @param {String} [file] Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.
     * @param {String} [externalId] The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.
     * @param {String} [channels] Comma-separated list of channel IDs where the file will be shared.
     * @param {module:api/FilesRemoteApi~filesRemoteShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteShare(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'file': opts['file'],
        'external_id': opts['externalId'],
        'channels': opts['channels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filesRemoteUpdate operation.
     * @callback module:api/FilesRemoteApi~filesRemoteUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing remote file.
     * @param {Object} opts Optional parameters
     * @param {String} [externalId] Creator defined GUID for the file.
     * @param {String} [externalUrl] URL of the remote file.
     * @param {String} [file] Specify a file by providing its ID.
     * @param {String} [filetype] type of file
     * @param {String} [indexableFileContents] File containing contents that can be used to improve searchability for the remote file.
     * @param {String} [previewImage] Preview of the document via `multipart/form-data`.
     * @param {String} [title] Title of the file being shared.
     * @param {String} [token] Authentication token. Requires scope: `remote_files:write`
     * @param {module:api/FilesRemoteApi~filesRemoteUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    filesRemoteUpdate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_id': opts['externalId'],
        'external_url': opts['externalUrl'],
        'file': opts['file'],
        'filetype': opts['filetype'],
        'indexable_file_contents': opts['indexableFileContents'],
        'preview_image': opts['previewImage'],
        'title': opts['title'],
        'token': opts['token']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/files.remote.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
