/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BotsInfoErrorSchema from '../model/BotsInfoErrorSchema';
import BotsInfoSchema from '../model/BotsInfoSchema';

/**
* Bots service.
* @module api/BotsApi
* @version 1.7.0
*/
export default class BotsApi {

    /**
    * Constructs a new BotsApi. 
    * @alias module:api/BotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the botsInfo operation.
     * @callback module:api/BotsApi~botsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BotsInfoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a bot user.
     * @param {String} token Authentication token. Requires scope: `users:read`
     * @param {Object} opts Optional parameters
     * @param {String} [bot] Bot user to get info on
     * @param {module:api/BotsApi~botsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BotsInfoSchema}
     */
    botsInfo(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling botsInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'bot': opts['bot']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BotsInfoSchema;
      return this.apiClient.callApi(
        '/bots.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
