/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminConversationsArchiveErrorSchema from '../model/AdminConversationsArchiveErrorSchema';
import AdminConversationsArchiveSchema from '../model/AdminConversationsArchiveSchema';
import AdminConversationsConvertToPrivateErrorSchema from '../model/AdminConversationsConvertToPrivateErrorSchema';
import AdminConversationsConvertToPrivateSchema from '../model/AdminConversationsConvertToPrivateSchema';
import AdminConversationsCreateErrorSchema from '../model/AdminConversationsCreateErrorSchema';
import AdminConversationsCreateSchema from '../model/AdminConversationsCreateSchema';
import AdminConversationsDeleteErrorSchema from '../model/AdminConversationsDeleteErrorSchema';
import AdminConversationsDeleteSchema from '../model/AdminConversationsDeleteSchema';
import AdminConversationsDisconnectSharedErrorSchema from '../model/AdminConversationsDisconnectSharedErrorSchema';
import AdminConversationsGetConversationPrefsSchema from '../model/AdminConversationsGetConversationPrefsSchema';
import AdminConversationsGetTeamsErrorSchema from '../model/AdminConversationsGetTeamsErrorSchema';
import AdminConversationsGetTeamsSchema from '../model/AdminConversationsGetTeamsSchema';
import AdminConversationsInviteErrorSchema from '../model/AdminConversationsInviteErrorSchema';
import AdminConversationsInviteSchema from '../model/AdminConversationsInviteSchema';
import AdminConversationsRenameSchema from '../model/AdminConversationsRenameSchema';
import AdminConversationsRenameSchema1 from '../model/AdminConversationsRenameSchema1';
import AdminConversationsSearchErrorSchema from '../model/AdminConversationsSearchErrorSchema';
import AdminConversationsSearchSchema from '../model/AdminConversationsSearchSchema';
import AdminConversationsSetConversationPrefsErrorSchema from '../model/AdminConversationsSetConversationPrefsErrorSchema';
import AdminConversationsSetConversationPrefsSchema from '../model/AdminConversationsSetConversationPrefsSchema';
import AdminConversationsUnarchiveErrorSchema from '../model/AdminConversationsUnarchiveErrorSchema';
import AdminConversationsUnarchiveErrorSchema1 from '../model/AdminConversationsUnarchiveErrorSchema1';
import AdminConversationsUnarchiveErrorSchema2 from '../model/AdminConversationsUnarchiveErrorSchema2';
import AdminConversationsUnarchiveSchema from '../model/AdminConversationsUnarchiveSchema';
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* Admin service.
* @module api/AdminApi
* @version 1.7.0
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminAppsApprove_0 operation.
     * @callback module:api/AdminApi~adminAppsApprove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve an app for installation on a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.apps:write`
     * @param {Object} opts Optional parameters
     * @param {String} [appId] The id of the app to approve.
     * @param {String} [requestId] The id of the request to approve.
     * @param {String} [teamId] 
     * @param {module:api/AdminApi~adminAppsApprove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminAppsApprove_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminAppsApprove_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'app_id': opts['appId'],
        'request_id': opts['requestId'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.apps.approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAppsApprovedList_0 operation.
     * @callback module:api/AdminApi~adminAppsApprovedList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List approved apps for an org or workspace.
     * @param {String} token Authentication token. Requires scope: `admin.apps:read`
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {String} [teamId] 
     * @param {String} [enterpriseId] 
     * @param {module:api/AdminApi~adminAppsApprovedList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminAppsApprovedList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminAppsApprovedList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'team_id': opts['teamId'],
        'enterprise_id': opts['enterpriseId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.apps.approved.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAppsRequestsList_0 operation.
     * @callback module:api/AdminApi~adminAppsRequestsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List app requests for a team/workspace.
     * @param {String} token Authentication token. Requires scope: `admin.apps:read`
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {String} [teamId] 
     * @param {module:api/AdminApi~adminAppsRequestsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminAppsRequestsList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminAppsRequestsList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'team_id': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.apps.requests.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAppsRestrict_0 operation.
     * @callback module:api/AdminApi~adminAppsRestrict_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restrict an app for installation on a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.apps:write`
     * @param {Object} opts Optional parameters
     * @param {String} [appId] The id of the app to restrict.
     * @param {String} [requestId] The id of the request to restrict.
     * @param {String} [teamId] 
     * @param {module:api/AdminApi~adminAppsRestrict_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminAppsRestrict_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminAppsRestrict_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'app_id': opts['appId'],
        'request_id': opts['requestId'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.apps.restrict', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAppsRestrictedList_0 operation.
     * @callback module:api/AdminApi~adminAppsRestrictedList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List restricted apps for an org or workspace.
     * @param {String} token Authentication token. Requires scope: `admin.apps:read`
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {String} [teamId] 
     * @param {String} [enterpriseId] 
     * @param {module:api/AdminApi~adminAppsRestrictedList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminAppsRestrictedList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminAppsRestrictedList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'team_id': opts['teamId'],
        'enterprise_id': opts['enterpriseId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.apps.restricted.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsArchive_0 operation.
     * @callback module:api/AdminApi~adminConversationsArchive_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsArchiveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to archive.
     * @param {module:api/AdminApi~adminConversationsArchive_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsArchiveSchema}
     */
    adminConversationsArchive_0(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsArchive_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsArchive_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsArchiveSchema;
      return this.apiClient.callApi(
        '/admin.conversations.archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsConvertToPrivate_0 operation.
     * @callback module:api/AdminApi~adminConversationsConvertToPrivate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsConvertToPrivateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a public channel to a private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to convert to private.
     * @param {module:api/AdminApi~adminConversationsConvertToPrivate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsConvertToPrivateSchema}
     */
    adminConversationsConvertToPrivate_0(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsConvertToPrivate_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsConvertToPrivate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsConvertToPrivateSchema;
      return this.apiClient.callApi(
        '/admin.conversations.convertToPrivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsCreate_0 operation.
     * @callback module:api/AdminApi~adminConversationsCreate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsCreateSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a public or private channel-based conversation.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {Boolean} isPrivate When `true`, creates a private channel instead of a public channel
     * @param {String} name Name of the public or private channel to create.
     * @param {Object} opts Optional parameters
     * @param {String} [description] Description of the public or private channel to create.
     * @param {Boolean} [orgWide] When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
     * @param {String} [teamId] The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
     * @param {module:api/AdminApi~adminConversationsCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsCreateSchema}
     */
    adminConversationsCreate_0(token, isPrivate, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsCreate_0");
      }
      // verify the required parameter 'isPrivate' is set
      if (isPrivate === undefined || isPrivate === null) {
        throw new Error("Missing the required parameter 'isPrivate' when calling adminConversationsCreate_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminConversationsCreate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'description': opts['description'],
        'is_private': isPrivate,
        'name': name,
        'org_wide': opts['orgWide'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsCreateSchema;
      return this.apiClient.callApi(
        '/admin.conversations.create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsDelete_0 operation.
     * @callback module:api/AdminApi~adminConversationsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsDeleteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to delete.
     * @param {module:api/AdminApi~adminConversationsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsDeleteSchema}
     */
    adminConversationsDelete_0(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsDelete_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsDelete_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsDeleteSchema;
      return this.apiClient.callApi(
        '/admin.conversations.delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsDisconnectShared_0 operation.
     * @callback module:api/AdminApi~adminConversationsDisconnectShared_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsRenameSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnect a connected channel from one or more workspaces.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to be disconnected from some workspaces.
     * @param {Object} opts Optional parameters
     * @param {String} [leavingTeamIds] The team to be removed from the channel. Currently only a single team id can be specified.
     * @param {module:api/AdminApi~adminConversationsDisconnectShared_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsRenameSchema}
     */
    adminConversationsDisconnectShared_0(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsDisconnectShared_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsDisconnectShared_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'leaving_team_ids': opts['leavingTeamIds']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsRenameSchema;
      return this.apiClient.callApi(
        '/admin.conversations.disconnectShared', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsEkmListOriginalConnectedChannelInfo_0 operation.
     * @callback module:api/AdminApi~adminConversationsEkmListOriginalConnectedChannelInfo_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {Object} opts Optional parameters
     * @param {String} [channelIds] A comma-separated list of channels to filter to.
     * @param {String} [teamIds] A comma-separated list of the workspaces to which the channels you would like returned belong.
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {module:api/AdminApi~adminConversationsEkmListOriginalConnectedChannelInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsEkmListOriginalConnectedChannelInfo_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsEkmListOriginalConnectedChannelInfo_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel_ids': opts['channelIds'],
        'team_ids': opts['teamIds'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.ekm.listOriginalConnectedChannelInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsGetConversationPrefs_0 operation.
     * @callback module:api/AdminApi~adminConversationsGetConversationPrefs_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsGetConversationPrefsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get conversation preferences for a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId The channel to get preferences for.
     * @param {module:api/AdminApi~adminConversationsGetConversationPrefs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsGetConversationPrefsSchema}
     */
    adminConversationsGetConversationPrefs_0(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsGetConversationPrefs_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsGetConversationPrefs_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel_id': channelId
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsGetConversationPrefsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.getConversationPrefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsGetTeams_0 operation.
     * @callback module:api/AdminApi~adminConversationsGetTeams_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsGetTeamsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId The channel to determine connected workspaces within the organization for.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {module:api/AdminApi~adminConversationsGetTeams_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsGetTeamsSchema}
     */
    adminConversationsGetTeams_0(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsGetTeams_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsGetTeams_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'channel_id': channelId,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsGetTeamsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.getTeams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsInvite_0 operation.
     * @callback module:api/AdminApi~adminConversationsInvite_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsInviteSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a user to a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel that the users will be invited to.
     * @param {String} userIds The users to invite.
     * @param {module:api/AdminApi~adminConversationsInvite_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsInviteSchema}
     */
    adminConversationsInvite_0(token, channelId, userIds, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsInvite_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsInvite_0");
      }
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling adminConversationsInvite_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'user_ids': userIds
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsInviteSchema;
      return this.apiClient.callApi(
        '/admin.conversations.invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRename_0 operation.
     * @callback module:api/AdminApi~adminConversationsRename_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsRenameSchema1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to rename.
     * @param {String} name 
     * @param {module:api/AdminApi~adminConversationsRename_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsRenameSchema1}
     */
    adminConversationsRename_0(token, channelId, name, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRename_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRename_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminConversationsRename_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'name': name
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsRenameSchema1;
      return this.apiClient.callApi(
        '/admin.conversations.rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessAddGroup_0 operation.
     * @callback module:api/AdminApi~adminConversationsRestrictAccessAddGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an allowlist of IDP groups for accessing a channel
     * @param {String} channelId The channel to link this group to.
     * @param {String} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {module:api/AdminApi~adminConversationsRestrictAccessAddGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessAddGroup_0(channelId, groupId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessAddGroup_0");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling adminConversationsRestrictAccessAddGroup_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessAddGroup_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_id': channelId,
        'group_id': groupId,
        'team_id': opts['teamId'],
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.addGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessListGroups_0 operation.
     * @callback module:api/AdminApi~adminConversationsRestrictAccessListGroups_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all IDP Groups linked to a channel
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {module:api/AdminApi~adminConversationsRestrictAccessListGroups_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessListGroups_0(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessListGroups_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessListGroups_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'channel_id': channelId,
        'team_id': opts['teamId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.listGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsRestrictAccessRemoveGroup_0 operation.
     * @callback module:api/AdminApi~adminConversationsRestrictAccessRemoveGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a linked IDP group linked from a private channel
     * @param {String} channelId The channel to remove the linked group from.
     * @param {String} groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
     * @param {String} teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {module:api/AdminApi~adminConversationsRestrictAccessRemoveGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsRestrictAccessRemoveGroup_0(channelId, groupId, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsRestrictAccessRemoveGroup_0");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling adminConversationsRestrictAccessRemoveGroup_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminConversationsRestrictAccessRemoveGroup_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsRestrictAccessRemoveGroup_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_id': channelId,
        'group_id': groupId,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.restrictAccess.removeGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSearch_0 operation.
     * @callback module:api/AdminApi~adminConversationsSearch_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsSearchSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for public or private channels in an Enterprise organization.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:read`
     * @param {Object} opts Optional parameters
     * @param {String} [teamIds] Comma separated string of team IDs, signifying the workspaces to search through.
     * @param {String} [query] Name of the the channel to query by.
     * @param {Number} [limit] Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {String} [searchChannelTypes] The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
     * @param {String} [sort] Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
     * @param {String} [sortDir] Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
     * @param {module:api/AdminApi~adminConversationsSearch_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsSearchSchema}
     */
    adminConversationsSearch_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSearch_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_ids': opts['teamIds'],
        'query': opts['query'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'search_channel_types': opts['searchChannelTypes'],
        'sort': opts['sort'],
        'sort_dir': opts['sortDir']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminConversationsSearchSchema;
      return this.apiClient.callApi(
        '/admin.conversations.search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSetConversationPrefs_0 operation.
     * @callback module:api/AdminApi~adminConversationsSetConversationPrefs_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsSetConversationPrefsSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the posting permissions for a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to set the prefs for
     * @param {String} prefs The prefs for this channel in a stringified JSON format.
     * @param {module:api/AdminApi~adminConversationsSetConversationPrefs_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsSetConversationPrefsSchema}
     */
    adminConversationsSetConversationPrefs_0(token, channelId, prefs, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSetConversationPrefs_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsSetConversationPrefs_0");
      }
      // verify the required parameter 'prefs' is set
      if (prefs === undefined || prefs === null) {
        throw new Error("Missing the required parameter 'prefs' when calling adminConversationsSetConversationPrefs_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'prefs': prefs
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsSetConversationPrefsSchema;
      return this.apiClient.callApi(
        '/admin.conversations.setConversationPrefs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsSetTeams_0 operation.
     * @callback module:api/AdminApi~adminConversationsSetTeams_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The encoded `channel_id` to add or remove to workspaces.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [orgChannel] True if channel has to be converted to an org channel
     * @param {String} [targetTeamIds] A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
     * @param {String} [teamId] The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
     * @param {module:api/AdminApi~adminConversationsSetTeams_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminConversationsSetTeams_0(token, channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsSetTeams_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsSetTeams_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId,
        'org_channel': opts['orgChannel'],
        'target_team_ids': opts['targetTeamIds'],
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.conversations.setTeams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminConversationsUnarchive_0 operation.
     * @callback module:api/AdminApi~adminConversationsUnarchive_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminConversationsUnarchiveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive a public or private channel.
     * @param {String} token Authentication token. Requires scope: `admin.conversations:write`
     * @param {String} channelId The channel to unarchive.
     * @param {module:api/AdminApi~adminConversationsUnarchive_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminConversationsUnarchiveSchema}
     */
    adminConversationsUnarchive_0(token, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminConversationsUnarchive_0");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling adminConversationsUnarchive_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_id': channelId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AdminConversationsUnarchiveSchema;
      return this.apiClient.callApi(
        '/admin.conversations.unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiAddAlias_0 operation.
     * @callback module:api/AdminApi~adminEmojiAddAlias_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an emoji alias.
     * @param {String} aliasFor The alias of the emoji.
     * @param {String} name The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminApi~adminEmojiAddAlias_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiAddAlias_0(aliasFor, name, token, callback) {
      let postBody = null;
      // verify the required parameter 'aliasFor' is set
      if (aliasFor === undefined || aliasFor === null) {
        throw new Error("Missing the required parameter 'aliasFor' when calling adminEmojiAddAlias_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiAddAlias_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiAddAlias_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'alias_for': aliasFor,
        'name': name,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.addAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiAdd_0 operation.
     * @callback module:api/AdminApi~adminEmojiAdd_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an emoji.
     * @param {String} name The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
     * @param {module:api/AdminApi~adminEmojiAdd_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiAdd_0(name, token, url, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiAdd_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiAdd_0");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling adminEmojiAdd_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'token': token,
        'url': url
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiList_0 operation.
     * @callback module:api/AdminApi~adminEmojiList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List emoji for an Enterprise Grid organization.
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {module:api/AdminApi~adminEmojiList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiRemove_0 operation.
     * @callback module:api/AdminApi~adminEmojiRemove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an emoji across an Enterprise Grid organization
     * @param {String} name The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminApi~adminEmojiRemove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiRemove_0(name, token, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiRemove_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiRemove_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiRename_0 operation.
     * @callback module:api/AdminApi~adminEmojiRename_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename an emoji.
     * @param {String} name The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} newName The new name of the emoji.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminApi~adminEmojiRename_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiRename_0(name, newName, token, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiRename_0");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling adminEmojiRename_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiRename_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'new_name': newName,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminInviteRequestsApprove_0 operation.
     * @callback module:api/AdminApi~adminInviteRequestsApprove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a workspace invite request.
     * @param {String} token Authentication token. Requires scope: `admin.invites:write`
     * @param {String} inviteRequestId ID of the request to invite.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID for the workspace where the invite request was made.
     * @param {module:api/AdminApi~adminInviteRequestsApprove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminInviteRequestsApprove_0(token, inviteRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminInviteRequestsApprove_0");
      }
      // verify the required parameter 'inviteRequestId' is set
      if (inviteRequestId === undefined || inviteRequestId === null) {
        throw new Error("Missing the required parameter 'inviteRequestId' when calling adminInviteRequestsApprove_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'invite_request_id': inviteRequestId,
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.inviteRequests.approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminInviteRequestsApprovedList_0 operation.
     * @callback module:api/AdminApi~adminInviteRequestsApprovedList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all approved workspace invite requests.
     * @param {String} token Authentication token. Requires scope: `admin.invites:read`
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID for the workspace where the invite requests were made.
     * @param {String} [cursor] Value of the `next_cursor` field sent as part of the previous API response
     * @param {Number} [limit] The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
     * @param {module:api/AdminApi~adminInviteRequestsApprovedList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminInviteRequestsApprovedList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminInviteRequestsApprovedList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': opts['teamId'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.inviteRequests.approved.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminInviteRequestsDeniedList_0 operation.
     * @callback module:api/AdminApi~adminInviteRequestsDeniedList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all denied workspace invite requests.
     * @param {String} token Authentication token. Requires scope: `admin.invites:read`
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID for the workspace where the invite requests were made.
     * @param {String} [cursor] Value of the `next_cursor` field sent as part of the previous api response
     * @param {Number} [limit] The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
     * @param {module:api/AdminApi~adminInviteRequestsDeniedList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminInviteRequestsDeniedList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminInviteRequestsDeniedList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': opts['teamId'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.inviteRequests.denied.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminInviteRequestsDeny_0 operation.
     * @callback module:api/AdminApi~adminInviteRequestsDeny_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deny a workspace invite request.
     * @param {String} token Authentication token. Requires scope: `admin.invites:write`
     * @param {String} inviteRequestId ID of the request to invite.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID for the workspace where the invite request was made.
     * @param {module:api/AdminApi~adminInviteRequestsDeny_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminInviteRequestsDeny_0(token, inviteRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminInviteRequestsDeny_0");
      }
      // verify the required parameter 'inviteRequestId' is set
      if (inviteRequestId === undefined || inviteRequestId === null) {
        throw new Error("Missing the required parameter 'inviteRequestId' when calling adminInviteRequestsDeny_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'invite_request_id': inviteRequestId,
        'team_id': opts['teamId']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.inviteRequests.deny', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminInviteRequestsList_0 operation.
     * @callback module:api/AdminApi~adminInviteRequestsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all pending workspace invite requests.
     * @param {String} token Authentication token. Requires scope: `admin.invites:read`
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID for the workspace where the invite requests were made.
     * @param {String} [cursor] Value of the `next_cursor` field sent as part of the previous API response
     * @param {Number} [limit] The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
     * @param {module:api/AdminApi~adminInviteRequestsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminInviteRequestsList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminInviteRequestsList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': opts['teamId'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.inviteRequests.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsAdminsList_0 operation.
     * @callback module:api/AdminApi~adminTeamsAdminsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the admins on a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {String} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {module:api/AdminApi~adminTeamsAdminsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsAdminsList_0(token, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsAdminsList_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsAdminsList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'team_id': teamId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.admins.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsCreate_0 operation.
     * @callback module:api/AdminApi~adminTeamsCreate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Enterprise team.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} teamDomain Team domain (for example, slacksoftballteam).
     * @param {String} teamName Team name (for example, Slack Softball Team).
     * @param {Object} opts Optional parameters
     * @param {String} [teamDescription] Description for the team.
     * @param {String} [teamDiscoverability] Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.
     * @param {module:api/AdminApi~adminTeamsCreate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsCreate_0(token, teamDomain, teamName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsCreate_0");
      }
      // verify the required parameter 'teamDomain' is set
      if (teamDomain === undefined || teamDomain === null) {
        throw new Error("Missing the required parameter 'teamDomain' when calling adminTeamsCreate_0");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling adminTeamsCreate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_description': opts['teamDescription'],
        'team_discoverability': opts['teamDiscoverability'],
        'team_domain': teamDomain,
        'team_name': teamName
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsList_0 operation.
     * @callback module:api/AdminApi~adminTeamsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all teams on an Enterprise organization
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 100 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {module:api/AdminApi~adminTeamsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsList_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsOwnersList_0 operation.
     * @callback module:api/AdminApi~adminTeamsOwnersList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all of the owners on a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {String} teamId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {module:api/AdminApi~adminTeamsOwnersList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsOwnersList_0(token, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsOwnersList_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsOwnersList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'team_id': teamId,
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.owners.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsInfo_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsInfo_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch information about settings in a workspace
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {String} teamId 
     * @param {module:api/AdminApi~adminTeamsSettingsInfo_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsInfo_0(token, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsInfo_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsInfo_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': teamId
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDefaultChannels_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsSetDefaultChannels_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the default channels of a workspace.
     * @param {String} channelIds An array of channel IDs.
     * @param {String} teamId ID for the workspace to set the default channel for.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminApi~adminTeamsSettingsSetDefaultChannels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDefaultChannels_0(channelIds, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminTeamsSettingsSetDefaultChannels_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDefaultChannels_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDefaultChannels_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'channel_ids': channelIds,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDefaultChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDescription_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsSetDescription_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the description of a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} description The new description for the workspace.
     * @param {String} teamId ID for the workspace to set the description for.
     * @param {module:api/AdminApi~adminTeamsSettingsSetDescription_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDescription_0(token, description, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDescription_0");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling adminTeamsSettingsSetDescription_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDescription_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'description': description,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDescription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetDiscoverability_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsSetDiscoverability_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An API method that allows admins to set the discoverability of a given workspace
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} discoverability This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
     * @param {String} teamId The ID of the workspace to set discoverability on.
     * @param {module:api/AdminApi~adminTeamsSettingsSetDiscoverability_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetDiscoverability_0(token, discoverability, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetDiscoverability_0");
      }
      // verify the required parameter 'discoverability' is set
      if (discoverability === undefined || discoverability === null) {
        throw new Error("Missing the required parameter 'discoverability' when calling adminTeamsSettingsSetDiscoverability_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetDiscoverability_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'discoverability': discoverability,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setDiscoverability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetIcon_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsSetIcon_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the icon of a workspace.
     * @param {String} imageUrl Image URL for the icon
     * @param {String} teamId ID for the workspace to set the icon for.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminApi~adminTeamsSettingsSetIcon_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetIcon_0(imageUrl, teamId, token, callback) {
      let postBody = null;
      // verify the required parameter 'imageUrl' is set
      if (imageUrl === undefined || imageUrl === null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling adminTeamsSettingsSetIcon_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetIcon_0");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetIcon_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image_url': imageUrl,
        'team_id': teamId,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setIcon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminTeamsSettingsSetName_0 operation.
     * @callback module:api/AdminApi~adminTeamsSettingsSetName_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the name of a given workspace.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} name The new name of the workspace.
     * @param {String} teamId ID for the workspace to set the name for.
     * @param {module:api/AdminApi~adminTeamsSettingsSetName_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminTeamsSettingsSetName_0(token, name, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminTeamsSettingsSetName_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminTeamsSettingsSetName_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminTeamsSettingsSetName_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'name': name,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.teams.settings.setName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsAddChannels_0 operation.
     * @callback module:api/AdminApi~adminUsergroupsAddChannels_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add one or more default channels to an IDP group.
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:write`
     * @param {String} channelIds Comma separated string of channel IDs.
     * @param {String} usergroupId ID of the IDP group to add default channels for.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] The workspace to add default channels in.
     * @param {module:api/AdminApi~adminUsergroupsAddChannels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsAddChannels_0(token, channelIds, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsAddChannels_0");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsergroupsAddChannels_0");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddChannels_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'team_id': opts['teamId'],
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.addChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsAddTeams_0 operation.
     * @callback module:api/AdminApi~adminUsergroupsAddTeams_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
     * @param {String} usergroupId An encoded usergroup (IDP Group) ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [autoProvision] When `true`, this method automatically creates new workspace accounts for the IDP group members.
     * @param {module:api/AdminApi~adminUsergroupsAddTeams_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsAddTeams_0(token, teamIds, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsAddTeams_0");
      }
      // verify the required parameter 'teamIds' is set
      if (teamIds === undefined || teamIds === null) {
        throw new Error("Missing the required parameter 'teamIds' when calling adminUsergroupsAddTeams_0");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddTeams_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'auto_provision': opts['autoProvision'],
        'team_ids': teamIds,
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.addTeams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsListChannels_0 operation.
     * @callback module:api/AdminApi~adminUsergroupsListChannels_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the channels linked to an org-level IDP group (user group).
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:read`
     * @param {String} usergroupId ID of the IDP group to list default channels for.
     * @param {Object} opts Optional parameters
     * @param {String} [teamId] ID of the the workspace.
     * @param {Boolean} [includeNumMembers] Flag to include or exclude the count of members per channel.
     * @param {module:api/AdminApi~adminUsergroupsListChannels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsListChannels_0(token, usergroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsListChannels_0");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsListChannels_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'usergroup_id': usergroupId,
        'team_id': opts['teamId'],
        'include_num_members': opts['includeNumMembers']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.listChannels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsergroupsRemoveChannels_0 operation.
     * @callback module:api/AdminApi~adminUsergroupsRemoveChannels_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param {String} token Authentication token. Requires scope: `admin.usergroups:write`
     * @param {String} channelIds Comma-separated string of channel IDs
     * @param {String} usergroupId ID of the IDP Group
     * @param {module:api/AdminApi~adminUsergroupsRemoveChannels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsergroupsRemoveChannels_0(token, channelIds, usergroupId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsergroupsRemoveChannels_0");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsergroupsRemoveChannels_0");
      }
      // verify the required parameter 'usergroupId' is set
      if (usergroupId === undefined || usergroupId === null) {
        throw new Error("Missing the required parameter 'usergroupId' when calling adminUsergroupsRemoveChannels_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'usergroup_id': usergroupId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.usergroups.removeChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersAssign_0 operation.
     * @callback module:api/AdminApi~adminUsersAssign_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Enterprise user to a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to add to the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [channelIds] Comma separated values of channel IDs to add user in the new workspace.
     * @param {Boolean} [isRestricted] True if user should be added to the workspace as a guest.
     * @param {Boolean} [isUltraRestricted] True if user should be added to the workspace as a single-channel guest.
     * @param {module:api/AdminApi~adminUsersAssign_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersAssign_0(token, teamId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersAssign_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersAssign_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersAssign_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': opts['channelIds'],
        'is_restricted': opts['isRestricted'],
        'is_ultra_restricted': opts['isUltraRestricted'],
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.assign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersInvite_0 operation.
     * @callback module:api/AdminApi~adminUsersInvite_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a user to a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} channelIds A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
     * @param {String} email The email address of the person to invite.
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [customMessage] An optional message to send to the user in the invite email.
     * @param {String} [guestExpirationTs] Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
     * @param {Boolean} [isRestricted] Is this user a multi-channel guest user? (default: false)
     * @param {Boolean} [isUltraRestricted] Is this user a single channel guest user? (default: false)
     * @param {String} [realName] Full name of the user.
     * @param {Boolean} [resend] Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
     * @param {module:api/AdminApi~adminUsersInvite_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersInvite_0(token, channelIds, email, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersInvite_0");
      }
      // verify the required parameter 'channelIds' is set
      if (channelIds === undefined || channelIds === null) {
        throw new Error("Missing the required parameter 'channelIds' when calling adminUsersInvite_0");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling adminUsersInvite_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersInvite_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel_ids': channelIds,
        'custom_message': opts['customMessage'],
        'email': email,
        'guest_expiration_ts': opts['guestExpirationTs'],
        'is_restricted': opts['isRestricted'],
        'is_ultra_restricted': opts['isUltraRestricted'],
        'real_name': opts['realName'],
        'resend': opts['resend'],
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersList_0 operation.
     * @callback module:api/AdminApi~adminUsersList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users on a workspace
     * @param {String} token Authentication token. Requires scope: `admin.users:read`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     * @param {Number} [limit] Limit for how many users to be retrieved per page
     * @param {module:api/AdminApi~adminUsersList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersList_0(token, teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersList_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersList_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'team_id': teamId,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersRemove_0 operation.
     * @callback module:api/AdminApi~adminUsersRemove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from a workspace.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to remove.
     * @param {module:api/AdminApi~adminUsersRemove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersRemove_0(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersRemove_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersRemove_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersRemove_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSessionInvalidate_0 operation.
     * @callback module:api/AdminApi~adminUsersSessionInvalidate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate a single session for a user by session_id
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {Number} sessionId 
     * @param {String} teamId ID of the team that the session belongs to
     * @param {module:api/AdminApi~adminUsersSessionInvalidate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSessionInvalidate_0(token, sessionId, teamId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSessionInvalidate_0");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling adminUsersSessionInvalidate_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSessionInvalidate_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'session_id': sessionId,
        'team_id': teamId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.session.invalidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSessionReset_0 operation.
     * @callback module:api/AdminApi~adminUsersSessionReset_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wipes all valid sessions on all devices for a given user
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} userId The ID of the user to wipe sessions for
     * @param {Object} opts Optional parameters
     * @param {Boolean} [mobileOnly] Only expire mobile sessions (default: false)
     * @param {Boolean} [webOnly] Only expire web sessions (default: false)
     * @param {module:api/AdminApi~adminUsersSessionReset_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSessionReset_0(token, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSessionReset_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSessionReset_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'mobile_only': opts['mobileOnly'],
        'user_id': userId,
        'web_only': opts['webOnly']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.session.reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetAdmin_0 operation.
     * @callback module:api/AdminApi~adminUsersSetAdmin_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to designate as an admin.
     * @param {module:api/AdminApi~adminUsersSetAdmin_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetAdmin_0(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetAdmin_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetAdmin_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetAdmin_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setAdmin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetExpiration_0 operation.
     * @callback module:api/AdminApi~adminUsersSetExpiration_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an expiration for a guest user
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {Number} expirationTs Timestamp when guest account should be disabled.
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to set an expiration for.
     * @param {module:api/AdminApi~adminUsersSetExpiration_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetExpiration_0(token, expirationTs, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetExpiration_0");
      }
      // verify the required parameter 'expirationTs' is set
      if (expirationTs === undefined || expirationTs === null) {
        throw new Error("Missing the required parameter 'expirationTs' when calling adminUsersSetExpiration_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetExpiration_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetExpiration_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'expiration_ts': expirationTs,
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setExpiration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetOwner_0 operation.
     * @callback module:api/AdminApi~adminUsersSetOwner_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId Id of the user to promote to owner.
     * @param {module:api/AdminApi~adminUsersSetOwner_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetOwner_0(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetOwner_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetOwner_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetOwner_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setOwner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminUsersSetRegular_0 operation.
     * @callback module:api/AdminApi~adminUsersSetRegular_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param {String} token Authentication token. Requires scope: `admin.users:write`
     * @param {String} teamId The ID (`T1234`) of the workspace.
     * @param {String} userId The ID of the user to designate as a regular user.
     * @param {module:api/AdminApi~adminUsersSetRegular_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminUsersSetRegular_0(token, teamId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminUsersSetRegular_0");
      }
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling adminUsersSetRegular_0");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adminUsersSetRegular_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'team_id': teamId,
        'user_id': userId
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.users.setRegular', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
