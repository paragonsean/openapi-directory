/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* Views service.
* @module api/ViewsApi
* @version 1.7.0
*/
export default class ViewsApi {

    /**
    * Constructs a new ViewsApi. 
    * @alias module:api/ViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the viewsOpen operation.
     * @callback module:api/ViewsApi~viewsOpenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open a view for a user.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} triggerId Exchange a trigger to post to the user.
     * @param {String} view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
     * @param {module:api/ViewsApi~viewsOpenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    viewsOpen(token, triggerId, view, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling viewsOpen");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling viewsOpen");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling viewsOpen");
      }

      let pathParams = {
      };
      let queryParams = {
        'trigger_id': triggerId,
        'view': view
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/views.open', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsPublish operation.
     * @callback module:api/ViewsApi~viewsPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a static view for a User.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} userId `id` of the user you want publish a view to.
     * @param {String} view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
     * @param {Object} opts Optional parameters
     * @param {String} [hash] A string that represents view state to protect against possible race conditions.
     * @param {module:api/ViewsApi~viewsPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    viewsPublish(token, userId, view, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling viewsPublish");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling viewsPublish");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling viewsPublish");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': userId,
        'view': view,
        'hash': opts['hash']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/views.publish', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsPush operation.
     * @callback module:api/ViewsApi~viewsPushCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push a view onto the stack of a root view.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {String} triggerId Exchange a trigger to post to the user.
     * @param {String} view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
     * @param {module:api/ViewsApi~viewsPushCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    viewsPush(token, triggerId, view, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling viewsPush");
      }
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling viewsPush");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling viewsPush");
      }

      let pathParams = {
      };
      let queryParams = {
        'trigger_id': triggerId,
        'view': view
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/views.push', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewsUpdate operation.
     * @callback module:api/ViewsApi~viewsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing view.
     * @param {String} token Authentication token. Requires scope: `none`
     * @param {Object} opts Optional parameters
     * @param {String} [viewId] A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
     * @param {String} [externalId] A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
     * @param {String} [view] A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
     * @param {String} [hash] A string that represents view state to protect against possible race conditions.
     * @param {module:api/ViewsApi~viewsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    viewsUpdate(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling viewsUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'view_id': opts['viewId'],
        'external_id': opts['externalId'],
        'view': opts['view'],
        'hash': opts['hash']
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/views.update', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
