/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIMethodUsersGetPresence from '../model/APIMethodUsersGetPresence';
import UsersConversationsErrorSchema from '../model/UsersConversationsErrorSchema';
import UsersConversationsSuccessSchema from '../model/UsersConversationsSuccessSchema';
import UsersCountsErrorSchema from '../model/UsersCountsErrorSchema';
import UsersDeletePhotoErrorSchema from '../model/UsersDeletePhotoErrorSchema';
import UsersDeletePhotoSchema from '../model/UsersDeletePhotoSchema';
import UsersIdentityErrorSchema from '../model/UsersIdentityErrorSchema';
import UsersIdentitySchemaInner from '../model/UsersIdentitySchemaInner';
import UsersInfoErrorSchema from '../model/UsersInfoErrorSchema';
import UsersInfoSuccessSchema from '../model/UsersInfoSuccessSchema';
import UsersListErrorSchema from '../model/UsersListErrorSchema';
import UsersListSchema from '../model/UsersListSchema';
import UsersLookupByEmailErrorSchema from '../model/UsersLookupByEmailErrorSchema';
import UsersLookupByEmailSuccessSchema from '../model/UsersLookupByEmailSuccessSchema';
import UsersProfileGetErrorSchema from '../model/UsersProfileGetErrorSchema';
import UsersProfileGetSchema from '../model/UsersProfileGetSchema';
import UsersProfileSetErrorSchema from '../model/UsersProfileSetErrorSchema';
import UsersProfileSetSchema from '../model/UsersProfileSetSchema';
import UsersSetActiveErrorSchema from '../model/UsersSetActiveErrorSchema';
import UsersSetActiveSchema from '../model/UsersSetActiveSchema';
import UsersSetPhotoErrorSchema from '../model/UsersSetPhotoErrorSchema';
import UsersSetPhotoSchema from '../model/UsersSetPhotoSchema';
import UsersSetPresenceErrorSchema from '../model/UsersSetPresenceErrorSchema';
import UsersSetPresenceSchema from '../model/UsersSetPresenceSchema';

/**
* Users service.
* @module api/UsersApi
* @version 1.7.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersConversations operation.
     * @callback module:api/UsersApi~usersConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersConversationsSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List conversations the calling user may access.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:read`
     * @param {String} [user] Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.
     * @param {String} [types] Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
     * @param {Boolean} [excludeArchived] Set to `true` to exclude archived channels from the list
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/UsersApi~usersConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersConversationsSuccessSchema}
     */
    usersConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'user': opts['user'],
        'types': opts['types'],
        'exclude_archived': opts['excludeArchived'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersConversationsSuccessSchema;
      return this.apiClient.callApi(
        '/users.conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeletePhoto operation.
     * @callback module:api/UsersApi~usersDeletePhotoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersDeletePhotoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the user profile photo
     * @param {String} token Authentication token. Requires scope: `users.profile:write`
     * @param {module:api/UsersApi~usersDeletePhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersDeletePhotoSchema}
     */
    usersDeletePhoto(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersDeletePhoto");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsersDeletePhotoSchema;
      return this.apiClient.callApi(
        '/users.deletePhoto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetPresence operation.
     * @callback module:api/UsersApi~usersGetPresenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIMethodUsersGetPresence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets user presence information.
     * @param {String} token Authentication token. Requires scope: `users:read`
     * @param {Object} opts Optional parameters
     * @param {String} [user] User to get presence info on. Defaults to the authed user.
     * @param {module:api/UsersApi~usersGetPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIMethodUsersGetPresence}
     */
    usersGetPresence(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersGetPresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIMethodUsersGetPresence;
      return this.apiClient.callApi(
        '/users.getPresence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdentity operation.
     * @callback module:api/UsersApi~usersIdentityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersIdentitySchemaInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user's identity.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `identity.basic`
     * @param {module:api/UsersApi~usersIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersIdentitySchemaInner>}
     */
    usersIdentity(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsersIdentitySchemaInner];
      return this.apiClient.callApi(
        '/users.identity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersInfo operation.
     * @callback module:api/UsersApi~usersInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersInfoSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a user.
     * @param {String} token Authentication token. Requires scope: `users:read`
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeLocale] Set this to `true` to receive the locale for this user. Defaults to `false`
     * @param {String} [user] User to get info on
     * @param {module:api/UsersApi~usersInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersInfoSuccessSchema}
     */
    usersInfo(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'include_locale': opts['includeLocale'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersInfoSuccessSchema;
      return this.apiClient.callApi(
        '/users.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all users in a Slack team.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `users:read`
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {Boolean} [includeLocale] Set this to `true` to receive the locale for users. Defaults to `false`
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersListSchema}
     */
    usersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'limit': opts['limit'],
        'cursor': opts['cursor'],
        'include_locale': opts['includeLocale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersListSchema;
      return this.apiClient.callApi(
        '/users.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersLookupByEmail operation.
     * @callback module:api/UsersApi~usersLookupByEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersLookupByEmailSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a user with an email address.
     * @param {String} token Authentication token. Requires scope: `users:read.email`
     * @param {String} email An email address belonging to a user in the workspace
     * @param {module:api/UsersApi~usersLookupByEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersLookupByEmailSuccessSchema}
     */
    usersLookupByEmail(token, email, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersLookupByEmail");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling usersLookupByEmail");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersLookupByEmailSuccessSchema;
      return this.apiClient.callApi(
        '/users.lookupByEmail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileGet_0 operation.
     * @callback module:api/UsersApi~usersProfileGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersProfileGetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a user's profile information.
     * @param {String} token Authentication token. Requires scope: `users.profile:read`
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeLabels] Include labels for each ID in custom profile fields
     * @param {String} [user] User to retrieve profile info for
     * @param {module:api/UsersApi~usersProfileGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersProfileGetSchema}
     */
    usersProfileGet_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersProfileGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'include_labels': opts['includeLabels'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersProfileGetSchema;
      return this.apiClient.callApi(
        '/users.profile.get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersProfileSet_0 operation.
     * @callback module:api/UsersApi~usersProfileSet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersProfileSetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the profile information for a user.
     * @param {String} token Authentication token. Requires scope: `users.profile:write`
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name of a single key to set. Usable only if `profile` is not passed.
     * @param {String} [profile] Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
     * @param {String} [user] ID of user to change. This argument may only be specified by team admins on paid teams.
     * @param {String} [value] Value to set a single key to. Usable only if `profile` is not passed.
     * @param {module:api/UsersApi~usersProfileSet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersProfileSetSchema}
     */
    usersProfileSet_0(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersProfileSet_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'name': opts['name'],
        'profile': opts['profile'],
        'user': opts['user'],
        'value': opts['value']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsersProfileSetSchema;
      return this.apiClient.callApi(
        '/users.profile.set', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSetActive operation.
     * @callback module:api/UsersApi~usersSetActiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSetActiveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marked a user as active. Deprecated and non-functional.
     * @param {String} token Authentication token. Requires scope: `users:write`
     * @param {module:api/UsersApi~usersSetActiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSetActiveSchema}
     */
    usersSetActive(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersSetActive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersSetActiveSchema;
      return this.apiClient.callApi(
        '/users.setActive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSetPhoto operation.
     * @callback module:api/UsersApi~usersSetPhotoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSetPhotoSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the user profile photo
     * @param {String} token Authentication token. Requires scope: `users.profile:write`
     * @param {Object} opts Optional parameters
     * @param {String} [cropW] Width/height of crop box (always square)
     * @param {String} [cropX] X coordinate of top-left corner of crop box
     * @param {String} [cropY] Y coordinate of top-left corner of crop box
     * @param {String} [image] File contents via `multipart/form-data`.
     * @param {module:api/UsersApi~usersSetPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSetPhotoSchema}
     */
    usersSetPhoto(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersSetPhoto");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'crop_w': opts['cropW'],
        'crop_x': opts['cropX'],
        'crop_y': opts['cropY'],
        'image': opts['image'],
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsersSetPhotoSchema;
      return this.apiClient.callApi(
        '/users.setPhoto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSetPresence operation.
     * @callback module:api/UsersApi~usersSetPresenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSetPresenceSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually sets user presence.
     * @param {String} token Authentication token. Requires scope: `users:write`
     * @param {String} presence Either `auto` or `away`
     * @param {module:api/UsersApi~usersSetPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSetPresenceSchema}
     */
    usersSetPresence(token, presence, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling usersSetPresence");
      }
      // verify the required parameter 'presence' is set
      if (presence === undefined || presence === null) {
        throw new Error("Missing the required parameter 'presence' when calling usersSetPresence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'presence': presence
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = UsersSetPresenceSchema;
      return this.apiClient.callApi(
        '/users.setPresence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
