/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* AdminEmoji service.
* @module api/AdminEmojiApi
* @version 1.7.0
*/
export default class AdminEmojiApi {

    /**
    * Constructs a new AdminEmojiApi. 
    * @alias module:api/AdminEmojiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminEmojiAdd operation.
     * @callback module:api/AdminEmojiApi~adminEmojiAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an emoji.
     * @param {String} name The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {String} url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
     * @param {module:api/AdminEmojiApi~adminEmojiAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiAdd(name, token, url, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiAdd");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiAdd");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling adminEmojiAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'token': token,
        'url': url
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiAddAlias operation.
     * @callback module:api/AdminEmojiApi~adminEmojiAddAliasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an emoji alias.
     * @param {String} aliasFor The alias of the emoji.
     * @param {String} name The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminEmojiApi~adminEmojiAddAliasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiAddAlias(aliasFor, name, token, callback) {
      let postBody = null;
      // verify the required parameter 'aliasFor' is set
      if (aliasFor === undefined || aliasFor === null) {
        throw new Error("Missing the required parameter 'aliasFor' when calling adminEmojiAddAlias");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiAddAlias");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiAddAlias");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'alias_for': aliasFor,
        'name': name,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.addAlias', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiList operation.
     * @callback module:api/AdminEmojiApi~adminEmojiListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List emoji for an Enterprise Grid organization.
     * @param {String} token Authentication token. Requires scope: `admin.teams:read`
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
     * @param {Number} [limit] The maximum number of items to return. Must be between 1 - 1000 both inclusive.
     * @param {module:api/AdminEmojiApi~adminEmojiListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiList(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiList");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiRemove operation.
     * @callback module:api/AdminEmojiApi~adminEmojiRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an emoji across an Enterprise Grid organization
     * @param {String} name The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminEmojiApi~adminEmojiRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiRemove(name, token, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiRemove");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminEmojiRename operation.
     * @callback module:api/AdminEmojiApi~adminEmojiRenameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename an emoji.
     * @param {String} name The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
     * @param {String} newName The new name of the emoji.
     * @param {String} token Authentication token. Requires scope: `admin.teams:write`
     * @param {module:api/AdminEmojiApi~adminEmojiRenameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    adminEmojiRename(name, newName, token, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adminEmojiRename");
      }
      // verify the required parameter 'newName' is set
      if (newName === undefined || newName === null) {
        throw new Error("Missing the required parameter 'newName' when calling adminEmojiRename");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling adminEmojiRename");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'new_name': newName,
        'token': token
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/admin.emoji.rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
