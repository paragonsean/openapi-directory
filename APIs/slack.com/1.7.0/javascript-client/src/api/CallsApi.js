/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorTemplate from '../model/DefaultErrorTemplate';
import DefaultSuccessTemplate from '../model/DefaultSuccessTemplate';

/**
* Calls service.
* @module api/CallsApi
* @version 1.7.0
*/
export default class CallsApi {

    /**
    * Constructs a new CallsApi. 
    * @alias module:api/CallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callsAdd operation.
     * @callback module:api/CallsApi~callsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new Call.
     * @param {String} token Authentication token. Requires scope: `calls:write`
     * @param {String} externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
     * @param {String} joinUrl The URL required for a client to join the Call.
     * @param {Object} opts Optional parameters
     * @param {String} [createdBy] The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.
     * @param {Number} [dateStart] Call start time in UTC UNIX timestamp format
     * @param {String} [desktopAppJoinUrl] When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
     * @param {String} [externalDisplayId] An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
     * @param {String} [title] The name of the Call.
     * @param {String} [users] The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
     * @param {module:api/CallsApi~callsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsAdd(token, externalUniqueId, joinUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsAdd");
      }
      // verify the required parameter 'externalUniqueId' is set
      if (externalUniqueId === undefined || externalUniqueId === null) {
        throw new Error("Missing the required parameter 'externalUniqueId' when calling callsAdd");
      }
      // verify the required parameter 'joinUrl' is set
      if (joinUrl === undefined || joinUrl === null) {
        throw new Error("Missing the required parameter 'joinUrl' when calling callsAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'created_by': opts['createdBy'],
        'date_start': opts['dateStart'],
        'desktop_app_join_url': opts['desktopAppJoinUrl'],
        'external_display_id': opts['externalDisplayId'],
        'external_unique_id': externalUniqueId,
        'join_url': joinUrl,
        'title': opts['title'],
        'users': opts['users']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callsEnd operation.
     * @callback module:api/CallsApi~callsEndCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ends a Call.
     * @param {String} token Authentication token. Requires scope: `calls:write`
     * @param {String} id `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method.
     * @param {Object} opts Optional parameters
     * @param {Number} [duration] Call duration in seconds
     * @param {module:api/CallsApi~callsEndCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsEnd(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsEnd");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callsEnd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'duration': opts['duration'],
        'id': id
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.end', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callsInfo operation.
     * @callback module:api/CallsApi~callsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a Call.
     * @param {String} token Authentication token. Requires scope: `calls:read`
     * @param {String} id `id` of the Call returned by the [`calls.add`](/methods/calls.add) method.
     * @param {module:api/CallsApi~callsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsInfo(token, id, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callsInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callsParticipantsAdd_0 operation.
     * @callback module:api/CallsApi~callsParticipantsAdd_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers new participants added to a Call.
     * @param {String} token Authentication token. Requires scope: `calls:write`
     * @param {String} id `id` returned by the [`calls.add`](/methods/calls.add) method.
     * @param {String} users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
     * @param {module:api/CallsApi~callsParticipantsAdd_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsParticipantsAdd_0(token, id, users, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsParticipantsAdd_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callsParticipantsAdd_0");
      }
      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling callsParticipantsAdd_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'id': id,
        'users': users
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.participants.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callsParticipantsRemove_0 operation.
     * @callback module:api/CallsApi~callsParticipantsRemove_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers participants removed from a Call.
     * @param {String} token Authentication token. Requires scope: `calls:write`
     * @param {String} id `id` returned by the [`calls.add`](/methods/calls.add) method.
     * @param {String} users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
     * @param {module:api/CallsApi~callsParticipantsRemove_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsParticipantsRemove_0(token, id, users, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsParticipantsRemove_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callsParticipantsRemove_0");
      }
      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling callsParticipantsRemove_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'id': id,
        'users': users
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.participants.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callsUpdate operation.
     * @callback module:api/CallsApi~callsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSuccessTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates information about a Call.
     * @param {String} token Authentication token. Requires scope: `calls:write`
     * @param {String} id `id` returned by the [`calls.add`](/methods/calls.add) method.
     * @param {Object} opts Optional parameters
     * @param {String} [desktopAppJoinUrl] When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
     * @param {String} [joinUrl] The URL required for a client to join the Call.
     * @param {String} [title] The name of the Call.
     * @param {module:api/CallsApi~callsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSuccessTemplate}
     */
    callsUpdate(token, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling callsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callsUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'desktop_app_join_url': opts['desktopAppJoinUrl'],
        'id': id,
        'join_url': opts['joinUrl'],
        'title': opts['title']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = DefaultSuccessTemplate;
      return this.apiClient.callApi(
        '/calls.update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
