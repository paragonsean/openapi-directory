/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsArchiveErrorSchema from '../model/ConversationsArchiveErrorSchema';
import ConversationsArchiveSuccessSchema from '../model/ConversationsArchiveSuccessSchema';
import ConversationsCloseErrorSchema from '../model/ConversationsCloseErrorSchema';
import ConversationsCloseSuccessSchema from '../model/ConversationsCloseSuccessSchema';
import ConversationsCreateErrorSchema from '../model/ConversationsCreateErrorSchema';
import ConversationsCreateSuccessSchema from '../model/ConversationsCreateSuccessSchema';
import ConversationsHistoryErrorSchema from '../model/ConversationsHistoryErrorSchema';
import ConversationsHistorySuccessSchema from '../model/ConversationsHistorySuccessSchema';
import ConversationsInfoErrorSchema from '../model/ConversationsInfoErrorSchema';
import ConversationsInfoSuccessSchema from '../model/ConversationsInfoSuccessSchema';
import ConversationsInviteErrorSchema from '../model/ConversationsInviteErrorSchema';
import ConversationsInviteErrorSchema1 from '../model/ConversationsInviteErrorSchema1';
import ConversationsJoinErrorSchema from '../model/ConversationsJoinErrorSchema';
import ConversationsJoinSuccessSchema from '../model/ConversationsJoinSuccessSchema';
import ConversationsKickErrorSchema from '../model/ConversationsKickErrorSchema';
import ConversationsKickSuccessSchema from '../model/ConversationsKickSuccessSchema';
import ConversationsLeaveErrorSchema from '../model/ConversationsLeaveErrorSchema';
import ConversationsLeaveSuccessSchema from '../model/ConversationsLeaveSuccessSchema';
import ConversationsListErrorSchema from '../model/ConversationsListErrorSchema';
import ConversationsListSuccessSchema from '../model/ConversationsListSuccessSchema';
import ConversationsMarkErrorSchema from '../model/ConversationsMarkErrorSchema';
import ConversationsMarkSuccessSchema from '../model/ConversationsMarkSuccessSchema';
import ConversationsMembersErrorSchema from '../model/ConversationsMembersErrorSchema';
import ConversationsMembersSuccessSchema from '../model/ConversationsMembersSuccessSchema';
import ConversationsOpenErrorSchema from '../model/ConversationsOpenErrorSchema';
import ConversationsOpenSuccessSchema from '../model/ConversationsOpenSuccessSchema';
import ConversationsRenameErrorSchema from '../model/ConversationsRenameErrorSchema';
import ConversationsRenameSuccessSchema from '../model/ConversationsRenameSuccessSchema';
import ConversationsRepliesErrorSchema from '../model/ConversationsRepliesErrorSchema';
import ConversationsRepliesSuccessSchema from '../model/ConversationsRepliesSuccessSchema';
import ConversationsSetPurposeErrorSchema from '../model/ConversationsSetPurposeErrorSchema';
import ConversationsSetPurposeSuccessSchema from '../model/ConversationsSetPurposeSuccessSchema';
import ConversationsSetTopicErrorSchema from '../model/ConversationsSetTopicErrorSchema';
import ConversationsSetTopicSuccessSchema from '../model/ConversationsSetTopicSuccessSchema';
import ConversationsUnarchiveErrorSchema from '../model/ConversationsUnarchiveErrorSchema';
import ConversationsUnarchiveSuccessSchema from '../model/ConversationsUnarchiveSuccessSchema';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 1.7.0
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the conversationsArchive operation.
     * @callback module:api/ConversationsApi~conversationsArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsArchiveSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archives a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] ID of conversation to archive
     * @param {module:api/ConversationsApi~conversationsArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsArchiveSuccessSchema}
     */
    conversationsArchive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsArchiveSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsClose operation.
     * @callback module:api/ConversationsApi~conversationsCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsCloseSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Closes a direct message or multi-person direct message.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Conversation to close.
     * @param {module:api/ConversationsApi~conversationsCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsCloseSuccessSchema}
     */
    conversationsClose(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsCloseSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsCreate operation.
     * @callback module:api/ConversationsApi~conversationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsCreateSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates a public or private channel-based conversation
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {Boolean} [isPrivate] Create a private channel instead of a public one
     * @param {String} [name] Name of the public or private channel to create
     * @param {module:api/ConversationsApi~conversationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsCreateSuccessSchema}
     */
    conversationsCreate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'is_private': opts['isPrivate'],
        'name': opts['name']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsCreateSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsHistory operation.
     * @callback module:api/ConversationsApi~conversationsHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsHistorySuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a conversation's history of messages and events.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:history`
     * @param {String} [channel] Conversation ID to fetch history for.
     * @param {Number} [latest] End of time range of messages to include in results.
     * @param {Number} [oldest] Start of time range of messages to include in results.
     * @param {Boolean} [inclusive] Include messages with latest or oldest timestamp in results only when either timestamp is specified.
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/ConversationsApi~conversationsHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsHistorySuccessSchema}
     */
    conversationsHistory(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'latest': opts['latest'],
        'oldest': opts['oldest'],
        'inclusive': opts['inclusive'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsHistorySuccessSchema;
      return this.apiClient.callApi(
        '/conversations.history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsInfo operation.
     * @callback module:api/ConversationsApi~conversationsInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsInfoSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:read`
     * @param {String} [channel] Conversation ID to learn more about
     * @param {Boolean} [includeLocale] Set this to `true` to receive the locale for this conversation. Defaults to `false`
     * @param {Boolean} [includeNumMembers] Set to `true` to include the member count for the specified conversation. Defaults to `false`
     * @param {module:api/ConversationsApi~conversationsInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsInfoSuccessSchema}
     */
    conversationsInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'include_locale': opts['includeLocale'],
        'include_num_members': opts['includeNumMembers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsInfoSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsInvite operation.
     * @callback module:api/ConversationsApi~conversationsInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsInviteErrorSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invites users to a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] The ID of the public or private channel to invite user(s) to.
     * @param {String} [users] A comma separated list of user IDs. Up to 1000 users may be listed.
     * @param {module:api/ConversationsApi~conversationsInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsInviteErrorSchema}
     */
    conversationsInvite(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'users': opts['users']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsInviteErrorSchema;
      return this.apiClient.callApi(
        '/conversations.invite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsJoin operation.
     * @callback module:api/ConversationsApi~conversationsJoinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsJoinSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Joins an existing conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `channels:write`
     * @param {String} [channel] ID of conversation to join
     * @param {module:api/ConversationsApi~conversationsJoinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsJoinSuccessSchema}
     */
    conversationsJoin(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsJoinSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsKick operation.
     * @callback module:api/ConversationsApi~conversationsKickCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsKickSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] ID of conversation to remove user from.
     * @param {String} [user] User ID to be removed.
     * @param {module:api/ConversationsApi~conversationsKickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsKickSuccessSchema}
     */
    conversationsKick(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'user': opts['user']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsKickSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.kick', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsLeave operation.
     * @callback module:api/ConversationsApi~conversationsLeaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsLeaveSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leaves a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Conversation to leave
     * @param {module:api/ConversationsApi~conversationsLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsLeaveSuccessSchema}
     */
    conversationsLeave(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsLeaveSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsList operation.
     * @callback module:api/ConversationsApi~conversationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsListSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all channels in a Slack team.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:read`
     * @param {Boolean} [excludeArchived] Set to `true` to exclude archived channels from the list
     * @param {String} [types] Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/ConversationsApi~conversationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsListSuccessSchema}
     */
    conversationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'exclude_archived': opts['excludeArchived'],
        'types': opts['types'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsListSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsMark operation.
     * @callback module:api/ConversationsApi~conversationsMarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsMarkSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the read cursor in a channel.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Channel or conversation to set the read cursor for.
     * @param {Number} [ts] Unique identifier of message you want marked as most recently seen in this conversation.
     * @param {module:api/ConversationsApi~conversationsMarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsMarkSuccessSchema}
     */
    conversationsMark(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'ts': opts['ts']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsMarkSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.mark', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsMembers operation.
     * @callback module:api/ConversationsApi~conversationsMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsMembersSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve members of a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:read`
     * @param {String} [channel] ID of the conversation to retrieve members for
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/ConversationsApi~conversationsMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsMembersSuccessSchema}
     */
    conversationsMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsMembersSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsOpen operation.
     * @callback module:api/ConversationsApi~conversationsOpenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsOpenSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opens or resumes a direct message or multi-person direct message.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.
     * @param {Boolean} [returnIm] Boolean, indicates you want the full IM channel definition in the response.
     * @param {String} [users] Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.
     * @param {module:api/ConversationsApi~conversationsOpenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsOpenSuccessSchema}
     */
    conversationsOpen(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'return_im': opts['returnIm'],
        'users': opts['users']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsOpenSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.open', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsRename operation.
     * @callback module:api/ConversationsApi~conversationsRenameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsRenameSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renames a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] ID of conversation to rename
     * @param {String} [name] New name for conversation.
     * @param {module:api/ConversationsApi~conversationsRenameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsRenameSuccessSchema}
     */
    conversationsRename(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'name': opts['name']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsRenameSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsReplies operation.
     * @callback module:api/ConversationsApi~conversationsRepliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsRepliesSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a thread of messages posted to a conversation
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:history`
     * @param {String} [channel] Conversation ID to fetch thread from.
     * @param {Number} [ts] Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.
     * @param {Number} [latest] End of time range of messages to include in results.
     * @param {Number} [oldest] Start of time range of messages to include in results.
     * @param {Boolean} [inclusive] Include messages with latest or oldest timestamp in results only when either timestamp is specified.
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
     * @param {String} [cursor] Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
     * @param {module:api/ConversationsApi~conversationsRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsRepliesSuccessSchema}
     */
    conversationsReplies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'channel': opts['channel'],
        'ts': opts['ts'],
        'latest': opts['latest'],
        'oldest': opts['oldest'],
        'inclusive': opts['inclusive'],
        'limit': opts['limit'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsRepliesSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsSetPurpose operation.
     * @callback module:api/ConversationsApi~conversationsSetPurposeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsSetPurposeSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the purpose for a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Conversation to set the purpose of
     * @param {String} [purpose] A new, specialer purpose
     * @param {module:api/ConversationsApi~conversationsSetPurposeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsSetPurposeSuccessSchema}
     */
    conversationsSetPurpose(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'purpose': opts['purpose']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsSetPurposeSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.setPurpose', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsSetTopic operation.
     * @callback module:api/ConversationsApi~conversationsSetTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsSetTopicSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the topic for a conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] Conversation to set the topic of
     * @param {String} [topic] The new topic string. Does not support formatting or linkification.
     * @param {module:api/ConversationsApi~conversationsSetTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsSetTopicSuccessSchema}
     */
    conversationsSetTopic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel'],
        'topic': opts['topic']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsSetTopicSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.setTopic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsUnarchive operation.
     * @callback module:api/ConversationsApi~conversationsUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsUnarchiveSuccessSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverses conversation archival.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `conversations:write`
     * @param {String} [channel] ID of conversation to unarchive
     * @param {module:api/ConversationsApi~conversationsUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsUnarchiveSuccessSchema}
     */
    conversationsUnarchive(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
        'channel': opts['channel']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ConversationsUnarchiveSuccessSchema;
      return this.apiClient.callApi(
        '/conversations.unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
