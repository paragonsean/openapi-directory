/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StarsAddErrorSchema from '../model/StarsAddErrorSchema';
import StarsAddSchema from '../model/StarsAddSchema';
import StarsListErrorSchema from '../model/StarsListErrorSchema';
import StarsListSchema from '../model/StarsListSchema';
import StarsRemoveErrorSchema from '../model/StarsRemoveErrorSchema';
import StarsRemoveSchema from '../model/StarsRemoveSchema';

/**
* Stars service.
* @module api/StarsApi
* @version 1.7.0
*/
export default class StarsApi {

    /**
    * Constructs a new StarsApi. 
    * @alias module:api/StarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the starsAdd operation.
     * @callback module:api/StarsApi~starsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StarsAddSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a star to an item.
     * @param {String} token Authentication token. Requires scope: `stars:write`
     * @param {Object} opts Optional parameters
     * @param {String} [channel] Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).
     * @param {String} [file] File to add star to.
     * @param {String} [fileComment] File comment to add star to.
     * @param {String} [timestamp] Timestamp of the message to add star to.
     * @param {module:api/StarsApi~starsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StarsAddSchema}
     */
    starsAdd(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling starsAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': opts['channel'],
        'file': opts['file'],
        'file_comment': opts['fileComment'],
        'timestamp': opts['timestamp']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = StarsAddSchema;
      return this.apiClient.callApi(
        '/stars.add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the starsList operation.
     * @callback module:api/StarsApi~starsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StarsListSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists stars for a user.
     * @param {Object} opts Optional parameters
     * @param {String} [token] Authentication token. Requires scope: `stars:read`
     * @param {String} [count] 
     * @param {String} [page] 
     * @param {String} [cursor] Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
     * @param {Number} [limit] The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
     * @param {module:api/StarsApi~starsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StarsListSchema}
     */
    starsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token'],
        'count': opts['count'],
        'page': opts['page'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['slackAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StarsListSchema;
      return this.apiClient.callApi(
        '/stars.list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the starsRemove operation.
     * @callback module:api/StarsApi~starsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StarsRemoveSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a star from an item.
     * @param {String} token Authentication token. Requires scope: `stars:write`
     * @param {Object} opts Optional parameters
     * @param {String} [channel] Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).
     * @param {String} [file] File to remove star from.
     * @param {String} [fileComment] File comment to remove star from.
     * @param {String} [timestamp] Timestamp of the message to remove star from.
     * @param {module:api/StarsApi~starsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StarsRemoveSchema}
     */
    starsRemove(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling starsRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': token
      };
      let formParams = {
        'channel': opts['channel'],
        'file': opts['file'],
        'file_comment': opts['fileComment'],
        'timestamp': opts['timestamp']
      };

      let authNames = ['slackAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = StarsRemoveSchema;
      return this.apiClient.callApi(
        '/stars.remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
