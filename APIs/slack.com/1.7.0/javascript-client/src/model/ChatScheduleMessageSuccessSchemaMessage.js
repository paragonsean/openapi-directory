/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsBotProfile from './ObjsBotProfile';

/**
 * The ChatScheduleMessageSuccessSchemaMessage model module.
 * @module model/ChatScheduleMessageSuccessSchemaMessage
 * @version 1.7.0
 */
class ChatScheduleMessageSuccessSchemaMessage {
    /**
     * Constructs a new <code>ChatScheduleMessageSuccessSchemaMessage</code>.
     * @alias module:model/ChatScheduleMessageSuccessSchemaMessage
     * @param botId {String} 
     * @param team {String} 
     * @param text {String} 
     * @param type {String} 
     * @param user {String} 
     */
    constructor(botId, team, text, type, user) { 
        
        ChatScheduleMessageSuccessSchemaMessage.initialize(this, botId, team, text, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, botId, team, text, type, user) { 
        obj['bot_id'] = botId;
        obj['team'] = team;
        obj['text'] = text;
        obj['type'] = type;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ChatScheduleMessageSuccessSchemaMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatScheduleMessageSuccessSchemaMessage} obj Optional instance to populate.
     * @return {module:model/ChatScheduleMessageSuccessSchemaMessage} The populated <code>ChatScheduleMessageSuccessSchemaMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatScheduleMessageSuccessSchemaMessage();

            if (data.hasOwnProperty('bot_id')) {
                obj['bot_id'] = ApiClient.convertToType(data['bot_id'], 'String');
            }
            if (data.hasOwnProperty('bot_profile')) {
                obj['bot_profile'] = ObjsBotProfile.constructFromObject(data['bot_profile']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatScheduleMessageSuccessSchemaMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatScheduleMessageSuccessSchemaMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatScheduleMessageSuccessSchemaMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bot_id'] && !(typeof data['bot_id'] === 'string' || data['bot_id'] instanceof String)) {
            throw new Error("Expected the field `bot_id` to be a primitive type in the JSON string but got " + data['bot_id']);
        }
        // validate the optional field `bot_profile`
        if (data['bot_profile']) { // data not null
          ObjsBotProfile.validateJSON(data['bot_profile']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

ChatScheduleMessageSuccessSchemaMessage.RequiredProperties = ["bot_id", "team", "text", "type", "user"];

/**
 * @member {String} bot_id
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['bot_id'] = undefined;

/**
 * @member {module:model/ObjsBotProfile} bot_profile
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['bot_profile'] = undefined;

/**
 * @member {String} team
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['team'] = undefined;

/**
 * @member {String} text
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['text'] = undefined;

/**
 * @member {String} type
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['type'] = undefined;

/**
 * @member {String} user
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['user'] = undefined;

/**
 * @member {String} username
 */
ChatScheduleMessageSuccessSchemaMessage.prototype['username'] = undefined;






export default ChatScheduleMessageSuccessSchemaMessage;

