/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsComment from './ObjsComment';
import ObjsFile from './ObjsFile';

/**
 * The ReactionsListSchemaItemsInnerInnerAnyOf2 model module.
 * @module model/ReactionsListSchemaItemsInnerInnerAnyOf2
 * @version 1.7.0
 */
class ReactionsListSchemaItemsInnerInnerAnyOf2 {
    /**
     * Constructs a new <code>ReactionsListSchemaItemsInnerInnerAnyOf2</code>.
     * @alias module:model/ReactionsListSchemaItemsInnerInnerAnyOf2
     * @param comment {module:model/ObjsComment} 
     * @param file {module:model/ObjsFile} 
     * @param type {module:model/ReactionsListSchemaItemsInnerInnerAnyOf2.TypeEnum} 
     */
    constructor(comment, file, type) { 
        
        ReactionsListSchemaItemsInnerInnerAnyOf2.initialize(this, comment, file, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comment, file, type) { 
        obj['comment'] = comment;
        obj['file'] = file;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ReactionsListSchemaItemsInnerInnerAnyOf2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReactionsListSchemaItemsInnerInnerAnyOf2} obj Optional instance to populate.
     * @return {module:model/ReactionsListSchemaItemsInnerInnerAnyOf2} The populated <code>ReactionsListSchemaItemsInnerInnerAnyOf2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReactionsListSchemaItemsInnerInnerAnyOf2();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ObjsComment.constructFromObject(data['comment']);
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ObjsFile.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReactionsListSchemaItemsInnerInnerAnyOf2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReactionsListSchemaItemsInnerInnerAnyOf2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReactionsListSchemaItemsInnerInnerAnyOf2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          ObjsComment.validateJSON(data['comment']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          ObjsFile.validateJSON(data['file']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ReactionsListSchemaItemsInnerInnerAnyOf2.RequiredProperties = ["comment", "file", "type"];

/**
 * @member {module:model/ObjsComment} comment
 */
ReactionsListSchemaItemsInnerInnerAnyOf2.prototype['comment'] = undefined;

/**
 * @member {module:model/ObjsFile} file
 */
ReactionsListSchemaItemsInnerInnerAnyOf2.prototype['file'] = undefined;

/**
 * @member {module:model/ReactionsListSchemaItemsInnerInnerAnyOf2.TypeEnum} type
 */
ReactionsListSchemaItemsInnerInnerAnyOf2.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReactionsListSchemaItemsInnerInnerAnyOf2['TypeEnum'] = {

    /**
     * value: "file_comment"
     * @const
     */
    "file_comment": "file_comment"
};



export default ReactionsListSchemaItemsInnerInnerAnyOf2;

