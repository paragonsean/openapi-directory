/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BotsInfoSchemaBot from './BotsInfoSchemaBot';

/**
 * The BotsInfoSchema model module.
 * @module model/BotsInfoSchema
 * @version 1.7.0
 */
class BotsInfoSchema {
    /**
     * Constructs a new <code>BotsInfoSchema</code>.
     * Schema for successful response from bots.info method
     * @alias module:model/BotsInfoSchema
     * @param bot {module:model/BotsInfoSchemaBot} 
     * @param ok {Boolean} 
     */
    constructor(bot, ok) { 
        
        BotsInfoSchema.initialize(this, bot, ok);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bot, ok) { 
        obj['bot'] = bot;
        obj['ok'] = ok;
    }

    /**
     * Constructs a <code>BotsInfoSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BotsInfoSchema} obj Optional instance to populate.
     * @return {module:model/BotsInfoSchema} The populated <code>BotsInfoSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BotsInfoSchema();

            if (data.hasOwnProperty('bot')) {
                obj['bot'] = BotsInfoSchemaBot.constructFromObject(data['bot']);
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BotsInfoSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BotsInfoSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BotsInfoSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bot`
        if (data['bot']) { // data not null
          BotsInfoSchemaBot.validateJSON(data['bot']);
        }

        return true;
    }


}

BotsInfoSchema.RequiredProperties = ["bot", "ok"];

/**
 * @member {module:model/BotsInfoSchemaBot} bot
 */
BotsInfoSchema.prototype['bot'] = undefined;

/**
 * @member {Boolean} ok
 */
BotsInfoSchema.prototype['ok'] = undefined;






export default BotsInfoSchema;

