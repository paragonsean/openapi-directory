/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlocksInner from './BlocksInner';
import ObjsBotProfile from './ObjsBotProfile';
import ObjsComment from './ObjsComment';
import ObjsFile from './ObjsFile';
import ObjsMessageAttachmentsInner from './ObjsMessageAttachmentsInner';
import ObjsMessageBotIdInner from './ObjsMessageBotIdInner';
import ObjsMessageIcons from './ObjsMessageIcons';
import ObjsReaction from './ObjsReaction';
import ObjsUserProfileShort from './ObjsUserProfileShort';

/**
 * The ObjsMessage model module.
 * @module model/ObjsMessage
 * @version 1.7.0
 */
class ObjsMessage {
    /**
     * Constructs a new <code>ObjsMessage</code>.
     * @alias module:model/ObjsMessage
     * @param text {String} 
     * @param ts {String} 
     * @param type {String} 
     */
    constructor(text, ts, type) { 
        
        ObjsMessage.initialize(this, text, ts, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text, ts, type) { 
        obj['text'] = text;
        obj['ts'] = ts;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ObjsMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjsMessage} obj Optional instance to populate.
     * @return {module:model/ObjsMessage} The populated <code>ObjsMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjsMessage();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [ObjsMessageAttachmentsInner]);
            }
            if (data.hasOwnProperty('blocks')) {
                obj['blocks'] = ApiClient.convertToType(data['blocks'], [BlocksInner]);
            }
            if (data.hasOwnProperty('bot_id')) {
                obj['bot_id'] = ApiClient.convertToType(data['bot_id'], [ObjsMessageBotIdInner]);
            }
            if (data.hasOwnProperty('bot_profile')) {
                obj['bot_profile'] = ObjsBotProfile.constructFromObject(data['bot_profile']);
            }
            if (data.hasOwnProperty('client_msg_id')) {
                obj['client_msg_id'] = ApiClient.convertToType(data['client_msg_id'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ObjsComment.constructFromObject(data['comment']);
            }
            if (data.hasOwnProperty('display_as_bot')) {
                obj['display_as_bot'] = ApiClient.convertToType(data['display_as_bot'], 'Boolean');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ObjsFile.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [ObjsFile]);
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = ObjsMessageIcons.constructFromObject(data['icons']);
            }
            if (data.hasOwnProperty('inviter')) {
                obj['inviter'] = ApiClient.convertToType(data['inviter'], 'String');
            }
            if (data.hasOwnProperty('is_delayed_message')) {
                obj['is_delayed_message'] = ApiClient.convertToType(data['is_delayed_message'], 'Boolean');
            }
            if (data.hasOwnProperty('is_intro')) {
                obj['is_intro'] = ApiClient.convertToType(data['is_intro'], 'Boolean');
            }
            if (data.hasOwnProperty('is_starred')) {
                obj['is_starred'] = ApiClient.convertToType(data['is_starred'], 'Boolean');
            }
            if (data.hasOwnProperty('last_read')) {
                obj['last_read'] = ApiClient.convertToType(data['last_read'], 'String');
            }
            if (data.hasOwnProperty('latest_reply')) {
                obj['latest_reply'] = ApiClient.convertToType(data['latest_reply'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('old_name')) {
                obj['old_name'] = ApiClient.convertToType(data['old_name'], 'String');
            }
            if (data.hasOwnProperty('parent_user_id')) {
                obj['parent_user_id'] = ApiClient.convertToType(data['parent_user_id'], 'String');
            }
            if (data.hasOwnProperty('permalink')) {
                obj['permalink'] = ApiClient.convertToType(data['permalink'], 'String');
            }
            if (data.hasOwnProperty('pinned_to')) {
                obj['pinned_to'] = ApiClient.convertToType(data['pinned_to'], ['String']);
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ApiClient.convertToType(data['purpose'], 'String');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = ApiClient.convertToType(data['reactions'], [ObjsReaction]);
            }
            if (data.hasOwnProperty('reply_count')) {
                obj['reply_count'] = ApiClient.convertToType(data['reply_count'], 'Number');
            }
            if (data.hasOwnProperty('reply_users')) {
                obj['reply_users'] = ApiClient.convertToType(data['reply_users'], ['String']);
            }
            if (data.hasOwnProperty('reply_users_count')) {
                obj['reply_users_count'] = ApiClient.convertToType(data['reply_users_count'], 'Number');
            }
            if (data.hasOwnProperty('source_team')) {
                obj['source_team'] = ApiClient.convertToType(data['source_team'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'Boolean');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thread_ts')) {
                obj['thread_ts'] = ApiClient.convertToType(data['thread_ts'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unread_count')) {
                obj['unread_count'] = ApiClient.convertToType(data['unread_count'], 'Number');
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = ApiClient.convertToType(data['upload'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('user_profile')) {
                obj['user_profile'] = ObjsUserProfileShort.constructFromObject(data['user_profile']);
            }
            if (data.hasOwnProperty('user_team')) {
                obj['user_team'] = ApiClient.convertToType(data['user_team'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjsMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjsMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjsMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                ObjsMessageAttachmentsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blocks'])) {
            throw new Error("Expected the field `blocks` to be an array in the JSON data but got " + data['blocks']);
        }
        if (data['bot_id']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bot_id'])) {
                throw new Error("Expected the field `bot_id` to be an array in the JSON data but got " + data['bot_id']);
            }
            // validate the optional field `bot_id` (array)
            for (const item of data['bot_id']) {
                ObjsMessageBotIdInner.validateJSON(item);
            };
        }
        // validate the optional field `bot_profile`
        if (data['bot_profile']) { // data not null
          ObjsBotProfile.validateJSON(data['bot_profile']);
        }
        // ensure the json data is a string
        if (data['client_msg_id'] && !(typeof data['client_msg_id'] === 'string' || data['client_msg_id'] instanceof String)) {
            throw new Error("Expected the field `client_msg_id` to be a primitive type in the JSON string but got " + data['client_msg_id']);
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          ObjsComment.validateJSON(data['comment']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          ObjsFile.validateJSON(data['file']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                ObjsFile.validateJSON(item);
            };
        }
        // validate the optional field `icons`
        if (data['icons']) { // data not null
          ObjsMessageIcons.validateJSON(data['icons']);
        }
        // ensure the json data is a string
        if (data['inviter'] && !(typeof data['inviter'] === 'string' || data['inviter'] instanceof String)) {
            throw new Error("Expected the field `inviter` to be a primitive type in the JSON string but got " + data['inviter']);
        }
        // ensure the json data is a string
        if (data['last_read'] && !(typeof data['last_read'] === 'string' || data['last_read'] instanceof String)) {
            throw new Error("Expected the field `last_read` to be a primitive type in the JSON string but got " + data['last_read']);
        }
        // ensure the json data is a string
        if (data['latest_reply'] && !(typeof data['latest_reply'] === 'string' || data['latest_reply'] instanceof String)) {
            throw new Error("Expected the field `latest_reply` to be a primitive type in the JSON string but got " + data['latest_reply']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['old_name'] && !(typeof data['old_name'] === 'string' || data['old_name'] instanceof String)) {
            throw new Error("Expected the field `old_name` to be a primitive type in the JSON string but got " + data['old_name']);
        }
        // ensure the json data is a string
        if (data['parent_user_id'] && !(typeof data['parent_user_id'] === 'string' || data['parent_user_id'] instanceof String)) {
            throw new Error("Expected the field `parent_user_id` to be a primitive type in the JSON string but got " + data['parent_user_id']);
        }
        // ensure the json data is a string
        if (data['permalink'] && !(typeof data['permalink'] === 'string' || data['permalink'] instanceof String)) {
            throw new Error("Expected the field `permalink` to be a primitive type in the JSON string but got " + data['permalink']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pinned_to'])) {
            throw new Error("Expected the field `pinned_to` to be an array in the JSON data but got " + data['pinned_to']);
        }
        // ensure the json data is a string
        if (data['purpose'] && !(typeof data['purpose'] === 'string' || data['purpose'] instanceof String)) {
            throw new Error("Expected the field `purpose` to be a primitive type in the JSON string but got " + data['purpose']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reactions'])) {
            throw new Error("Expected the field `reactions` to be an array in the JSON data but got " + data['reactions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reply_users'])) {
            throw new Error("Expected the field `reply_users` to be an array in the JSON data but got " + data['reply_users']);
        }
        // ensure the json data is a string
        if (data['source_team'] && !(typeof data['source_team'] === 'string' || data['source_team'] instanceof String)) {
            throw new Error("Expected the field `source_team` to be a primitive type in the JSON string but got " + data['source_team']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['thread_ts'] && !(typeof data['thread_ts'] === 'string' || data['thread_ts'] instanceof String)) {
            throw new Error("Expected the field `thread_ts` to be a primitive type in the JSON string but got " + data['thread_ts']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // ensure the json data is a string
        if (data['ts'] && !(typeof data['ts'] === 'string' || data['ts'] instanceof String)) {
            throw new Error("Expected the field `ts` to be a primitive type in the JSON string but got " + data['ts']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // validate the optional field `user_profile`
        if (data['user_profile']) { // data not null
          ObjsUserProfileShort.validateJSON(data['user_profile']);
        }
        // ensure the json data is a string
        if (data['user_team'] && !(typeof data['user_team'] === 'string' || data['user_team'] instanceof String)) {
            throw new Error("Expected the field `user_team` to be a primitive type in the JSON string but got " + data['user_team']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

ObjsMessage.RequiredProperties = ["text", "ts", "type"];

/**
 * @member {Array.<module:model/ObjsMessageAttachmentsInner>} attachments
 */
ObjsMessage.prototype['attachments'] = undefined;

/**
 * This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
 * @member {Array.<module:model/BlocksInner>} blocks
 */
ObjsMessage.prototype['blocks'] = undefined;

/**
 * @member {Array.<module:model/ObjsMessageBotIdInner>} bot_id
 */
ObjsMessage.prototype['bot_id'] = undefined;

/**
 * @member {module:model/ObjsBotProfile} bot_profile
 */
ObjsMessage.prototype['bot_profile'] = undefined;

/**
 * @member {String} client_msg_id
 */
ObjsMessage.prototype['client_msg_id'] = undefined;

/**
 * @member {module:model/ObjsComment} comment
 */
ObjsMessage.prototype['comment'] = undefined;

/**
 * @member {Boolean} display_as_bot
 */
ObjsMessage.prototype['display_as_bot'] = undefined;

/**
 * @member {module:model/ObjsFile} file
 */
ObjsMessage.prototype['file'] = undefined;

/**
 * @member {Array.<module:model/ObjsFile>} files
 */
ObjsMessage.prototype['files'] = undefined;

/**
 * @member {module:model/ObjsMessageIcons} icons
 */
ObjsMessage.prototype['icons'] = undefined;

/**
 * @member {String} inviter
 */
ObjsMessage.prototype['inviter'] = undefined;

/**
 * @member {Boolean} is_delayed_message
 */
ObjsMessage.prototype['is_delayed_message'] = undefined;

/**
 * @member {Boolean} is_intro
 */
ObjsMessage.prototype['is_intro'] = undefined;

/**
 * @member {Boolean} is_starred
 */
ObjsMessage.prototype['is_starred'] = undefined;

/**
 * @member {String} last_read
 */
ObjsMessage.prototype['last_read'] = undefined;

/**
 * @member {String} latest_reply
 */
ObjsMessage.prototype['latest_reply'] = undefined;

/**
 * @member {String} name
 */
ObjsMessage.prototype['name'] = undefined;

/**
 * @member {String} old_name
 */
ObjsMessage.prototype['old_name'] = undefined;

/**
 * @member {String} parent_user_id
 */
ObjsMessage.prototype['parent_user_id'] = undefined;

/**
 * @member {String} permalink
 */
ObjsMessage.prototype['permalink'] = undefined;

/**
 * @member {Array.<String>} pinned_to
 */
ObjsMessage.prototype['pinned_to'] = undefined;

/**
 * @member {String} purpose
 */
ObjsMessage.prototype['purpose'] = undefined;

/**
 * @member {Array.<module:model/ObjsReaction>} reactions
 */
ObjsMessage.prototype['reactions'] = undefined;

/**
 * @member {Number} reply_count
 */
ObjsMessage.prototype['reply_count'] = undefined;

/**
 * @member {Array.<String>} reply_users
 */
ObjsMessage.prototype['reply_users'] = undefined;

/**
 * @member {Number} reply_users_count
 */
ObjsMessage.prototype['reply_users_count'] = undefined;

/**
 * @member {String} source_team
 */
ObjsMessage.prototype['source_team'] = undefined;

/**
 * @member {Boolean} subscribed
 */
ObjsMessage.prototype['subscribed'] = undefined;

/**
 * @member {String} subtype
 */
ObjsMessage.prototype['subtype'] = undefined;

/**
 * @member {String} team
 */
ObjsMessage.prototype['team'] = undefined;

/**
 * @member {String} text
 */
ObjsMessage.prototype['text'] = undefined;

/**
 * @member {String} thread_ts
 */
ObjsMessage.prototype['thread_ts'] = undefined;

/**
 * @member {String} topic
 */
ObjsMessage.prototype['topic'] = undefined;

/**
 * @member {String} ts
 */
ObjsMessage.prototype['ts'] = undefined;

/**
 * @member {String} type
 */
ObjsMessage.prototype['type'] = undefined;

/**
 * @member {Number} unread_count
 */
ObjsMessage.prototype['unread_count'] = undefined;

/**
 * @member {Boolean} upload
 */
ObjsMessage.prototype['upload'] = undefined;

/**
 * @member {String} user
 */
ObjsMessage.prototype['user'] = undefined;

/**
 * @member {module:model/ObjsUserProfileShort} user_profile
 */
ObjsMessage.prototype['user_profile'] = undefined;

/**
 * @member {String} user_team
 */
ObjsMessage.prototype['user_team'] = undefined;

/**
 * @member {String} username
 */
ObjsMessage.prototype['username'] = undefined;






export default ObjsMessage;

