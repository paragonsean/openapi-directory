/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageObject from './MessageObject';

/**
 * The ChatUpdateSuccessSchema model module.
 * @module model/ChatUpdateSuccessSchema
 * @version 1.7.0
 */
class ChatUpdateSuccessSchema {
    /**
     * Constructs a new <code>ChatUpdateSuccessSchema</code>.
     * Schema for successful response of chat.update method
     * @alias module:model/ChatUpdateSuccessSchema
     * @param channel {String} 
     * @param message {module:model/MessageObject} 
     * @param ok {Boolean} 
     * @param text {String} 
     * @param ts {String} 
     */
    constructor(channel, message, ok, text, ts) { 
        
        ChatUpdateSuccessSchema.initialize(this, channel, message, ok, text, ts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, message, ok, text, ts) { 
        obj['channel'] = channel;
        obj['message'] = message;
        obj['ok'] = ok;
        obj['text'] = text;
        obj['ts'] = ts;
    }

    /**
     * Constructs a <code>ChatUpdateSuccessSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatUpdateSuccessSchema} obj Optional instance to populate.
     * @return {module:model/ChatUpdateSuccessSchema} The populated <code>ChatUpdateSuccessSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatUpdateSuccessSchema();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = MessageObject.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatUpdateSuccessSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatUpdateSuccessSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatUpdateSuccessSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          MessageObject.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['ts'] && !(typeof data['ts'] === 'string' || data['ts'] instanceof String)) {
            throw new Error("Expected the field `ts` to be a primitive type in the JSON string but got " + data['ts']);
        }

        return true;
    }


}

ChatUpdateSuccessSchema.RequiredProperties = ["channel", "message", "ok", "text", "ts"];

/**
 * @member {String} channel
 */
ChatUpdateSuccessSchema.prototype['channel'] = undefined;

/**
 * @member {module:model/MessageObject} message
 */
ChatUpdateSuccessSchema.prototype['message'] = undefined;

/**
 * @member {Boolean} ok
 */
ChatUpdateSuccessSchema.prototype['ok'] = undefined;

/**
 * @member {String} text
 */
ChatUpdateSuccessSchema.prototype['text'] = undefined;

/**
 * @member {String} ts
 */
ChatUpdateSuccessSchema.prototype['ts'] = undefined;






export default ChatUpdateSuccessSchema;

