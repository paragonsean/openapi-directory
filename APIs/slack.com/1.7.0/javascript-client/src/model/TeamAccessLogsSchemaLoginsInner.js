/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamAccessLogsSchemaLoginsInner model module.
 * @module model/TeamAccessLogsSchemaLoginsInner
 * @version 1.7.0
 */
class TeamAccessLogsSchemaLoginsInner {
    /**
     * Constructs a new <code>TeamAccessLogsSchemaLoginsInner</code>.
     * @alias module:model/TeamAccessLogsSchemaLoginsInner
     * @param count {Number} 
     * @param country {String} 
     * @param dateFirst {Number} 
     * @param dateLast {Number} 
     * @param ip {String} 
     * @param isp {String} 
     * @param region {String} 
     * @param userAgent {String} 
     * @param userId {String} 
     * @param username {String} 
     */
    constructor(count, country, dateFirst, dateLast, ip, isp, region, userAgent, userId, username) { 
        
        TeamAccessLogsSchemaLoginsInner.initialize(this, count, country, dateFirst, dateLast, ip, isp, region, userAgent, userId, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, country, dateFirst, dateLast, ip, isp, region, userAgent, userId, username) { 
        obj['count'] = count;
        obj['country'] = country;
        obj['date_first'] = dateFirst;
        obj['date_last'] = dateLast;
        obj['ip'] = ip;
        obj['isp'] = isp;
        obj['region'] = region;
        obj['user_agent'] = userAgent;
        obj['user_id'] = userId;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>TeamAccessLogsSchemaLoginsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamAccessLogsSchemaLoginsInner} obj Optional instance to populate.
     * @return {module:model/TeamAccessLogsSchemaLoginsInner} The populated <code>TeamAccessLogsSchemaLoginsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamAccessLogsSchemaLoginsInner();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('date_first')) {
                obj['date_first'] = ApiClient.convertToType(data['date_first'], 'Number');
            }
            if (data.hasOwnProperty('date_last')) {
                obj['date_last'] = ApiClient.convertToType(data['date_last'], 'Number');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('isp')) {
                obj['isp'] = ApiClient.convertToType(data['isp'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('user_agent')) {
                obj['user_agent'] = ApiClient.convertToType(data['user_agent'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamAccessLogsSchemaLoginsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamAccessLogsSchemaLoginsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamAccessLogsSchemaLoginsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['isp'] && !(typeof data['isp'] === 'string' || data['isp'] instanceof String)) {
            throw new Error("Expected the field `isp` to be a primitive type in the JSON string but got " + data['isp']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['user_agent'] && !(typeof data['user_agent'] === 'string' || data['user_agent'] instanceof String)) {
            throw new Error("Expected the field `user_agent` to be a primitive type in the JSON string but got " + data['user_agent']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

TeamAccessLogsSchemaLoginsInner.RequiredProperties = ["count", "country", "date_first", "date_last", "ip", "isp", "region", "user_agent", "user_id", "username"];

/**
 * @member {Number} count
 */
TeamAccessLogsSchemaLoginsInner.prototype['count'] = undefined;

/**
 * @member {String} country
 */
TeamAccessLogsSchemaLoginsInner.prototype['country'] = undefined;

/**
 * @member {Number} date_first
 */
TeamAccessLogsSchemaLoginsInner.prototype['date_first'] = undefined;

/**
 * @member {Number} date_last
 */
TeamAccessLogsSchemaLoginsInner.prototype['date_last'] = undefined;

/**
 * @member {String} ip
 */
TeamAccessLogsSchemaLoginsInner.prototype['ip'] = undefined;

/**
 * @member {String} isp
 */
TeamAccessLogsSchemaLoginsInner.prototype['isp'] = undefined;

/**
 * @member {String} region
 */
TeamAccessLogsSchemaLoginsInner.prototype['region'] = undefined;

/**
 * @member {String} user_agent
 */
TeamAccessLogsSchemaLoginsInner.prototype['user_agent'] = undefined;

/**
 * @member {String} user_id
 */
TeamAccessLogsSchemaLoginsInner.prototype['user_id'] = undefined;

/**
 * @member {String} username
 */
TeamAccessLogsSchemaLoginsInner.prototype['username'] = undefined;






export default TeamAccessLogsSchemaLoginsInner;

