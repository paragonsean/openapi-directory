/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsTeam from './ObjsTeam';

/**
 * The ConversationIMChannelObjectFromConversationsMethodsSharesInner model module.
 * @module model/ConversationIMChannelObjectFromConversationsMethodsSharesInner
 * @version 1.7.0
 */
class ConversationIMChannelObjectFromConversationsMethodsSharesInner {
    /**
     * Constructs a new <code>ConversationIMChannelObjectFromConversationsMethodsSharesInner</code>.
     * @alias module:model/ConversationIMChannelObjectFromConversationsMethodsSharesInner
     * @param dateCreate {Number} 
     * @param id {String} 
     * @param isActive {Boolean} 
     * @param name {String} 
     * @param team {module:model/ObjsTeam} 
     */
    constructor(dateCreate, id, isActive, name, team) { 
        
        ConversationIMChannelObjectFromConversationsMethodsSharesInner.initialize(this, dateCreate, id, isActive, name, team);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateCreate, id, isActive, name, team) { 
        obj['date_create'] = dateCreate;
        obj['id'] = id;
        obj['is_active'] = isActive;
        obj['name'] = name;
        obj['team'] = team;
    }

    /**
     * Constructs a <code>ConversationIMChannelObjectFromConversationsMethodsSharesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationIMChannelObjectFromConversationsMethodsSharesInner} obj Optional instance to populate.
     * @return {module:model/ConversationIMChannelObjectFromConversationsMethodsSharesInner} The populated <code>ConversationIMChannelObjectFromConversationsMethodsSharesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationIMChannelObjectFromConversationsMethodsSharesInner();

            if (data.hasOwnProperty('date_create')) {
                obj['date_create'] = ApiClient.convertToType(data['date_create'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ObjsTeam.constructFromObject(data['team']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationIMChannelObjectFromConversationsMethodsSharesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationIMChannelObjectFromConversationsMethodsSharesInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversationIMChannelObjectFromConversationsMethodsSharesInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `team`
        if (data['team']) { // data not null
          ObjsTeam.validateJSON(data['team']);
        }

        return true;
    }


}

ConversationIMChannelObjectFromConversationsMethodsSharesInner.RequiredProperties = ["date_create", "id", "is_active", "name", "team"];

/**
 * @member {Number} date_create
 */
ConversationIMChannelObjectFromConversationsMethodsSharesInner.prototype['date_create'] = undefined;

/**
 * @member {String} id
 */
ConversationIMChannelObjectFromConversationsMethodsSharesInner.prototype['id'] = undefined;

/**
 * @member {Boolean} is_active
 */
ConversationIMChannelObjectFromConversationsMethodsSharesInner.prototype['is_active'] = undefined;

/**
 * @member {String} name
 */
ConversationIMChannelObjectFromConversationsMethodsSharesInner.prototype['name'] = undefined;

/**
 * @member {module:model/ObjsTeam} team
 */
ConversationIMChannelObjectFromConversationsMethodsSharesInner.prototype['team'] = undefined;






export default ConversationIMChannelObjectFromConversationsMethodsSharesInner;

