/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsReaction from './ObjsReaction';

/**
 * The ObjsComment model module.
 * @module model/ObjsComment
 * @version 1.7.0
 */
class ObjsComment {
    /**
     * Constructs a new <code>ObjsComment</code>.
     * @alias module:model/ObjsComment
     * @param comment {String} 
     * @param created {Number} 
     * @param id {String} 
     * @param isIntro {Boolean} 
     * @param timestamp {Number} 
     * @param user {String} 
     */
    constructor(comment, created, id, isIntro, timestamp, user) { 
        
        ObjsComment.initialize(this, comment, created, id, isIntro, timestamp, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comment, created, id, isIntro, timestamp, user) { 
        obj['comment'] = comment;
        obj['created'] = created;
        obj['id'] = id;
        obj['is_intro'] = isIntro;
        obj['timestamp'] = timestamp;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ObjsComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjsComment} obj Optional instance to populate.
     * @return {module:model/ObjsComment} The populated <code>ObjsComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjsComment();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_intro')) {
                obj['is_intro'] = ApiClient.convertToType(data['is_intro'], 'Boolean');
            }
            if (data.hasOwnProperty('is_starred')) {
                obj['is_starred'] = ApiClient.convertToType(data['is_starred'], 'Boolean');
            }
            if (data.hasOwnProperty('num_stars')) {
                obj['num_stars'] = ApiClient.convertToType(data['num_stars'], 'Number');
            }
            if (data.hasOwnProperty('pinned_info')) {
                obj['pinned_info'] = ApiClient.convertToType(data['pinned_info'], Object);
            }
            if (data.hasOwnProperty('pinned_to')) {
                obj['pinned_to'] = ApiClient.convertToType(data['pinned_to'], ['String']);
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = ApiClient.convertToType(data['reactions'], [ObjsReaction]);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjsComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjsComment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjsComment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pinned_to'])) {
            throw new Error("Expected the field `pinned_to` to be an array in the JSON data but got " + data['pinned_to']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reactions'])) {
            throw new Error("Expected the field `reactions` to be an array in the JSON data but got " + data['reactions']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

ObjsComment.RequiredProperties = ["comment", "created", "id", "is_intro", "timestamp", "user"];

/**
 * @member {String} comment
 */
ObjsComment.prototype['comment'] = undefined;

/**
 * @member {Number} created
 */
ObjsComment.prototype['created'] = undefined;

/**
 * @member {String} id
 */
ObjsComment.prototype['id'] = undefined;

/**
 * @member {Boolean} is_intro
 */
ObjsComment.prototype['is_intro'] = undefined;

/**
 * @member {Boolean} is_starred
 */
ObjsComment.prototype['is_starred'] = undefined;

/**
 * @member {Number} num_stars
 */
ObjsComment.prototype['num_stars'] = undefined;

/**
 * @member {Object} pinned_info
 */
ObjsComment.prototype['pinned_info'] = undefined;

/**
 * @member {Array.<String>} pinned_to
 */
ObjsComment.prototype['pinned_to'] = undefined;

/**
 * @member {Array.<module:model/ObjsReaction>} reactions
 */
ObjsComment.prototype['reactions'] = undefined;

/**
 * @member {Number} timestamp
 */
ObjsComment.prototype['timestamp'] = undefined;

/**
 * @member {String} user
 */
ObjsComment.prototype['user'] = undefined;






export default ObjsComment;

