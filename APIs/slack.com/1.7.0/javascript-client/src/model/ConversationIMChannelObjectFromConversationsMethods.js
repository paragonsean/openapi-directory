/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConversationIMChannelObjectFromConversationsMethodsSharesInner from './ConversationIMChannelObjectFromConversationsMethodsSharesInner';
import ConversationObjectParentConversationInner from './ConversationObjectParentConversationInner';
import ObjsChannelLatestInner from './ObjsChannelLatestInner';

/**
 * The ConversationIMChannelObjectFromConversationsMethods model module.
 * @module model/ConversationIMChannelObjectFromConversationsMethods
 * @version 1.7.0
 */
class ConversationIMChannelObjectFromConversationsMethods {
    /**
     * Constructs a new <code>ConversationIMChannelObjectFromConversationsMethods</code>.
     * @alias module:model/ConversationIMChannelObjectFromConversationsMethods
     * @param created {Number} 
     * @param id {String} 
     * @param isIm {Boolean} 
     * @param isOrgShared {Boolean} 
     * @param priority {Number} 
     * @param user {String} 
     */
    constructor(created, id, isIm, isOrgShared, priority, user) { 
        
        ConversationIMChannelObjectFromConversationsMethods.initialize(this, created, id, isIm, isOrgShared, priority, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, id, isIm, isOrgShared, priority, user) { 
        obj['created'] = created;
        obj['id'] = id;
        obj['is_im'] = isIm;
        obj['is_org_shared'] = isOrgShared;
        obj['priority'] = priority;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ConversationIMChannelObjectFromConversationsMethods</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationIMChannelObjectFromConversationsMethods} obj Optional instance to populate.
     * @return {module:model/ConversationIMChannelObjectFromConversationsMethods} The populated <code>ConversationIMChannelObjectFromConversationsMethods</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationIMChannelObjectFromConversationsMethods();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('has_pins')) {
                obj['has_pins'] = ApiClient.convertToType(data['has_pins'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_archived')) {
                obj['is_archived'] = ApiClient.convertToType(data['is_archived'], 'Boolean');
            }
            if (data.hasOwnProperty('is_ext_shared')) {
                obj['is_ext_shared'] = ApiClient.convertToType(data['is_ext_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_frozen')) {
                obj['is_frozen'] = ApiClient.convertToType(data['is_frozen'], 'Boolean');
            }
            if (data.hasOwnProperty('is_im')) {
                obj['is_im'] = ApiClient.convertToType(data['is_im'], 'Boolean');
            }
            if (data.hasOwnProperty('is_open')) {
                obj['is_open'] = ApiClient.convertToType(data['is_open'], 'Boolean');
            }
            if (data.hasOwnProperty('is_org_shared')) {
                obj['is_org_shared'] = ApiClient.convertToType(data['is_org_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_shared')) {
                obj['is_shared'] = ApiClient.convertToType(data['is_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_starred')) {
                obj['is_starred'] = ApiClient.convertToType(data['is_starred'], 'Boolean');
            }
            if (data.hasOwnProperty('is_user_deleted')) {
                obj['is_user_deleted'] = ApiClient.convertToType(data['is_user_deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('last_read')) {
                obj['last_read'] = ApiClient.convertToType(data['last_read'], 'String');
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = ApiClient.convertToType(data['latest'], [ObjsChannelLatestInner]);
            }
            if (data.hasOwnProperty('parent_conversation')) {
                obj['parent_conversation'] = ApiClient.convertToType(data['parent_conversation'], [ConversationObjectParentConversationInner]);
            }
            if (data.hasOwnProperty('pin_count')) {
                obj['pin_count'] = ApiClient.convertToType(data['pin_count'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], [ConversationIMChannelObjectFromConversationsMethodsSharesInner]);
            }
            if (data.hasOwnProperty('unread_count')) {
                obj['unread_count'] = ApiClient.convertToType(data['unread_count'], 'Number');
            }
            if (data.hasOwnProperty('unread_count_display')) {
                obj['unread_count_display'] = ApiClient.convertToType(data['unread_count_display'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationIMChannelObjectFromConversationsMethods</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationIMChannelObjectFromConversationsMethods</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversationIMChannelObjectFromConversationsMethods.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_read'] && !(typeof data['last_read'] === 'string' || data['last_read'] instanceof String)) {
            throw new Error("Expected the field `last_read` to be a primitive type in the JSON string but got " + data['last_read']);
        }
        if (data['latest']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['latest'])) {
                throw new Error("Expected the field `latest` to be an array in the JSON data but got " + data['latest']);
            }
            // validate the optional field `latest` (array)
            for (const item of data['latest']) {
                ObjsChannelLatestInner.validateJSON(item);
            };
        }
        if (data['parent_conversation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parent_conversation'])) {
                throw new Error("Expected the field `parent_conversation` to be an array in the JSON data but got " + data['parent_conversation']);
            }
            // validate the optional field `parent_conversation` (array)
            for (const item of data['parent_conversation']) {
                ConversationObjectParentConversationInner.validateJSON(item);
            };
        }
        if (data['shares']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shares'])) {
                throw new Error("Expected the field `shares` to be an array in the JSON data but got " + data['shares']);
            }
            // validate the optional field `shares` (array)
            for (const item of data['shares']) {
                ConversationIMChannelObjectFromConversationsMethodsSharesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

ConversationIMChannelObjectFromConversationsMethods.RequiredProperties = ["created", "id", "is_im", "is_org_shared", "priority", "user"];

/**
 * @member {Number} created
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['created'] = undefined;

/**
 * @member {Boolean} has_pins
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['has_pins'] = undefined;

/**
 * @member {String} id
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['id'] = undefined;

/**
 * @member {Boolean} is_archived
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_archived'] = undefined;

/**
 * @member {Boolean} is_ext_shared
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_ext_shared'] = undefined;

/**
 * @member {Boolean} is_frozen
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_frozen'] = undefined;

/**
 * @member {Boolean} is_im
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_im'] = undefined;

/**
 * @member {Boolean} is_open
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_open'] = undefined;

/**
 * @member {Boolean} is_org_shared
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_org_shared'] = undefined;

/**
 * @member {Boolean} is_shared
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_shared'] = undefined;

/**
 * @member {Boolean} is_starred
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_starred'] = undefined;

/**
 * @member {Boolean} is_user_deleted
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['is_user_deleted'] = undefined;

/**
 * @member {String} last_read
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['last_read'] = undefined;

/**
 * @member {Array.<module:model/ObjsChannelLatestInner>} latest
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['latest'] = undefined;

/**
 * @member {Array.<module:model/ConversationObjectParentConversationInner>} parent_conversation
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['parent_conversation'] = undefined;

/**
 * @member {Number} pin_count
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['pin_count'] = undefined;

/**
 * @member {Number} priority
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['priority'] = undefined;

/**
 * @member {Array.<module:model/ConversationIMChannelObjectFromConversationsMethodsSharesInner>} shares
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['shares'] = undefined;

/**
 * @member {Number} unread_count
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['unread_count'] = undefined;

/**
 * @member {Number} unread_count_display
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['unread_count_display'] = undefined;

/**
 * @member {String} user
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['user'] = undefined;

/**
 * @member {Number} version
 */
ConversationIMChannelObjectFromConversationsMethods.prototype['version'] = undefined;






export default ConversationIMChannelObjectFromConversationsMethods;

