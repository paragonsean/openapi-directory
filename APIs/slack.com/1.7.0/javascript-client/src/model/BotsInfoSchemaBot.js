/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BotsInfoSchemaBotIcons from './BotsInfoSchemaBotIcons';

/**
 * The BotsInfoSchemaBot model module.
 * @module model/BotsInfoSchemaBot
 * @version 1.7.0
 */
class BotsInfoSchemaBot {
    /**
     * Constructs a new <code>BotsInfoSchemaBot</code>.
     * @alias module:model/BotsInfoSchemaBot
     * @param appId {String} 
     * @param deleted {Boolean} 
     * @param icons {module:model/BotsInfoSchemaBotIcons} 
     * @param id {String} 
     * @param name {String} 
     * @param updated {Number} 
     */
    constructor(appId, deleted, icons, id, name, updated) { 
        
        BotsInfoSchemaBot.initialize(this, appId, deleted, icons, id, name, updated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, deleted, icons, id, name, updated) { 
        obj['app_id'] = appId;
        obj['deleted'] = deleted;
        obj['icons'] = icons;
        obj['id'] = id;
        obj['name'] = name;
        obj['updated'] = updated;
    }

    /**
     * Constructs a <code>BotsInfoSchemaBot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BotsInfoSchemaBot} obj Optional instance to populate.
     * @return {module:model/BotsInfoSchemaBot} The populated <code>BotsInfoSchemaBot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BotsInfoSchemaBot();

            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = BotsInfoSchemaBotIcons.constructFromObject(data['icons']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BotsInfoSchemaBot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BotsInfoSchemaBot</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BotsInfoSchemaBot.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // validate the optional field `icons`
        if (data['icons']) { // data not null
          BotsInfoSchemaBotIcons.validateJSON(data['icons']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

BotsInfoSchemaBot.RequiredProperties = ["app_id", "deleted", "icons", "id", "name", "updated"];

/**
 * @member {String} app_id
 */
BotsInfoSchemaBot.prototype['app_id'] = undefined;

/**
 * @member {Boolean} deleted
 */
BotsInfoSchemaBot.prototype['deleted'] = undefined;

/**
 * @member {module:model/BotsInfoSchemaBotIcons} icons
 */
BotsInfoSchemaBot.prototype['icons'] = undefined;

/**
 * @member {String} id
 */
BotsInfoSchemaBot.prototype['id'] = undefined;

/**
 * @member {String} name
 */
BotsInfoSchemaBot.prototype['name'] = undefined;

/**
 * @member {Number} updated
 */
BotsInfoSchemaBot.prototype['updated'] = undefined;

/**
 * @member {String} user_id
 */
BotsInfoSchemaBot.prototype['user_id'] = undefined;






export default BotsInfoSchemaBot;

