/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjsEnterpriseUser model module.
 * @module model/ObjsEnterpriseUser
 * @version 1.7.0
 */
class ObjsEnterpriseUser {
    /**
     * Constructs a new <code>ObjsEnterpriseUser</code>.
     * @alias module:model/ObjsEnterpriseUser
     * @param enterpriseId {String} 
     * @param enterpriseName {String} 
     * @param id {String} 
     * @param isAdmin {Boolean} 
     * @param isOwner {Boolean} 
     * @param teams {Array.<String>} 
     */
    constructor(enterpriseId, enterpriseName, id, isAdmin, isOwner, teams) { 
        
        ObjsEnterpriseUser.initialize(this, enterpriseId, enterpriseName, id, isAdmin, isOwner, teams);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enterpriseId, enterpriseName, id, isAdmin, isOwner, teams) { 
        obj['enterprise_id'] = enterpriseId;
        obj['enterprise_name'] = enterpriseName;
        obj['id'] = id;
        obj['is_admin'] = isAdmin;
        obj['is_owner'] = isOwner;
        obj['teams'] = teams;
    }

    /**
     * Constructs a <code>ObjsEnterpriseUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjsEnterpriseUser} obj Optional instance to populate.
     * @return {module:model/ObjsEnterpriseUser} The populated <code>ObjsEnterpriseUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjsEnterpriseUser();

            if (data.hasOwnProperty('enterprise_id')) {
                obj['enterprise_id'] = ApiClient.convertToType(data['enterprise_id'], 'String');
            }
            if (data.hasOwnProperty('enterprise_name')) {
                obj['enterprise_name'] = ApiClient.convertToType(data['enterprise_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_admin')) {
                obj['is_admin'] = ApiClient.convertToType(data['is_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('is_owner')) {
                obj['is_owner'] = ApiClient.convertToType(data['is_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjsEnterpriseUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjsEnterpriseUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjsEnterpriseUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['enterprise_id'] && !(typeof data['enterprise_id'] === 'string' || data['enterprise_id'] instanceof String)) {
            throw new Error("Expected the field `enterprise_id` to be a primitive type in the JSON string but got " + data['enterprise_id']);
        }
        // ensure the json data is a string
        if (data['enterprise_name'] && !(typeof data['enterprise_name'] === 'string' || data['enterprise_name'] instanceof String)) {
            throw new Error("Expected the field `enterprise_name` to be a primitive type in the JSON string but got " + data['enterprise_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teams'])) {
            throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
        }

        return true;
    }


}

ObjsEnterpriseUser.RequiredProperties = ["enterprise_id", "enterprise_name", "id", "is_admin", "is_owner", "teams"];

/**
 * @member {String} enterprise_id
 */
ObjsEnterpriseUser.prototype['enterprise_id'] = undefined;

/**
 * @member {String} enterprise_name
 */
ObjsEnterpriseUser.prototype['enterprise_name'] = undefined;

/**
 * @member {String} id
 */
ObjsEnterpriseUser.prototype['id'] = undefined;

/**
 * @member {Boolean} is_admin
 */
ObjsEnterpriseUser.prototype['is_admin'] = undefined;

/**
 * @member {Boolean} is_owner
 */
ObjsEnterpriseUser.prototype['is_owner'] = undefined;

/**
 * @member {Array.<String>} teams
 */
ObjsEnterpriseUser.prototype['teams'] = undefined;






export default ObjsEnterpriseUser;

