/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjsIcon model module.
 * @module model/ObjsIcon
 * @version 1.7.0
 */
class ObjsIcon {
    /**
     * Constructs a new <code>ObjsIcon</code>.
     * @alias module:model/ObjsIcon
     */
    constructor() { 
        
        ObjsIcon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjsIcon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjsIcon} obj Optional instance to populate.
     * @return {module:model/ObjsIcon} The populated <code>ObjsIcon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjsIcon();

            if (data.hasOwnProperty('image_102')) {
                obj['image_102'] = ApiClient.convertToType(data['image_102'], 'String');
            }
            if (data.hasOwnProperty('image_132')) {
                obj['image_132'] = ApiClient.convertToType(data['image_132'], 'String');
            }
            if (data.hasOwnProperty('image_230')) {
                obj['image_230'] = ApiClient.convertToType(data['image_230'], 'String');
            }
            if (data.hasOwnProperty('image_34')) {
                obj['image_34'] = ApiClient.convertToType(data['image_34'], 'String');
            }
            if (data.hasOwnProperty('image_44')) {
                obj['image_44'] = ApiClient.convertToType(data['image_44'], 'String');
            }
            if (data.hasOwnProperty('image_68')) {
                obj['image_68'] = ApiClient.convertToType(data['image_68'], 'String');
            }
            if (data.hasOwnProperty('image_88')) {
                obj['image_88'] = ApiClient.convertToType(data['image_88'], 'String');
            }
            if (data.hasOwnProperty('image_default')) {
                obj['image_default'] = ApiClient.convertToType(data['image_default'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjsIcon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjsIcon</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['image_102'] && !(typeof data['image_102'] === 'string' || data['image_102'] instanceof String)) {
            throw new Error("Expected the field `image_102` to be a primitive type in the JSON string but got " + data['image_102']);
        }
        // ensure the json data is a string
        if (data['image_132'] && !(typeof data['image_132'] === 'string' || data['image_132'] instanceof String)) {
            throw new Error("Expected the field `image_132` to be a primitive type in the JSON string but got " + data['image_132']);
        }
        // ensure the json data is a string
        if (data['image_230'] && !(typeof data['image_230'] === 'string' || data['image_230'] instanceof String)) {
            throw new Error("Expected the field `image_230` to be a primitive type in the JSON string but got " + data['image_230']);
        }
        // ensure the json data is a string
        if (data['image_34'] && !(typeof data['image_34'] === 'string' || data['image_34'] instanceof String)) {
            throw new Error("Expected the field `image_34` to be a primitive type in the JSON string but got " + data['image_34']);
        }
        // ensure the json data is a string
        if (data['image_44'] && !(typeof data['image_44'] === 'string' || data['image_44'] instanceof String)) {
            throw new Error("Expected the field `image_44` to be a primitive type in the JSON string but got " + data['image_44']);
        }
        // ensure the json data is a string
        if (data['image_68'] && !(typeof data['image_68'] === 'string' || data['image_68'] instanceof String)) {
            throw new Error("Expected the field `image_68` to be a primitive type in the JSON string but got " + data['image_68']);
        }
        // ensure the json data is a string
        if (data['image_88'] && !(typeof data['image_88'] === 'string' || data['image_88'] instanceof String)) {
            throw new Error("Expected the field `image_88` to be a primitive type in the JSON string but got " + data['image_88']);
        }

        return true;
    }


}



/**
 * @member {String} image_102
 */
ObjsIcon.prototype['image_102'] = undefined;

/**
 * @member {String} image_132
 */
ObjsIcon.prototype['image_132'] = undefined;

/**
 * @member {String} image_230
 */
ObjsIcon.prototype['image_230'] = undefined;

/**
 * @member {String} image_34
 */
ObjsIcon.prototype['image_34'] = undefined;

/**
 * @member {String} image_44
 */
ObjsIcon.prototype['image_44'] = undefined;

/**
 * @member {String} image_68
 */
ObjsIcon.prototype['image_68'] = undefined;

/**
 * @member {String} image_88
 */
ObjsIcon.prototype['image_88'] = undefined;

/**
 * @member {Boolean} image_default
 */
ObjsIcon.prototype['image_default'] = undefined;






export default ObjsIcon;

