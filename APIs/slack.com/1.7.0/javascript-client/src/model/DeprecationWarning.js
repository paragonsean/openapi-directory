/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeprecationWarning model module.
 * @module model/DeprecationWarning
 * @version 1.7.0
 */
class DeprecationWarning {
    /**
     * Constructs a new <code>DeprecationWarning</code>.
     * @alias module:model/DeprecationWarning
     * @param messages {Array.<String>} 
     * @param warnings {Array.<module:model/DeprecationWarning.WarningsEnum>} 
     */
    constructor(messages, warnings) { 
        
        DeprecationWarning.initialize(this, messages, warnings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messages, warnings) { 
        obj['messages'] = messages;
        obj['warnings'] = warnings;
    }

    /**
     * Constructs a <code>DeprecationWarning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeprecationWarning} obj Optional instance to populate.
     * @return {module:model/DeprecationWarning} The populated <code>DeprecationWarning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeprecationWarning();

            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], ['String']);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeprecationWarning</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeprecationWarning</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeprecationWarning.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['messages'])) {
            throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warnings'])) {
            throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
        }

        return true;
    }


}

DeprecationWarning.RequiredProperties = ["messages", "warnings"];

/**
 * @member {Array.<String>} messages
 */
DeprecationWarning.prototype['messages'] = undefined;

/**
 * @member {Array.<module:model/DeprecationWarning.WarningsEnum>} warnings
 */
DeprecationWarning.prototype['warnings'] = undefined;





/**
 * Allowed values for the <code>warnings</code> property.
 * @enum {String}
 * @readonly
 */
DeprecationWarning['WarningsEnum'] = {

    /**
     * value: "method_deprecated"
     * @const
     */
    "method_deprecated": "method_deprecated"
};



export default DeprecationWarning;

