/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthTestSuccessSchema model module.
 * @module model/AuthTestSuccessSchema
 * @version 1.7.0
 */
class AuthTestSuccessSchema {
    /**
     * Constructs a new <code>AuthTestSuccessSchema</code>.
     * Schema for successful response auth.test method
     * @alias module:model/AuthTestSuccessSchema
     * @param ok {Boolean} 
     * @param team {String} 
     * @param teamId {String} 
     * @param url {String} 
     * @param user {String} 
     * @param userId {String} 
     */
    constructor(ok, team, teamId, url, user, userId) { 
        
        AuthTestSuccessSchema.initialize(this, ok, team, teamId, url, user, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ok, team, teamId, url, user, userId) { 
        obj['ok'] = ok;
        obj['team'] = team;
        obj['team_id'] = teamId;
        obj['url'] = url;
        obj['user'] = user;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>AuthTestSuccessSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthTestSuccessSchema} obj Optional instance to populate.
     * @return {module:model/AuthTestSuccessSchema} The populated <code>AuthTestSuccessSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthTestSuccessSchema();

            if (data.hasOwnProperty('bot_id')) {
                obj['bot_id'] = ApiClient.convertToType(data['bot_id'], 'String');
            }
            if (data.hasOwnProperty('is_enterprise_install')) {
                obj['is_enterprise_install'] = ApiClient.convertToType(data['is_enterprise_install'], 'Boolean');
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('team_id')) {
                obj['team_id'] = ApiClient.convertToType(data['team_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthTestSuccessSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthTestSuccessSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthTestSuccessSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bot_id'] && !(typeof data['bot_id'] === 'string' || data['bot_id'] instanceof String)) {
            throw new Error("Expected the field `bot_id` to be a primitive type in the JSON string but got " + data['bot_id']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['team_id'] && !(typeof data['team_id'] === 'string' || data['team_id'] instanceof String)) {
            throw new Error("Expected the field `team_id` to be a primitive type in the JSON string but got " + data['team_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

AuthTestSuccessSchema.RequiredProperties = ["ok", "team", "team_id", "url", "user", "user_id"];

/**
 * @member {String} bot_id
 */
AuthTestSuccessSchema.prototype['bot_id'] = undefined;

/**
 * @member {Boolean} is_enterprise_install
 */
AuthTestSuccessSchema.prototype['is_enterprise_install'] = undefined;

/**
 * @member {Boolean} ok
 */
AuthTestSuccessSchema.prototype['ok'] = undefined;

/**
 * @member {String} team
 */
AuthTestSuccessSchema.prototype['team'] = undefined;

/**
 * @member {String} team_id
 */
AuthTestSuccessSchema.prototype['team_id'] = undefined;

/**
 * @member {String} url
 */
AuthTestSuccessSchema.prototype['url'] = undefined;

/**
 * @member {String} user
 */
AuthTestSuccessSchema.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
AuthTestSuccessSchema.prototype['user_id'] = undefined;






export default AuthTestSuccessSchema;

