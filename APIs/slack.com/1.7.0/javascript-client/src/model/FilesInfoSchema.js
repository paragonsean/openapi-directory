/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsFile from './ObjsFile';
import ObjsPaging from './ObjsPaging';
import ObjsResponseMetadataInner from './ObjsResponseMetadataInner';

/**
 * The FilesInfoSchema model module.
 * @module model/FilesInfoSchema
 * @version 1.7.0
 */
class FilesInfoSchema {
    /**
     * Constructs a new <code>FilesInfoSchema</code>.
     * Schema for successful response from files.info method
     * @alias module:model/FilesInfoSchema
     * @param comments {Array.<Object>} 
     * @param file {module:model/ObjsFile} 
     * @param ok {Boolean} 
     */
    constructor(comments, file, ok) { 
        
        FilesInfoSchema.initialize(this, comments, file, ok);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments, file, ok) { 
        obj['comments'] = comments;
        obj['file'] = file;
        obj['ok'] = ok;
    }

    /**
     * Constructs a <code>FilesInfoSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilesInfoSchema} obj Optional instance to populate.
     * @return {module:model/FilesInfoSchema} The populated <code>FilesInfoSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilesInfoSchema();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [Object]);
            }
            if (data.hasOwnProperty('content_html')) {
                obj['content_html'] = ApiClient.convertToType(data['content_html'], Object);
            }
            if (data.hasOwnProperty('editor')) {
                obj['editor'] = ApiClient.convertToType(data['editor'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ObjsFile.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('paging')) {
                obj['paging'] = ObjsPaging.constructFromObject(data['paging']);
            }
            if (data.hasOwnProperty('response_metadata')) {
                obj['response_metadata'] = ApiClient.convertToType(data['response_metadata'], [ObjsResponseMetadataInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilesInfoSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilesInfoSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FilesInfoSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['comments'])) {
            throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['editor'] && !(typeof data['editor'] === 'string' || data['editor'] instanceof String)) {
            throw new Error("Expected the field `editor` to be a primitive type in the JSON string but got " + data['editor']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          ObjsFile.validateJSON(data['file']);
        }
        // validate the optional field `paging`
        if (data['paging']) { // data not null
          ObjsPaging.validateJSON(data['paging']);
        }
        if (data['response_metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['response_metadata'])) {
                throw new Error("Expected the field `response_metadata` to be an array in the JSON data but got " + data['response_metadata']);
            }
            // validate the optional field `response_metadata` (array)
            for (const item of data['response_metadata']) {
                ObjsResponseMetadataInner.validateJSON(item);
            };
        }

        return true;
    }


}

FilesInfoSchema.RequiredProperties = ["comments", "file", "ok"];

/**
 * @member {Array.<Object>} comments
 */
FilesInfoSchema.prototype['comments'] = undefined;

/**
 * @member {Object} content_html
 */
FilesInfoSchema.prototype['content_html'] = undefined;

/**
 * @member {String} editor
 */
FilesInfoSchema.prototype['editor'] = undefined;

/**
 * @member {module:model/ObjsFile} file
 */
FilesInfoSchema.prototype['file'] = undefined;

/**
 * @member {Boolean} ok
 */
FilesInfoSchema.prototype['ok'] = undefined;

/**
 * @member {module:model/ObjsPaging} paging
 */
FilesInfoSchema.prototype['paging'] = undefined;

/**
 * @member {Array.<module:model/ObjsResponseMetadataInner>} response_metadata
 */
FilesInfoSchema.prototype['response_metadata'] = undefined;






export default FilesInfoSchema;

