/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatPostEphemeralSuccessSchema model module.
 * @module model/ChatPostEphemeralSuccessSchema
 * @version 1.7.0
 */
class ChatPostEphemeralSuccessSchema {
    /**
     * Constructs a new <code>ChatPostEphemeralSuccessSchema</code>.
     * Schema for successful response from chat.postEphemeral method
     * @alias module:model/ChatPostEphemeralSuccessSchema
     * @param messageTs {String} 
     * @param ok {Boolean} 
     */
    constructor(messageTs, ok) { 
        
        ChatPostEphemeralSuccessSchema.initialize(this, messageTs, ok);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageTs, ok) { 
        obj['message_ts'] = messageTs;
        obj['ok'] = ok;
    }

    /**
     * Constructs a <code>ChatPostEphemeralSuccessSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatPostEphemeralSuccessSchema} obj Optional instance to populate.
     * @return {module:model/ChatPostEphemeralSuccessSchema} The populated <code>ChatPostEphemeralSuccessSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatPostEphemeralSuccessSchema();

            if (data.hasOwnProperty('message_ts')) {
                obj['message_ts'] = ApiClient.convertToType(data['message_ts'], 'String');
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatPostEphemeralSuccessSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatPostEphemeralSuccessSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatPostEphemeralSuccessSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message_ts'] && !(typeof data['message_ts'] === 'string' || data['message_ts'] instanceof String)) {
            throw new Error("Expected the field `message_ts` to be a primitive type in the JSON string but got " + data['message_ts']);
        }

        return true;
    }


}

ChatPostEphemeralSuccessSchema.RequiredProperties = ["message_ts", "ok"];

/**
 * @member {String} message_ts
 */
ChatPostEphemeralSuccessSchema.prototype['message_ts'] = undefined;

/**
 * @member {Boolean} ok
 */
ChatPostEphemeralSuccessSchema.prototype['ok'] = undefined;






export default ChatPostEphemeralSuccessSchema;

