/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamIntegrationLogsSchemaLogsInner model module.
 * @module model/TeamIntegrationLogsSchemaLogsInner
 * @version 1.7.0
 */
class TeamIntegrationLogsSchemaLogsInner {
    /**
     * Constructs a new <code>TeamIntegrationLogsSchemaLogsInner</code>.
     * @alias module:model/TeamIntegrationLogsSchemaLogsInner
     * @param appId {String} 
     * @param appType {String} 
     * @param changeType {String} 
     * @param date {String} 
     * @param scope {String} 
     * @param userId {String} 
     * @param userName {String} 
     */
    constructor(appId, appType, changeType, date, scope, userId, userName) { 
        
        TeamIntegrationLogsSchemaLogsInner.initialize(this, appId, appType, changeType, date, scope, userId, userName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appId, appType, changeType, date, scope, userId, userName) { 
        obj['app_id'] = appId;
        obj['app_type'] = appType;
        obj['change_type'] = changeType;
        obj['date'] = date;
        obj['scope'] = scope;
        obj['user_id'] = userId;
        obj['user_name'] = userName;
    }

    /**
     * Constructs a <code>TeamIntegrationLogsSchemaLogsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamIntegrationLogsSchemaLogsInner} obj Optional instance to populate.
     * @return {module:model/TeamIntegrationLogsSchemaLogsInner} The populated <code>TeamIntegrationLogsSchemaLogsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamIntegrationLogsSchemaLogsInner();

            if (data.hasOwnProperty('admin_app_id')) {
                obj['admin_app_id'] = ApiClient.convertToType(data['admin_app_id'], 'String');
            }
            if (data.hasOwnProperty('app_id')) {
                obj['app_id'] = ApiClient.convertToType(data['app_id'], 'String');
            }
            if (data.hasOwnProperty('app_type')) {
                obj['app_type'] = ApiClient.convertToType(data['app_type'], 'String');
            }
            if (data.hasOwnProperty('change_type')) {
                obj['change_type'] = ApiClient.convertToType(data['change_type'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('service_type')) {
                obj['service_type'] = ApiClient.convertToType(data['service_type'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('user_name')) {
                obj['user_name'] = ApiClient.convertToType(data['user_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamIntegrationLogsSchemaLogsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamIntegrationLogsSchemaLogsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamIntegrationLogsSchemaLogsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['admin_app_id'] && !(typeof data['admin_app_id'] === 'string' || data['admin_app_id'] instanceof String)) {
            throw new Error("Expected the field `admin_app_id` to be a primitive type in the JSON string but got " + data['admin_app_id']);
        }
        // ensure the json data is a string
        if (data['app_id'] && !(typeof data['app_id'] === 'string' || data['app_id'] instanceof String)) {
            throw new Error("Expected the field `app_id` to be a primitive type in the JSON string but got " + data['app_id']);
        }
        // ensure the json data is a string
        if (data['app_type'] && !(typeof data['app_type'] === 'string' || data['app_type'] instanceof String)) {
            throw new Error("Expected the field `app_type` to be a primitive type in the JSON string but got " + data['app_type']);
        }
        // ensure the json data is a string
        if (data['change_type'] && !(typeof data['change_type'] === 'string' || data['change_type'] instanceof String)) {
            throw new Error("Expected the field `change_type` to be a primitive type in the JSON string but got " + data['change_type']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        // ensure the json data is a string
        if (data['service_type'] && !(typeof data['service_type'] === 'string' || data['service_type'] instanceof String)) {
            throw new Error("Expected the field `service_type` to be a primitive type in the JSON string but got " + data['service_type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['user_name'] && !(typeof data['user_name'] === 'string' || data['user_name'] instanceof String)) {
            throw new Error("Expected the field `user_name` to be a primitive type in the JSON string but got " + data['user_name']);
        }

        return true;
    }


}

TeamIntegrationLogsSchemaLogsInner.RequiredProperties = ["app_id", "app_type", "change_type", "date", "scope", "user_id", "user_name"];

/**
 * @member {String} admin_app_id
 */
TeamIntegrationLogsSchemaLogsInner.prototype['admin_app_id'] = undefined;

/**
 * @member {String} app_id
 */
TeamIntegrationLogsSchemaLogsInner.prototype['app_id'] = undefined;

/**
 * @member {String} app_type
 */
TeamIntegrationLogsSchemaLogsInner.prototype['app_type'] = undefined;

/**
 * @member {String} change_type
 */
TeamIntegrationLogsSchemaLogsInner.prototype['change_type'] = undefined;

/**
 * @member {String} channel
 */
TeamIntegrationLogsSchemaLogsInner.prototype['channel'] = undefined;

/**
 * @member {String} date
 */
TeamIntegrationLogsSchemaLogsInner.prototype['date'] = undefined;

/**
 * @member {String} scope
 */
TeamIntegrationLogsSchemaLogsInner.prototype['scope'] = undefined;

/**
 * @member {String} service_id
 */
TeamIntegrationLogsSchemaLogsInner.prototype['service_id'] = undefined;

/**
 * @member {String} service_type
 */
TeamIntegrationLogsSchemaLogsInner.prototype['service_type'] = undefined;

/**
 * @member {String} user_id
 */
TeamIntegrationLogsSchemaLogsInner.prototype['user_id'] = undefined;

/**
 * @member {String} user_name
 */
TeamIntegrationLogsSchemaLogsInner.prototype['user_name'] = undefined;






export default TeamIntegrationLogsSchemaLogsInner;

