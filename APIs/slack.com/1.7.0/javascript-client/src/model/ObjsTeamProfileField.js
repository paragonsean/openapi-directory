/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsTeamProfileFieldOptionsInner from './ObjsTeamProfileFieldOptionsInner';

/**
 * The ObjsTeamProfileField model module.
 * @module model/ObjsTeamProfileField
 * @version 1.7.0
 */
class ObjsTeamProfileField {
    /**
     * Constructs a new <code>ObjsTeamProfileField</code>.
     * @alias module:model/ObjsTeamProfileField
     * @param hint {String} 
     * @param id {String} 
     * @param label {String} 
     * @param ordering {Number} 
     * @param type {module:model/ObjsTeamProfileField.TypeEnum} 
     */
    constructor(hint, id, label, ordering, type) { 
        
        ObjsTeamProfileField.initialize(this, hint, id, label, ordering, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hint, id, label, ordering, type) { 
        obj['hint'] = hint;
        obj['id'] = id;
        obj['label'] = label;
        obj['ordering'] = ordering;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ObjsTeamProfileField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjsTeamProfileField} obj Optional instance to populate.
     * @return {module:model/ObjsTeamProfileField} The populated <code>ObjsTeamProfileField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjsTeamProfileField();

            if (data.hasOwnProperty('field_name')) {
                obj['field_name'] = ApiClient.convertToType(data['field_name'], 'String');
            }
            if (data.hasOwnProperty('hint')) {
                obj['hint'] = ApiClient.convertToType(data['hint'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_hidden')) {
                obj['is_hidden'] = ApiClient.convertToType(data['is_hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [ObjsTeamProfileFieldOptionsInner]);
            }
            if (data.hasOwnProperty('ordering')) {
                obj['ordering'] = ApiClient.convertToType(data['ordering'], 'Number');
            }
            if (data.hasOwnProperty('possible_values')) {
                obj['possible_values'] = ApiClient.convertToType(data['possible_values'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjsTeamProfileField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjsTeamProfileField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ObjsTeamProfileField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['field_name'] && !(typeof data['field_name'] === 'string' || data['field_name'] instanceof String)) {
            throw new Error("Expected the field `field_name` to be a primitive type in the JSON string but got " + data['field_name']);
        }
        // ensure the json data is a string
        if (data['hint'] && !(typeof data['hint'] === 'string' || data['hint'] instanceof String)) {
            throw new Error("Expected the field `hint` to be a primitive type in the JSON string but got " + data['hint']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                ObjsTeamProfileFieldOptionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['possible_values'])) {
            throw new Error("Expected the field `possible_values` to be an array in the JSON data but got " + data['possible_values']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ObjsTeamProfileField.RequiredProperties = ["hint", "id", "label", "ordering", "type"];

/**
 * @member {String} field_name
 */
ObjsTeamProfileField.prototype['field_name'] = undefined;

/**
 * @member {String} hint
 */
ObjsTeamProfileField.prototype['hint'] = undefined;

/**
 * @member {String} id
 */
ObjsTeamProfileField.prototype['id'] = undefined;

/**
 * @member {Boolean} is_hidden
 */
ObjsTeamProfileField.prototype['is_hidden'] = undefined;

/**
 * @member {String} label
 */
ObjsTeamProfileField.prototype['label'] = undefined;

/**
 * @member {Array.<module:model/ObjsTeamProfileFieldOptionsInner>} options
 */
ObjsTeamProfileField.prototype['options'] = undefined;

/**
 * @member {Number} ordering
 */
ObjsTeamProfileField.prototype['ordering'] = undefined;

/**
 * @member {Array.<String>} possible_values
 */
ObjsTeamProfileField.prototype['possible_values'] = undefined;

/**
 * @member {module:model/ObjsTeamProfileField.TypeEnum} type
 */
ObjsTeamProfileField.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ObjsTeamProfileField['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "link"
     * @const
     */
    "link": "link",

    /**
     * value: "mailto"
     * @const
     */
    "mailto": "mailto",

    /**
     * value: "options_list"
     * @const
     */
    "options_list": "options_list",

    /**
     * value: "user"
     * @const
     */
    "user": "user"
};



export default ObjsTeamProfileField;

