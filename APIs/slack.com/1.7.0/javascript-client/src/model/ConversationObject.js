/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConversationObjectDisplayCounts from './ConversationObjectDisplayCounts';
import ConversationObjectParentConversationInner from './ConversationObjectParentConversationInner';
import ConversationObjectSharesInner from './ConversationObjectSharesInner';
import ObjsChannelLatestInner from './ObjsChannelLatestInner';
import ObjsChannelPurpose from './ObjsChannelPurpose';

/**
 * The ConversationObject model module.
 * @module model/ConversationObject
 * @version 1.7.0
 */
class ConversationObject {
    /**
     * Constructs a new <code>ConversationObject</code>.
     * @alias module:model/ConversationObject
     * @param created {Number} 
     * @param creator {String} 
     * @param id {String} 
     * @param isArchived {Boolean} 
     * @param isChannel {Boolean} 
     * @param isGeneral {Boolean} 
     * @param isGroup {Boolean} 
     * @param isIm {Boolean} 
     * @param isMpim {Boolean} 
     * @param isOrgShared {Boolean} 
     * @param isPrivate {Boolean} 
     * @param isShared {Boolean} 
     * @param name {String} 
     * @param nameNormalized {String} 
     * @param purpose {module:model/ObjsChannelPurpose} 
     * @param topic {module:model/ObjsChannelPurpose} 
     */
    constructor(created, creator, id, isArchived, isChannel, isGeneral, isGroup, isIm, isMpim, isOrgShared, isPrivate, isShared, name, nameNormalized, purpose, topic) { 
        
        ConversationObject.initialize(this, created, creator, id, isArchived, isChannel, isGeneral, isGroup, isIm, isMpim, isOrgShared, isPrivate, isShared, name, nameNormalized, purpose, topic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, creator, id, isArchived, isChannel, isGeneral, isGroup, isIm, isMpim, isOrgShared, isPrivate, isShared, name, nameNormalized, purpose, topic) { 
        obj['created'] = created;
        obj['creator'] = creator;
        obj['id'] = id;
        obj['is_archived'] = isArchived;
        obj['is_channel'] = isChannel;
        obj['is_general'] = isGeneral;
        obj['is_group'] = isGroup;
        obj['is_im'] = isIm;
        obj['is_mpim'] = isMpim;
        obj['is_org_shared'] = isOrgShared;
        obj['is_private'] = isPrivate;
        obj['is_shared'] = isShared;
        obj['name'] = name;
        obj['name_normalized'] = nameNormalized;
        obj['purpose'] = purpose;
        obj['topic'] = topic;
    }

    /**
     * Constructs a <code>ConversationObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationObject} obj Optional instance to populate.
     * @return {module:model/ConversationObject} The populated <code>ConversationObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationObject();

            if (data.hasOwnProperty('accepted_user')) {
                obj['accepted_user'] = ApiClient.convertToType(data['accepted_user'], 'String');
            }
            if (data.hasOwnProperty('connected_team_ids')) {
                obj['connected_team_ids'] = ApiClient.convertToType(data['connected_team_ids'], ['String']);
            }
            if (data.hasOwnProperty('conversation_host_id')) {
                obj['conversation_host_id'] = ApiClient.convertToType(data['conversation_host_id'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('display_counts')) {
                obj['display_counts'] = ConversationObjectDisplayCounts.constructFromObject(data['display_counts']);
            }
            if (data.hasOwnProperty('enterprise_id')) {
                obj['enterprise_id'] = ApiClient.convertToType(data['enterprise_id'], 'String');
            }
            if (data.hasOwnProperty('has_pins')) {
                obj['has_pins'] = ApiClient.convertToType(data['has_pins'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internal_team_ids')) {
                obj['internal_team_ids'] = ApiClient.convertToType(data['internal_team_ids'], ['String']);
            }
            if (data.hasOwnProperty('is_archived')) {
                obj['is_archived'] = ApiClient.convertToType(data['is_archived'], 'Boolean');
            }
            if (data.hasOwnProperty('is_channel')) {
                obj['is_channel'] = ApiClient.convertToType(data['is_channel'], 'Boolean');
            }
            if (data.hasOwnProperty('is_ext_shared')) {
                obj['is_ext_shared'] = ApiClient.convertToType(data['is_ext_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_frozen')) {
                obj['is_frozen'] = ApiClient.convertToType(data['is_frozen'], 'Boolean');
            }
            if (data.hasOwnProperty('is_general')) {
                obj['is_general'] = ApiClient.convertToType(data['is_general'], 'Boolean');
            }
            if (data.hasOwnProperty('is_global_shared')) {
                obj['is_global_shared'] = ApiClient.convertToType(data['is_global_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_group')) {
                obj['is_group'] = ApiClient.convertToType(data['is_group'], 'Boolean');
            }
            if (data.hasOwnProperty('is_im')) {
                obj['is_im'] = ApiClient.convertToType(data['is_im'], 'Boolean');
            }
            if (data.hasOwnProperty('is_member')) {
                obj['is_member'] = ApiClient.convertToType(data['is_member'], 'Boolean');
            }
            if (data.hasOwnProperty('is_moved')) {
                obj['is_moved'] = ApiClient.convertToType(data['is_moved'], 'Number');
            }
            if (data.hasOwnProperty('is_mpim')) {
                obj['is_mpim'] = ApiClient.convertToType(data['is_mpim'], 'Boolean');
            }
            if (data.hasOwnProperty('is_non_threadable')) {
                obj['is_non_threadable'] = ApiClient.convertToType(data['is_non_threadable'], 'Boolean');
            }
            if (data.hasOwnProperty('is_open')) {
                obj['is_open'] = ApiClient.convertToType(data['is_open'], 'Boolean');
            }
            if (data.hasOwnProperty('is_org_default')) {
                obj['is_org_default'] = ApiClient.convertToType(data['is_org_default'], 'Boolean');
            }
            if (data.hasOwnProperty('is_org_mandatory')) {
                obj['is_org_mandatory'] = ApiClient.convertToType(data['is_org_mandatory'], 'Boolean');
            }
            if (data.hasOwnProperty('is_org_shared')) {
                obj['is_org_shared'] = ApiClient.convertToType(data['is_org_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_pending_ext_shared')) {
                obj['is_pending_ext_shared'] = ApiClient.convertToType(data['is_pending_ext_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_private')) {
                obj['is_private'] = ApiClient.convertToType(data['is_private'], 'Boolean');
            }
            if (data.hasOwnProperty('is_read_only')) {
                obj['is_read_only'] = ApiClient.convertToType(data['is_read_only'], 'Boolean');
            }
            if (data.hasOwnProperty('is_shared')) {
                obj['is_shared'] = ApiClient.convertToType(data['is_shared'], 'Boolean');
            }
            if (data.hasOwnProperty('is_starred')) {
                obj['is_starred'] = ApiClient.convertToType(data['is_starred'], 'Boolean');
            }
            if (data.hasOwnProperty('is_thread_only')) {
                obj['is_thread_only'] = ApiClient.convertToType(data['is_thread_only'], 'Boolean');
            }
            if (data.hasOwnProperty('last_read')) {
                obj['last_read'] = ApiClient.convertToType(data['last_read'], 'String');
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = ApiClient.convertToType(data['latest'], [ObjsChannelLatestInner]);
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('name_normalized')) {
                obj['name_normalized'] = ApiClient.convertToType(data['name_normalized'], 'String');
            }
            if (data.hasOwnProperty('num_members')) {
                obj['num_members'] = ApiClient.convertToType(data['num_members'], 'Number');
            }
            if (data.hasOwnProperty('parent_conversation')) {
                obj['parent_conversation'] = ApiClient.convertToType(data['parent_conversation'], [ConversationObjectParentConversationInner]);
            }
            if (data.hasOwnProperty('pending_connected_team_ids')) {
                obj['pending_connected_team_ids'] = ApiClient.convertToType(data['pending_connected_team_ids'], ['String']);
            }
            if (data.hasOwnProperty('pending_shared')) {
                obj['pending_shared'] = ApiClient.convertToType(data['pending_shared'], ['String']);
            }
            if (data.hasOwnProperty('pin_count')) {
                obj['pin_count'] = ApiClient.convertToType(data['pin_count'], 'Number');
            }
            if (data.hasOwnProperty('previous_names')) {
                obj['previous_names'] = ApiClient.convertToType(data['previous_names'], ['String']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ObjsChannelPurpose.constructFromObject(data['purpose']);
            }
            if (data.hasOwnProperty('shared_team_ids')) {
                obj['shared_team_ids'] = ApiClient.convertToType(data['shared_team_ids'], ['String']);
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], [ConversationObjectSharesInner]);
            }
            if (data.hasOwnProperty('timezone_count')) {
                obj['timezone_count'] = ApiClient.convertToType(data['timezone_count'], 'Number');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ObjsChannelPurpose.constructFromObject(data['topic']);
            }
            if (data.hasOwnProperty('unlinked')) {
                obj['unlinked'] = ApiClient.convertToType(data['unlinked'], 'Number');
            }
            if (data.hasOwnProperty('unread_count')) {
                obj['unread_count'] = ApiClient.convertToType(data['unread_count'], 'Number');
            }
            if (data.hasOwnProperty('unread_count_display')) {
                obj['unread_count_display'] = ApiClient.convertToType(data['unread_count_display'], 'Number');
            }
            if (data.hasOwnProperty('use_case')) {
                obj['use_case'] = ApiClient.convertToType(data['use_case'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConversationObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accepted_user'] && !(typeof data['accepted_user'] === 'string' || data['accepted_user'] instanceof String)) {
            throw new Error("Expected the field `accepted_user` to be a primitive type in the JSON string but got " + data['accepted_user']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['connected_team_ids'])) {
            throw new Error("Expected the field `connected_team_ids` to be an array in the JSON data but got " + data['connected_team_ids']);
        }
        // ensure the json data is a string
        if (data['conversation_host_id'] && !(typeof data['conversation_host_id'] === 'string' || data['conversation_host_id'] instanceof String)) {
            throw new Error("Expected the field `conversation_host_id` to be a primitive type in the JSON string but got " + data['conversation_host_id']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // validate the optional field `display_counts`
        if (data['display_counts']) { // data not null
          ConversationObjectDisplayCounts.validateJSON(data['display_counts']);
        }
        // ensure the json data is a string
        if (data['enterprise_id'] && !(typeof data['enterprise_id'] === 'string' || data['enterprise_id'] instanceof String)) {
            throw new Error("Expected the field `enterprise_id` to be a primitive type in the JSON string but got " + data['enterprise_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['internal_team_ids'])) {
            throw new Error("Expected the field `internal_team_ids` to be an array in the JSON data but got " + data['internal_team_ids']);
        }
        // ensure the json data is a string
        if (data['last_read'] && !(typeof data['last_read'] === 'string' || data['last_read'] instanceof String)) {
            throw new Error("Expected the field `last_read` to be a primitive type in the JSON string but got " + data['last_read']);
        }
        if (data['latest']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['latest'])) {
                throw new Error("Expected the field `latest` to be an array in the JSON data but got " + data['latest']);
            }
            // validate the optional field `latest` (array)
            for (const item of data['latest']) {
                ObjsChannelLatestInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['members'])) {
            throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['name_normalized'] && !(typeof data['name_normalized'] === 'string' || data['name_normalized'] instanceof String)) {
            throw new Error("Expected the field `name_normalized` to be a primitive type in the JSON string but got " + data['name_normalized']);
        }
        if (data['parent_conversation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parent_conversation'])) {
                throw new Error("Expected the field `parent_conversation` to be an array in the JSON data but got " + data['parent_conversation']);
            }
            // validate the optional field `parent_conversation` (array)
            for (const item of data['parent_conversation']) {
                ConversationObjectParentConversationInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pending_connected_team_ids'])) {
            throw new Error("Expected the field `pending_connected_team_ids` to be an array in the JSON data but got " + data['pending_connected_team_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pending_shared'])) {
            throw new Error("Expected the field `pending_shared` to be an array in the JSON data but got " + data['pending_shared']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['previous_names'])) {
            throw new Error("Expected the field `previous_names` to be an array in the JSON data but got " + data['previous_names']);
        }
        // validate the optional field `purpose`
        if (data['purpose']) { // data not null
          ObjsChannelPurpose.validateJSON(data['purpose']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['shared_team_ids'])) {
            throw new Error("Expected the field `shared_team_ids` to be an array in the JSON data but got " + data['shared_team_ids']);
        }
        if (data['shares']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shares'])) {
                throw new Error("Expected the field `shares` to be an array in the JSON data but got " + data['shares']);
            }
            // validate the optional field `shares` (array)
            for (const item of data['shares']) {
                ConversationObjectSharesInner.validateJSON(item);
            };
        }
        // validate the optional field `topic`
        if (data['topic']) { // data not null
          ObjsChannelPurpose.validateJSON(data['topic']);
        }
        // ensure the json data is a string
        if (data['use_case'] && !(typeof data['use_case'] === 'string' || data['use_case'] instanceof String)) {
            throw new Error("Expected the field `use_case` to be a primitive type in the JSON string but got " + data['use_case']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

ConversationObject.RequiredProperties = ["created", "creator", "id", "is_archived", "is_channel", "is_general", "is_group", "is_im", "is_mpim", "is_org_shared", "is_private", "is_shared", "name", "name_normalized", "purpose", "topic"];

/**
 * @member {String} accepted_user
 */
ConversationObject.prototype['accepted_user'] = undefined;

/**
 * @member {Array.<String>} connected_team_ids
 */
ConversationObject.prototype['connected_team_ids'] = undefined;

/**
 * @member {String} conversation_host_id
 */
ConversationObject.prototype['conversation_host_id'] = undefined;

/**
 * @member {Number} created
 */
ConversationObject.prototype['created'] = undefined;

/**
 * @member {String} creator
 */
ConversationObject.prototype['creator'] = undefined;

/**
 * @member {module:model/ConversationObjectDisplayCounts} display_counts
 */
ConversationObject.prototype['display_counts'] = undefined;

/**
 * @member {String} enterprise_id
 */
ConversationObject.prototype['enterprise_id'] = undefined;

/**
 * @member {Boolean} has_pins
 */
ConversationObject.prototype['has_pins'] = undefined;

/**
 * @member {String} id
 */
ConversationObject.prototype['id'] = undefined;

/**
 * @member {Array.<String>} internal_team_ids
 */
ConversationObject.prototype['internal_team_ids'] = undefined;

/**
 * @member {Boolean} is_archived
 */
ConversationObject.prototype['is_archived'] = undefined;

/**
 * @member {Boolean} is_channel
 */
ConversationObject.prototype['is_channel'] = undefined;

/**
 * @member {Boolean} is_ext_shared
 */
ConversationObject.prototype['is_ext_shared'] = undefined;

/**
 * @member {Boolean} is_frozen
 */
ConversationObject.prototype['is_frozen'] = undefined;

/**
 * @member {Boolean} is_general
 */
ConversationObject.prototype['is_general'] = undefined;

/**
 * @member {Boolean} is_global_shared
 */
ConversationObject.prototype['is_global_shared'] = undefined;

/**
 * @member {Boolean} is_group
 */
ConversationObject.prototype['is_group'] = undefined;

/**
 * @member {Boolean} is_im
 */
ConversationObject.prototype['is_im'] = undefined;

/**
 * @member {Boolean} is_member
 */
ConversationObject.prototype['is_member'] = undefined;

/**
 * @member {Number} is_moved
 */
ConversationObject.prototype['is_moved'] = undefined;

/**
 * @member {Boolean} is_mpim
 */
ConversationObject.prototype['is_mpim'] = undefined;

/**
 * @member {Boolean} is_non_threadable
 */
ConversationObject.prototype['is_non_threadable'] = undefined;

/**
 * @member {Boolean} is_open
 */
ConversationObject.prototype['is_open'] = undefined;

/**
 * @member {Boolean} is_org_default
 */
ConversationObject.prototype['is_org_default'] = undefined;

/**
 * @member {Boolean} is_org_mandatory
 */
ConversationObject.prototype['is_org_mandatory'] = undefined;

/**
 * @member {Boolean} is_org_shared
 */
ConversationObject.prototype['is_org_shared'] = undefined;

/**
 * @member {Boolean} is_pending_ext_shared
 */
ConversationObject.prototype['is_pending_ext_shared'] = undefined;

/**
 * @member {Boolean} is_private
 */
ConversationObject.prototype['is_private'] = undefined;

/**
 * @member {Boolean} is_read_only
 */
ConversationObject.prototype['is_read_only'] = undefined;

/**
 * @member {Boolean} is_shared
 */
ConversationObject.prototype['is_shared'] = undefined;

/**
 * @member {Boolean} is_starred
 */
ConversationObject.prototype['is_starred'] = undefined;

/**
 * @member {Boolean} is_thread_only
 */
ConversationObject.prototype['is_thread_only'] = undefined;

/**
 * @member {String} last_read
 */
ConversationObject.prototype['last_read'] = undefined;

/**
 * @member {Array.<module:model/ObjsChannelLatestInner>} latest
 */
ConversationObject.prototype['latest'] = undefined;

/**
 * @member {Array.<String>} members
 */
ConversationObject.prototype['members'] = undefined;

/**
 * @member {String} name
 */
ConversationObject.prototype['name'] = undefined;

/**
 * @member {String} name_normalized
 */
ConversationObject.prototype['name_normalized'] = undefined;

/**
 * @member {Number} num_members
 */
ConversationObject.prototype['num_members'] = undefined;

/**
 * @member {Array.<module:model/ConversationObjectParentConversationInner>} parent_conversation
 */
ConversationObject.prototype['parent_conversation'] = undefined;

/**
 * @member {Array.<String>} pending_connected_team_ids
 */
ConversationObject.prototype['pending_connected_team_ids'] = undefined;

/**
 * @member {Array.<String>} pending_shared
 */
ConversationObject.prototype['pending_shared'] = undefined;

/**
 * @member {Number} pin_count
 */
ConversationObject.prototype['pin_count'] = undefined;

/**
 * @member {Array.<String>} previous_names
 */
ConversationObject.prototype['previous_names'] = undefined;

/**
 * @member {Number} priority
 */
ConversationObject.prototype['priority'] = undefined;

/**
 * @member {module:model/ObjsChannelPurpose} purpose
 */
ConversationObject.prototype['purpose'] = undefined;

/**
 * @member {Array.<String>} shared_team_ids
 */
ConversationObject.prototype['shared_team_ids'] = undefined;

/**
 * @member {Array.<module:model/ConversationObjectSharesInner>} shares
 */
ConversationObject.prototype['shares'] = undefined;

/**
 * @member {Number} timezone_count
 */
ConversationObject.prototype['timezone_count'] = undefined;

/**
 * @member {module:model/ObjsChannelPurpose} topic
 */
ConversationObject.prototype['topic'] = undefined;

/**
 * @member {Number} unlinked
 */
ConversationObject.prototype['unlinked'] = undefined;

/**
 * @member {Number} unread_count
 */
ConversationObject.prototype['unread_count'] = undefined;

/**
 * @member {Number} unread_count_display
 */
ConversationObject.prototype['unread_count_display'] = undefined;

/**
 * @member {String} use_case
 */
ConversationObject.prototype['use_case'] = undefined;

/**
 * @member {String} user
 */
ConversationObject.prototype['user'] = undefined;

/**
 * @member {Number} version
 */
ConversationObject.prototype['version'] = undefined;






export default ConversationObject;

