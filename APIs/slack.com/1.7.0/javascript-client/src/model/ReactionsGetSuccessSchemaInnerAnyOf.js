/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsMessage from './ObjsMessage';

/**
 * The ReactionsGetSuccessSchemaInnerAnyOf model module.
 * @module model/ReactionsGetSuccessSchemaInnerAnyOf
 * @version 1.7.0
 */
class ReactionsGetSuccessSchemaInnerAnyOf {
    /**
     * Constructs a new <code>ReactionsGetSuccessSchemaInnerAnyOf</code>.
     * @alias module:model/ReactionsGetSuccessSchemaInnerAnyOf
     * @param channel {String} 
     * @param message {module:model/ObjsMessage} 
     * @param ok {Boolean} 
     * @param type {module:model/ReactionsGetSuccessSchemaInnerAnyOf.TypeEnum} 
     */
    constructor(channel, message, ok, type) { 
        
        ReactionsGetSuccessSchemaInnerAnyOf.initialize(this, channel, message, ok, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, message, ok, type) { 
        obj['channel'] = channel;
        obj['message'] = message;
        obj['ok'] = ok;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ReactionsGetSuccessSchemaInnerAnyOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReactionsGetSuccessSchemaInnerAnyOf} obj Optional instance to populate.
     * @return {module:model/ReactionsGetSuccessSchemaInnerAnyOf} The populated <code>ReactionsGetSuccessSchemaInnerAnyOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReactionsGetSuccessSchemaInnerAnyOf();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ObjsMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReactionsGetSuccessSchemaInnerAnyOf</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReactionsGetSuccessSchemaInnerAnyOf</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReactionsGetSuccessSchemaInnerAnyOf.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          ObjsMessage.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ReactionsGetSuccessSchemaInnerAnyOf.RequiredProperties = ["channel", "message", "ok", "type"];

/**
 * @member {String} channel
 */
ReactionsGetSuccessSchemaInnerAnyOf.prototype['channel'] = undefined;

/**
 * @member {module:model/ObjsMessage} message
 */
ReactionsGetSuccessSchemaInnerAnyOf.prototype['message'] = undefined;

/**
 * @member {Boolean} ok
 */
ReactionsGetSuccessSchemaInnerAnyOf.prototype['ok'] = undefined;

/**
 * @member {module:model/ReactionsGetSuccessSchemaInnerAnyOf.TypeEnum} type
 */
ReactionsGetSuccessSchemaInnerAnyOf.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ReactionsGetSuccessSchemaInnerAnyOf['TypeEnum'] = {

    /**
     * value: "message"
     * @const
     */
    "message": "message"
};



export default ReactionsGetSuccessSchemaInnerAnyOf;

