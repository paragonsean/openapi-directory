/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjsUserInner from './ObjsUserInner';

/**
 * The UsersLookupByEmailSuccessSchema model module.
 * @module model/UsersLookupByEmailSuccessSchema
 * @version 1.7.0
 */
class UsersLookupByEmailSuccessSchema {
    /**
     * Constructs a new <code>UsersLookupByEmailSuccessSchema</code>.
     * Schema for successful response from users.lookupByEmail method
     * @alias module:model/UsersLookupByEmailSuccessSchema
     * @extends Object
     * @param ok {Boolean} 
     * @param user {Array.<module:model/ObjsUserInner>} 
     */
    constructor(ok, user) { 
        
        UsersLookupByEmailSuccessSchema.initialize(this, ok, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ok, user) { 
        obj['ok'] = ok;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>UsersLookupByEmailSuccessSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsersLookupByEmailSuccessSchema} obj Optional instance to populate.
     * @return {module:model/UsersLookupByEmailSuccessSchema} The populated <code>UsersLookupByEmailSuccessSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsersLookupByEmailSuccessSchema();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('ok')) {
                obj['ok'] = ApiClient.convertToType(data['ok'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], [ObjsUserInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsersLookupByEmailSuccessSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsersLookupByEmailSuccessSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsersLookupByEmailSuccessSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['user']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['user'])) {
                throw new Error("Expected the field `user` to be an array in the JSON data but got " + data['user']);
            }
            // validate the optional field `user` (array)
            for (const item of data['user']) {
                ObjsUserInner.validateJSON(item);
            };
        }

        return true;
    }


}

UsersLookupByEmailSuccessSchema.RequiredProperties = ["ok", "user"];

/**
 * @member {Boolean} ok
 */
UsersLookupByEmailSuccessSchema.prototype['ok'] = undefined;

/**
 * @member {Array.<module:model/ObjsUserInner>} user
 */
UsersLookupByEmailSuccessSchema.prototype['user'] = undefined;






export default UsersLookupByEmailSuccessSchema;

