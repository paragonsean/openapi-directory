/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiPermissionsScopesListSuccessSchemaScopes model module.
 * @module model/ApiPermissionsScopesListSuccessSchemaScopes
 * @version 1.7.0
 */
class ApiPermissionsScopesListSuccessSchemaScopes {
    /**
     * Constructs a new <code>ApiPermissionsScopesListSuccessSchemaScopes</code>.
     * @alias module:model/ApiPermissionsScopesListSuccessSchemaScopes
     * @extends Object
     */
    constructor() { 
        
        ApiPermissionsScopesListSuccessSchemaScopes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiPermissionsScopesListSuccessSchemaScopes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiPermissionsScopesListSuccessSchemaScopes} obj Optional instance to populate.
     * @return {module:model/ApiPermissionsScopesListSuccessSchemaScopes} The populated <code>ApiPermissionsScopesListSuccessSchemaScopes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiPermissionsScopesListSuccessSchemaScopes();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('app_home')) {
                obj['app_home'] = ApiClient.convertToType(data['app_home'], ['String']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], ['String']);
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], ['String']);
            }
            if (data.hasOwnProperty('im')) {
                obj['im'] = ApiClient.convertToType(data['im'], ['String']);
            }
            if (data.hasOwnProperty('mpim')) {
                obj['mpim'] = ApiClient.convertToType(data['mpim'], ['String']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], ['String']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiPermissionsScopesListSuccessSchemaScopes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiPermissionsScopesListSuccessSchemaScopes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['app_home'])) {
            throw new Error("Expected the field `app_home` to be an array in the JSON data but got " + data['app_home']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['channel'])) {
            throw new Error("Expected the field `channel` to be an array in the JSON data but got " + data['channel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['group'])) {
            throw new Error("Expected the field `group` to be an array in the JSON data but got " + data['group']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['im'])) {
            throw new Error("Expected the field `im` to be an array in the JSON data but got " + data['im']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mpim'])) {
            throw new Error("Expected the field `mpim` to be an array in the JSON data but got " + data['mpim']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['team'])) {
            throw new Error("Expected the field `team` to be an array in the JSON data but got " + data['team']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['user'])) {
            throw new Error("Expected the field `user` to be an array in the JSON data but got " + data['user']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} app_home
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['app_home'] = undefined;

/**
 * @member {Array.<String>} channel
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['channel'] = undefined;

/**
 * @member {Array.<String>} group
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['group'] = undefined;

/**
 * @member {Array.<String>} im
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['im'] = undefined;

/**
 * @member {Array.<String>} mpim
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['mpim'] = undefined;

/**
 * @member {Array.<String>} team
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['team'] = undefined;

/**
 * @member {Array.<String>} user
 */
ApiPermissionsScopesListSuccessSchemaScopes.prototype['user'] = undefined;






export default ApiPermissionsScopesListSuccessSchemaScopes;

