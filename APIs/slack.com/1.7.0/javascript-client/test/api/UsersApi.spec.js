/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SlackWebApi);
  }
}(this, function(expect, SlackWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SlackWebApi.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('usersConversations', function() {
      it('should call usersConversations successfully', function(done) {
        //uncomment below and update the code to test usersConversations
        //instance.usersConversations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeletePhoto', function() {
      it('should call usersDeletePhoto successfully', function(done) {
        //uncomment below and update the code to test usersDeletePhoto
        //instance.usersDeletePhoto(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetPresence', function() {
      it('should call usersGetPresence successfully', function(done) {
        //uncomment below and update the code to test usersGetPresence
        //instance.usersGetPresence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersIdentity', function() {
      it('should call usersIdentity successfully', function(done) {
        //uncomment below and update the code to test usersIdentity
        //instance.usersIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersInfo', function() {
      it('should call usersInfo successfully', function(done) {
        //uncomment below and update the code to test usersInfo
        //instance.usersInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersList', function() {
      it('should call usersList successfully', function(done) {
        //uncomment below and update the code to test usersList
        //instance.usersList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersLookupByEmail', function() {
      it('should call usersLookupByEmail successfully', function(done) {
        //uncomment below and update the code to test usersLookupByEmail
        //instance.usersLookupByEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersProfileGet_0', function() {
      it('should call usersProfileGet_0 successfully', function(done) {
        //uncomment below and update the code to test usersProfileGet_0
        //instance.usersProfileGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersProfileSet_0', function() {
      it('should call usersProfileSet_0 successfully', function(done) {
        //uncomment below and update the code to test usersProfileSet_0
        //instance.usersProfileSet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSetActive', function() {
      it('should call usersSetActive successfully', function(done) {
        //uncomment below and update the code to test usersSetActive
        //instance.usersSetActive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSetPhoto', function() {
      it('should call usersSetPhoto successfully', function(done) {
        //uncomment below and update the code to test usersSetPhoto
        //instance.usersSetPhoto(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSetPresence', function() {
      it('should call usersSetPresence successfully', function(done) {
        //uncomment below and update the code to test usersSetPresence
        //instance.usersSetPresence(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
