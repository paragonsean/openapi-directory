/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SlackWebApi);
  }
}(this, function(expect, SlackWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SlackWebApi.ConversationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversationsApi', function() {
    describe('conversationsArchive', function() {
      it('should call conversationsArchive successfully', function(done) {
        //uncomment below and update the code to test conversationsArchive
        //instance.conversationsArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsClose', function() {
      it('should call conversationsClose successfully', function(done) {
        //uncomment below and update the code to test conversationsClose
        //instance.conversationsClose(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsCreate', function() {
      it('should call conversationsCreate successfully', function(done) {
        //uncomment below and update the code to test conversationsCreate
        //instance.conversationsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsHistory', function() {
      it('should call conversationsHistory successfully', function(done) {
        //uncomment below and update the code to test conversationsHistory
        //instance.conversationsHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsInfo', function() {
      it('should call conversationsInfo successfully', function(done) {
        //uncomment below and update the code to test conversationsInfo
        //instance.conversationsInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsInvite', function() {
      it('should call conversationsInvite successfully', function(done) {
        //uncomment below and update the code to test conversationsInvite
        //instance.conversationsInvite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsJoin', function() {
      it('should call conversationsJoin successfully', function(done) {
        //uncomment below and update the code to test conversationsJoin
        //instance.conversationsJoin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsKick', function() {
      it('should call conversationsKick successfully', function(done) {
        //uncomment below and update the code to test conversationsKick
        //instance.conversationsKick(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsLeave', function() {
      it('should call conversationsLeave successfully', function(done) {
        //uncomment below and update the code to test conversationsLeave
        //instance.conversationsLeave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsList', function() {
      it('should call conversationsList successfully', function(done) {
        //uncomment below and update the code to test conversationsList
        //instance.conversationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsMark', function() {
      it('should call conversationsMark successfully', function(done) {
        //uncomment below and update the code to test conversationsMark
        //instance.conversationsMark(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsMembers', function() {
      it('should call conversationsMembers successfully', function(done) {
        //uncomment below and update the code to test conversationsMembers
        //instance.conversationsMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsOpen', function() {
      it('should call conversationsOpen successfully', function(done) {
        //uncomment below and update the code to test conversationsOpen
        //instance.conversationsOpen(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsRename', function() {
      it('should call conversationsRename successfully', function(done) {
        //uncomment below and update the code to test conversationsRename
        //instance.conversationsRename(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsReplies', function() {
      it('should call conversationsReplies successfully', function(done) {
        //uncomment below and update the code to test conversationsReplies
        //instance.conversationsReplies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsSetPurpose', function() {
      it('should call conversationsSetPurpose successfully', function(done) {
        //uncomment below and update the code to test conversationsSetPurpose
        //instance.conversationsSetPurpose(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsSetTopic', function() {
      it('should call conversationsSetTopic successfully', function(done) {
        //uncomment below and update the code to test conversationsSetTopic
        //instance.conversationsSetTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('conversationsUnarchive', function() {
      it('should call conversationsUnarchive successfully', function(done) {
        //uncomment below and update the code to test conversationsUnarchive
        //instance.conversationsUnarchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
