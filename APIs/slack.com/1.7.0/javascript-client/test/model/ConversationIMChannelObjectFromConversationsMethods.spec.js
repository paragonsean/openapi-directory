/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SlackWebApi);
  }
}(this, function(expect, SlackWebApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConversationIMChannelObjectFromConversationsMethods', function() {
    it('should create an instance of ConversationIMChannelObjectFromConversationsMethods', function() {
      // uncomment below and update the code to test ConversationIMChannelObjectFromConversationsMethods
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be.a(SlackWebApi.ConversationIMChannelObjectFromConversationsMethods);
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property hasPins (base name: "has_pins")', function() {
      // uncomment below and update the code to test the property hasPins
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isArchived (base name: "is_archived")', function() {
      // uncomment below and update the code to test the property isArchived
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isExtShared (base name: "is_ext_shared")', function() {
      // uncomment below and update the code to test the property isExtShared
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isFrozen (base name: "is_frozen")', function() {
      // uncomment below and update the code to test the property isFrozen
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isIm (base name: "is_im")', function() {
      // uncomment below and update the code to test the property isIm
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isOpen (base name: "is_open")', function() {
      // uncomment below and update the code to test the property isOpen
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isOrgShared (base name: "is_org_shared")', function() {
      // uncomment below and update the code to test the property isOrgShared
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isShared (base name: "is_shared")', function() {
      // uncomment below and update the code to test the property isShared
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isStarred (base name: "is_starred")', function() {
      // uncomment below and update the code to test the property isStarred
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property isUserDeleted (base name: "is_user_deleted")', function() {
      // uncomment below and update the code to test the property isUserDeleted
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property lastRead (base name: "last_read")', function() {
      // uncomment below and update the code to test the property lastRead
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property latest (base name: "latest")', function() {
      // uncomment below and update the code to test the property latest
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property parentConversation (base name: "parent_conversation")', function() {
      // uncomment below and update the code to test the property parentConversation
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property pinCount (base name: "pin_count")', function() {
      // uncomment below and update the code to test the property pinCount
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property shares (base name: "shares")', function() {
      // uncomment below and update the code to test the property shares
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property unreadCount (base name: "unread_count")', function() {
      // uncomment below and update the code to test the property unreadCount
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property unreadCountDisplay (base name: "unread_count_display")', function() {
      // uncomment below and update the code to test the property unreadCountDisplay
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new SlackWebApi.ConversationIMChannelObjectFromConversationsMethods();
      //expect(instance).to.be();
    });

  });

}));
