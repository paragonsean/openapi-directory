from typing import List, Dict
from aiohttp import web

from openapi_server.models.default_error_template import DefaultErrorTemplate
from openapi_server.models.default_success_template import DefaultSuccessTemplate
from openapi_server.models.team_access_logs_error_schema import TeamAccessLogsErrorSchema
from openapi_server.models.team_access_logs_schema import TeamAccessLogsSchema
from openapi_server.models.team_info_error_schema import TeamInfoErrorSchema
from openapi_server.models.team_info_schema import TeamInfoSchema
from openapi_server.models.team_integration_logs_error_schema import TeamIntegrationLogsErrorSchema
from openapi_server.models.team_integration_logs_schema import TeamIntegrationLogsSchema
from openapi_server.models.team_profile_get_error_schema import TeamProfileGetErrorSchema
from openapi_server.models.team_profile_get_success_schema import TeamProfileGetSuccessSchema
from openapi_server import util


async def team_access_logs(request: web.Request, token, before=None, count=None, page=None) -> web.Response:
    """team_access_logs

    Gets the access logs for the current team.

    :param token: Authentication token. Requires scope: &#x60;admin&#x60;
    :type token: str
    :param before: End of time range of logs to include in results (inclusive).
    :type before: str
    :param count: 
    :type count: str
    :param page: 
    :type page: str

    """
    return web.Response(status=200)


async def team_billable_info(request: web.Request, token, user=None) -> web.Response:
    """team_billable_info

    Gets billable users information for the current team.

    :param token: Authentication token. Requires scope: &#x60;admin&#x60;
    :type token: str
    :param user: A user to retrieve the billable information for. Defaults to all users.
    :type user: str

    """
    return web.Response(status=200)


async def team_info(request: web.Request, token, team=None) -> web.Response:
    """team_info

    Gets information about the current team.

    :param token: Authentication token. Requires scope: &#x60;team:read&#x60;
    :type token: str
    :param team: Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels
    :type team: str

    """
    return web.Response(status=200)


async def team_integration_logs(request: web.Request, token, app_id=None, change_type=None, count=None, page=None, service_id=None, user=None) -> web.Response:
    """team_integration_logs

    Gets the integration logs for the current team.

    :param token: Authentication token. Requires scope: &#x60;admin&#x60;
    :type token: str
    :param app_id: Filter logs to this Slack app. Defaults to all logs.
    :type app_id: str
    :param change_type: Filter logs with this change type. Defaults to all logs.
    :type change_type: str
    :param count: 
    :type count: str
    :param page: 
    :type page: str
    :param service_id: Filter logs to this service. Defaults to all logs.
    :type service_id: str
    :param user: Filter logs generated by this userâ€™s actions. Defaults to all logs.
    :type user: str

    """
    return web.Response(status=200)


async def team_profile_get_0(request: web.Request, token, visibility=None) -> web.Response:
    """team_profile_get_0

    Retrieve a team&#39;s profile.

    :param token: Authentication token. Requires scope: &#x60;users.profile:read&#x60;
    :type token: str
    :param visibility: Filter by visibility.
    :type visibility: str

    """
    return web.Response(status=200)
