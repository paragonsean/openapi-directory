# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.users_set_photo_schema_profile import UsersSetPhotoSchemaProfile
from openapi_server import util


class UsersSetPhotoSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ok: bool=None, profile: UsersSetPhotoSchemaProfile=None):
        """UsersSetPhotoSchema - a model defined in OpenAPI

        :param ok: The ok of this UsersSetPhotoSchema.
        :param profile: The profile of this UsersSetPhotoSchema.
        """
        self.openapi_types = {
            'ok': bool,
            'profile': UsersSetPhotoSchemaProfile
        }

        self.attribute_map = {
            'ok': 'ok',
            'profile': 'profile'
        }

        self._ok = ok
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersSetPhotoSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_setPhoto_schema of this UsersSetPhotoSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ok(self):
        """Gets the ok of this UsersSetPhotoSchema.


        :return: The ok of this UsersSetPhotoSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this UsersSetPhotoSchema.


        :param ok: The ok of this UsersSetPhotoSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def profile(self):
        """Gets the profile of this UsersSetPhotoSchema.


        :return: The profile of this UsersSetPhotoSchema.
        :rtype: UsersSetPhotoSchemaProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UsersSetPhotoSchema.


        :param profile: The profile of this UsersSetPhotoSchema.
        :type profile: UsersSetPhotoSchemaProfile
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile
