# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminConversationsCreateErrorSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, ok: bool=None):
        """AdminConversationsCreateErrorSchema - a model defined in OpenAPI

        :param error: The error of this AdminConversationsCreateErrorSchema.
        :param ok: The ok of this AdminConversationsCreateErrorSchema.
        """
        self.openapi_types = {
            'error': str,
            'ok': bool
        }

        self.attribute_map = {
            'error': 'error',
            'ok': 'ok'
        }

        self._error = error
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminConversationsCreateErrorSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The admin_conversations_create_error_schema of this AdminConversationsCreateErrorSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this AdminConversationsCreateErrorSchema.


        :return: The error of this AdminConversationsCreateErrorSchema.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AdminConversationsCreateErrorSchema.


        :param error: The error of this AdminConversationsCreateErrorSchema.
        :type error: str
        """
        allowed_values = ["feature_not_enabled", "name_taken", "restricted_action", "team_not_found", "invalid_team", "invalid_name", "could_not_create_channel", "team_id_or_org_required"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def ok(self):
        """Gets the ok of this AdminConversationsCreateErrorSchema.


        :return: The ok of this AdminConversationsCreateErrorSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this AdminConversationsCreateErrorSchema.


        :param ok: The ok of this AdminConversationsCreateErrorSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
