# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ChatPostEphemeralSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_ts: str=None, ok: bool=None):
        """ChatPostEphemeralSuccessSchema - a model defined in OpenAPI

        :param message_ts: The message_ts of this ChatPostEphemeralSuccessSchema.
        :param ok: The ok of this ChatPostEphemeralSuccessSchema.
        """
        self.openapi_types = {
            'message_ts': str,
            'ok': bool
        }

        self.attribute_map = {
            'message_ts': 'message_ts',
            'ok': 'ok'
        }

        self._message_ts = message_ts
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatPostEphemeralSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat_postEphemeral_success_schema of this ChatPostEphemeralSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_ts(self):
        """Gets the message_ts of this ChatPostEphemeralSuccessSchema.


        :return: The message_ts of this ChatPostEphemeralSuccessSchema.
        :rtype: str
        """
        return self._message_ts

    @message_ts.setter
    def message_ts(self, message_ts):
        """Sets the message_ts of this ChatPostEphemeralSuccessSchema.


        :param message_ts: The message_ts of this ChatPostEphemeralSuccessSchema.
        :type message_ts: str
        """
        if message_ts is None:
            raise ValueError("Invalid value for `message_ts`, must not be `None`")
        if message_ts is not None and not re.search(r'^\d{10}\.\d{6}$', message_ts):
            raise ValueError("Invalid value for `message_ts`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._message_ts = message_ts

    @property
    def ok(self):
        """Gets the ok of this ChatPostEphemeralSuccessSchema.


        :return: The ok of this ChatPostEphemeralSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ChatPostEphemeralSuccessSchema.


        :param ok: The ok of this ChatPostEphemeralSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
