# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_channel_latest_inner import ObjsChannelLatestInner
from openapi_server.models.objs_channel_purpose import ObjsChannelPurpose
import re
from openapi_server import util


class ObjsChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_user: str=None, created: int=None, creator: str=None, id: str=None, is_archived: bool=None, is_channel: bool=None, is_frozen: bool=None, is_general: bool=None, is_member: bool=None, is_moved: int=None, is_mpim: bool=None, is_non_threadable: bool=None, is_org_shared: bool=None, is_pending_ext_shared: bool=None, is_private: bool=None, is_read_only: bool=None, is_shared: bool=None, is_thread_only: bool=None, last_read: str=None, latest: List[ObjsChannelLatestInner]=None, members: list[str]=None, name: str=None, name_normalized: str=None, num_members: int=None, pending_shared: list[str]=None, previous_names: list[str]=None, priority: float=None, purpose: ObjsChannelPurpose=None, topic: ObjsChannelPurpose=None, unlinked: int=None, unread_count: int=None, unread_count_display: int=None):
        """ObjsChannel - a model defined in OpenAPI

        :param accepted_user: The accepted_user of this ObjsChannel.
        :param created: The created of this ObjsChannel.
        :param creator: The creator of this ObjsChannel.
        :param id: The id of this ObjsChannel.
        :param is_archived: The is_archived of this ObjsChannel.
        :param is_channel: The is_channel of this ObjsChannel.
        :param is_frozen: The is_frozen of this ObjsChannel.
        :param is_general: The is_general of this ObjsChannel.
        :param is_member: The is_member of this ObjsChannel.
        :param is_moved: The is_moved of this ObjsChannel.
        :param is_mpim: The is_mpim of this ObjsChannel.
        :param is_non_threadable: The is_non_threadable of this ObjsChannel.
        :param is_org_shared: The is_org_shared of this ObjsChannel.
        :param is_pending_ext_shared: The is_pending_ext_shared of this ObjsChannel.
        :param is_private: The is_private of this ObjsChannel.
        :param is_read_only: The is_read_only of this ObjsChannel.
        :param is_shared: The is_shared of this ObjsChannel.
        :param is_thread_only: The is_thread_only of this ObjsChannel.
        :param last_read: The last_read of this ObjsChannel.
        :param latest: The latest of this ObjsChannel.
        :param members: The members of this ObjsChannel.
        :param name: The name of this ObjsChannel.
        :param name_normalized: The name_normalized of this ObjsChannel.
        :param num_members: The num_members of this ObjsChannel.
        :param pending_shared: The pending_shared of this ObjsChannel.
        :param previous_names: The previous_names of this ObjsChannel.
        :param priority: The priority of this ObjsChannel.
        :param purpose: The purpose of this ObjsChannel.
        :param topic: The topic of this ObjsChannel.
        :param unlinked: The unlinked of this ObjsChannel.
        :param unread_count: The unread_count of this ObjsChannel.
        :param unread_count_display: The unread_count_display of this ObjsChannel.
        """
        self.openapi_types = {
            'accepted_user': str,
            'created': int,
            'creator': str,
            'id': str,
            'is_archived': bool,
            'is_channel': bool,
            'is_frozen': bool,
            'is_general': bool,
            'is_member': bool,
            'is_moved': int,
            'is_mpim': bool,
            'is_non_threadable': bool,
            'is_org_shared': bool,
            'is_pending_ext_shared': bool,
            'is_private': bool,
            'is_read_only': bool,
            'is_shared': bool,
            'is_thread_only': bool,
            'last_read': str,
            'latest': List[ObjsChannelLatestInner],
            'members': list[str],
            'name': str,
            'name_normalized': str,
            'num_members': int,
            'pending_shared': list[str],
            'previous_names': list[str],
            'priority': float,
            'purpose': ObjsChannelPurpose,
            'topic': ObjsChannelPurpose,
            'unlinked': int,
            'unread_count': int,
            'unread_count_display': int
        }

        self.attribute_map = {
            'accepted_user': 'accepted_user',
            'created': 'created',
            'creator': 'creator',
            'id': 'id',
            'is_archived': 'is_archived',
            'is_channel': 'is_channel',
            'is_frozen': 'is_frozen',
            'is_general': 'is_general',
            'is_member': 'is_member',
            'is_moved': 'is_moved',
            'is_mpim': 'is_mpim',
            'is_non_threadable': 'is_non_threadable',
            'is_org_shared': 'is_org_shared',
            'is_pending_ext_shared': 'is_pending_ext_shared',
            'is_private': 'is_private',
            'is_read_only': 'is_read_only',
            'is_shared': 'is_shared',
            'is_thread_only': 'is_thread_only',
            'last_read': 'last_read',
            'latest': 'latest',
            'members': 'members',
            'name': 'name',
            'name_normalized': 'name_normalized',
            'num_members': 'num_members',
            'pending_shared': 'pending_shared',
            'previous_names': 'previous_names',
            'priority': 'priority',
            'purpose': 'purpose',
            'topic': 'topic',
            'unlinked': 'unlinked',
            'unread_count': 'unread_count',
            'unread_count_display': 'unread_count_display'
        }

        self._accepted_user = accepted_user
        self._created = created
        self._creator = creator
        self._id = id
        self._is_archived = is_archived
        self._is_channel = is_channel
        self._is_frozen = is_frozen
        self._is_general = is_general
        self._is_member = is_member
        self._is_moved = is_moved
        self._is_mpim = is_mpim
        self._is_non_threadable = is_non_threadable
        self._is_org_shared = is_org_shared
        self._is_pending_ext_shared = is_pending_ext_shared
        self._is_private = is_private
        self._is_read_only = is_read_only
        self._is_shared = is_shared
        self._is_thread_only = is_thread_only
        self._last_read = last_read
        self._latest = latest
        self._members = members
        self._name = name
        self._name_normalized = name_normalized
        self._num_members = num_members
        self._pending_shared = pending_shared
        self._previous_names = previous_names
        self._priority = priority
        self._purpose = purpose
        self._topic = topic
        self._unlinked = unlinked
        self._unread_count = unread_count
        self._unread_count_display = unread_count_display

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_channel of this ObjsChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_user(self):
        """Gets the accepted_user of this ObjsChannel.


        :return: The accepted_user of this ObjsChannel.
        :rtype: str
        """
        return self._accepted_user

    @accepted_user.setter
    def accepted_user(self, accepted_user):
        """Sets the accepted_user of this ObjsChannel.


        :param accepted_user: The accepted_user of this ObjsChannel.
        :type accepted_user: str
        """
        if accepted_user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', accepted_user):
            raise ValueError("Invalid value for `accepted_user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._accepted_user = accepted_user

    @property
    def created(self):
        """Gets the created of this ObjsChannel.


        :return: The created of this ObjsChannel.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ObjsChannel.


        :param created: The created of this ObjsChannel.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def creator(self):
        """Gets the creator of this ObjsChannel.


        :return: The creator of this ObjsChannel.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ObjsChannel.


        :param creator: The creator of this ObjsChannel.
        :type creator: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")
        if creator is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', creator):
            raise ValueError("Invalid value for `creator`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this ObjsChannel.


        :return: The id of this ObjsChannel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsChannel.


        :param id: The id of this ObjsChannel.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[C][A-Z0-9]{2,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[C][A-Z0-9]{2,}$/`")

        self._id = id

    @property
    def is_archived(self):
        """Gets the is_archived of this ObjsChannel.


        :return: The is_archived of this ObjsChannel.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ObjsChannel.


        :param is_archived: The is_archived of this ObjsChannel.
        :type is_archived: bool
        """

        self._is_archived = is_archived

    @property
    def is_channel(self):
        """Gets the is_channel of this ObjsChannel.


        :return: The is_channel of this ObjsChannel.
        :rtype: bool
        """
        return self._is_channel

    @is_channel.setter
    def is_channel(self, is_channel):
        """Sets the is_channel of this ObjsChannel.


        :param is_channel: The is_channel of this ObjsChannel.
        :type is_channel: bool
        """
        if is_channel is None:
            raise ValueError("Invalid value for `is_channel`, must not be `None`")

        self._is_channel = is_channel

    @property
    def is_frozen(self):
        """Gets the is_frozen of this ObjsChannel.


        :return: The is_frozen of this ObjsChannel.
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen):
        """Sets the is_frozen of this ObjsChannel.


        :param is_frozen: The is_frozen of this ObjsChannel.
        :type is_frozen: bool
        """

        self._is_frozen = is_frozen

    @property
    def is_general(self):
        """Gets the is_general of this ObjsChannel.


        :return: The is_general of this ObjsChannel.
        :rtype: bool
        """
        return self._is_general

    @is_general.setter
    def is_general(self, is_general):
        """Sets the is_general of this ObjsChannel.


        :param is_general: The is_general of this ObjsChannel.
        :type is_general: bool
        """

        self._is_general = is_general

    @property
    def is_member(self):
        """Gets the is_member of this ObjsChannel.


        :return: The is_member of this ObjsChannel.
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this ObjsChannel.


        :param is_member: The is_member of this ObjsChannel.
        :type is_member: bool
        """

        self._is_member = is_member

    @property
    def is_moved(self):
        """Gets the is_moved of this ObjsChannel.


        :return: The is_moved of this ObjsChannel.
        :rtype: int
        """
        return self._is_moved

    @is_moved.setter
    def is_moved(self, is_moved):
        """Sets the is_moved of this ObjsChannel.


        :param is_moved: The is_moved of this ObjsChannel.
        :type is_moved: int
        """

        self._is_moved = is_moved

    @property
    def is_mpim(self):
        """Gets the is_mpim of this ObjsChannel.


        :return: The is_mpim of this ObjsChannel.
        :rtype: bool
        """
        return self._is_mpim

    @is_mpim.setter
    def is_mpim(self, is_mpim):
        """Sets the is_mpim of this ObjsChannel.


        :param is_mpim: The is_mpim of this ObjsChannel.
        :type is_mpim: bool
        """
        if is_mpim is None:
            raise ValueError("Invalid value for `is_mpim`, must not be `None`")

        self._is_mpim = is_mpim

    @property
    def is_non_threadable(self):
        """Gets the is_non_threadable of this ObjsChannel.


        :return: The is_non_threadable of this ObjsChannel.
        :rtype: bool
        """
        return self._is_non_threadable

    @is_non_threadable.setter
    def is_non_threadable(self, is_non_threadable):
        """Sets the is_non_threadable of this ObjsChannel.


        :param is_non_threadable: The is_non_threadable of this ObjsChannel.
        :type is_non_threadable: bool
        """

        self._is_non_threadable = is_non_threadable

    @property
    def is_org_shared(self):
        """Gets the is_org_shared of this ObjsChannel.


        :return: The is_org_shared of this ObjsChannel.
        :rtype: bool
        """
        return self._is_org_shared

    @is_org_shared.setter
    def is_org_shared(self, is_org_shared):
        """Sets the is_org_shared of this ObjsChannel.


        :param is_org_shared: The is_org_shared of this ObjsChannel.
        :type is_org_shared: bool
        """
        if is_org_shared is None:
            raise ValueError("Invalid value for `is_org_shared`, must not be `None`")

        self._is_org_shared = is_org_shared

    @property
    def is_pending_ext_shared(self):
        """Gets the is_pending_ext_shared of this ObjsChannel.


        :return: The is_pending_ext_shared of this ObjsChannel.
        :rtype: bool
        """
        return self._is_pending_ext_shared

    @is_pending_ext_shared.setter
    def is_pending_ext_shared(self, is_pending_ext_shared):
        """Sets the is_pending_ext_shared of this ObjsChannel.


        :param is_pending_ext_shared: The is_pending_ext_shared of this ObjsChannel.
        :type is_pending_ext_shared: bool
        """

        self._is_pending_ext_shared = is_pending_ext_shared

    @property
    def is_private(self):
        """Gets the is_private of this ObjsChannel.


        :return: The is_private of this ObjsChannel.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this ObjsChannel.


        :param is_private: The is_private of this ObjsChannel.
        :type is_private: bool
        """
        if is_private is None:
            raise ValueError("Invalid value for `is_private`, must not be `None`")

        self._is_private = is_private

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ObjsChannel.


        :return: The is_read_only of this ObjsChannel.
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ObjsChannel.


        :param is_read_only: The is_read_only of this ObjsChannel.
        :type is_read_only: bool
        """

        self._is_read_only = is_read_only

    @property
    def is_shared(self):
        """Gets the is_shared of this ObjsChannel.


        :return: The is_shared of this ObjsChannel.
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this ObjsChannel.


        :param is_shared: The is_shared of this ObjsChannel.
        :type is_shared: bool
        """
        if is_shared is None:
            raise ValueError("Invalid value for `is_shared`, must not be `None`")

        self._is_shared = is_shared

    @property
    def is_thread_only(self):
        """Gets the is_thread_only of this ObjsChannel.


        :return: The is_thread_only of this ObjsChannel.
        :rtype: bool
        """
        return self._is_thread_only

    @is_thread_only.setter
    def is_thread_only(self, is_thread_only):
        """Sets the is_thread_only of this ObjsChannel.


        :param is_thread_only: The is_thread_only of this ObjsChannel.
        :type is_thread_only: bool
        """

        self._is_thread_only = is_thread_only

    @property
    def last_read(self):
        """Gets the last_read of this ObjsChannel.


        :return: The last_read of this ObjsChannel.
        :rtype: str
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this ObjsChannel.


        :param last_read: The last_read of this ObjsChannel.
        :type last_read: str
        """
        if last_read is not None and not re.search(r'^\d{10}\.\d{6}$', last_read):
            raise ValueError("Invalid value for `last_read`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._last_read = last_read

    @property
    def latest(self):
        """Gets the latest of this ObjsChannel.


        :return: The latest of this ObjsChannel.
        :rtype: List[ObjsChannelLatestInner]
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this ObjsChannel.


        :param latest: The latest of this ObjsChannel.
        :type latest: List[ObjsChannelLatestInner]
        """

        self._latest = latest

    @property
    def members(self):
        """Gets the members of this ObjsChannel.


        :return: The members of this ObjsChannel.
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ObjsChannel.


        :param members: The members of this ObjsChannel.
        :type members: list[str]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")
        if members is not None and len(members) < 0:
            raise ValueError("Invalid value for `members`, number of items must be greater than or equal to `0`")

        self._members = members

    @property
    def name(self):
        """Gets the name of this ObjsChannel.


        :return: The name of this ObjsChannel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsChannel.


        :param name: The name of this ObjsChannel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_normalized(self):
        """Gets the name_normalized of this ObjsChannel.


        :return: The name_normalized of this ObjsChannel.
        :rtype: str
        """
        return self._name_normalized

    @name_normalized.setter
    def name_normalized(self, name_normalized):
        """Sets the name_normalized of this ObjsChannel.


        :param name_normalized: The name_normalized of this ObjsChannel.
        :type name_normalized: str
        """
        if name_normalized is None:
            raise ValueError("Invalid value for `name_normalized`, must not be `None`")

        self._name_normalized = name_normalized

    @property
    def num_members(self):
        """Gets the num_members of this ObjsChannel.


        :return: The num_members of this ObjsChannel.
        :rtype: int
        """
        return self._num_members

    @num_members.setter
    def num_members(self, num_members):
        """Sets the num_members of this ObjsChannel.


        :param num_members: The num_members of this ObjsChannel.
        :type num_members: int
        """

        self._num_members = num_members

    @property
    def pending_shared(self):
        """Gets the pending_shared of this ObjsChannel.


        :return: The pending_shared of this ObjsChannel.
        :rtype: list[str]
        """
        return self._pending_shared

    @pending_shared.setter
    def pending_shared(self, pending_shared):
        """Sets the pending_shared of this ObjsChannel.


        :param pending_shared: The pending_shared of this ObjsChannel.
        :type pending_shared: list[str]
        """
        if pending_shared is not None and len(pending_shared) < 0:
            raise ValueError("Invalid value for `pending_shared`, number of items must be greater than or equal to `0`")

        self._pending_shared = pending_shared

    @property
    def previous_names(self):
        """Gets the previous_names of this ObjsChannel.


        :return: The previous_names of this ObjsChannel.
        :rtype: list[str]
        """
        return self._previous_names

    @previous_names.setter
    def previous_names(self, previous_names):
        """Sets the previous_names of this ObjsChannel.


        :param previous_names: The previous_names of this ObjsChannel.
        :type previous_names: list[str]
        """
        if previous_names is not None and len(previous_names) < 0:
            raise ValueError("Invalid value for `previous_names`, number of items must be greater than or equal to `0`")

        self._previous_names = previous_names

    @property
    def priority(self):
        """Gets the priority of this ObjsChannel.


        :return: The priority of this ObjsChannel.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ObjsChannel.


        :param priority: The priority of this ObjsChannel.
        :type priority: float
        """

        self._priority = priority

    @property
    def purpose(self):
        """Gets the purpose of this ObjsChannel.


        :return: The purpose of this ObjsChannel.
        :rtype: ObjsChannelPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ObjsChannel.


        :param purpose: The purpose of this ObjsChannel.
        :type purpose: ObjsChannelPurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def topic(self):
        """Gets the topic of this ObjsChannel.


        :return: The topic of this ObjsChannel.
        :rtype: ObjsChannelPurpose
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ObjsChannel.


        :param topic: The topic of this ObjsChannel.
        :type topic: ObjsChannelPurpose
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def unlinked(self):
        """Gets the unlinked of this ObjsChannel.


        :return: The unlinked of this ObjsChannel.
        :rtype: int
        """
        return self._unlinked

    @unlinked.setter
    def unlinked(self, unlinked):
        """Sets the unlinked of this ObjsChannel.


        :param unlinked: The unlinked of this ObjsChannel.
        :type unlinked: int
        """

        self._unlinked = unlinked

    @property
    def unread_count(self):
        """Gets the unread_count of this ObjsChannel.


        :return: The unread_count of this ObjsChannel.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ObjsChannel.


        :param unread_count: The unread_count of this ObjsChannel.
        :type unread_count: int
        """

        self._unread_count = unread_count

    @property
    def unread_count_display(self):
        """Gets the unread_count_display of this ObjsChannel.


        :return: The unread_count_display of this ObjsChannel.
        :rtype: int
        """
        return self._unread_count_display

    @unread_count_display.setter
    def unread_count_display(self, unread_count_display):
        """Sets the unread_count_display of this ObjsChannel.


        :param unread_count_display: The unread_count_display of this ObjsChannel.
        :type unread_count_display: int
        """

        self._unread_count_display = unread_count_display
