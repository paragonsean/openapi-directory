# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIMethodUsersGetPresence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_away: bool=None, connection_count: int=None, last_activity: int=None, manual_away: bool=None, ok: bool=None, online: bool=None, presence: str=None):
        """APIMethodUsersGetPresence - a model defined in OpenAPI

        :param auto_away: The auto_away of this APIMethodUsersGetPresence.
        :param connection_count: The connection_count of this APIMethodUsersGetPresence.
        :param last_activity: The last_activity of this APIMethodUsersGetPresence.
        :param manual_away: The manual_away of this APIMethodUsersGetPresence.
        :param ok: The ok of this APIMethodUsersGetPresence.
        :param online: The online of this APIMethodUsersGetPresence.
        :param presence: The presence of this APIMethodUsersGetPresence.
        """
        self.openapi_types = {
            'auto_away': bool,
            'connection_count': int,
            'last_activity': int,
            'manual_away': bool,
            'ok': bool,
            'online': bool,
            'presence': str
        }

        self.attribute_map = {
            'auto_away': 'auto_away',
            'connection_count': 'connection_count',
            'last_activity': 'last_activity',
            'manual_away': 'manual_away',
            'ok': 'ok',
            'online': 'online',
            'presence': 'presence'
        }

        self._auto_away = auto_away
        self._connection_count = connection_count
        self._last_activity = last_activity
        self._manual_away = manual_away
        self._ok = ok
        self._online = online
        self._presence = presence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIMethodUsersGetPresence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The API_method__users_getPresence of this APIMethodUsersGetPresence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_away(self):
        """Gets the auto_away of this APIMethodUsersGetPresence.


        :return: The auto_away of this APIMethodUsersGetPresence.
        :rtype: bool
        """
        return self._auto_away

    @auto_away.setter
    def auto_away(self, auto_away):
        """Sets the auto_away of this APIMethodUsersGetPresence.


        :param auto_away: The auto_away of this APIMethodUsersGetPresence.
        :type auto_away: bool
        """

        self._auto_away = auto_away

    @property
    def connection_count(self):
        """Gets the connection_count of this APIMethodUsersGetPresence.


        :return: The connection_count of this APIMethodUsersGetPresence.
        :rtype: int
        """
        return self._connection_count

    @connection_count.setter
    def connection_count(self, connection_count):
        """Sets the connection_count of this APIMethodUsersGetPresence.


        :param connection_count: The connection_count of this APIMethodUsersGetPresence.
        :type connection_count: int
        """

        self._connection_count = connection_count

    @property
    def last_activity(self):
        """Gets the last_activity of this APIMethodUsersGetPresence.


        :return: The last_activity of this APIMethodUsersGetPresence.
        :rtype: int
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this APIMethodUsersGetPresence.


        :param last_activity: The last_activity of this APIMethodUsersGetPresence.
        :type last_activity: int
        """

        self._last_activity = last_activity

    @property
    def manual_away(self):
        """Gets the manual_away of this APIMethodUsersGetPresence.


        :return: The manual_away of this APIMethodUsersGetPresence.
        :rtype: bool
        """
        return self._manual_away

    @manual_away.setter
    def manual_away(self, manual_away):
        """Sets the manual_away of this APIMethodUsersGetPresence.


        :param manual_away: The manual_away of this APIMethodUsersGetPresence.
        :type manual_away: bool
        """

        self._manual_away = manual_away

    @property
    def ok(self):
        """Gets the ok of this APIMethodUsersGetPresence.


        :return: The ok of this APIMethodUsersGetPresence.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this APIMethodUsersGetPresence.


        :param ok: The ok of this APIMethodUsersGetPresence.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def online(self):
        """Gets the online of this APIMethodUsersGetPresence.


        :return: The online of this APIMethodUsersGetPresence.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this APIMethodUsersGetPresence.


        :param online: The online of this APIMethodUsersGetPresence.
        :type online: bool
        """

        self._online = online

    @property
    def presence(self):
        """Gets the presence of this APIMethodUsersGetPresence.


        :return: The presence of this APIMethodUsersGetPresence.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this APIMethodUsersGetPresence.


        :param presence: The presence of this APIMethodUsersGetPresence.
        :type presence: str
        """
        if presence is None:
            raise ValueError("Invalid value for `presence`, must not be `None`")

        self._presence = presence
