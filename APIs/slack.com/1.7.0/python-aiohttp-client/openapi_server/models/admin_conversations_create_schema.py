# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AdminConversationsCreateSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, ok: bool=None):
        """AdminConversationsCreateSchema - a model defined in OpenAPI

        :param channel_id: The channel_id of this AdminConversationsCreateSchema.
        :param ok: The ok of this AdminConversationsCreateSchema.
        """
        self.openapi_types = {
            'channel_id': str,
            'ok': bool
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'ok': 'ok'
        }

        self._channel_id = channel_id
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminConversationsCreateSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The admin_conversations_create_schema of this AdminConversationsCreateSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this AdminConversationsCreateSchema.


        :return: The channel_id of this AdminConversationsCreateSchema.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this AdminConversationsCreateSchema.


        :param channel_id: The channel_id of this AdminConversationsCreateSchema.
        :type channel_id: str
        """
        if channel_id is not None and not re.search(r'^[C][A-Z0-9]{2,}$', channel_id):
            raise ValueError("Invalid value for `channel_id`, must be a follow pattern or equal to `/^[C][A-Z0-9]{2,}$/`")

        self._channel_id = channel_id

    @property
    def ok(self):
        """Gets the ok of this AdminConversationsCreateSchema.


        :return: The ok of this AdminConversationsCreateSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this AdminConversationsCreateSchema.


        :param ok: The ok of this AdminConversationsCreateSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
