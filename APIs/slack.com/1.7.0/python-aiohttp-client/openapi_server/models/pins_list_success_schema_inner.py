# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pins_list_success_schema_inner_any_of import PinsListSuccessSchemaInnerAnyOf
from openapi_server.models.pins_list_success_schema_inner_any_of1 import PinsListSuccessSchemaInnerAnyOf1
from openapi_server.models.pins_list_success_schema_inner_any_of_items_inner import PinsListSuccessSchemaInnerAnyOfItemsInner
from openapi_server import util


class PinsListSuccessSchemaInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: list[PinsListSuccessSchemaInnerAnyOfItemsInner]=None, ok: bool=None, count: int=None):
        """PinsListSuccessSchemaInner - a model defined in OpenAPI

        :param items: The items of this PinsListSuccessSchemaInner.
        :param ok: The ok of this PinsListSuccessSchemaInner.
        :param count: The count of this PinsListSuccessSchemaInner.
        """
        self.openapi_types = {
            'items': list[PinsListSuccessSchemaInnerAnyOfItemsInner],
            'ok': bool,
            'count': int
        }

        self.attribute_map = {
            'items': 'items',
            'ok': 'ok',
            'count': 'count'
        }

        self._items = items
        self._ok = ok
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PinsListSuccessSchemaInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pins_list_success_schema_inner of this PinsListSuccessSchemaInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this PinsListSuccessSchemaInner.


        :return: The items of this PinsListSuccessSchemaInner.
        :rtype: list[PinsListSuccessSchemaInnerAnyOfItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PinsListSuccessSchemaInner.


        :param items: The items of this PinsListSuccessSchemaInner.
        :type items: list[PinsListSuccessSchemaInnerAnyOfItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def ok(self):
        """Gets the ok of this PinsListSuccessSchemaInner.


        :return: The ok of this PinsListSuccessSchemaInner.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this PinsListSuccessSchemaInner.


        :param ok: The ok of this PinsListSuccessSchemaInner.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def count(self):
        """Gets the count of this PinsListSuccessSchemaInner.


        :return: The count of this PinsListSuccessSchemaInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PinsListSuccessSchemaInner.


        :param count: The count of this PinsListSuccessSchemaInner.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count
