# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_object import MessageObject
from openapi_server import util


class ChatUpdateSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, message: MessageObject=None, ok: bool=None, text: str=None, ts: str=None):
        """ChatUpdateSuccessSchema - a model defined in OpenAPI

        :param channel: The channel of this ChatUpdateSuccessSchema.
        :param message: The message of this ChatUpdateSuccessSchema.
        :param ok: The ok of this ChatUpdateSuccessSchema.
        :param text: The text of this ChatUpdateSuccessSchema.
        :param ts: The ts of this ChatUpdateSuccessSchema.
        """
        self.openapi_types = {
            'channel': str,
            'message': MessageObject,
            'ok': bool,
            'text': str,
            'ts': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'message': 'message',
            'ok': 'ok',
            'text': 'text',
            'ts': 'ts'
        }

        self._channel = channel
        self._message = message
        self._ok = ok
        self._text = text
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatUpdateSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat_update_success_schema of this ChatUpdateSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ChatUpdateSuccessSchema.


        :return: The channel of this ChatUpdateSuccessSchema.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChatUpdateSuccessSchema.


        :param channel: The channel of this ChatUpdateSuccessSchema.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def message(self):
        """Gets the message of this ChatUpdateSuccessSchema.


        :return: The message of this ChatUpdateSuccessSchema.
        :rtype: MessageObject
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChatUpdateSuccessSchema.


        :param message: The message of this ChatUpdateSuccessSchema.
        :type message: MessageObject
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def ok(self):
        """Gets the ok of this ChatUpdateSuccessSchema.


        :return: The ok of this ChatUpdateSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ChatUpdateSuccessSchema.


        :param ok: The ok of this ChatUpdateSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def text(self):
        """Gets the text of this ChatUpdateSuccessSchema.


        :return: The text of this ChatUpdateSuccessSchema.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ChatUpdateSuccessSchema.


        :param text: The text of this ChatUpdateSuccessSchema.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def ts(self):
        """Gets the ts of this ChatUpdateSuccessSchema.


        :return: The ts of this ChatUpdateSuccessSchema.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this ChatUpdateSuccessSchema.


        :param ts: The ts of this ChatUpdateSuccessSchema.
        :type ts: str
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")

        self._ts = ts
