# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TeamAccessLogsSchemaLoginsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, country: str=None, date_first: int=None, date_last: int=None, ip: str=None, isp: str=None, region: str=None, user_agent: str=None, user_id: str=None, username: str=None):
        """TeamAccessLogsSchemaLoginsInner - a model defined in OpenAPI

        :param count: The count of this TeamAccessLogsSchemaLoginsInner.
        :param country: The country of this TeamAccessLogsSchemaLoginsInner.
        :param date_first: The date_first of this TeamAccessLogsSchemaLoginsInner.
        :param date_last: The date_last of this TeamAccessLogsSchemaLoginsInner.
        :param ip: The ip of this TeamAccessLogsSchemaLoginsInner.
        :param isp: The isp of this TeamAccessLogsSchemaLoginsInner.
        :param region: The region of this TeamAccessLogsSchemaLoginsInner.
        :param user_agent: The user_agent of this TeamAccessLogsSchemaLoginsInner.
        :param user_id: The user_id of this TeamAccessLogsSchemaLoginsInner.
        :param username: The username of this TeamAccessLogsSchemaLoginsInner.
        """
        self.openapi_types = {
            'count': int,
            'country': str,
            'date_first': int,
            'date_last': int,
            'ip': str,
            'isp': str,
            'region': str,
            'user_agent': str,
            'user_id': str,
            'username': str
        }

        self.attribute_map = {
            'count': 'count',
            'country': 'country',
            'date_first': 'date_first',
            'date_last': 'date_last',
            'ip': 'ip',
            'isp': 'isp',
            'region': 'region',
            'user_agent': 'user_agent',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._count = count
        self._country = country
        self._date_first = date_first
        self._date_last = date_last
        self._ip = ip
        self._isp = isp
        self._region = region
        self._user_agent = user_agent
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamAccessLogsSchemaLoginsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team_accessLogs_schema_logins_inner of this TeamAccessLogsSchemaLoginsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TeamAccessLogsSchemaLoginsInner.


        :return: The count of this TeamAccessLogsSchemaLoginsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TeamAccessLogsSchemaLoginsInner.


        :param count: The count of this TeamAccessLogsSchemaLoginsInner.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def country(self):
        """Gets the country of this TeamAccessLogsSchemaLoginsInner.


        :return: The country of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TeamAccessLogsSchemaLoginsInner.


        :param country: The country of this TeamAccessLogsSchemaLoginsInner.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def date_first(self):
        """Gets the date_first of this TeamAccessLogsSchemaLoginsInner.


        :return: The date_first of this TeamAccessLogsSchemaLoginsInner.
        :rtype: int
        """
        return self._date_first

    @date_first.setter
    def date_first(self, date_first):
        """Sets the date_first of this TeamAccessLogsSchemaLoginsInner.


        :param date_first: The date_first of this TeamAccessLogsSchemaLoginsInner.
        :type date_first: int
        """
        if date_first is None:
            raise ValueError("Invalid value for `date_first`, must not be `None`")

        self._date_first = date_first

    @property
    def date_last(self):
        """Gets the date_last of this TeamAccessLogsSchemaLoginsInner.


        :return: The date_last of this TeamAccessLogsSchemaLoginsInner.
        :rtype: int
        """
        return self._date_last

    @date_last.setter
    def date_last(self, date_last):
        """Sets the date_last of this TeamAccessLogsSchemaLoginsInner.


        :param date_last: The date_last of this TeamAccessLogsSchemaLoginsInner.
        :type date_last: int
        """
        if date_last is None:
            raise ValueError("Invalid value for `date_last`, must not be `None`")

        self._date_last = date_last

    @property
    def ip(self):
        """Gets the ip of this TeamAccessLogsSchemaLoginsInner.


        :return: The ip of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this TeamAccessLogsSchemaLoginsInner.


        :param ip: The ip of this TeamAccessLogsSchemaLoginsInner.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def isp(self):
        """Gets the isp of this TeamAccessLogsSchemaLoginsInner.


        :return: The isp of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this TeamAccessLogsSchemaLoginsInner.


        :param isp: The isp of this TeamAccessLogsSchemaLoginsInner.
        :type isp: str
        """
        if isp is None:
            raise ValueError("Invalid value for `isp`, must not be `None`")

        self._isp = isp

    @property
    def region(self):
        """Gets the region of this TeamAccessLogsSchemaLoginsInner.


        :return: The region of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TeamAccessLogsSchemaLoginsInner.


        :param region: The region of this TeamAccessLogsSchemaLoginsInner.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")

        self._region = region

    @property
    def user_agent(self):
        """Gets the user_agent of this TeamAccessLogsSchemaLoginsInner.


        :return: The user_agent of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this TeamAccessLogsSchemaLoginsInner.


        :param user_agent: The user_agent of this TeamAccessLogsSchemaLoginsInner.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent

    @property
    def user_id(self):
        """Gets the user_id of this TeamAccessLogsSchemaLoginsInner.


        :return: The user_id of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TeamAccessLogsSchemaLoginsInner.


        :param user_id: The user_id of this TeamAccessLogsSchemaLoginsInner.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user_id):
            raise ValueError("Invalid value for `user_id`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this TeamAccessLogsSchemaLoginsInner.


        :return: The username of this TeamAccessLogsSchemaLoginsInner.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TeamAccessLogsSchemaLoginsInner.


        :param username: The username of this TeamAccessLogsSchemaLoginsInner.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
