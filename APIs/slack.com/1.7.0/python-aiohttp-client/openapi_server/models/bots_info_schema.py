# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bots_info_schema_bot import BotsInfoSchemaBot
from openapi_server import util


class BotsInfoSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot: BotsInfoSchemaBot=None, ok: bool=None):
        """BotsInfoSchema - a model defined in OpenAPI

        :param bot: The bot of this BotsInfoSchema.
        :param ok: The ok of this BotsInfoSchema.
        """
        self.openapi_types = {
            'bot': BotsInfoSchemaBot,
            'ok': bool
        }

        self.attribute_map = {
            'bot': 'bot',
            'ok': 'ok'
        }

        self._bot = bot
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BotsInfoSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bots_info_schema of this BotsInfoSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot(self):
        """Gets the bot of this BotsInfoSchema.


        :return: The bot of this BotsInfoSchema.
        :rtype: BotsInfoSchemaBot
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this BotsInfoSchema.


        :param bot: The bot of this BotsInfoSchema.
        :type bot: BotsInfoSchemaBot
        """
        if bot is None:
            raise ValueError("Invalid value for `bot`, must not be `None`")

        self._bot = bot

    @property
    def ok(self):
        """Gets the ok of this BotsInfoSchema.


        :return: The ok of this BotsInfoSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this BotsInfoSchema.


        :param ok: The ok of this BotsInfoSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
