# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_subteam_auto_type_inner import ObjsSubteamAutoTypeInner
from openapi_server.models.objs_subteam_deleted_by_inner import ObjsSubteamDeletedByInner
from openapi_server.models.objs_subteam_prefs import ObjsSubteamPrefs
import re
from openapi_server import util


class ObjsSubteam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_provision: bool=None, auto_type: List[ObjsSubteamAutoTypeInner]=None, channel_count: int=None, created_by: str=None, date_create: int=None, date_delete: int=None, date_update: int=None, deleted_by: List[ObjsSubteamDeletedByInner]=None, description: str=None, enterprise_subteam_id: str=None, handle: str=None, id: str=None, is_external: bool=None, is_subteam: bool=None, is_usergroup: bool=None, name: str=None, prefs: ObjsSubteamPrefs=None, team_id: str=None, updated_by: str=None, user_count: int=None, users: List[str]=None):
        """ObjsSubteam - a model defined in OpenAPI

        :param auto_provision: The auto_provision of this ObjsSubteam.
        :param auto_type: The auto_type of this ObjsSubteam.
        :param channel_count: The channel_count of this ObjsSubteam.
        :param created_by: The created_by of this ObjsSubteam.
        :param date_create: The date_create of this ObjsSubteam.
        :param date_delete: The date_delete of this ObjsSubteam.
        :param date_update: The date_update of this ObjsSubteam.
        :param deleted_by: The deleted_by of this ObjsSubteam.
        :param description: The description of this ObjsSubteam.
        :param enterprise_subteam_id: The enterprise_subteam_id of this ObjsSubteam.
        :param handle: The handle of this ObjsSubteam.
        :param id: The id of this ObjsSubteam.
        :param is_external: The is_external of this ObjsSubteam.
        :param is_subteam: The is_subteam of this ObjsSubteam.
        :param is_usergroup: The is_usergroup of this ObjsSubteam.
        :param name: The name of this ObjsSubteam.
        :param prefs: The prefs of this ObjsSubteam.
        :param team_id: The team_id of this ObjsSubteam.
        :param updated_by: The updated_by of this ObjsSubteam.
        :param user_count: The user_count of this ObjsSubteam.
        :param users: The users of this ObjsSubteam.
        """
        self.openapi_types = {
            'auto_provision': bool,
            'auto_type': List[ObjsSubteamAutoTypeInner],
            'channel_count': int,
            'created_by': str,
            'date_create': int,
            'date_delete': int,
            'date_update': int,
            'deleted_by': List[ObjsSubteamDeletedByInner],
            'description': str,
            'enterprise_subteam_id': str,
            'handle': str,
            'id': str,
            'is_external': bool,
            'is_subteam': bool,
            'is_usergroup': bool,
            'name': str,
            'prefs': ObjsSubteamPrefs,
            'team_id': str,
            'updated_by': str,
            'user_count': int,
            'users': List[str]
        }

        self.attribute_map = {
            'auto_provision': 'auto_provision',
            'auto_type': 'auto_type',
            'channel_count': 'channel_count',
            'created_by': 'created_by',
            'date_create': 'date_create',
            'date_delete': 'date_delete',
            'date_update': 'date_update',
            'deleted_by': 'deleted_by',
            'description': 'description',
            'enterprise_subteam_id': 'enterprise_subteam_id',
            'handle': 'handle',
            'id': 'id',
            'is_external': 'is_external',
            'is_subteam': 'is_subteam',
            'is_usergroup': 'is_usergroup',
            'name': 'name',
            'prefs': 'prefs',
            'team_id': 'team_id',
            'updated_by': 'updated_by',
            'user_count': 'user_count',
            'users': 'users'
        }

        self._auto_provision = auto_provision
        self._auto_type = auto_type
        self._channel_count = channel_count
        self._created_by = created_by
        self._date_create = date_create
        self._date_delete = date_delete
        self._date_update = date_update
        self._deleted_by = deleted_by
        self._description = description
        self._enterprise_subteam_id = enterprise_subteam_id
        self._handle = handle
        self._id = id
        self._is_external = is_external
        self._is_subteam = is_subteam
        self._is_usergroup = is_usergroup
        self._name = name
        self._prefs = prefs
        self._team_id = team_id
        self._updated_by = updated_by
        self._user_count = user_count
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsSubteam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_subteam of this ObjsSubteam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_provision(self):
        """Gets the auto_provision of this ObjsSubteam.


        :return: The auto_provision of this ObjsSubteam.
        :rtype: bool
        """
        return self._auto_provision

    @auto_provision.setter
    def auto_provision(self, auto_provision):
        """Sets the auto_provision of this ObjsSubteam.


        :param auto_provision: The auto_provision of this ObjsSubteam.
        :type auto_provision: bool
        """
        if auto_provision is None:
            raise ValueError("Invalid value for `auto_provision`, must not be `None`")

        self._auto_provision = auto_provision

    @property
    def auto_type(self):
        """Gets the auto_type of this ObjsSubteam.


        :return: The auto_type of this ObjsSubteam.
        :rtype: List[ObjsSubteamAutoTypeInner]
        """
        return self._auto_type

    @auto_type.setter
    def auto_type(self, auto_type):
        """Sets the auto_type of this ObjsSubteam.


        :param auto_type: The auto_type of this ObjsSubteam.
        :type auto_type: List[ObjsSubteamAutoTypeInner]
        """
        if auto_type is None:
            raise ValueError("Invalid value for `auto_type`, must not be `None`")

        self._auto_type = auto_type

    @property
    def channel_count(self):
        """Gets the channel_count of this ObjsSubteam.


        :return: The channel_count of this ObjsSubteam.
        :rtype: int
        """
        return self._channel_count

    @channel_count.setter
    def channel_count(self, channel_count):
        """Sets the channel_count of this ObjsSubteam.


        :param channel_count: The channel_count of this ObjsSubteam.
        :type channel_count: int
        """

        self._channel_count = channel_count

    @property
    def created_by(self):
        """Gets the created_by of this ObjsSubteam.


        :return: The created_by of this ObjsSubteam.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ObjsSubteam.


        :param created_by: The created_by of this ObjsSubteam.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")
        if created_by is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', created_by):
            raise ValueError("Invalid value for `created_by`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._created_by = created_by

    @property
    def date_create(self):
        """Gets the date_create of this ObjsSubteam.


        :return: The date_create of this ObjsSubteam.
        :rtype: int
        """
        return self._date_create

    @date_create.setter
    def date_create(self, date_create):
        """Sets the date_create of this ObjsSubteam.


        :param date_create: The date_create of this ObjsSubteam.
        :type date_create: int
        """
        if date_create is None:
            raise ValueError("Invalid value for `date_create`, must not be `None`")

        self._date_create = date_create

    @property
    def date_delete(self):
        """Gets the date_delete of this ObjsSubteam.


        :return: The date_delete of this ObjsSubteam.
        :rtype: int
        """
        return self._date_delete

    @date_delete.setter
    def date_delete(self, date_delete):
        """Sets the date_delete of this ObjsSubteam.


        :param date_delete: The date_delete of this ObjsSubteam.
        :type date_delete: int
        """
        if date_delete is None:
            raise ValueError("Invalid value for `date_delete`, must not be `None`")

        self._date_delete = date_delete

    @property
    def date_update(self):
        """Gets the date_update of this ObjsSubteam.


        :return: The date_update of this ObjsSubteam.
        :rtype: int
        """
        return self._date_update

    @date_update.setter
    def date_update(self, date_update):
        """Sets the date_update of this ObjsSubteam.


        :param date_update: The date_update of this ObjsSubteam.
        :type date_update: int
        """
        if date_update is None:
            raise ValueError("Invalid value for `date_update`, must not be `None`")

        self._date_update = date_update

    @property
    def deleted_by(self):
        """Gets the deleted_by of this ObjsSubteam.


        :return: The deleted_by of this ObjsSubteam.
        :rtype: List[ObjsSubteamDeletedByInner]
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by):
        """Sets the deleted_by of this ObjsSubteam.


        :param deleted_by: The deleted_by of this ObjsSubteam.
        :type deleted_by: List[ObjsSubteamDeletedByInner]
        """
        if deleted_by is None:
            raise ValueError("Invalid value for `deleted_by`, must not be `None`")

        self._deleted_by = deleted_by

    @property
    def description(self):
        """Gets the description of this ObjsSubteam.


        :return: The description of this ObjsSubteam.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObjsSubteam.


        :param description: The description of this ObjsSubteam.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def enterprise_subteam_id(self):
        """Gets the enterprise_subteam_id of this ObjsSubteam.


        :return: The enterprise_subteam_id of this ObjsSubteam.
        :rtype: str
        """
        return self._enterprise_subteam_id

    @enterprise_subteam_id.setter
    def enterprise_subteam_id(self, enterprise_subteam_id):
        """Sets the enterprise_subteam_id of this ObjsSubteam.


        :param enterprise_subteam_id: The enterprise_subteam_id of this ObjsSubteam.
        :type enterprise_subteam_id: str
        """
        if enterprise_subteam_id is None:
            raise ValueError("Invalid value for `enterprise_subteam_id`, must not be `None`")

        self._enterprise_subteam_id = enterprise_subteam_id

    @property
    def handle(self):
        """Gets the handle of this ObjsSubteam.


        :return: The handle of this ObjsSubteam.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this ObjsSubteam.


        :param handle: The handle of this ObjsSubteam.
        :type handle: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def id(self):
        """Gets the id of this ObjsSubteam.


        :return: The id of this ObjsSubteam.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsSubteam.


        :param id: The id of this ObjsSubteam.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^S[A-Z0-9]{2,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^S[A-Z0-9]{2,}$/`")

        self._id = id

    @property
    def is_external(self):
        """Gets the is_external of this ObjsSubteam.


        :return: The is_external of this ObjsSubteam.
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this ObjsSubteam.


        :param is_external: The is_external of this ObjsSubteam.
        :type is_external: bool
        """
        if is_external is None:
            raise ValueError("Invalid value for `is_external`, must not be `None`")

        self._is_external = is_external

    @property
    def is_subteam(self):
        """Gets the is_subteam of this ObjsSubteam.


        :return: The is_subteam of this ObjsSubteam.
        :rtype: bool
        """
        return self._is_subteam

    @is_subteam.setter
    def is_subteam(self, is_subteam):
        """Sets the is_subteam of this ObjsSubteam.


        :param is_subteam: The is_subteam of this ObjsSubteam.
        :type is_subteam: bool
        """
        if is_subteam is None:
            raise ValueError("Invalid value for `is_subteam`, must not be `None`")

        self._is_subteam = is_subteam

    @property
    def is_usergroup(self):
        """Gets the is_usergroup of this ObjsSubteam.


        :return: The is_usergroup of this ObjsSubteam.
        :rtype: bool
        """
        return self._is_usergroup

    @is_usergroup.setter
    def is_usergroup(self, is_usergroup):
        """Sets the is_usergroup of this ObjsSubteam.


        :param is_usergroup: The is_usergroup of this ObjsSubteam.
        :type is_usergroup: bool
        """
        if is_usergroup is None:
            raise ValueError("Invalid value for `is_usergroup`, must not be `None`")

        self._is_usergroup = is_usergroup

    @property
    def name(self):
        """Gets the name of this ObjsSubteam.


        :return: The name of this ObjsSubteam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsSubteam.


        :param name: The name of this ObjsSubteam.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prefs(self):
        """Gets the prefs of this ObjsSubteam.


        :return: The prefs of this ObjsSubteam.
        :rtype: ObjsSubteamPrefs
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this ObjsSubteam.


        :param prefs: The prefs of this ObjsSubteam.
        :type prefs: ObjsSubteamPrefs
        """
        if prefs is None:
            raise ValueError("Invalid value for `prefs`, must not be `None`")

        self._prefs = prefs

    @property
    def team_id(self):
        """Gets the team_id of this ObjsSubteam.


        :return: The team_id of this ObjsSubteam.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ObjsSubteam.


        :param team_id: The team_id of this ObjsSubteam.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._team_id = team_id

    @property
    def updated_by(self):
        """Gets the updated_by of this ObjsSubteam.


        :return: The updated_by of this ObjsSubteam.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ObjsSubteam.


        :param updated_by: The updated_by of this ObjsSubteam.
        :type updated_by: str
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")
        if updated_by is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', updated_by):
            raise ValueError("Invalid value for `updated_by`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._updated_by = updated_by

    @property
    def user_count(self):
        """Gets the user_count of this ObjsSubteam.


        :return: The user_count of this ObjsSubteam.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this ObjsSubteam.


        :param user_count: The user_count of this ObjsSubteam.
        :type user_count: int
        """

        self._user_count = user_count

    @property
    def users(self):
        """Gets the users of this ObjsSubteam.


        :return: The users of this ObjsSubteam.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ObjsSubteam.


        :param users: The users of this ObjsSubteam.
        :type users: List[str]
        """

        self._users = users
