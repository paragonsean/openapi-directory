# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, ok: bool=None, user: str=None):
        """ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner - a model defined in OpenAPI

        :param error: The error of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :param ok: The ok of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :param user: The user of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        """
        self.openapi_types = {
            'error': str,
            'ok': bool,
            'user': str
        }

        self.attribute_map = {
            'error': 'error',
            'ok': 'ok',
            'user': 'user'
        }

        self._error = error
        self._ok = ok
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The errors_is_returned_when_an_error_associates_an_user_inner of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :return: The error of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :param error: The error of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :type error: str
        """
        allowed_values = ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "no_user", "cant_invite_self", "not_in_channel", "already_in_channel", "is_archived", "cant_invite", "too_many_users", "ura_max_channels", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def ok(self):
        """Gets the ok of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :return: The ok of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :param ok: The ok of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def user(self):
        """Gets the user of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :return: The user of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.


        :param user: The user of this ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.
        :type user: str
        """
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user
