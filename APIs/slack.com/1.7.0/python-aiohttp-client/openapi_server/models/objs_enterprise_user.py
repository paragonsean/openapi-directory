# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ObjsEnterpriseUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enterprise_id: str=None, enterprise_name: str=None, id: str=None, is_admin: bool=None, is_owner: bool=None, teams: list[str]=None):
        """ObjsEnterpriseUser - a model defined in OpenAPI

        :param enterprise_id: The enterprise_id of this ObjsEnterpriseUser.
        :param enterprise_name: The enterprise_name of this ObjsEnterpriseUser.
        :param id: The id of this ObjsEnterpriseUser.
        :param is_admin: The is_admin of this ObjsEnterpriseUser.
        :param is_owner: The is_owner of this ObjsEnterpriseUser.
        :param teams: The teams of this ObjsEnterpriseUser.
        """
        self.openapi_types = {
            'enterprise_id': str,
            'enterprise_name': str,
            'id': str,
            'is_admin': bool,
            'is_owner': bool,
            'teams': list[str]
        }

        self.attribute_map = {
            'enterprise_id': 'enterprise_id',
            'enterprise_name': 'enterprise_name',
            'id': 'id',
            'is_admin': 'is_admin',
            'is_owner': 'is_owner',
            'teams': 'teams'
        }

        self._enterprise_id = enterprise_id
        self._enterprise_name = enterprise_name
        self._id = id
        self._is_admin = is_admin
        self._is_owner = is_owner
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsEnterpriseUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_enterprise_user of this ObjsEnterpriseUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this ObjsEnterpriseUser.


        :return: The enterprise_id of this ObjsEnterpriseUser.
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this ObjsEnterpriseUser.


        :param enterprise_id: The enterprise_id of this ObjsEnterpriseUser.
        :type enterprise_id: str
        """
        if enterprise_id is None:
            raise ValueError("Invalid value for `enterprise_id`, must not be `None`")
        if enterprise_id is not None and not re.search(r'^[E][A-Z0-9]{8,}$', enterprise_id):
            raise ValueError("Invalid value for `enterprise_id`, must be a follow pattern or equal to `/^[E][A-Z0-9]{8,}$/`")

        self._enterprise_id = enterprise_id

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this ObjsEnterpriseUser.


        :return: The enterprise_name of this ObjsEnterpriseUser.
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this ObjsEnterpriseUser.


        :param enterprise_name: The enterprise_name of this ObjsEnterpriseUser.
        :type enterprise_name: str
        """
        if enterprise_name is None:
            raise ValueError("Invalid value for `enterprise_name`, must not be `None`")

        self._enterprise_name = enterprise_name

    @property
    def id(self):
        """Gets the id of this ObjsEnterpriseUser.


        :return: The id of this ObjsEnterpriseUser.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsEnterpriseUser.


        :param id: The id of this ObjsEnterpriseUser.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[WU][A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[WU][A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this ObjsEnterpriseUser.


        :return: The is_admin of this ObjsEnterpriseUser.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ObjsEnterpriseUser.


        :param is_admin: The is_admin of this ObjsEnterpriseUser.
        :type is_admin: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")

        self._is_admin = is_admin

    @property
    def is_owner(self):
        """Gets the is_owner of this ObjsEnterpriseUser.


        :return: The is_owner of this ObjsEnterpriseUser.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this ObjsEnterpriseUser.


        :param is_owner: The is_owner of this ObjsEnterpriseUser.
        :type is_owner: bool
        """
        if is_owner is None:
            raise ValueError("Invalid value for `is_owner`, must not be `None`")

        self._is_owner = is_owner

    @property
    def teams(self):
        """Gets the teams of this ObjsEnterpriseUser.


        :return: The teams of this ObjsEnterpriseUser.
        :rtype: list[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ObjsEnterpriseUser.


        :param teams: The teams of this ObjsEnterpriseUser.
        :type teams: list[str]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")

        self._teams = teams
