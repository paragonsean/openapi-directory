# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_team_profile_field_options_inner import ObjsTeamProfileFieldOptionsInner
import re
from openapi_server import util


class ObjsTeamProfileField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_name: str=None, hint: str=None, id: str=None, is_hidden: bool=None, label: str=None, options: List[ObjsTeamProfileFieldOptionsInner]=None, ordering: float=None, possible_values: List[str]=None, type: str=None):
        """ObjsTeamProfileField - a model defined in OpenAPI

        :param field_name: The field_name of this ObjsTeamProfileField.
        :param hint: The hint of this ObjsTeamProfileField.
        :param id: The id of this ObjsTeamProfileField.
        :param is_hidden: The is_hidden of this ObjsTeamProfileField.
        :param label: The label of this ObjsTeamProfileField.
        :param options: The options of this ObjsTeamProfileField.
        :param ordering: The ordering of this ObjsTeamProfileField.
        :param possible_values: The possible_values of this ObjsTeamProfileField.
        :param type: The type of this ObjsTeamProfileField.
        """
        self.openapi_types = {
            'field_name': str,
            'hint': str,
            'id': str,
            'is_hidden': bool,
            'label': str,
            'options': List[ObjsTeamProfileFieldOptionsInner],
            'ordering': float,
            'possible_values': List[str],
            'type': str
        }

        self.attribute_map = {
            'field_name': 'field_name',
            'hint': 'hint',
            'id': 'id',
            'is_hidden': 'is_hidden',
            'label': 'label',
            'options': 'options',
            'ordering': 'ordering',
            'possible_values': 'possible_values',
            'type': 'type'
        }

        self._field_name = field_name
        self._hint = hint
        self._id = id
        self._is_hidden = is_hidden
        self._label = label
        self._options = options
        self._ordering = ordering
        self._possible_values = possible_values
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsTeamProfileField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_team_profile_field of this ObjsTeamProfileField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_name(self):
        """Gets the field_name of this ObjsTeamProfileField.


        :return: The field_name of this ObjsTeamProfileField.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ObjsTeamProfileField.


        :param field_name: The field_name of this ObjsTeamProfileField.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def hint(self):
        """Gets the hint of this ObjsTeamProfileField.


        :return: The hint of this ObjsTeamProfileField.
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this ObjsTeamProfileField.


        :param hint: The hint of this ObjsTeamProfileField.
        :type hint: str
        """
        if hint is None:
            raise ValueError("Invalid value for `hint`, must not be `None`")

        self._hint = hint

    @property
    def id(self):
        """Gets the id of this ObjsTeamProfileField.


        :return: The id of this ObjsTeamProfileField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsTeamProfileField.


        :param id: The id of this ObjsTeamProfileField.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^X[a-zA-Z0-9]{9,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^X[a-zA-Z0-9]{9,}$/`")

        self._id = id

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ObjsTeamProfileField.


        :return: The is_hidden of this ObjsTeamProfileField.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ObjsTeamProfileField.


        :param is_hidden: The is_hidden of this ObjsTeamProfileField.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def label(self):
        """Gets the label of this ObjsTeamProfileField.


        :return: The label of this ObjsTeamProfileField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ObjsTeamProfileField.


        :param label: The label of this ObjsTeamProfileField.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def options(self):
        """Gets the options of this ObjsTeamProfileField.


        :return: The options of this ObjsTeamProfileField.
        :rtype: List[ObjsTeamProfileFieldOptionsInner]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ObjsTeamProfileField.


        :param options: The options of this ObjsTeamProfileField.
        :type options: List[ObjsTeamProfileFieldOptionsInner]
        """

        self._options = options

    @property
    def ordering(self):
        """Gets the ordering of this ObjsTeamProfileField.


        :return: The ordering of this ObjsTeamProfileField.
        :rtype: float
        """
        return self._ordering

    @ordering.setter
    def ordering(self, ordering):
        """Sets the ordering of this ObjsTeamProfileField.


        :param ordering: The ordering of this ObjsTeamProfileField.
        :type ordering: float
        """
        if ordering is None:
            raise ValueError("Invalid value for `ordering`, must not be `None`")

        self._ordering = ordering

    @property
    def possible_values(self):
        """Gets the possible_values of this ObjsTeamProfileField.


        :return: The possible_values of this ObjsTeamProfileField.
        :rtype: List[str]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """Sets the possible_values of this ObjsTeamProfileField.


        :param possible_values: The possible_values of this ObjsTeamProfileField.
        :type possible_values: List[str]
        """

        self._possible_values = possible_values

    @property
    def type(self):
        """Gets the type of this ObjsTeamProfileField.


        :return: The type of this ObjsTeamProfileField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjsTeamProfileField.


        :param type: The type of this ObjsTeamProfileField.
        :type type: str
        """
        allowed_values = ["text", "date", "link", "mailto", "options_list", "user"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
