# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeprecationWarning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages: List[str]=None, warnings: List[str]=None):
        """DeprecationWarning - a model defined in OpenAPI

        :param messages: The messages of this DeprecationWarning.
        :param warnings: The warnings of this DeprecationWarning.
        """
        self.openapi_types = {
            'messages': List[str],
            'warnings': List[str]
        }

        self.attribute_map = {
            'messages': 'messages',
            'warnings': 'warnings'
        }

        self._messages = messages
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecationWarning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The deprecation_warning of this DeprecationWarning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self):
        """Gets the messages of this DeprecationWarning.


        :return: The messages of this DeprecationWarning.
        :rtype: List[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this DeprecationWarning.


        :param messages: The messages of this DeprecationWarning.
        :type messages: List[str]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def warnings(self):
        """Gets the warnings of this DeprecationWarning.


        :return: The warnings of this DeprecationWarning.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this DeprecationWarning.


        :param warnings: The warnings of this DeprecationWarning.
        :type warnings: List[str]
        """
        allowed_values = ["method_deprecated"]  # noqa: E501
        if not set(warnings).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `warnings` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(warnings) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._warnings = warnings
