# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TeamIntegrationLogsSchemaLogsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_app_id: str=None, app_id: str=None, app_type: str=None, change_type: str=None, channel: str=None, _date: str=None, scope: str=None, service_id: str=None, service_type: str=None, user_id: str=None, user_name: str=None):
        """TeamIntegrationLogsSchemaLogsInner - a model defined in OpenAPI

        :param admin_app_id: The admin_app_id of this TeamIntegrationLogsSchemaLogsInner.
        :param app_id: The app_id of this TeamIntegrationLogsSchemaLogsInner.
        :param app_type: The app_type of this TeamIntegrationLogsSchemaLogsInner.
        :param change_type: The change_type of this TeamIntegrationLogsSchemaLogsInner.
        :param channel: The channel of this TeamIntegrationLogsSchemaLogsInner.
        :param _date: The _date of this TeamIntegrationLogsSchemaLogsInner.
        :param scope: The scope of this TeamIntegrationLogsSchemaLogsInner.
        :param service_id: The service_id of this TeamIntegrationLogsSchemaLogsInner.
        :param service_type: The service_type of this TeamIntegrationLogsSchemaLogsInner.
        :param user_id: The user_id of this TeamIntegrationLogsSchemaLogsInner.
        :param user_name: The user_name of this TeamIntegrationLogsSchemaLogsInner.
        """
        self.openapi_types = {
            'admin_app_id': str,
            'app_id': str,
            'app_type': str,
            'change_type': str,
            'channel': str,
            '_date': str,
            'scope': str,
            'service_id': str,
            'service_type': str,
            'user_id': str,
            'user_name': str
        }

        self.attribute_map = {
            'admin_app_id': 'admin_app_id',
            'app_id': 'app_id',
            'app_type': 'app_type',
            'change_type': 'change_type',
            'channel': 'channel',
            '_date': 'date',
            'scope': 'scope',
            'service_id': 'service_id',
            'service_type': 'service_type',
            'user_id': 'user_id',
            'user_name': 'user_name'
        }

        self._admin_app_id = admin_app_id
        self._app_id = app_id
        self._app_type = app_type
        self._change_type = change_type
        self._channel = channel
        self.__date = _date
        self._scope = scope
        self._service_id = service_id
        self._service_type = service_type
        self._user_id = user_id
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamIntegrationLogsSchemaLogsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team_integrationLogs_schema_logs_inner of this TeamIntegrationLogsSchemaLogsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_app_id(self):
        """Gets the admin_app_id of this TeamIntegrationLogsSchemaLogsInner.


        :return: The admin_app_id of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._admin_app_id

    @admin_app_id.setter
    def admin_app_id(self, admin_app_id):
        """Sets the admin_app_id of this TeamIntegrationLogsSchemaLogsInner.


        :param admin_app_id: The admin_app_id of this TeamIntegrationLogsSchemaLogsInner.
        :type admin_app_id: str
        """
        if admin_app_id is not None and not re.search(r'^A[A-Z0-9]{1,}$', admin_app_id):
            raise ValueError("Invalid value for `admin_app_id`, must be a follow pattern or equal to `/^A[A-Z0-9]{1,}$/`")

        self._admin_app_id = admin_app_id

    @property
    def app_id(self):
        """Gets the app_id of this TeamIntegrationLogsSchemaLogsInner.


        :return: The app_id of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this TeamIntegrationLogsSchemaLogsInner.


        :param app_id: The app_id of this TeamIntegrationLogsSchemaLogsInner.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")
        if app_id is not None and not re.search(r'^A[A-Z0-9]{1,}$', app_id):
            raise ValueError("Invalid value for `app_id`, must be a follow pattern or equal to `/^A[A-Z0-9]{1,}$/`")

        self._app_id = app_id

    @property
    def app_type(self):
        """Gets the app_type of this TeamIntegrationLogsSchemaLogsInner.


        :return: The app_type of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this TeamIntegrationLogsSchemaLogsInner.


        :param app_type: The app_type of this TeamIntegrationLogsSchemaLogsInner.
        :type app_type: str
        """
        if app_type is None:
            raise ValueError("Invalid value for `app_type`, must not be `None`")

        self._app_type = app_type

    @property
    def change_type(self):
        """Gets the change_type of this TeamIntegrationLogsSchemaLogsInner.


        :return: The change_type of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this TeamIntegrationLogsSchemaLogsInner.


        :param change_type: The change_type of this TeamIntegrationLogsSchemaLogsInner.
        :type change_type: str
        """
        if change_type is None:
            raise ValueError("Invalid value for `change_type`, must not be `None`")

        self._change_type = change_type

    @property
    def channel(self):
        """Gets the channel of this TeamIntegrationLogsSchemaLogsInner.


        :return: The channel of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this TeamIntegrationLogsSchemaLogsInner.


        :param channel: The channel of this TeamIntegrationLogsSchemaLogsInner.
        :type channel: str
        """
        if channel is not None and not re.search(r'^[CGD][A-Z0-9]{8,}$', channel):
            raise ValueError("Invalid value for `channel`, must be a follow pattern or equal to `/^[CGD][A-Z0-9]{8,}$/`")

        self._channel = channel

    @property
    def _date(self):
        """Gets the _date of this TeamIntegrationLogsSchemaLogsInner.


        :return: The _date of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TeamIntegrationLogsSchemaLogsInner.


        :param _date: The _date of this TeamIntegrationLogsSchemaLogsInner.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def scope(self):
        """Gets the scope of this TeamIntegrationLogsSchemaLogsInner.


        :return: The scope of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this TeamIntegrationLogsSchemaLogsInner.


        :param scope: The scope of this TeamIntegrationLogsSchemaLogsInner.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def service_id(self):
        """Gets the service_id of this TeamIntegrationLogsSchemaLogsInner.


        :return: The service_id of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this TeamIntegrationLogsSchemaLogsInner.


        :param service_id: The service_id of this TeamIntegrationLogsSchemaLogsInner.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def service_type(self):
        """Gets the service_type of this TeamIntegrationLogsSchemaLogsInner.


        :return: The service_type of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this TeamIntegrationLogsSchemaLogsInner.


        :param service_type: The service_type of this TeamIntegrationLogsSchemaLogsInner.
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def user_id(self):
        """Gets the user_id of this TeamIntegrationLogsSchemaLogsInner.


        :return: The user_id of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TeamIntegrationLogsSchemaLogsInner.


        :param user_id: The user_id of this TeamIntegrationLogsSchemaLogsInner.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user_id):
            raise ValueError("Invalid value for `user_id`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this TeamIntegrationLogsSchemaLogsInner.


        :return: The user_name of this TeamIntegrationLogsSchemaLogsInner.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TeamIntegrationLogsSchemaLogsInner.


        :param user_name: The user_name of this TeamIntegrationLogsSchemaLogsInner.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
