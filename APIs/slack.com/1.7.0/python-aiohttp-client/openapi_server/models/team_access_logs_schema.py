# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_paging import ObjsPaging
from openapi_server.models.team_access_logs_schema_logins_inner import TeamAccessLogsSchemaLoginsInner
from openapi_server import util


class TeamAccessLogsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logins: list[TeamAccessLogsSchemaLoginsInner]=None, ok: bool=None, paging: ObjsPaging=None):
        """TeamAccessLogsSchema - a model defined in OpenAPI

        :param logins: The logins of this TeamAccessLogsSchema.
        :param ok: The ok of this TeamAccessLogsSchema.
        :param paging: The paging of this TeamAccessLogsSchema.
        """
        self.openapi_types = {
            'logins': list[TeamAccessLogsSchemaLoginsInner],
            'ok': bool,
            'paging': ObjsPaging
        }

        self.attribute_map = {
            'logins': 'logins',
            'ok': 'ok',
            'paging': 'paging'
        }

        self._logins = logins
        self._ok = ok
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamAccessLogsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team_accessLogs_schema of this TeamAccessLogsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logins(self):
        """Gets the logins of this TeamAccessLogsSchema.


        :return: The logins of this TeamAccessLogsSchema.
        :rtype: list[TeamAccessLogsSchemaLoginsInner]
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this TeamAccessLogsSchema.


        :param logins: The logins of this TeamAccessLogsSchema.
        :type logins: list[TeamAccessLogsSchemaLoginsInner]
        """
        if logins is None:
            raise ValueError("Invalid value for `logins`, must not be `None`")
        if logins is not None and len(logins) < 1:
            raise ValueError("Invalid value for `logins`, number of items must be greater than or equal to `1`")

        self._logins = logins

    @property
    def ok(self):
        """Gets the ok of this TeamAccessLogsSchema.


        :return: The ok of this TeamAccessLogsSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this TeamAccessLogsSchema.


        :param ok: The ok of this TeamAccessLogsSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def paging(self):
        """Gets the paging of this TeamAccessLogsSchema.


        :return: The paging of this TeamAccessLogsSchema.
        :rtype: ObjsPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this TeamAccessLogsSchema.


        :param paging: The paging of this TeamAccessLogsSchema.
        :type paging: ObjsPaging
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")

        self._paging = paging
