# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_external_org_migrations_current_inner import ObjsExternalOrgMigrationsCurrentInner
from openapi_server import util


class ObjsExternalOrgMigrations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current: List[ObjsExternalOrgMigrationsCurrentInner]=None, date_updated: int=None):
        """ObjsExternalOrgMigrations - a model defined in OpenAPI

        :param current: The current of this ObjsExternalOrgMigrations.
        :param date_updated: The date_updated of this ObjsExternalOrgMigrations.
        """
        self.openapi_types = {
            'current': List[ObjsExternalOrgMigrationsCurrentInner],
            'date_updated': int
        }

        self.attribute_map = {
            'current': 'current',
            'date_updated': 'date_updated'
        }

        self._current = current
        self._date_updated = date_updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsExternalOrgMigrations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_external_org_migrations of this ObjsExternalOrgMigrations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self):
        """Gets the current of this ObjsExternalOrgMigrations.


        :return: The current of this ObjsExternalOrgMigrations.
        :rtype: List[ObjsExternalOrgMigrationsCurrentInner]
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this ObjsExternalOrgMigrations.


        :param current: The current of this ObjsExternalOrgMigrations.
        :type current: List[ObjsExternalOrgMigrationsCurrentInner]
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")

        self._current = current

    @property
    def date_updated(self):
        """Gets the date_updated of this ObjsExternalOrgMigrations.


        :return: The date_updated of this ObjsExternalOrgMigrations.
        :rtype: int
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this ObjsExternalOrgMigrations.


        :param date_updated: The date_updated of this ObjsExternalOrgMigrations.
        :type date_updated: int
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")

        self._date_updated = date_updated
