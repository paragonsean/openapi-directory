# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConversationsLeaveErrorSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callstack: str=None, error: str=None, needed: str=None, ok: bool=None, provided: str=None):
        """ConversationsLeaveErrorSchema - a model defined in OpenAPI

        :param callstack: The callstack of this ConversationsLeaveErrorSchema.
        :param error: The error of this ConversationsLeaveErrorSchema.
        :param needed: The needed of this ConversationsLeaveErrorSchema.
        :param ok: The ok of this ConversationsLeaveErrorSchema.
        :param provided: The provided of this ConversationsLeaveErrorSchema.
        """
        self.openapi_types = {
            'callstack': str,
            'error': str,
            'needed': str,
            'ok': bool,
            'provided': str
        }

        self.attribute_map = {
            'callstack': 'callstack',
            'error': 'error',
            'needed': 'needed',
            'ok': 'ok',
            'provided': 'provided'
        }

        self._callstack = callstack
        self._error = error
        self._needed = needed
        self._ok = ok
        self._provided = provided

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsLeaveErrorSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations_leave_error_schema of this ConversationsLeaveErrorSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callstack(self):
        """Gets the callstack of this ConversationsLeaveErrorSchema.

        Note: PHP callstack is only visible in dev/qa

        :return: The callstack of this ConversationsLeaveErrorSchema.
        :rtype: str
        """
        return self._callstack

    @callstack.setter
    def callstack(self, callstack):
        """Sets the callstack of this ConversationsLeaveErrorSchema.

        Note: PHP callstack is only visible in dev/qa

        :param callstack: The callstack of this ConversationsLeaveErrorSchema.
        :type callstack: str
        """

        self._callstack = callstack

    @property
    def error(self):
        """Gets the error of this ConversationsLeaveErrorSchema.


        :return: The error of this ConversationsLeaveErrorSchema.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConversationsLeaveErrorSchema.


        :param error: The error of this ConversationsLeaveErrorSchema.
        :type error: str
        """
        allowed_values = ["method_not_supported_for_channel_type", "last_member", "missing_scope", "channel_not_found", "is_archived", "cant_leave_general", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def needed(self):
        """Gets the needed of this ConversationsLeaveErrorSchema.


        :return: The needed of this ConversationsLeaveErrorSchema.
        :rtype: str
        """
        return self._needed

    @needed.setter
    def needed(self, needed):
        """Sets the needed of this ConversationsLeaveErrorSchema.


        :param needed: The needed of this ConversationsLeaveErrorSchema.
        :type needed: str
        """

        self._needed = needed

    @property
    def ok(self):
        """Gets the ok of this ConversationsLeaveErrorSchema.


        :return: The ok of this ConversationsLeaveErrorSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ConversationsLeaveErrorSchema.


        :param ok: The ok of this ConversationsLeaveErrorSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def provided(self):
        """Gets the provided of this ConversationsLeaveErrorSchema.


        :return: The provided of this ConversationsLeaveErrorSchema.
        :rtype: str
        """
        return self._provided

    @provided.setter
    def provided(self, provided):
        """Sets the provided of this ConversationsLeaveErrorSchema.


        :param provided: The provided of this ConversationsLeaveErrorSchema.
        :type provided: str
        """

        self._provided = provided
