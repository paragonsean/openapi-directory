# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjsReaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, name: str=None, users: List[str]=None):
        """ObjsReaction - a model defined in OpenAPI

        :param count: The count of this ObjsReaction.
        :param name: The name of this ObjsReaction.
        :param users: The users of this ObjsReaction.
        """
        self.openapi_types = {
            'count': int,
            'name': str,
            'users': List[str]
        }

        self.attribute_map = {
            'count': 'count',
            'name': 'name',
            'users': 'users'
        }

        self._count = count
        self._name = name
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsReaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_reaction of this ObjsReaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ObjsReaction.


        :return: The count of this ObjsReaction.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ObjsReaction.


        :param count: The count of this ObjsReaction.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def name(self):
        """Gets the name of this ObjsReaction.


        :return: The name of this ObjsReaction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsReaction.


        :param name: The name of this ObjsReaction.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def users(self):
        """Gets the users of this ObjsReaction.


        :return: The users of this ObjsReaction.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ObjsReaction.


        :param users: The users of this ObjsReaction.
        :type users: List[str]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
