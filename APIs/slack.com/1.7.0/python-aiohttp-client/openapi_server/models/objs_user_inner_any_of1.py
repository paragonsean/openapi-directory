# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_enterprise_user import ObjsEnterpriseUser
from openapi_server.models.objs_team_discoverable_inner import ObjsTeamDiscoverableInner
from openapi_server.models.objs_user_inner_any_of_team_profile import ObjsUserInnerAnyOfTeamProfile
from openapi_server.models.objs_user_profile import ObjsUserProfile
import re
from openapi_server import util


class ObjsUserInnerAnyOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, deleted: bool=None, enterprise_user: ObjsEnterpriseUser=None, has_2fa: bool=None, id: str=None, is_admin: bool=None, is_app_user: bool=None, is_bot: bool=None, is_external: bool=None, is_forgotten: bool=None, is_owner: bool=None, is_primary_owner: bool=None, is_restricted: bool=None, is_stranger: bool=None, is_ultra_restricted: bool=None, locale: str=None, name: str=None, presence: str=None, profile: ObjsUserProfile=None, real_name: str=None, team_id: str=None, team_profile: ObjsUserInnerAnyOfTeamProfile=None, teams: list[str]=None, two_factor_type: str=None, tz: List[ObjsTeamDiscoverableInner]=None, tz_label: str=None, tz_offset: float=None, updated: float=None):
        """ObjsUserInnerAnyOf1 - a model defined in OpenAPI

        :param color: The color of this ObjsUserInnerAnyOf1.
        :param deleted: The deleted of this ObjsUserInnerAnyOf1.
        :param enterprise_user: The enterprise_user of this ObjsUserInnerAnyOf1.
        :param has_2fa: The has_2fa of this ObjsUserInnerAnyOf1.
        :param id: The id of this ObjsUserInnerAnyOf1.
        :param is_admin: The is_admin of this ObjsUserInnerAnyOf1.
        :param is_app_user: The is_app_user of this ObjsUserInnerAnyOf1.
        :param is_bot: The is_bot of this ObjsUserInnerAnyOf1.
        :param is_external: The is_external of this ObjsUserInnerAnyOf1.
        :param is_forgotten: The is_forgotten of this ObjsUserInnerAnyOf1.
        :param is_owner: The is_owner of this ObjsUserInnerAnyOf1.
        :param is_primary_owner: The is_primary_owner of this ObjsUserInnerAnyOf1.
        :param is_restricted: The is_restricted of this ObjsUserInnerAnyOf1.
        :param is_stranger: The is_stranger of this ObjsUserInnerAnyOf1.
        :param is_ultra_restricted: The is_ultra_restricted of this ObjsUserInnerAnyOf1.
        :param locale: The locale of this ObjsUserInnerAnyOf1.
        :param name: The name of this ObjsUserInnerAnyOf1.
        :param presence: The presence of this ObjsUserInnerAnyOf1.
        :param profile: The profile of this ObjsUserInnerAnyOf1.
        :param real_name: The real_name of this ObjsUserInnerAnyOf1.
        :param team_id: The team_id of this ObjsUserInnerAnyOf1.
        :param team_profile: The team_profile of this ObjsUserInnerAnyOf1.
        :param teams: The teams of this ObjsUserInnerAnyOf1.
        :param two_factor_type: The two_factor_type of this ObjsUserInnerAnyOf1.
        :param tz: The tz of this ObjsUserInnerAnyOf1.
        :param tz_label: The tz_label of this ObjsUserInnerAnyOf1.
        :param tz_offset: The tz_offset of this ObjsUserInnerAnyOf1.
        :param updated: The updated of this ObjsUserInnerAnyOf1.
        """
        self.openapi_types = {
            'color': str,
            'deleted': bool,
            'enterprise_user': ObjsEnterpriseUser,
            'has_2fa': bool,
            'id': str,
            'is_admin': bool,
            'is_app_user': bool,
            'is_bot': bool,
            'is_external': bool,
            'is_forgotten': bool,
            'is_owner': bool,
            'is_primary_owner': bool,
            'is_restricted': bool,
            'is_stranger': bool,
            'is_ultra_restricted': bool,
            'locale': str,
            'name': str,
            'presence': str,
            'profile': ObjsUserProfile,
            'real_name': str,
            'team_id': str,
            'team_profile': ObjsUserInnerAnyOfTeamProfile,
            'teams': list[str],
            'two_factor_type': str,
            'tz': List[ObjsTeamDiscoverableInner],
            'tz_label': str,
            'tz_offset': float,
            'updated': float
        }

        self.attribute_map = {
            'color': 'color',
            'deleted': 'deleted',
            'enterprise_user': 'enterprise_user',
            'has_2fa': 'has_2fa',
            'id': 'id',
            'is_admin': 'is_admin',
            'is_app_user': 'is_app_user',
            'is_bot': 'is_bot',
            'is_external': 'is_external',
            'is_forgotten': 'is_forgotten',
            'is_owner': 'is_owner',
            'is_primary_owner': 'is_primary_owner',
            'is_restricted': 'is_restricted',
            'is_stranger': 'is_stranger',
            'is_ultra_restricted': 'is_ultra_restricted',
            'locale': 'locale',
            'name': 'name',
            'presence': 'presence',
            'profile': 'profile',
            'real_name': 'real_name',
            'team_id': 'team_id',
            'team_profile': 'team_profile',
            'teams': 'teams',
            'two_factor_type': 'two_factor_type',
            'tz': 'tz',
            'tz_label': 'tz_label',
            'tz_offset': 'tz_offset',
            'updated': 'updated'
        }

        self._color = color
        self._deleted = deleted
        self._enterprise_user = enterprise_user
        self._has_2fa = has_2fa
        self._id = id
        self._is_admin = is_admin
        self._is_app_user = is_app_user
        self._is_bot = is_bot
        self._is_external = is_external
        self._is_forgotten = is_forgotten
        self._is_owner = is_owner
        self._is_primary_owner = is_primary_owner
        self._is_restricted = is_restricted
        self._is_stranger = is_stranger
        self._is_ultra_restricted = is_ultra_restricted
        self._locale = locale
        self._name = name
        self._presence = presence
        self._profile = profile
        self._real_name = real_name
        self._team_id = team_id
        self._team_profile = team_profile
        self._teams = teams
        self._two_factor_type = two_factor_type
        self._tz = tz
        self._tz_label = tz_label
        self._tz_offset = tz_offset
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsUserInnerAnyOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_user_inner_anyOf_1 of this ObjsUserInnerAnyOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this ObjsUserInnerAnyOf1.

        refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559

        :return: The color of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ObjsUserInnerAnyOf1.

        refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559

        :param color: The color of this ObjsUserInnerAnyOf1.
        :type color: str
        """
        if color is not None and not re.search(r'^([a-fA-F0-9]{6})?$', color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `/^([a-fA-F0-9]{6})?$/`")

        self._color = color

    @property
    def deleted(self):
        """Gets the deleted of this ObjsUserInnerAnyOf1.


        :return: The deleted of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ObjsUserInnerAnyOf1.


        :param deleted: The deleted of this ObjsUserInnerAnyOf1.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def enterprise_user(self):
        """Gets the enterprise_user of this ObjsUserInnerAnyOf1.


        :return: The enterprise_user of this ObjsUserInnerAnyOf1.
        :rtype: ObjsEnterpriseUser
        """
        return self._enterprise_user

    @enterprise_user.setter
    def enterprise_user(self, enterprise_user):
        """Sets the enterprise_user of this ObjsUserInnerAnyOf1.


        :param enterprise_user: The enterprise_user of this ObjsUserInnerAnyOf1.
        :type enterprise_user: ObjsEnterpriseUser
        """

        self._enterprise_user = enterprise_user

    @property
    def has_2fa(self):
        """Gets the has_2fa of this ObjsUserInnerAnyOf1.


        :return: The has_2fa of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._has_2fa

    @has_2fa.setter
    def has_2fa(self, has_2fa):
        """Sets the has_2fa of this ObjsUserInnerAnyOf1.


        :param has_2fa: The has_2fa of this ObjsUserInnerAnyOf1.
        :type has_2fa: bool
        """

        self._has_2fa = has_2fa

    @property
    def id(self):
        """Gets the id of this ObjsUserInnerAnyOf1.


        :return: The id of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsUserInnerAnyOf1.


        :param id: The id of this ObjsUserInnerAnyOf1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._id = id

    @property
    def is_admin(self):
        """Gets the is_admin of this ObjsUserInnerAnyOf1.


        :return: The is_admin of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ObjsUserInnerAnyOf1.


        :param is_admin: The is_admin of this ObjsUserInnerAnyOf1.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_app_user(self):
        """Gets the is_app_user of this ObjsUserInnerAnyOf1.


        :return: The is_app_user of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_app_user

    @is_app_user.setter
    def is_app_user(self, is_app_user):
        """Sets the is_app_user of this ObjsUserInnerAnyOf1.


        :param is_app_user: The is_app_user of this ObjsUserInnerAnyOf1.
        :type is_app_user: bool
        """
        if is_app_user is None:
            raise ValueError("Invalid value for `is_app_user`, must not be `None`")

        self._is_app_user = is_app_user

    @property
    def is_bot(self):
        """Gets the is_bot of this ObjsUserInnerAnyOf1.


        :return: The is_bot of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this ObjsUserInnerAnyOf1.


        :param is_bot: The is_bot of this ObjsUserInnerAnyOf1.
        :type is_bot: bool
        """
        if is_bot is None:
            raise ValueError("Invalid value for `is_bot`, must not be `None`")

        self._is_bot = is_bot

    @property
    def is_external(self):
        """Gets the is_external of this ObjsUserInnerAnyOf1.


        :return: The is_external of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this ObjsUserInnerAnyOf1.


        :param is_external: The is_external of this ObjsUserInnerAnyOf1.
        :type is_external: bool
        """

        self._is_external = is_external

    @property
    def is_forgotten(self):
        """Gets the is_forgotten of this ObjsUserInnerAnyOf1.


        :return: The is_forgotten of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_forgotten

    @is_forgotten.setter
    def is_forgotten(self, is_forgotten):
        """Sets the is_forgotten of this ObjsUserInnerAnyOf1.


        :param is_forgotten: The is_forgotten of this ObjsUserInnerAnyOf1.
        :type is_forgotten: bool
        """

        self._is_forgotten = is_forgotten

    @property
    def is_owner(self):
        """Gets the is_owner of this ObjsUserInnerAnyOf1.


        :return: The is_owner of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this ObjsUserInnerAnyOf1.


        :param is_owner: The is_owner of this ObjsUserInnerAnyOf1.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def is_primary_owner(self):
        """Gets the is_primary_owner of this ObjsUserInnerAnyOf1.


        :return: The is_primary_owner of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_primary_owner

    @is_primary_owner.setter
    def is_primary_owner(self, is_primary_owner):
        """Sets the is_primary_owner of this ObjsUserInnerAnyOf1.


        :param is_primary_owner: The is_primary_owner of this ObjsUserInnerAnyOf1.
        :type is_primary_owner: bool
        """

        self._is_primary_owner = is_primary_owner

    @property
    def is_restricted(self):
        """Gets the is_restricted of this ObjsUserInnerAnyOf1.


        :return: The is_restricted of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this ObjsUserInnerAnyOf1.


        :param is_restricted: The is_restricted of this ObjsUserInnerAnyOf1.
        :type is_restricted: bool
        """

        self._is_restricted = is_restricted

    @property
    def is_stranger(self):
        """Gets the is_stranger of this ObjsUserInnerAnyOf1.


        :return: The is_stranger of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_stranger

    @is_stranger.setter
    def is_stranger(self, is_stranger):
        """Sets the is_stranger of this ObjsUserInnerAnyOf1.


        :param is_stranger: The is_stranger of this ObjsUserInnerAnyOf1.
        :type is_stranger: bool
        """

        self._is_stranger = is_stranger

    @property
    def is_ultra_restricted(self):
        """Gets the is_ultra_restricted of this ObjsUserInnerAnyOf1.


        :return: The is_ultra_restricted of this ObjsUserInnerAnyOf1.
        :rtype: bool
        """
        return self._is_ultra_restricted

    @is_ultra_restricted.setter
    def is_ultra_restricted(self, is_ultra_restricted):
        """Sets the is_ultra_restricted of this ObjsUserInnerAnyOf1.


        :param is_ultra_restricted: The is_ultra_restricted of this ObjsUserInnerAnyOf1.
        :type is_ultra_restricted: bool
        """

        self._is_ultra_restricted = is_ultra_restricted

    @property
    def locale(self):
        """Gets the locale of this ObjsUserInnerAnyOf1.


        :return: The locale of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ObjsUserInnerAnyOf1.


        :param locale: The locale of this ObjsUserInnerAnyOf1.
        :type locale: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this ObjsUserInnerAnyOf1.


        :return: The name of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsUserInnerAnyOf1.


        :param name: The name of this ObjsUserInnerAnyOf1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def presence(self):
        """Gets the presence of this ObjsUserInnerAnyOf1.


        :return: The presence of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this ObjsUserInnerAnyOf1.


        :param presence: The presence of this ObjsUserInnerAnyOf1.
        :type presence: str
        """

        self._presence = presence

    @property
    def profile(self):
        """Gets the profile of this ObjsUserInnerAnyOf1.


        :return: The profile of this ObjsUserInnerAnyOf1.
        :rtype: ObjsUserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ObjsUserInnerAnyOf1.


        :param profile: The profile of this ObjsUserInnerAnyOf1.
        :type profile: ObjsUserProfile
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile

    @property
    def real_name(self):
        """Gets the real_name of this ObjsUserInnerAnyOf1.


        :return: The real_name of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this ObjsUserInnerAnyOf1.


        :param real_name: The real_name of this ObjsUserInnerAnyOf1.
        :type real_name: str
        """

        self._real_name = real_name

    @property
    def team_id(self):
        """Gets the team_id of this ObjsUserInnerAnyOf1.


        :return: The team_id of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ObjsUserInnerAnyOf1.


        :param team_id: The team_id of this ObjsUserInnerAnyOf1.
        :type team_id: str
        """
        if team_id is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._team_id = team_id

    @property
    def team_profile(self):
        """Gets the team_profile of this ObjsUserInnerAnyOf1.


        :return: The team_profile of this ObjsUserInnerAnyOf1.
        :rtype: ObjsUserInnerAnyOfTeamProfile
        """
        return self._team_profile

    @team_profile.setter
    def team_profile(self, team_profile):
        """Sets the team_profile of this ObjsUserInnerAnyOf1.


        :param team_profile: The team_profile of this ObjsUserInnerAnyOf1.
        :type team_profile: ObjsUserInnerAnyOfTeamProfile
        """

        self._team_profile = team_profile

    @property
    def teams(self):
        """Gets the teams of this ObjsUserInnerAnyOf1.


        :return: The teams of this ObjsUserInnerAnyOf1.
        :rtype: list[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ObjsUserInnerAnyOf1.


        :param teams: The teams of this ObjsUserInnerAnyOf1.
        :type teams: list[str]
        """
        if teams is not None and len(teams) < 1:
            raise ValueError("Invalid value for `teams`, number of items must be greater than or equal to `1`")

        self._teams = teams

    @property
    def two_factor_type(self):
        """Gets the two_factor_type of this ObjsUserInnerAnyOf1.


        :return: The two_factor_type of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._two_factor_type

    @two_factor_type.setter
    def two_factor_type(self, two_factor_type):
        """Sets the two_factor_type of this ObjsUserInnerAnyOf1.


        :param two_factor_type: The two_factor_type of this ObjsUserInnerAnyOf1.
        :type two_factor_type: str
        """

        self._two_factor_type = two_factor_type

    @property
    def tz(self):
        """Gets the tz of this ObjsUserInnerAnyOf1.


        :return: The tz of this ObjsUserInnerAnyOf1.
        :rtype: List[ObjsTeamDiscoverableInner]
        """
        return self._tz

    @tz.setter
    def tz(self, tz):
        """Sets the tz of this ObjsUserInnerAnyOf1.


        :param tz: The tz of this ObjsUserInnerAnyOf1.
        :type tz: List[ObjsTeamDiscoverableInner]
        """

        self._tz = tz

    @property
    def tz_label(self):
        """Gets the tz_label of this ObjsUserInnerAnyOf1.


        :return: The tz_label of this ObjsUserInnerAnyOf1.
        :rtype: str
        """
        return self._tz_label

    @tz_label.setter
    def tz_label(self, tz_label):
        """Sets the tz_label of this ObjsUserInnerAnyOf1.


        :param tz_label: The tz_label of this ObjsUserInnerAnyOf1.
        :type tz_label: str
        """

        self._tz_label = tz_label

    @property
    def tz_offset(self):
        """Gets the tz_offset of this ObjsUserInnerAnyOf1.


        :return: The tz_offset of this ObjsUserInnerAnyOf1.
        :rtype: float
        """
        return self._tz_offset

    @tz_offset.setter
    def tz_offset(self, tz_offset):
        """Sets the tz_offset of this ObjsUserInnerAnyOf1.


        :param tz_offset: The tz_offset of this ObjsUserInnerAnyOf1.
        :type tz_offset: float
        """

        self._tz_offset = tz_offset

    @property
    def updated(self):
        """Gets the updated of this ObjsUserInnerAnyOf1.


        :return: The updated of this ObjsUserInnerAnyOf1.
        :rtype: float
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ObjsUserInnerAnyOf1.


        :param updated: The updated of this ObjsUserInnerAnyOf1.
        :type updated: float
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated
