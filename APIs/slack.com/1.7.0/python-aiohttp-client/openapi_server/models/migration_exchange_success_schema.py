# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MigrationExchangeSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enterprise_id: str=None, invalid_user_ids: List[str]=None, ok: bool=None, team_id: str=None, user_id_map: Dict[str, object]=None):
        """MigrationExchangeSuccessSchema - a model defined in OpenAPI

        :param enterprise_id: The enterprise_id of this MigrationExchangeSuccessSchema.
        :param invalid_user_ids: The invalid_user_ids of this MigrationExchangeSuccessSchema.
        :param ok: The ok of this MigrationExchangeSuccessSchema.
        :param team_id: The team_id of this MigrationExchangeSuccessSchema.
        :param user_id_map: The user_id_map of this MigrationExchangeSuccessSchema.
        """
        self.openapi_types = {
            'enterprise_id': str,
            'invalid_user_ids': List[str],
            'ok': bool,
            'team_id': str,
            'user_id_map': Dict[str, object]
        }

        self.attribute_map = {
            'enterprise_id': 'enterprise_id',
            'invalid_user_ids': 'invalid_user_ids',
            'ok': 'ok',
            'team_id': 'team_id',
            'user_id_map': 'user_id_map'
        }

        self._enterprise_id = enterprise_id
        self._invalid_user_ids = invalid_user_ids
        self._ok = ok
        self._team_id = team_id
        self._user_id_map = user_id_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationExchangeSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The migration_exchange_success_schema of this MigrationExchangeSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this MigrationExchangeSuccessSchema.


        :return: The enterprise_id of this MigrationExchangeSuccessSchema.
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this MigrationExchangeSuccessSchema.


        :param enterprise_id: The enterprise_id of this MigrationExchangeSuccessSchema.
        :type enterprise_id: str
        """
        if enterprise_id is None:
            raise ValueError("Invalid value for `enterprise_id`, must not be `None`")

        self._enterprise_id = enterprise_id

    @property
    def invalid_user_ids(self):
        """Gets the invalid_user_ids of this MigrationExchangeSuccessSchema.


        :return: The invalid_user_ids of this MigrationExchangeSuccessSchema.
        :rtype: List[str]
        """
        return self._invalid_user_ids

    @invalid_user_ids.setter
    def invalid_user_ids(self, invalid_user_ids):
        """Sets the invalid_user_ids of this MigrationExchangeSuccessSchema.


        :param invalid_user_ids: The invalid_user_ids of this MigrationExchangeSuccessSchema.
        :type invalid_user_ids: List[str]
        """

        self._invalid_user_ids = invalid_user_ids

    @property
    def ok(self):
        """Gets the ok of this MigrationExchangeSuccessSchema.


        :return: The ok of this MigrationExchangeSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this MigrationExchangeSuccessSchema.


        :param ok: The ok of this MigrationExchangeSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def team_id(self):
        """Gets the team_id of this MigrationExchangeSuccessSchema.


        :return: The team_id of this MigrationExchangeSuccessSchema.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this MigrationExchangeSuccessSchema.


        :param team_id: The team_id of this MigrationExchangeSuccessSchema.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._team_id = team_id

    @property
    def user_id_map(self):
        """Gets the user_id_map of this MigrationExchangeSuccessSchema.


        :return: The user_id_map of this MigrationExchangeSuccessSchema.
        :rtype: Dict[str, object]
        """
        return self._user_id_map

    @user_id_map.setter
    def user_id_map(self, user_id_map):
        """Sets the user_id_map of this MigrationExchangeSuccessSchema.


        :param user_id_map: The user_id_map of this MigrationExchangeSuccessSchema.
        :type user_id_map: Dict[str, object]
        """

        self._user_id_map = user_id_map
