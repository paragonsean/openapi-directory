# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_paging import ObjsPaging
from openapi_server.models.stars_list_schema_items_inner_inner import StarsListSchemaItemsInnerInner
from openapi_server import util


class StarsListSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[List[StarsListSchemaItemsInnerInner]]=None, ok: bool=None, paging: ObjsPaging=None):
        """StarsListSchema - a model defined in OpenAPI

        :param items: The items of this StarsListSchema.
        :param ok: The ok of this StarsListSchema.
        :param paging: The paging of this StarsListSchema.
        """
        self.openapi_types = {
            'items': List[List[StarsListSchemaItemsInnerInner]],
            'ok': bool,
            'paging': ObjsPaging
        }

        self.attribute_map = {
            'items': 'items',
            'ok': 'ok',
            'paging': 'paging'
        }

        self._items = items
        self._ok = ok
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StarsListSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stars_list_schema of this StarsListSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this StarsListSchema.


        :return: The items of this StarsListSchema.
        :rtype: List[List[StarsListSchemaItemsInnerInner]]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this StarsListSchema.


        :param items: The items of this StarsListSchema.
        :type items: List[List[StarsListSchemaItemsInnerInner]]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def ok(self):
        """Gets the ok of this StarsListSchema.


        :return: The ok of this StarsListSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this StarsListSchema.


        :param ok: The ok of this StarsListSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def paging(self):
        """Gets the paging of this StarsListSchema.


        :return: The paging of this StarsListSchema.
        :rtype: ObjsPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this StarsListSchema.


        :param paging: The paging of this StarsListSchema.
        :type paging: ObjsPaging
        """

        self._paging = paging
