# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_team import ObjsTeam
import re
from openapi_server import util


class ConversationIMChannelObjectFromConversationsMethodsSharesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_create: int=None, id: str=None, is_active: bool=None, name: str=None, team: ObjsTeam=None):
        """ConversationIMChannelObjectFromConversationsMethodsSharesInner - a model defined in OpenAPI

        :param date_create: The date_create of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :param id: The id of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :param is_active: The is_active of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :param name: The name of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :param team: The team of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        """
        self.openapi_types = {
            'date_create': int,
            'id': str,
            'is_active': bool,
            'name': str,
            'team': ObjsTeam
        }

        self.attribute_map = {
            'date_create': 'date_create',
            'id': 'id',
            'is_active': 'is_active',
            'name': 'name',
            'team': 'team'
        }

        self._date_create = date_create
        self._id = id
        self._is_active = is_active
        self._name = name
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationIMChannelObjectFromConversationsMethodsSharesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation_IM_Channel_Object_from_conversations___methods_shares_inner of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_create(self):
        """Gets the date_create of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :return: The date_create of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :rtype: int
        """
        return self._date_create

    @date_create.setter
    def date_create(self, date_create):
        """Sets the date_create of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :param date_create: The date_create of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :type date_create: int
        """
        if date_create is None:
            raise ValueError("Invalid value for `date_create`, must not be `None`")

        self._date_create = date_create

    @property
    def id(self):
        """Gets the id of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :return: The id of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :param id: The id of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :return: The is_active of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :param is_active: The is_active of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :return: The name of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :param name: The name of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def team(self):
        """Gets the team of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :return: The team of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :rtype: ObjsTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.


        :param team: The team of this ConversationIMChannelObjectFromConversationsMethodsSharesInner.
        :type team: ObjsTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team
