# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_team import ObjsTeam
import re
from openapi_server import util


class ConversationObjectSharesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_user: str=None, is_active: bool=None, team: ObjsTeam=None, user: str=None):
        """ConversationObjectSharesInner - a model defined in OpenAPI

        :param accepted_user: The accepted_user of this ConversationObjectSharesInner.
        :param is_active: The is_active of this ConversationObjectSharesInner.
        :param team: The team of this ConversationObjectSharesInner.
        :param user: The user of this ConversationObjectSharesInner.
        """
        self.openapi_types = {
            'accepted_user': str,
            'is_active': bool,
            'team': ObjsTeam,
            'user': str
        }

        self.attribute_map = {
            'accepted_user': 'accepted_user',
            'is_active': 'is_active',
            'team': 'team',
            'user': 'user'
        }

        self._accepted_user = accepted_user
        self._is_active = is_active
        self._team = team
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationObjectSharesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation_object_shares_inner of this ConversationObjectSharesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_user(self):
        """Gets the accepted_user of this ConversationObjectSharesInner.


        :return: The accepted_user of this ConversationObjectSharesInner.
        :rtype: str
        """
        return self._accepted_user

    @accepted_user.setter
    def accepted_user(self, accepted_user):
        """Sets the accepted_user of this ConversationObjectSharesInner.


        :param accepted_user: The accepted_user of this ConversationObjectSharesInner.
        :type accepted_user: str
        """
        if accepted_user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', accepted_user):
            raise ValueError("Invalid value for `accepted_user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._accepted_user = accepted_user

    @property
    def is_active(self):
        """Gets the is_active of this ConversationObjectSharesInner.


        :return: The is_active of this ConversationObjectSharesInner.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ConversationObjectSharesInner.


        :param is_active: The is_active of this ConversationObjectSharesInner.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def team(self):
        """Gets the team of this ConversationObjectSharesInner.


        :return: The team of this ConversationObjectSharesInner.
        :rtype: ObjsTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ConversationObjectSharesInner.


        :param team: The team of this ConversationObjectSharesInner.
        :type team: ObjsTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def user(self):
        """Gets the user of this ConversationObjectSharesInner.


        :return: The user of this ConversationObjectSharesInner.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ConversationObjectSharesInner.


        :param user: The user of this ConversationObjectSharesInner.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user
