# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_resources import ObjsResources
from openapi_server import util


class AppsPermissionsInfoSchemaInfoTeam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resources: ObjsResources=None, scopes: List[str]=None):
        """AppsPermissionsInfoSchemaInfoTeam - a model defined in OpenAPI

        :param resources: The resources of this AppsPermissionsInfoSchemaInfoTeam.
        :param scopes: The scopes of this AppsPermissionsInfoSchemaInfoTeam.
        """
        self.openapi_types = {
            'resources': ObjsResources,
            'scopes': List[str]
        }

        self.attribute_map = {
            'resources': 'resources',
            'scopes': 'scopes'
        }

        self._resources = resources
        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppsPermissionsInfoSchemaInfoTeam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apps_permissions_info_schema_info_team of this AppsPermissionsInfoSchemaInfoTeam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resources(self):
        """Gets the resources of this AppsPermissionsInfoSchemaInfoTeam.


        :return: The resources of this AppsPermissionsInfoSchemaInfoTeam.
        :rtype: ObjsResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this AppsPermissionsInfoSchemaInfoTeam.


        :param resources: The resources of this AppsPermissionsInfoSchemaInfoTeam.
        :type resources: ObjsResources
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def scopes(self):
        """Gets the scopes of this AppsPermissionsInfoSchemaInfoTeam.


        :return: The scopes of this AppsPermissionsInfoSchemaInfoTeam.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AppsPermissionsInfoSchemaInfoTeam.


        :param scopes: The scopes of this AppsPermissionsInfoSchemaInfoTeam.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes
