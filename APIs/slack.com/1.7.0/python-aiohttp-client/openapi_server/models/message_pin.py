# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_message import ObjsMessage
import re
from openapi_server import util


class MessagePin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, created: int=None, created_by: str=None, message: ObjsMessage=None, type: str=None):
        """MessagePin - a model defined in OpenAPI

        :param channel: The channel of this MessagePin.
        :param created: The created of this MessagePin.
        :param created_by: The created_by of this MessagePin.
        :param message: The message of this MessagePin.
        :param type: The type of this MessagePin.
        """
        self.openapi_types = {
            'channel': str,
            'created': int,
            'created_by': str,
            'message': ObjsMessage,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'created': 'created',
            'created_by': 'created_by',
            'message': 'message',
            'type': 'type'
        }

        self._channel = channel
        self._created = created
        self._created_by = created_by
        self._message = message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessagePin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message_Pin of this MessagePin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this MessagePin.


        :return: The channel of this MessagePin.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MessagePin.


        :param channel: The channel of this MessagePin.
        :type channel: str
        """
        if channel is not None and not re.search(r'^[CGD][A-Z0-9]{8,}$', channel):
            raise ValueError("Invalid value for `channel`, must be a follow pattern or equal to `/^[CGD][A-Z0-9]{8,}$/`")

        self._channel = channel

    @property
    def created(self):
        """Gets the created of this MessagePin.


        :return: The created of this MessagePin.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MessagePin.


        :param created: The created of this MessagePin.
        :type created: int
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this MessagePin.


        :return: The created_by of this MessagePin.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MessagePin.


        :param created_by: The created_by of this MessagePin.
        :type created_by: str
        """
        if created_by is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', created_by):
            raise ValueError("Invalid value for `created_by`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._created_by = created_by

    @property
    def message(self):
        """Gets the message of this MessagePin.


        :return: The message of this MessagePin.
        :rtype: ObjsMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessagePin.


        :param message: The message of this MessagePin.
        :type message: ObjsMessage
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this MessagePin.


        :return: The type of this MessagePin.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessagePin.


        :param type: The type of this MessagePin.
        :type type: str
        """
        allowed_values = ["message"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
