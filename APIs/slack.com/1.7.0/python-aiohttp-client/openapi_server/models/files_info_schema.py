# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_file import ObjsFile
from openapi_server.models.objs_paging import ObjsPaging
from openapi_server.models.objs_response_metadata_inner import ObjsResponseMetadataInner
import re
from openapi_server import util


class FilesInfoSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[object]=None, content_html: object=None, editor: str=None, file: ObjsFile=None, ok: bool=None, paging: ObjsPaging=None, response_metadata: List[ObjsResponseMetadataInner]=None):
        """FilesInfoSchema - a model defined in OpenAPI

        :param comments: The comments of this FilesInfoSchema.
        :param content_html: The content_html of this FilesInfoSchema.
        :param editor: The editor of this FilesInfoSchema.
        :param file: The file of this FilesInfoSchema.
        :param ok: The ok of this FilesInfoSchema.
        :param paging: The paging of this FilesInfoSchema.
        :param response_metadata: The response_metadata of this FilesInfoSchema.
        """
        self.openapi_types = {
            'comments': List[object],
            'content_html': object,
            'editor': str,
            'file': ObjsFile,
            'ok': bool,
            'paging': ObjsPaging,
            'response_metadata': List[ObjsResponseMetadataInner]
        }

        self.attribute_map = {
            'comments': 'comments',
            'content_html': 'content_html',
            'editor': 'editor',
            'file': 'file',
            'ok': 'ok',
            'paging': 'paging',
            'response_metadata': 'response_metadata'
        }

        self._comments = comments
        self._content_html = content_html
        self._editor = editor
        self._file = file
        self._ok = ok
        self._paging = paging
        self._response_metadata = response_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesInfoSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The files_info_schema of this FilesInfoSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this FilesInfoSchema.


        :return: The comments of this FilesInfoSchema.
        :rtype: List[object]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FilesInfoSchema.


        :param comments: The comments of this FilesInfoSchema.
        :type comments: List[object]
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def content_html(self):
        """Gets the content_html of this FilesInfoSchema.


        :return: The content_html of this FilesInfoSchema.
        :rtype: object
        """
        return self._content_html

    @content_html.setter
    def content_html(self, content_html):
        """Sets the content_html of this FilesInfoSchema.


        :param content_html: The content_html of this FilesInfoSchema.
        :type content_html: object
        """

        self._content_html = content_html

    @property
    def editor(self):
        """Gets the editor of this FilesInfoSchema.


        :return: The editor of this FilesInfoSchema.
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this FilesInfoSchema.


        :param editor: The editor of this FilesInfoSchema.
        :type editor: str
        """
        if editor is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', editor):
            raise ValueError("Invalid value for `editor`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._editor = editor

    @property
    def file(self):
        """Gets the file of this FilesInfoSchema.


        :return: The file of this FilesInfoSchema.
        :rtype: ObjsFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FilesInfoSchema.


        :param file: The file of this FilesInfoSchema.
        :type file: ObjsFile
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file

    @property
    def ok(self):
        """Gets the ok of this FilesInfoSchema.


        :return: The ok of this FilesInfoSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this FilesInfoSchema.


        :param ok: The ok of this FilesInfoSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def paging(self):
        """Gets the paging of this FilesInfoSchema.


        :return: The paging of this FilesInfoSchema.
        :rtype: ObjsPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this FilesInfoSchema.


        :param paging: The paging of this FilesInfoSchema.
        :type paging: ObjsPaging
        """

        self._paging = paging

    @property
    def response_metadata(self):
        """Gets the response_metadata of this FilesInfoSchema.


        :return: The response_metadata of this FilesInfoSchema.
        :rtype: List[ObjsResponseMetadataInner]
        """
        return self._response_metadata

    @response_metadata.setter
    def response_metadata(self, response_metadata):
        """Sets the response_metadata of this FilesInfoSchema.


        :param response_metadata: The response_metadata of this FilesInfoSchema.
        :type response_metadata: List[ObjsResponseMetadataInner]
        """

        self._response_metadata = response_metadata
