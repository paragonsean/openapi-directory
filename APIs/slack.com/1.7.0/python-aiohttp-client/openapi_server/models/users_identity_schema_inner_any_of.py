# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rtm_connect_schema_self import RtmConnectSchemaSelf
from openapi_server.models.users_identity_schema_inner_any_of_team import UsersIdentitySchemaInnerAnyOfTeam
from openapi_server import util


class UsersIdentitySchemaInnerAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ok: bool=None, team: UsersIdentitySchemaInnerAnyOfTeam=None, user: RtmConnectSchemaSelf=None):
        """UsersIdentitySchemaInnerAnyOf - a model defined in OpenAPI

        :param ok: The ok of this UsersIdentitySchemaInnerAnyOf.
        :param team: The team of this UsersIdentitySchemaInnerAnyOf.
        :param user: The user of this UsersIdentitySchemaInnerAnyOf.
        """
        self.openapi_types = {
            'ok': bool,
            'team': UsersIdentitySchemaInnerAnyOfTeam,
            'user': RtmConnectSchemaSelf
        }

        self.attribute_map = {
            'ok': 'ok',
            'team': 'team',
            'user': 'user'
        }

        self._ok = ok
        self._team = team
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersIdentitySchemaInnerAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_identity_schema_inner_anyOf of this UsersIdentitySchemaInnerAnyOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ok(self):
        """Gets the ok of this UsersIdentitySchemaInnerAnyOf.


        :return: The ok of this UsersIdentitySchemaInnerAnyOf.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this UsersIdentitySchemaInnerAnyOf.


        :param ok: The ok of this UsersIdentitySchemaInnerAnyOf.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def team(self):
        """Gets the team of this UsersIdentitySchemaInnerAnyOf.


        :return: The team of this UsersIdentitySchemaInnerAnyOf.
        :rtype: UsersIdentitySchemaInnerAnyOfTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this UsersIdentitySchemaInnerAnyOf.


        :param team: The team of this UsersIdentitySchemaInnerAnyOf.
        :type team: UsersIdentitySchemaInnerAnyOfTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def user(self):
        """Gets the user of this UsersIdentitySchemaInnerAnyOf.


        :return: The user of this UsersIdentitySchemaInnerAnyOf.
        :rtype: RtmConnectSchemaSelf
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UsersIdentitySchemaInnerAnyOf.


        :param user: The user of this UsersIdentitySchemaInnerAnyOf.
        :type user: RtmConnectSchemaSelf
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
