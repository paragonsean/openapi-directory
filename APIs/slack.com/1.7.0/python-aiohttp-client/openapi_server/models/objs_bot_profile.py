# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bots_info_schema_bot_icons import BotsInfoSchemaBotIcons
import re
from openapi_server import util


class ObjsBotProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, deleted: bool=None, icons: BotsInfoSchemaBotIcons=None, id: str=None, name: str=None, team_id: str=None, updated: int=None):
        """ObjsBotProfile - a model defined in OpenAPI

        :param app_id: The app_id of this ObjsBotProfile.
        :param deleted: The deleted of this ObjsBotProfile.
        :param icons: The icons of this ObjsBotProfile.
        :param id: The id of this ObjsBotProfile.
        :param name: The name of this ObjsBotProfile.
        :param team_id: The team_id of this ObjsBotProfile.
        :param updated: The updated of this ObjsBotProfile.
        """
        self.openapi_types = {
            'app_id': str,
            'deleted': bool,
            'icons': BotsInfoSchemaBotIcons,
            'id': str,
            'name': str,
            'team_id': str,
            'updated': int
        }

        self.attribute_map = {
            'app_id': 'app_id',
            'deleted': 'deleted',
            'icons': 'icons',
            'id': 'id',
            'name': 'name',
            'team_id': 'team_id',
            'updated': 'updated'
        }

        self._app_id = app_id
        self._deleted = deleted
        self._icons = icons
        self._id = id
        self._name = name
        self._team_id = team_id
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsBotProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_bot_profile of this ObjsBotProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ObjsBotProfile.


        :return: The app_id of this ObjsBotProfile.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ObjsBotProfile.


        :param app_id: The app_id of this ObjsBotProfile.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")
        if app_id is not None and not re.search(r'^A[A-Z0-9]{1,}$', app_id):
            raise ValueError("Invalid value for `app_id`, must be a follow pattern or equal to `/^A[A-Z0-9]{1,}$/`")

        self._app_id = app_id

    @property
    def deleted(self):
        """Gets the deleted of this ObjsBotProfile.


        :return: The deleted of this ObjsBotProfile.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ObjsBotProfile.


        :param deleted: The deleted of this ObjsBotProfile.
        :type deleted: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")

        self._deleted = deleted

    @property
    def icons(self):
        """Gets the icons of this ObjsBotProfile.


        :return: The icons of this ObjsBotProfile.
        :rtype: BotsInfoSchemaBotIcons
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this ObjsBotProfile.


        :param icons: The icons of this ObjsBotProfile.
        :type icons: BotsInfoSchemaBotIcons
        """
        if icons is None:
            raise ValueError("Invalid value for `icons`, must not be `None`")

        self._icons = icons

    @property
    def id(self):
        """Gets the id of this ObjsBotProfile.


        :return: The id of this ObjsBotProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsBotProfile.


        :param id: The id of this ObjsBotProfile.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^B[A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^B[A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ObjsBotProfile.


        :return: The name of this ObjsBotProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsBotProfile.


        :param name: The name of this ObjsBotProfile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def team_id(self):
        """Gets the team_id of this ObjsBotProfile.


        :return: The team_id of this ObjsBotProfile.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ObjsBotProfile.


        :param team_id: The team_id of this ObjsBotProfile.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._team_id = team_id

    @property
    def updated(self):
        """Gets the updated of this ObjsBotProfile.


        :return: The updated of this ObjsBotProfile.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ObjsBotProfile.


        :param updated: The updated of this ObjsBotProfile.
        :type updated: int
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated
