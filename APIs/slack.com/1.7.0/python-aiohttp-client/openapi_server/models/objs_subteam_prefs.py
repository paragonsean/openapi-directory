# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjsSubteamPrefs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[str]=None, groups: List[str]=None):
        """ObjsSubteamPrefs - a model defined in OpenAPI

        :param channels: The channels of this ObjsSubteamPrefs.
        :param groups: The groups of this ObjsSubteamPrefs.
        """
        self.openapi_types = {
            'channels': List[str],
            'groups': List[str]
        }

        self.attribute_map = {
            'channels': 'channels',
            'groups': 'groups'
        }

        self._channels = channels
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsSubteamPrefs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_subteam_prefs of this ObjsSubteamPrefs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ObjsSubteamPrefs.


        :return: The channels of this ObjsSubteamPrefs.
        :rtype: List[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ObjsSubteamPrefs.


        :param channels: The channels of this ObjsSubteamPrefs.
        :type channels: List[str]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def groups(self):
        """Gets the groups of this ObjsSubteamPrefs.


        :return: The groups of this ObjsSubteamPrefs.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ObjsSubteamPrefs.


        :param groups: The groups of this ObjsSubteamPrefs.
        :type groups: List[str]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups
