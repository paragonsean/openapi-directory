# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_user_profile import ObjsUserProfile
from openapi_server import util


class UsersProfileSetSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_pending: str=None, ok: bool=None, profile: ObjsUserProfile=None, username: str=None):
        """UsersProfileSetSchema - a model defined in OpenAPI

        :param email_pending: The email_pending of this UsersProfileSetSchema.
        :param ok: The ok of this UsersProfileSetSchema.
        :param profile: The profile of this UsersProfileSetSchema.
        :param username: The username of this UsersProfileSetSchema.
        """
        self.openapi_types = {
            'email_pending': str,
            'ok': bool,
            'profile': ObjsUserProfile,
            'username': str
        }

        self.attribute_map = {
            'email_pending': 'email_pending',
            'ok': 'ok',
            'profile': 'profile',
            'username': 'username'
        }

        self._email_pending = email_pending
        self._ok = ok
        self._profile = profile
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersProfileSetSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_profile_set_schema of this UsersProfileSetSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_pending(self):
        """Gets the email_pending of this UsersProfileSetSchema.


        :return: The email_pending of this UsersProfileSetSchema.
        :rtype: str
        """
        return self._email_pending

    @email_pending.setter
    def email_pending(self, email_pending):
        """Sets the email_pending of this UsersProfileSetSchema.


        :param email_pending: The email_pending of this UsersProfileSetSchema.
        :type email_pending: str
        """

        self._email_pending = email_pending

    @property
    def ok(self):
        """Gets the ok of this UsersProfileSetSchema.


        :return: The ok of this UsersProfileSetSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this UsersProfileSetSchema.


        :param ok: The ok of this UsersProfileSetSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def profile(self):
        """Gets the profile of this UsersProfileSetSchema.


        :return: The profile of this UsersProfileSetSchema.
        :rtype: ObjsUserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UsersProfileSetSchema.


        :param profile: The profile of this UsersProfileSetSchema.
        :type profile: ObjsUserProfile
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile

    @property
    def username(self):
        """Gets the username of this UsersProfileSetSchema.


        :return: The username of this UsersProfileSetSchema.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UsersProfileSetSchema.


        :param username: The username of this UsersProfileSetSchema.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
