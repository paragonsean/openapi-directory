# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_external_org_migrations import ObjsExternalOrgMigrations
from openapi_server.models.objs_icon import ObjsIcon
from openapi_server.models.objs_primary_owner import ObjsPrimaryOwner
from openapi_server.models.objs_team_discoverable_inner import ObjsTeamDiscoverableInner
from openapi_server.models.objs_team_sso_provider import ObjsTeamSsoProvider
import re
from openapi_server import util


class ObjsTeam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, avatar_base_url: str=None, created: int=None, date_create: int=None, deleted: bool=None, description: str=None, discoverable: List[ObjsTeamDiscoverableInner]=None, domain: str=None, email_domain: str=None, enterprise_id: str=None, enterprise_name: str=None, external_org_migrations: ObjsExternalOrgMigrations=None, has_compliance_export: bool=None, icon: ObjsIcon=None, id: str=None, is_assigned: bool=None, is_enterprise: int=None, is_over_storage_limit: bool=None, limit_ts: int=None, locale: str=None, messages_count: int=None, msg_edit_window_mins: int=None, name: str=None, over_integrations_limit: bool=None, over_storage_limit: bool=None, pay_prod_cur: str=None, plan: str=None, primary_owner: ObjsPrimaryOwner=None, sso_provider: ObjsTeamSsoProvider=None):
        """ObjsTeam - a model defined in OpenAPI

        :param archived: The archived of this ObjsTeam.
        :param avatar_base_url: The avatar_base_url of this ObjsTeam.
        :param created: The created of this ObjsTeam.
        :param date_create: The date_create of this ObjsTeam.
        :param deleted: The deleted of this ObjsTeam.
        :param description: The description of this ObjsTeam.
        :param discoverable: The discoverable of this ObjsTeam.
        :param domain: The domain of this ObjsTeam.
        :param email_domain: The email_domain of this ObjsTeam.
        :param enterprise_id: The enterprise_id of this ObjsTeam.
        :param enterprise_name: The enterprise_name of this ObjsTeam.
        :param external_org_migrations: The external_org_migrations of this ObjsTeam.
        :param has_compliance_export: The has_compliance_export of this ObjsTeam.
        :param icon: The icon of this ObjsTeam.
        :param id: The id of this ObjsTeam.
        :param is_assigned: The is_assigned of this ObjsTeam.
        :param is_enterprise: The is_enterprise of this ObjsTeam.
        :param is_over_storage_limit: The is_over_storage_limit of this ObjsTeam.
        :param limit_ts: The limit_ts of this ObjsTeam.
        :param locale: The locale of this ObjsTeam.
        :param messages_count: The messages_count of this ObjsTeam.
        :param msg_edit_window_mins: The msg_edit_window_mins of this ObjsTeam.
        :param name: The name of this ObjsTeam.
        :param over_integrations_limit: The over_integrations_limit of this ObjsTeam.
        :param over_storage_limit: The over_storage_limit of this ObjsTeam.
        :param pay_prod_cur: The pay_prod_cur of this ObjsTeam.
        :param plan: The plan of this ObjsTeam.
        :param primary_owner: The primary_owner of this ObjsTeam.
        :param sso_provider: The sso_provider of this ObjsTeam.
        """
        self.openapi_types = {
            'archived': bool,
            'avatar_base_url': str,
            'created': int,
            'date_create': int,
            'deleted': bool,
            'description': str,
            'discoverable': List[ObjsTeamDiscoverableInner],
            'domain': str,
            'email_domain': str,
            'enterprise_id': str,
            'enterprise_name': str,
            'external_org_migrations': ObjsExternalOrgMigrations,
            'has_compliance_export': bool,
            'icon': ObjsIcon,
            'id': str,
            'is_assigned': bool,
            'is_enterprise': int,
            'is_over_storage_limit': bool,
            'limit_ts': int,
            'locale': str,
            'messages_count': int,
            'msg_edit_window_mins': int,
            'name': str,
            'over_integrations_limit': bool,
            'over_storage_limit': bool,
            'pay_prod_cur': str,
            'plan': str,
            'primary_owner': ObjsPrimaryOwner,
            'sso_provider': ObjsTeamSsoProvider
        }

        self.attribute_map = {
            'archived': 'archived',
            'avatar_base_url': 'avatar_base_url',
            'created': 'created',
            'date_create': 'date_create',
            'deleted': 'deleted',
            'description': 'description',
            'discoverable': 'discoverable',
            'domain': 'domain',
            'email_domain': 'email_domain',
            'enterprise_id': 'enterprise_id',
            'enterprise_name': 'enterprise_name',
            'external_org_migrations': 'external_org_migrations',
            'has_compliance_export': 'has_compliance_export',
            'icon': 'icon',
            'id': 'id',
            'is_assigned': 'is_assigned',
            'is_enterprise': 'is_enterprise',
            'is_over_storage_limit': 'is_over_storage_limit',
            'limit_ts': 'limit_ts',
            'locale': 'locale',
            'messages_count': 'messages_count',
            'msg_edit_window_mins': 'msg_edit_window_mins',
            'name': 'name',
            'over_integrations_limit': 'over_integrations_limit',
            'over_storage_limit': 'over_storage_limit',
            'pay_prod_cur': 'pay_prod_cur',
            'plan': 'plan',
            'primary_owner': 'primary_owner',
            'sso_provider': 'sso_provider'
        }

        self._archived = archived
        self._avatar_base_url = avatar_base_url
        self._created = created
        self._date_create = date_create
        self._deleted = deleted
        self._description = description
        self._discoverable = discoverable
        self._domain = domain
        self._email_domain = email_domain
        self._enterprise_id = enterprise_id
        self._enterprise_name = enterprise_name
        self._external_org_migrations = external_org_migrations
        self._has_compliance_export = has_compliance_export
        self._icon = icon
        self._id = id
        self._is_assigned = is_assigned
        self._is_enterprise = is_enterprise
        self._is_over_storage_limit = is_over_storage_limit
        self._limit_ts = limit_ts
        self._locale = locale
        self._messages_count = messages_count
        self._msg_edit_window_mins = msg_edit_window_mins
        self._name = name
        self._over_integrations_limit = over_integrations_limit
        self._over_storage_limit = over_storage_limit
        self._pay_prod_cur = pay_prod_cur
        self._plan = plan
        self._primary_owner = primary_owner
        self._sso_provider = sso_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsTeam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_team of this ObjsTeam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ObjsTeam.


        :return: The archived of this ObjsTeam.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ObjsTeam.


        :param archived: The archived of this ObjsTeam.
        :type archived: bool
        """

        self._archived = archived

    @property
    def avatar_base_url(self):
        """Gets the avatar_base_url of this ObjsTeam.


        :return: The avatar_base_url of this ObjsTeam.
        :rtype: str
        """
        return self._avatar_base_url

    @avatar_base_url.setter
    def avatar_base_url(self, avatar_base_url):
        """Sets the avatar_base_url of this ObjsTeam.


        :param avatar_base_url: The avatar_base_url of this ObjsTeam.
        :type avatar_base_url: str
        """

        self._avatar_base_url = avatar_base_url

    @property
    def created(self):
        """Gets the created of this ObjsTeam.


        :return: The created of this ObjsTeam.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ObjsTeam.


        :param created: The created of this ObjsTeam.
        :type created: int
        """

        self._created = created

    @property
    def date_create(self):
        """Gets the date_create of this ObjsTeam.


        :return: The date_create of this ObjsTeam.
        :rtype: int
        """
        return self._date_create

    @date_create.setter
    def date_create(self, date_create):
        """Sets the date_create of this ObjsTeam.


        :param date_create: The date_create of this ObjsTeam.
        :type date_create: int
        """

        self._date_create = date_create

    @property
    def deleted(self):
        """Gets the deleted of this ObjsTeam.


        :return: The deleted of this ObjsTeam.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ObjsTeam.


        :param deleted: The deleted of this ObjsTeam.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this ObjsTeam.


        :return: The description of this ObjsTeam.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObjsTeam.


        :param description: The description of this ObjsTeam.
        :type description: str
        """

        self._description = description

    @property
    def discoverable(self):
        """Gets the discoverable of this ObjsTeam.


        :return: The discoverable of this ObjsTeam.
        :rtype: List[ObjsTeamDiscoverableInner]
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this ObjsTeam.


        :param discoverable: The discoverable of this ObjsTeam.
        :type discoverable: List[ObjsTeamDiscoverableInner]
        """

        self._discoverable = discoverable

    @property
    def domain(self):
        """Gets the domain of this ObjsTeam.


        :return: The domain of this ObjsTeam.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ObjsTeam.


        :param domain: The domain of this ObjsTeam.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def email_domain(self):
        """Gets the email_domain of this ObjsTeam.


        :return: The email_domain of this ObjsTeam.
        :rtype: str
        """
        return self._email_domain

    @email_domain.setter
    def email_domain(self, email_domain):
        """Sets the email_domain of this ObjsTeam.


        :param email_domain: The email_domain of this ObjsTeam.
        :type email_domain: str
        """
        if email_domain is None:
            raise ValueError("Invalid value for `email_domain`, must not be `None`")

        self._email_domain = email_domain

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this ObjsTeam.


        :return: The enterprise_id of this ObjsTeam.
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this ObjsTeam.


        :param enterprise_id: The enterprise_id of this ObjsTeam.
        :type enterprise_id: str
        """
        if enterprise_id is not None and not re.search(r'^[E][A-Z0-9]{8,}$', enterprise_id):
            raise ValueError("Invalid value for `enterprise_id`, must be a follow pattern or equal to `/^[E][A-Z0-9]{8,}$/`")

        self._enterprise_id = enterprise_id

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this ObjsTeam.


        :return: The enterprise_name of this ObjsTeam.
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this ObjsTeam.


        :param enterprise_name: The enterprise_name of this ObjsTeam.
        :type enterprise_name: str
        """

        self._enterprise_name = enterprise_name

    @property
    def external_org_migrations(self):
        """Gets the external_org_migrations of this ObjsTeam.


        :return: The external_org_migrations of this ObjsTeam.
        :rtype: ObjsExternalOrgMigrations
        """
        return self._external_org_migrations

    @external_org_migrations.setter
    def external_org_migrations(self, external_org_migrations):
        """Sets the external_org_migrations of this ObjsTeam.


        :param external_org_migrations: The external_org_migrations of this ObjsTeam.
        :type external_org_migrations: ObjsExternalOrgMigrations
        """

        self._external_org_migrations = external_org_migrations

    @property
    def has_compliance_export(self):
        """Gets the has_compliance_export of this ObjsTeam.


        :return: The has_compliance_export of this ObjsTeam.
        :rtype: bool
        """
        return self._has_compliance_export

    @has_compliance_export.setter
    def has_compliance_export(self, has_compliance_export):
        """Sets the has_compliance_export of this ObjsTeam.


        :param has_compliance_export: The has_compliance_export of this ObjsTeam.
        :type has_compliance_export: bool
        """

        self._has_compliance_export = has_compliance_export

    @property
    def icon(self):
        """Gets the icon of this ObjsTeam.


        :return: The icon of this ObjsTeam.
        :rtype: ObjsIcon
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ObjsTeam.


        :param icon: The icon of this ObjsTeam.
        :type icon: ObjsIcon
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this ObjsTeam.


        :return: The id of this ObjsTeam.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsTeam.


        :param id: The id of this ObjsTeam.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def is_assigned(self):
        """Gets the is_assigned of this ObjsTeam.


        :return: The is_assigned of this ObjsTeam.
        :rtype: bool
        """
        return self._is_assigned

    @is_assigned.setter
    def is_assigned(self, is_assigned):
        """Sets the is_assigned of this ObjsTeam.


        :param is_assigned: The is_assigned of this ObjsTeam.
        :type is_assigned: bool
        """

        self._is_assigned = is_assigned

    @property
    def is_enterprise(self):
        """Gets the is_enterprise of this ObjsTeam.


        :return: The is_enterprise of this ObjsTeam.
        :rtype: int
        """
        return self._is_enterprise

    @is_enterprise.setter
    def is_enterprise(self, is_enterprise):
        """Sets the is_enterprise of this ObjsTeam.


        :param is_enterprise: The is_enterprise of this ObjsTeam.
        :type is_enterprise: int
        """

        self._is_enterprise = is_enterprise

    @property
    def is_over_storage_limit(self):
        """Gets the is_over_storage_limit of this ObjsTeam.


        :return: The is_over_storage_limit of this ObjsTeam.
        :rtype: bool
        """
        return self._is_over_storage_limit

    @is_over_storage_limit.setter
    def is_over_storage_limit(self, is_over_storage_limit):
        """Sets the is_over_storage_limit of this ObjsTeam.


        :param is_over_storage_limit: The is_over_storage_limit of this ObjsTeam.
        :type is_over_storage_limit: bool
        """

        self._is_over_storage_limit = is_over_storage_limit

    @property
    def limit_ts(self):
        """Gets the limit_ts of this ObjsTeam.


        :return: The limit_ts of this ObjsTeam.
        :rtype: int
        """
        return self._limit_ts

    @limit_ts.setter
    def limit_ts(self, limit_ts):
        """Sets the limit_ts of this ObjsTeam.


        :param limit_ts: The limit_ts of this ObjsTeam.
        :type limit_ts: int
        """

        self._limit_ts = limit_ts

    @property
    def locale(self):
        """Gets the locale of this ObjsTeam.


        :return: The locale of this ObjsTeam.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ObjsTeam.


        :param locale: The locale of this ObjsTeam.
        :type locale: str
        """

        self._locale = locale

    @property
    def messages_count(self):
        """Gets the messages_count of this ObjsTeam.


        :return: The messages_count of this ObjsTeam.
        :rtype: int
        """
        return self._messages_count

    @messages_count.setter
    def messages_count(self, messages_count):
        """Sets the messages_count of this ObjsTeam.


        :param messages_count: The messages_count of this ObjsTeam.
        :type messages_count: int
        """

        self._messages_count = messages_count

    @property
    def msg_edit_window_mins(self):
        """Gets the msg_edit_window_mins of this ObjsTeam.


        :return: The msg_edit_window_mins of this ObjsTeam.
        :rtype: int
        """
        return self._msg_edit_window_mins

    @msg_edit_window_mins.setter
    def msg_edit_window_mins(self, msg_edit_window_mins):
        """Sets the msg_edit_window_mins of this ObjsTeam.


        :param msg_edit_window_mins: The msg_edit_window_mins of this ObjsTeam.
        :type msg_edit_window_mins: int
        """

        self._msg_edit_window_mins = msg_edit_window_mins

    @property
    def name(self):
        """Gets the name of this ObjsTeam.


        :return: The name of this ObjsTeam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsTeam.


        :param name: The name of this ObjsTeam.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def over_integrations_limit(self):
        """Gets the over_integrations_limit of this ObjsTeam.


        :return: The over_integrations_limit of this ObjsTeam.
        :rtype: bool
        """
        return self._over_integrations_limit

    @over_integrations_limit.setter
    def over_integrations_limit(self, over_integrations_limit):
        """Sets the over_integrations_limit of this ObjsTeam.


        :param over_integrations_limit: The over_integrations_limit of this ObjsTeam.
        :type over_integrations_limit: bool
        """

        self._over_integrations_limit = over_integrations_limit

    @property
    def over_storage_limit(self):
        """Gets the over_storage_limit of this ObjsTeam.


        :return: The over_storage_limit of this ObjsTeam.
        :rtype: bool
        """
        return self._over_storage_limit

    @over_storage_limit.setter
    def over_storage_limit(self, over_storage_limit):
        """Sets the over_storage_limit of this ObjsTeam.


        :param over_storage_limit: The over_storage_limit of this ObjsTeam.
        :type over_storage_limit: bool
        """

        self._over_storage_limit = over_storage_limit

    @property
    def pay_prod_cur(self):
        """Gets the pay_prod_cur of this ObjsTeam.


        :return: The pay_prod_cur of this ObjsTeam.
        :rtype: str
        """
        return self._pay_prod_cur

    @pay_prod_cur.setter
    def pay_prod_cur(self, pay_prod_cur):
        """Sets the pay_prod_cur of this ObjsTeam.


        :param pay_prod_cur: The pay_prod_cur of this ObjsTeam.
        :type pay_prod_cur: str
        """

        self._pay_prod_cur = pay_prod_cur

    @property
    def plan(self):
        """Gets the plan of this ObjsTeam.


        :return: The plan of this ObjsTeam.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ObjsTeam.


        :param plan: The plan of this ObjsTeam.
        :type plan: str
        """
        allowed_values = ["", "std", "plus", "compliance", "enterprise"]  # noqa: E501
        if plan not in allowed_values:
            raise ValueError(
                "Invalid value for `plan` ({0}), must be one of {1}"
                .format(plan, allowed_values)
            )

        self._plan = plan

    @property
    def primary_owner(self):
        """Gets the primary_owner of this ObjsTeam.


        :return: The primary_owner of this ObjsTeam.
        :rtype: ObjsPrimaryOwner
        """
        return self._primary_owner

    @primary_owner.setter
    def primary_owner(self, primary_owner):
        """Sets the primary_owner of this ObjsTeam.


        :param primary_owner: The primary_owner of this ObjsTeam.
        :type primary_owner: ObjsPrimaryOwner
        """

        self._primary_owner = primary_owner

    @property
    def sso_provider(self):
        """Gets the sso_provider of this ObjsTeam.


        :return: The sso_provider of this ObjsTeam.
        :rtype: ObjsTeamSsoProvider
        """
        return self._sso_provider

    @sso_provider.setter
    def sso_provider(self, sso_provider):
        """Sets the sso_provider of this ObjsTeam.


        :param sso_provider: The sso_provider of this ObjsTeam.
        :type sso_provider: ObjsTeamSsoProvider
        """

        self._sso_provider = sso_provider
