# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversations_history_success_schema_channel_actions_ts_inner import ConversationsHistorySuccessSchemaChannelActionsTsInner
from openapi_server.models.objs_message import ObjsMessage
from openapi_server import util


class ConversationsHistorySuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_actions_count: int=None, channel_actions_ts: List[ConversationsHistorySuccessSchemaChannelActionsTsInner]=None, has_more: bool=None, messages: list[ObjsMessage]=None, ok: bool=None, pin_count: int=None):
        """ConversationsHistorySuccessSchema - a model defined in OpenAPI

        :param channel_actions_count: The channel_actions_count of this ConversationsHistorySuccessSchema.
        :param channel_actions_ts: The channel_actions_ts of this ConversationsHistorySuccessSchema.
        :param has_more: The has_more of this ConversationsHistorySuccessSchema.
        :param messages: The messages of this ConversationsHistorySuccessSchema.
        :param ok: The ok of this ConversationsHistorySuccessSchema.
        :param pin_count: The pin_count of this ConversationsHistorySuccessSchema.
        """
        self.openapi_types = {
            'channel_actions_count': int,
            'channel_actions_ts': List[ConversationsHistorySuccessSchemaChannelActionsTsInner],
            'has_more': bool,
            'messages': list[ObjsMessage],
            'ok': bool,
            'pin_count': int
        }

        self.attribute_map = {
            'channel_actions_count': 'channel_actions_count',
            'channel_actions_ts': 'channel_actions_ts',
            'has_more': 'has_more',
            'messages': 'messages',
            'ok': 'ok',
            'pin_count': 'pin_count'
        }

        self._channel_actions_count = channel_actions_count
        self._channel_actions_ts = channel_actions_ts
        self._has_more = has_more
        self._messages = messages
        self._ok = ok
        self._pin_count = pin_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsHistorySuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations_history_success_schema of this ConversationsHistorySuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_actions_count(self):
        """Gets the channel_actions_count of this ConversationsHistorySuccessSchema.


        :return: The channel_actions_count of this ConversationsHistorySuccessSchema.
        :rtype: int
        """
        return self._channel_actions_count

    @channel_actions_count.setter
    def channel_actions_count(self, channel_actions_count):
        """Sets the channel_actions_count of this ConversationsHistorySuccessSchema.


        :param channel_actions_count: The channel_actions_count of this ConversationsHistorySuccessSchema.
        :type channel_actions_count: int
        """
        if channel_actions_count is None:
            raise ValueError("Invalid value for `channel_actions_count`, must not be `None`")

        self._channel_actions_count = channel_actions_count

    @property
    def channel_actions_ts(self):
        """Gets the channel_actions_ts of this ConversationsHistorySuccessSchema.


        :return: The channel_actions_ts of this ConversationsHistorySuccessSchema.
        :rtype: List[ConversationsHistorySuccessSchemaChannelActionsTsInner]
        """
        return self._channel_actions_ts

    @channel_actions_ts.setter
    def channel_actions_ts(self, channel_actions_ts):
        """Sets the channel_actions_ts of this ConversationsHistorySuccessSchema.


        :param channel_actions_ts: The channel_actions_ts of this ConversationsHistorySuccessSchema.
        :type channel_actions_ts: List[ConversationsHistorySuccessSchemaChannelActionsTsInner]
        """
        if channel_actions_ts is None:
            raise ValueError("Invalid value for `channel_actions_ts`, must not be `None`")

        self._channel_actions_ts = channel_actions_ts

    @property
    def has_more(self):
        """Gets the has_more of this ConversationsHistorySuccessSchema.


        :return: The has_more of this ConversationsHistorySuccessSchema.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ConversationsHistorySuccessSchema.


        :param has_more: The has_more of this ConversationsHistorySuccessSchema.
        :type has_more: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more

    @property
    def messages(self):
        """Gets the messages of this ConversationsHistorySuccessSchema.


        :return: The messages of this ConversationsHistorySuccessSchema.
        :rtype: list[ObjsMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ConversationsHistorySuccessSchema.


        :param messages: The messages of this ConversationsHistorySuccessSchema.
        :type messages: list[ObjsMessage]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")
        if messages is not None and len(messages) < 1:
            raise ValueError("Invalid value for `messages`, number of items must be greater than or equal to `1`")

        self._messages = messages

    @property
    def ok(self):
        """Gets the ok of this ConversationsHistorySuccessSchema.


        :return: The ok of this ConversationsHistorySuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ConversationsHistorySuccessSchema.


        :param ok: The ok of this ConversationsHistorySuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def pin_count(self):
        """Gets the pin_count of this ConversationsHistorySuccessSchema.


        :return: The pin_count of this ConversationsHistorySuccessSchema.
        :rtype: int
        """
        return self._pin_count

    @pin_count.setter
    def pin_count(self, pin_count):
        """Sets the pin_count of this ConversationsHistorySuccessSchema.


        :param pin_count: The pin_count of this ConversationsHistorySuccessSchema.
        :type pin_count: int
        """
        if pin_count is None:
            raise ValueError("Invalid value for `pin_count`, must not be `None`")

        self._pin_count = pin_count
