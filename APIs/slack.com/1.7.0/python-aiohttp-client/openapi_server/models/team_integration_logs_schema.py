# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_paging import ObjsPaging
from openapi_server.models.team_integration_logs_schema_logs_inner import TeamIntegrationLogsSchemaLogsInner
from openapi_server import util


class TeamIntegrationLogsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logs: list[TeamIntegrationLogsSchemaLogsInner]=None, ok: bool=None, paging: ObjsPaging=None):
        """TeamIntegrationLogsSchema - a model defined in OpenAPI

        :param logs: The logs of this TeamIntegrationLogsSchema.
        :param ok: The ok of this TeamIntegrationLogsSchema.
        :param paging: The paging of this TeamIntegrationLogsSchema.
        """
        self.openapi_types = {
            'logs': list[TeamIntegrationLogsSchemaLogsInner],
            'ok': bool,
            'paging': ObjsPaging
        }

        self.attribute_map = {
            'logs': 'logs',
            'ok': 'ok',
            'paging': 'paging'
        }

        self._logs = logs
        self._ok = ok
        self._paging = paging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamIntegrationLogsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team_integrationLogs_schema of this TeamIntegrationLogsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self):
        """Gets the logs of this TeamIntegrationLogsSchema.


        :return: The logs of this TeamIntegrationLogsSchema.
        :rtype: list[TeamIntegrationLogsSchemaLogsInner]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this TeamIntegrationLogsSchema.


        :param logs: The logs of this TeamIntegrationLogsSchema.
        :type logs: list[TeamIntegrationLogsSchemaLogsInner]
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")
        if logs is not None and len(logs) < 1:
            raise ValueError("Invalid value for `logs`, number of items must be greater than or equal to `1`")

        self._logs = logs

    @property
    def ok(self):
        """Gets the ok of this TeamIntegrationLogsSchema.


        :return: The ok of this TeamIntegrationLogsSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this TeamIntegrationLogsSchema.


        :param ok: The ok of this TeamIntegrationLogsSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def paging(self):
        """Gets the paging of this TeamIntegrationLogsSchema.


        :return: The paging of this TeamIntegrationLogsSchema.
        :rtype: ObjsPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this TeamIntegrationLogsSchema.


        :param paging: The paging of this TeamIntegrationLogsSchema.
        :type paging: ObjsPaging
        """
        if paging is None:
            raise ValueError("Invalid value for `paging`, must not be `None`")

        self._paging = paging
