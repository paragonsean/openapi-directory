# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsersSetPhotoErrorSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callstack: str=None, debug_step: str=None, dims: str=None, error: str=None, ok: bool=None, time_ident: int=None):
        """UsersSetPhotoErrorSchema - a model defined in OpenAPI

        :param callstack: The callstack of this UsersSetPhotoErrorSchema.
        :param debug_step: The debug_step of this UsersSetPhotoErrorSchema.
        :param dims: The dims of this UsersSetPhotoErrorSchema.
        :param error: The error of this UsersSetPhotoErrorSchema.
        :param ok: The ok of this UsersSetPhotoErrorSchema.
        :param time_ident: The time_ident of this UsersSetPhotoErrorSchema.
        """
        self.openapi_types = {
            'callstack': str,
            'debug_step': str,
            'dims': str,
            'error': str,
            'ok': bool,
            'time_ident': int
        }

        self.attribute_map = {
            'callstack': 'callstack',
            'debug_step': 'debug_step',
            'dims': 'dims',
            'error': 'error',
            'ok': 'ok',
            'time_ident': 'time_ident'
        }

        self._callstack = callstack
        self._debug_step = debug_step
        self._dims = dims
        self._error = error
        self._ok = ok
        self._time_ident = time_ident

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersSetPhotoErrorSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_setPhoto_error_schema of this UsersSetPhotoErrorSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callstack(self):
        """Gets the callstack of this UsersSetPhotoErrorSchema.

        Note: PHP callstack is only visible in dev/qa

        :return: The callstack of this UsersSetPhotoErrorSchema.
        :rtype: str
        """
        return self._callstack

    @callstack.setter
    def callstack(self, callstack):
        """Sets the callstack of this UsersSetPhotoErrorSchema.

        Note: PHP callstack is only visible in dev/qa

        :param callstack: The callstack of this UsersSetPhotoErrorSchema.
        :type callstack: str
        """

        self._callstack = callstack

    @property
    def debug_step(self):
        """Gets the debug_step of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :return: The debug_step of this UsersSetPhotoErrorSchema.
        :rtype: str
        """
        return self._debug_step

    @debug_step.setter
    def debug_step(self, debug_step):
        """Sets the debug_step of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :param debug_step: The debug_step of this UsersSetPhotoErrorSchema.
        :type debug_step: str
        """

        self._debug_step = debug_step

    @property
    def dims(self):
        """Gets the dims of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :return: The dims of this UsersSetPhotoErrorSchema.
        :rtype: str
        """
        return self._dims

    @dims.setter
    def dims(self, dims):
        """Sets the dims of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :param dims: The dims of this UsersSetPhotoErrorSchema.
        :type dims: str
        """

        self._dims = dims

    @property
    def error(self):
        """Gets the error of this UsersSetPhotoErrorSchema.


        :return: The error of this UsersSetPhotoErrorSchema.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this UsersSetPhotoErrorSchema.


        :param error: The error of this UsersSetPhotoErrorSchema.
        :type error: str
        """
        allowed_values = ["bad_image", "too_large", "too_many_frames", "not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def ok(self):
        """Gets the ok of this UsersSetPhotoErrorSchema.


        :return: The ok of this UsersSetPhotoErrorSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this UsersSetPhotoErrorSchema.


        :param ok: The ok of this UsersSetPhotoErrorSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def time_ident(self):
        """Gets the time_ident of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :return: The time_ident of this UsersSetPhotoErrorSchema.
        :rtype: int
        """
        return self._time_ident

    @time_ident.setter
    def time_ident(self, time_ident):
        """Sets the time_ident of this UsersSetPhotoErrorSchema.

        possibly DEV/QA only

        :param time_ident: The time_ident of this UsersSetPhotoErrorSchema.
        :type time_ident: int
        """

        self._time_ident = time_ident
