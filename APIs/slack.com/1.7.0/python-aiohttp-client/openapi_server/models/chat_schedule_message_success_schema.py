# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.chat_schedule_message_success_schema_message import ChatScheduleMessageSuccessSchemaMessage
import re
from openapi_server import util


class ChatScheduleMessageSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: str=None, message: ChatScheduleMessageSuccessSchemaMessage=None, ok: bool=None, post_at: int=None, scheduled_message_id: str=None):
        """ChatScheduleMessageSuccessSchema - a model defined in OpenAPI

        :param channel: The channel of this ChatScheduleMessageSuccessSchema.
        :param message: The message of this ChatScheduleMessageSuccessSchema.
        :param ok: The ok of this ChatScheduleMessageSuccessSchema.
        :param post_at: The post_at of this ChatScheduleMessageSuccessSchema.
        :param scheduled_message_id: The scheduled_message_id of this ChatScheduleMessageSuccessSchema.
        """
        self.openapi_types = {
            'channel': str,
            'message': ChatScheduleMessageSuccessSchemaMessage,
            'ok': bool,
            'post_at': int,
            'scheduled_message_id': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'message': 'message',
            'ok': 'ok',
            'post_at': 'post_at',
            'scheduled_message_id': 'scheduled_message_id'
        }

        self._channel = channel
        self._message = message
        self._ok = ok
        self._post_at = post_at
        self._scheduled_message_id = scheduled_message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatScheduleMessageSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat_scheduleMessage_success_schema of this ChatScheduleMessageSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ChatScheduleMessageSuccessSchema.


        :return: The channel of this ChatScheduleMessageSuccessSchema.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChatScheduleMessageSuccessSchema.


        :param channel: The channel of this ChatScheduleMessageSuccessSchema.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")
        if channel is not None and not re.search(r'^[CGD][A-Z0-9]{8,}$', channel):
            raise ValueError("Invalid value for `channel`, must be a follow pattern or equal to `/^[CGD][A-Z0-9]{8,}$/`")

        self._channel = channel

    @property
    def message(self):
        """Gets the message of this ChatScheduleMessageSuccessSchema.


        :return: The message of this ChatScheduleMessageSuccessSchema.
        :rtype: ChatScheduleMessageSuccessSchemaMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChatScheduleMessageSuccessSchema.


        :param message: The message of this ChatScheduleMessageSuccessSchema.
        :type message: ChatScheduleMessageSuccessSchemaMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def ok(self):
        """Gets the ok of this ChatScheduleMessageSuccessSchema.


        :return: The ok of this ChatScheduleMessageSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ChatScheduleMessageSuccessSchema.


        :param ok: The ok of this ChatScheduleMessageSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def post_at(self):
        """Gets the post_at of this ChatScheduleMessageSuccessSchema.


        :return: The post_at of this ChatScheduleMessageSuccessSchema.
        :rtype: int
        """
        return self._post_at

    @post_at.setter
    def post_at(self, post_at):
        """Sets the post_at of this ChatScheduleMessageSuccessSchema.


        :param post_at: The post_at of this ChatScheduleMessageSuccessSchema.
        :type post_at: int
        """
        if post_at is None:
            raise ValueError("Invalid value for `post_at`, must not be `None`")

        self._post_at = post_at

    @property
    def scheduled_message_id(self):
        """Gets the scheduled_message_id of this ChatScheduleMessageSuccessSchema.


        :return: The scheduled_message_id of this ChatScheduleMessageSuccessSchema.
        :rtype: str
        """
        return self._scheduled_message_id

    @scheduled_message_id.setter
    def scheduled_message_id(self, scheduled_message_id):
        """Sets the scheduled_message_id of this ChatScheduleMessageSuccessSchema.


        :param scheduled_message_id: The scheduled_message_id of this ChatScheduleMessageSuccessSchema.
        :type scheduled_message_id: str
        """
        if scheduled_message_id is None:
            raise ValueError("Invalid value for `scheduled_message_id`, must not be `None`")
        if scheduled_message_id is not None and not re.search(r'^[Q][A-Z0-9]{8,}$', scheduled_message_id):
            raise ValueError("Invalid value for `scheduled_message_id`, must be a follow pattern or equal to `/^[Q][A-Z0-9]{8,}$/`")

        self._scheduled_message_id = scheduled_message_id
