# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apps_permissions_info_schema_info_app_home import AppsPermissionsInfoSchemaInfoAppHome
from openapi_server.models.apps_permissions_info_schema_info_team import AppsPermissionsInfoSchemaInfoTeam
from openapi_server import util


class AppsPermissionsInfoSchemaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_home: AppsPermissionsInfoSchemaInfoAppHome=None, channel: AppsPermissionsInfoSchemaInfoAppHome=None, group: AppsPermissionsInfoSchemaInfoAppHome=None, im: AppsPermissionsInfoSchemaInfoAppHome=None, mpim: AppsPermissionsInfoSchemaInfoAppHome=None, team: AppsPermissionsInfoSchemaInfoTeam=None):
        """AppsPermissionsInfoSchemaInfo - a model defined in OpenAPI

        :param app_home: The app_home of this AppsPermissionsInfoSchemaInfo.
        :param channel: The channel of this AppsPermissionsInfoSchemaInfo.
        :param group: The group of this AppsPermissionsInfoSchemaInfo.
        :param im: The im of this AppsPermissionsInfoSchemaInfo.
        :param mpim: The mpim of this AppsPermissionsInfoSchemaInfo.
        :param team: The team of this AppsPermissionsInfoSchemaInfo.
        """
        self.openapi_types = {
            'app_home': AppsPermissionsInfoSchemaInfoAppHome,
            'channel': AppsPermissionsInfoSchemaInfoAppHome,
            'group': AppsPermissionsInfoSchemaInfoAppHome,
            'im': AppsPermissionsInfoSchemaInfoAppHome,
            'mpim': AppsPermissionsInfoSchemaInfoAppHome,
            'team': AppsPermissionsInfoSchemaInfoTeam
        }

        self.attribute_map = {
            'app_home': 'app_home',
            'channel': 'channel',
            'group': 'group',
            'im': 'im',
            'mpim': 'mpim',
            'team': 'team'
        }

        self._app_home = app_home
        self._channel = channel
        self._group = group
        self._im = im
        self._mpim = mpim
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppsPermissionsInfoSchemaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The apps_permissions_info_schema_info of this AppsPermissionsInfoSchemaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_home(self):
        """Gets the app_home of this AppsPermissionsInfoSchemaInfo.


        :return: The app_home of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoAppHome
        """
        return self._app_home

    @app_home.setter
    def app_home(self, app_home):
        """Sets the app_home of this AppsPermissionsInfoSchemaInfo.


        :param app_home: The app_home of this AppsPermissionsInfoSchemaInfo.
        :type app_home: AppsPermissionsInfoSchemaInfoAppHome
        """
        if app_home is None:
            raise ValueError("Invalid value for `app_home`, must not be `None`")

        self._app_home = app_home

    @property
    def channel(self):
        """Gets the channel of this AppsPermissionsInfoSchemaInfo.


        :return: The channel of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoAppHome
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AppsPermissionsInfoSchemaInfo.


        :param channel: The channel of this AppsPermissionsInfoSchemaInfo.
        :type channel: AppsPermissionsInfoSchemaInfoAppHome
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def group(self):
        """Gets the group of this AppsPermissionsInfoSchemaInfo.


        :return: The group of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoAppHome
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AppsPermissionsInfoSchemaInfo.


        :param group: The group of this AppsPermissionsInfoSchemaInfo.
        :type group: AppsPermissionsInfoSchemaInfoAppHome
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def im(self):
        """Gets the im of this AppsPermissionsInfoSchemaInfo.


        :return: The im of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoAppHome
        """
        return self._im

    @im.setter
    def im(self, im):
        """Sets the im of this AppsPermissionsInfoSchemaInfo.


        :param im: The im of this AppsPermissionsInfoSchemaInfo.
        :type im: AppsPermissionsInfoSchemaInfoAppHome
        """
        if im is None:
            raise ValueError("Invalid value for `im`, must not be `None`")

        self._im = im

    @property
    def mpim(self):
        """Gets the mpim of this AppsPermissionsInfoSchemaInfo.


        :return: The mpim of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoAppHome
        """
        return self._mpim

    @mpim.setter
    def mpim(self, mpim):
        """Sets the mpim of this AppsPermissionsInfoSchemaInfo.


        :param mpim: The mpim of this AppsPermissionsInfoSchemaInfo.
        :type mpim: AppsPermissionsInfoSchemaInfoAppHome
        """
        if mpim is None:
            raise ValueError("Invalid value for `mpim`, must not be `None`")

        self._mpim = mpim

    @property
    def team(self):
        """Gets the team of this AppsPermissionsInfoSchemaInfo.


        :return: The team of this AppsPermissionsInfoSchemaInfo.
        :rtype: AppsPermissionsInfoSchemaInfoTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AppsPermissionsInfoSchemaInfo.


        :param team: The team of this AppsPermissionsInfoSchemaInfo.
        :type team: AppsPermissionsInfoSchemaInfoTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team
