# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_bot_profile import ObjsBotProfile
import re
from openapi_server import util


class ChatScheduleMessageSuccessSchemaMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, bot_profile: ObjsBotProfile=None, team: str=None, text: str=None, type: str=None, user: str=None, username: str=None):
        """ChatScheduleMessageSuccessSchemaMessage - a model defined in OpenAPI

        :param bot_id: The bot_id of this ChatScheduleMessageSuccessSchemaMessage.
        :param bot_profile: The bot_profile of this ChatScheduleMessageSuccessSchemaMessage.
        :param team: The team of this ChatScheduleMessageSuccessSchemaMessage.
        :param text: The text of this ChatScheduleMessageSuccessSchemaMessage.
        :param type: The type of this ChatScheduleMessageSuccessSchemaMessage.
        :param user: The user of this ChatScheduleMessageSuccessSchemaMessage.
        :param username: The username of this ChatScheduleMessageSuccessSchemaMessage.
        """
        self.openapi_types = {
            'bot_id': str,
            'bot_profile': ObjsBotProfile,
            'team': str,
            'text': str,
            'type': str,
            'user': str,
            'username': str
        }

        self.attribute_map = {
            'bot_id': 'bot_id',
            'bot_profile': 'bot_profile',
            'team': 'team',
            'text': 'text',
            'type': 'type',
            'user': 'user',
            'username': 'username'
        }

        self._bot_id = bot_id
        self._bot_profile = bot_profile
        self._team = team
        self._text = text
        self._type = type
        self._user = user
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatScheduleMessageSuccessSchemaMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chat_scheduleMessage_success_schema_message of this ChatScheduleMessageSuccessSchemaMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The bot_id of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this ChatScheduleMessageSuccessSchemaMessage.


        :param bot_id: The bot_id of this ChatScheduleMessageSuccessSchemaMessage.
        :type bot_id: str
        """
        if bot_id is None:
            raise ValueError("Invalid value for `bot_id`, must not be `None`")
        if bot_id is not None and not re.search(r'^B[A-Z0-9]{8,}$', bot_id):
            raise ValueError("Invalid value for `bot_id`, must be a follow pattern or equal to `/^B[A-Z0-9]{8,}$/`")

        self._bot_id = bot_id

    @property
    def bot_profile(self):
        """Gets the bot_profile of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The bot_profile of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: ObjsBotProfile
        """
        return self._bot_profile

    @bot_profile.setter
    def bot_profile(self, bot_profile):
        """Sets the bot_profile of this ChatScheduleMessageSuccessSchemaMessage.


        :param bot_profile: The bot_profile of this ChatScheduleMessageSuccessSchemaMessage.
        :type bot_profile: ObjsBotProfile
        """

        self._bot_profile = bot_profile

    @property
    def team(self):
        """Gets the team of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The team of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ChatScheduleMessageSuccessSchemaMessage.


        :param team: The team of this ChatScheduleMessageSuccessSchemaMessage.
        :type team: str
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")
        if team is not None and not re.search(r'^[T][A-Z0-9]{2,}$', team):
            raise ValueError("Invalid value for `team`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._team = team

    @property
    def text(self):
        """Gets the text of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The text of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ChatScheduleMessageSuccessSchemaMessage.


        :param text: The text of this ChatScheduleMessageSuccessSchemaMessage.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The type of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChatScheduleMessageSuccessSchemaMessage.


        :param type: The type of this ChatScheduleMessageSuccessSchemaMessage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The user of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChatScheduleMessageSuccessSchemaMessage.


        :param user: The user of this ChatScheduleMessageSuccessSchemaMessage.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user

    @property
    def username(self):
        """Gets the username of this ChatScheduleMessageSuccessSchemaMessage.


        :return: The username of this ChatScheduleMessageSuccessSchemaMessage.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ChatScheduleMessageSuccessSchemaMessage.


        :param username: The username of this ChatScheduleMessageSuccessSchemaMessage.
        :type username: str
        """

        self._username = username
