# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MessageObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[object]=None, blocks: object=None, text: str=None):
        """MessageObject - a model defined in OpenAPI

        :param attachments: The attachments of this MessageObject.
        :param blocks: The blocks of this MessageObject.
        :param text: The text of this MessageObject.
        """
        self.openapi_types = {
            'attachments': List[object],
            'blocks': object,
            'text': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'blocks': 'blocks',
            'text': 'text'
        }

        self._attachments = attachments
        self._blocks = blocks
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message_object of this MessageObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this MessageObject.


        :return: The attachments of this MessageObject.
        :rtype: List[object]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MessageObject.


        :param attachments: The attachments of this MessageObject.
        :type attachments: List[object]
        """

        self._attachments = attachments

    @property
    def blocks(self):
        """Gets the blocks of this MessageObject.


        :return: The blocks of this MessageObject.
        :rtype: object
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this MessageObject.


        :param blocks: The blocks of this MessageObject.
        :type blocks: object
        """

        self._blocks = blocks

    @property
    def text(self):
        """Gets the text of this MessageObject.


        :return: The text of this MessageObject.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessageObject.


        :param text: The text of this MessageObject.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
