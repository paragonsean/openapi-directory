# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_conversations_get_teams_schema_response_metadata import AdminConversationsGetTeamsSchemaResponseMetadata
from openapi_server import util


class ConversationsMembersSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, members: list[str]=None, ok: bool=None, response_metadata: AdminConversationsGetTeamsSchemaResponseMetadata=None):
        """ConversationsMembersSuccessSchema - a model defined in OpenAPI

        :param members: The members of this ConversationsMembersSuccessSchema.
        :param ok: The ok of this ConversationsMembersSuccessSchema.
        :param response_metadata: The response_metadata of this ConversationsMembersSuccessSchema.
        """
        self.openapi_types = {
            'members': list[str],
            'ok': bool,
            'response_metadata': AdminConversationsGetTeamsSchemaResponseMetadata
        }

        self.attribute_map = {
            'members': 'members',
            'ok': 'ok',
            'response_metadata': 'response_metadata'
        }

        self._members = members
        self._ok = ok
        self._response_metadata = response_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsMembersSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations_members_success_schema of this ConversationsMembersSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def members(self):
        """Gets the members of this ConversationsMembersSuccessSchema.


        :return: The members of this ConversationsMembersSuccessSchema.
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ConversationsMembersSuccessSchema.


        :param members: The members of this ConversationsMembersSuccessSchema.
        :type members: list[str]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")
        if members is not None and len(members) < 1:
            raise ValueError("Invalid value for `members`, number of items must be greater than or equal to `1`")

        self._members = members

    @property
    def ok(self):
        """Gets the ok of this ConversationsMembersSuccessSchema.


        :return: The ok of this ConversationsMembersSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ConversationsMembersSuccessSchema.


        :param ok: The ok of this ConversationsMembersSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def response_metadata(self):
        """Gets the response_metadata of this ConversationsMembersSuccessSchema.


        :return: The response_metadata of this ConversationsMembersSuccessSchema.
        :rtype: AdminConversationsGetTeamsSchemaResponseMetadata
        """
        return self._response_metadata

    @response_metadata.setter
    def response_metadata(self, response_metadata):
        """Sets the response_metadata of this ConversationsMembersSuccessSchema.


        :param response_metadata: The response_metadata of this ConversationsMembersSuccessSchema.
        :type response_metadata: AdminConversationsGetTeamsSchemaResponseMetadata
        """
        if response_metadata is None:
            raise ValueError("Invalid value for `response_metadata`, must not be `None`")

        self._response_metadata = response_metadata
