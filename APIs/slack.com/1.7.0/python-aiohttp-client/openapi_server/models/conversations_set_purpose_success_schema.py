# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_conversation_inner import ObjsConversationInner
from openapi_server import util


class ConversationsSetPurposeSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: List[ObjsConversationInner]=None, ok: bool=None):
        """ConversationsSetPurposeSuccessSchema - a model defined in OpenAPI

        :param channel: The channel of this ConversationsSetPurposeSuccessSchema.
        :param ok: The ok of this ConversationsSetPurposeSuccessSchema.
        """
        self.openapi_types = {
            'channel': List[ObjsConversationInner],
            'ok': bool
        }

        self.attribute_map = {
            'channel': 'channel',
            'ok': 'ok'
        }

        self._channel = channel
        self._ok = ok

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsSetPurposeSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations_setPurpose_success_schema of this ConversationsSetPurposeSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ConversationsSetPurposeSuccessSchema.


        :return: The channel of this ConversationsSetPurposeSuccessSchema.
        :rtype: List[ObjsConversationInner]
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ConversationsSetPurposeSuccessSchema.


        :param channel: The channel of this ConversationsSetPurposeSuccessSchema.
        :type channel: List[ObjsConversationInner]
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def ok(self):
        """Gets the ok of this ConversationsSetPurposeSuccessSchema.


        :return: The ok of this ConversationsSetPurposeSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ConversationsSetPurposeSuccessSchema.


        :param ok: The ok of this ConversationsSetPurposeSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok
