# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blocks_inner import BlocksInner
from openapi_server.models.objs_bot_profile import ObjsBotProfile
from openapi_server.models.objs_comment import ObjsComment
from openapi_server.models.objs_file import ObjsFile
from openapi_server.models.objs_message_attachments_inner import ObjsMessageAttachmentsInner
from openapi_server.models.objs_message_bot_id_inner import ObjsMessageBotIdInner
from openapi_server.models.objs_message_icons import ObjsMessageIcons
from openapi_server.models.objs_reaction import ObjsReaction
from openapi_server.models.objs_user_profile_short import ObjsUserProfileShort
import re
from openapi_server import util


class ObjsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: list[ObjsMessageAttachmentsInner]=None, blocks: List[BlocksInner]=None, bot_id: List[ObjsMessageBotIdInner]=None, bot_profile: ObjsBotProfile=None, client_msg_id: str=None, comment: ObjsComment=None, display_as_bot: bool=None, file: ObjsFile=None, files: list[ObjsFile]=None, icons: ObjsMessageIcons=None, inviter: str=None, is_delayed_message: bool=None, is_intro: bool=None, is_starred: bool=None, last_read: str=None, latest_reply: str=None, name: str=None, old_name: str=None, parent_user_id: str=None, permalink: str=None, pinned_to: List[str]=None, purpose: str=None, reactions: List[ObjsReaction]=None, reply_count: int=None, reply_users: list[str]=None, reply_users_count: int=None, source_team: str=None, subscribed: bool=None, subtype: str=None, team: str=None, text: str=None, thread_ts: str=None, topic: str=None, ts: str=None, type: str=None, unread_count: int=None, upload: bool=None, user: str=None, user_profile: ObjsUserProfileShort=None, user_team: str=None, username: str=None):
        """ObjsMessage - a model defined in OpenAPI

        :param attachments: The attachments of this ObjsMessage.
        :param blocks: The blocks of this ObjsMessage.
        :param bot_id: The bot_id of this ObjsMessage.
        :param bot_profile: The bot_profile of this ObjsMessage.
        :param client_msg_id: The client_msg_id of this ObjsMessage.
        :param comment: The comment of this ObjsMessage.
        :param display_as_bot: The display_as_bot of this ObjsMessage.
        :param file: The file of this ObjsMessage.
        :param files: The files of this ObjsMessage.
        :param icons: The icons of this ObjsMessage.
        :param inviter: The inviter of this ObjsMessage.
        :param is_delayed_message: The is_delayed_message of this ObjsMessage.
        :param is_intro: The is_intro of this ObjsMessage.
        :param is_starred: The is_starred of this ObjsMessage.
        :param last_read: The last_read of this ObjsMessage.
        :param latest_reply: The latest_reply of this ObjsMessage.
        :param name: The name of this ObjsMessage.
        :param old_name: The old_name of this ObjsMessage.
        :param parent_user_id: The parent_user_id of this ObjsMessage.
        :param permalink: The permalink of this ObjsMessage.
        :param pinned_to: The pinned_to of this ObjsMessage.
        :param purpose: The purpose of this ObjsMessage.
        :param reactions: The reactions of this ObjsMessage.
        :param reply_count: The reply_count of this ObjsMessage.
        :param reply_users: The reply_users of this ObjsMessage.
        :param reply_users_count: The reply_users_count of this ObjsMessage.
        :param source_team: The source_team of this ObjsMessage.
        :param subscribed: The subscribed of this ObjsMessage.
        :param subtype: The subtype of this ObjsMessage.
        :param team: The team of this ObjsMessage.
        :param text: The text of this ObjsMessage.
        :param thread_ts: The thread_ts of this ObjsMessage.
        :param topic: The topic of this ObjsMessage.
        :param ts: The ts of this ObjsMessage.
        :param type: The type of this ObjsMessage.
        :param unread_count: The unread_count of this ObjsMessage.
        :param upload: The upload of this ObjsMessage.
        :param user: The user of this ObjsMessage.
        :param user_profile: The user_profile of this ObjsMessage.
        :param user_team: The user_team of this ObjsMessage.
        :param username: The username of this ObjsMessage.
        """
        self.openapi_types = {
            'attachments': list[ObjsMessageAttachmentsInner],
            'blocks': List[BlocksInner],
            'bot_id': List[ObjsMessageBotIdInner],
            'bot_profile': ObjsBotProfile,
            'client_msg_id': str,
            'comment': ObjsComment,
            'display_as_bot': bool,
            'file': ObjsFile,
            'files': list[ObjsFile],
            'icons': ObjsMessageIcons,
            'inviter': str,
            'is_delayed_message': bool,
            'is_intro': bool,
            'is_starred': bool,
            'last_read': str,
            'latest_reply': str,
            'name': str,
            'old_name': str,
            'parent_user_id': str,
            'permalink': str,
            'pinned_to': List[str],
            'purpose': str,
            'reactions': List[ObjsReaction],
            'reply_count': int,
            'reply_users': list[str],
            'reply_users_count': int,
            'source_team': str,
            'subscribed': bool,
            'subtype': str,
            'team': str,
            'text': str,
            'thread_ts': str,
            'topic': str,
            'ts': str,
            'type': str,
            'unread_count': int,
            'upload': bool,
            'user': str,
            'user_profile': ObjsUserProfileShort,
            'user_team': str,
            'username': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'blocks': 'blocks',
            'bot_id': 'bot_id',
            'bot_profile': 'bot_profile',
            'client_msg_id': 'client_msg_id',
            'comment': 'comment',
            'display_as_bot': 'display_as_bot',
            'file': 'file',
            'files': 'files',
            'icons': 'icons',
            'inviter': 'inviter',
            'is_delayed_message': 'is_delayed_message',
            'is_intro': 'is_intro',
            'is_starred': 'is_starred',
            'last_read': 'last_read',
            'latest_reply': 'latest_reply',
            'name': 'name',
            'old_name': 'old_name',
            'parent_user_id': 'parent_user_id',
            'permalink': 'permalink',
            'pinned_to': 'pinned_to',
            'purpose': 'purpose',
            'reactions': 'reactions',
            'reply_count': 'reply_count',
            'reply_users': 'reply_users',
            'reply_users_count': 'reply_users_count',
            'source_team': 'source_team',
            'subscribed': 'subscribed',
            'subtype': 'subtype',
            'team': 'team',
            'text': 'text',
            'thread_ts': 'thread_ts',
            'topic': 'topic',
            'ts': 'ts',
            'type': 'type',
            'unread_count': 'unread_count',
            'upload': 'upload',
            'user': 'user',
            'user_profile': 'user_profile',
            'user_team': 'user_team',
            'username': 'username'
        }

        self._attachments = attachments
        self._blocks = blocks
        self._bot_id = bot_id
        self._bot_profile = bot_profile
        self._client_msg_id = client_msg_id
        self._comment = comment
        self._display_as_bot = display_as_bot
        self._file = file
        self._files = files
        self._icons = icons
        self._inviter = inviter
        self._is_delayed_message = is_delayed_message
        self._is_intro = is_intro
        self._is_starred = is_starred
        self._last_read = last_read
        self._latest_reply = latest_reply
        self._name = name
        self._old_name = old_name
        self._parent_user_id = parent_user_id
        self._permalink = permalink
        self._pinned_to = pinned_to
        self._purpose = purpose
        self._reactions = reactions
        self._reply_count = reply_count
        self._reply_users = reply_users
        self._reply_users_count = reply_users_count
        self._source_team = source_team
        self._subscribed = subscribed
        self._subtype = subtype
        self._team = team
        self._text = text
        self._thread_ts = thread_ts
        self._topic = topic
        self._ts = ts
        self._type = type
        self._unread_count = unread_count
        self._upload = upload
        self._user = user
        self._user_profile = user_profile
        self._user_team = user_team
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_message of this ObjsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this ObjsMessage.


        :return: The attachments of this ObjsMessage.
        :rtype: list[ObjsMessageAttachmentsInner]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ObjsMessage.


        :param attachments: The attachments of this ObjsMessage.
        :type attachments: list[ObjsMessageAttachmentsInner]
        """
        if attachments is not None and len(attachments) < 1:
            raise ValueError("Invalid value for `attachments`, number of items must be greater than or equal to `1`")

        self._attachments = attachments

    @property
    def blocks(self):
        """Gets the blocks of this ObjsMessage.

        This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.

        :return: The blocks of this ObjsMessage.
        :rtype: List[BlocksInner]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this ObjsMessage.

        This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.

        :param blocks: The blocks of this ObjsMessage.
        :type blocks: List[BlocksInner]
        """

        self._blocks = blocks

    @property
    def bot_id(self):
        """Gets the bot_id of this ObjsMessage.


        :return: The bot_id of this ObjsMessage.
        :rtype: List[ObjsMessageBotIdInner]
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this ObjsMessage.


        :param bot_id: The bot_id of this ObjsMessage.
        :type bot_id: List[ObjsMessageBotIdInner]
        """

        self._bot_id = bot_id

    @property
    def bot_profile(self):
        """Gets the bot_profile of this ObjsMessage.


        :return: The bot_profile of this ObjsMessage.
        :rtype: ObjsBotProfile
        """
        return self._bot_profile

    @bot_profile.setter
    def bot_profile(self, bot_profile):
        """Sets the bot_profile of this ObjsMessage.


        :param bot_profile: The bot_profile of this ObjsMessage.
        :type bot_profile: ObjsBotProfile
        """

        self._bot_profile = bot_profile

    @property
    def client_msg_id(self):
        """Gets the client_msg_id of this ObjsMessage.


        :return: The client_msg_id of this ObjsMessage.
        :rtype: str
        """
        return self._client_msg_id

    @client_msg_id.setter
    def client_msg_id(self, client_msg_id):
        """Sets the client_msg_id of this ObjsMessage.


        :param client_msg_id: The client_msg_id of this ObjsMessage.
        :type client_msg_id: str
        """

        self._client_msg_id = client_msg_id

    @property
    def comment(self):
        """Gets the comment of this ObjsMessage.


        :return: The comment of this ObjsMessage.
        :rtype: ObjsComment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ObjsMessage.


        :param comment: The comment of this ObjsMessage.
        :type comment: ObjsComment
        """

        self._comment = comment

    @property
    def display_as_bot(self):
        """Gets the display_as_bot of this ObjsMessage.


        :return: The display_as_bot of this ObjsMessage.
        :rtype: bool
        """
        return self._display_as_bot

    @display_as_bot.setter
    def display_as_bot(self, display_as_bot):
        """Sets the display_as_bot of this ObjsMessage.


        :param display_as_bot: The display_as_bot of this ObjsMessage.
        :type display_as_bot: bool
        """

        self._display_as_bot = display_as_bot

    @property
    def file(self):
        """Gets the file of this ObjsMessage.


        :return: The file of this ObjsMessage.
        :rtype: ObjsFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ObjsMessage.


        :param file: The file of this ObjsMessage.
        :type file: ObjsFile
        """

        self._file = file

    @property
    def files(self):
        """Gets the files of this ObjsMessage.


        :return: The files of this ObjsMessage.
        :rtype: list[ObjsFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ObjsMessage.


        :param files: The files of this ObjsMessage.
        :type files: list[ObjsFile]
        """
        if files is not None and len(files) < 1:
            raise ValueError("Invalid value for `files`, number of items must be greater than or equal to `1`")

        self._files = files

    @property
    def icons(self):
        """Gets the icons of this ObjsMessage.


        :return: The icons of this ObjsMessage.
        :rtype: ObjsMessageIcons
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this ObjsMessage.


        :param icons: The icons of this ObjsMessage.
        :type icons: ObjsMessageIcons
        """

        self._icons = icons

    @property
    def inviter(self):
        """Gets the inviter of this ObjsMessage.


        :return: The inviter of this ObjsMessage.
        :rtype: str
        """
        return self._inviter

    @inviter.setter
    def inviter(self, inviter):
        """Sets the inviter of this ObjsMessage.


        :param inviter: The inviter of this ObjsMessage.
        :type inviter: str
        """
        if inviter is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', inviter):
            raise ValueError("Invalid value for `inviter`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._inviter = inviter

    @property
    def is_delayed_message(self):
        """Gets the is_delayed_message of this ObjsMessage.


        :return: The is_delayed_message of this ObjsMessage.
        :rtype: bool
        """
        return self._is_delayed_message

    @is_delayed_message.setter
    def is_delayed_message(self, is_delayed_message):
        """Sets the is_delayed_message of this ObjsMessage.


        :param is_delayed_message: The is_delayed_message of this ObjsMessage.
        :type is_delayed_message: bool
        """

        self._is_delayed_message = is_delayed_message

    @property
    def is_intro(self):
        """Gets the is_intro of this ObjsMessage.


        :return: The is_intro of this ObjsMessage.
        :rtype: bool
        """
        return self._is_intro

    @is_intro.setter
    def is_intro(self, is_intro):
        """Sets the is_intro of this ObjsMessage.


        :param is_intro: The is_intro of this ObjsMessage.
        :type is_intro: bool
        """

        self._is_intro = is_intro

    @property
    def is_starred(self):
        """Gets the is_starred of this ObjsMessage.


        :return: The is_starred of this ObjsMessage.
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this ObjsMessage.


        :param is_starred: The is_starred of this ObjsMessage.
        :type is_starred: bool
        """

        self._is_starred = is_starred

    @property
    def last_read(self):
        """Gets the last_read of this ObjsMessage.


        :return: The last_read of this ObjsMessage.
        :rtype: str
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this ObjsMessage.


        :param last_read: The last_read of this ObjsMessage.
        :type last_read: str
        """
        if last_read is not None and not re.search(r'^\d{10}\.\d{6}$', last_read):
            raise ValueError("Invalid value for `last_read`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._last_read = last_read

    @property
    def latest_reply(self):
        """Gets the latest_reply of this ObjsMessage.


        :return: The latest_reply of this ObjsMessage.
        :rtype: str
        """
        return self._latest_reply

    @latest_reply.setter
    def latest_reply(self, latest_reply):
        """Sets the latest_reply of this ObjsMessage.


        :param latest_reply: The latest_reply of this ObjsMessage.
        :type latest_reply: str
        """
        if latest_reply is not None and not re.search(r'^\d{10}\.\d{6}$', latest_reply):
            raise ValueError("Invalid value for `latest_reply`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._latest_reply = latest_reply

    @property
    def name(self):
        """Gets the name of this ObjsMessage.


        :return: The name of this ObjsMessage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsMessage.


        :param name: The name of this ObjsMessage.
        :type name: str
        """

        self._name = name

    @property
    def old_name(self):
        """Gets the old_name of this ObjsMessage.


        :return: The old_name of this ObjsMessage.
        :rtype: str
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this ObjsMessage.


        :param old_name: The old_name of this ObjsMessage.
        :type old_name: str
        """

        self._old_name = old_name

    @property
    def parent_user_id(self):
        """Gets the parent_user_id of this ObjsMessage.


        :return: The parent_user_id of this ObjsMessage.
        :rtype: str
        """
        return self._parent_user_id

    @parent_user_id.setter
    def parent_user_id(self, parent_user_id):
        """Sets the parent_user_id of this ObjsMessage.


        :param parent_user_id: The parent_user_id of this ObjsMessage.
        :type parent_user_id: str
        """
        if parent_user_id is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', parent_user_id):
            raise ValueError("Invalid value for `parent_user_id`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._parent_user_id = parent_user_id

    @property
    def permalink(self):
        """Gets the permalink of this ObjsMessage.


        :return: The permalink of this ObjsMessage.
        :rtype: str
        """
        return self._permalink

    @permalink.setter
    def permalink(self, permalink):
        """Sets the permalink of this ObjsMessage.


        :param permalink: The permalink of this ObjsMessage.
        :type permalink: str
        """

        self._permalink = permalink

    @property
    def pinned_to(self):
        """Gets the pinned_to of this ObjsMessage.


        :return: The pinned_to of this ObjsMessage.
        :rtype: List[str]
        """
        return self._pinned_to

    @pinned_to.setter
    def pinned_to(self, pinned_to):
        """Sets the pinned_to of this ObjsMessage.


        :param pinned_to: The pinned_to of this ObjsMessage.
        :type pinned_to: List[str]
        """

        self._pinned_to = pinned_to

    @property
    def purpose(self):
        """Gets the purpose of this ObjsMessage.


        :return: The purpose of this ObjsMessage.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ObjsMessage.


        :param purpose: The purpose of this ObjsMessage.
        :type purpose: str
        """

        self._purpose = purpose

    @property
    def reactions(self):
        """Gets the reactions of this ObjsMessage.


        :return: The reactions of this ObjsMessage.
        :rtype: List[ObjsReaction]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this ObjsMessage.


        :param reactions: The reactions of this ObjsMessage.
        :type reactions: List[ObjsReaction]
        """

        self._reactions = reactions

    @property
    def reply_count(self):
        """Gets the reply_count of this ObjsMessage.


        :return: The reply_count of this ObjsMessage.
        :rtype: int
        """
        return self._reply_count

    @reply_count.setter
    def reply_count(self, reply_count):
        """Sets the reply_count of this ObjsMessage.


        :param reply_count: The reply_count of this ObjsMessage.
        :type reply_count: int
        """

        self._reply_count = reply_count

    @property
    def reply_users(self):
        """Gets the reply_users of this ObjsMessage.


        :return: The reply_users of this ObjsMessage.
        :rtype: list[str]
        """
        return self._reply_users

    @reply_users.setter
    def reply_users(self, reply_users):
        """Sets the reply_users of this ObjsMessage.


        :param reply_users: The reply_users of this ObjsMessage.
        :type reply_users: list[str]
        """
        if reply_users is not None and len(reply_users) < 1:
            raise ValueError("Invalid value for `reply_users`, number of items must be greater than or equal to `1`")

        self._reply_users = reply_users

    @property
    def reply_users_count(self):
        """Gets the reply_users_count of this ObjsMessage.


        :return: The reply_users_count of this ObjsMessage.
        :rtype: int
        """
        return self._reply_users_count

    @reply_users_count.setter
    def reply_users_count(self, reply_users_count):
        """Sets the reply_users_count of this ObjsMessage.


        :param reply_users_count: The reply_users_count of this ObjsMessage.
        :type reply_users_count: int
        """

        self._reply_users_count = reply_users_count

    @property
    def source_team(self):
        """Gets the source_team of this ObjsMessage.


        :return: The source_team of this ObjsMessage.
        :rtype: str
        """
        return self._source_team

    @source_team.setter
    def source_team(self, source_team):
        """Sets the source_team of this ObjsMessage.


        :param source_team: The source_team of this ObjsMessage.
        :type source_team: str
        """
        if source_team is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', source_team):
            raise ValueError("Invalid value for `source_team`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._source_team = source_team

    @property
    def subscribed(self):
        """Gets the subscribed of this ObjsMessage.


        :return: The subscribed of this ObjsMessage.
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this ObjsMessage.


        :param subscribed: The subscribed of this ObjsMessage.
        :type subscribed: bool
        """

        self._subscribed = subscribed

    @property
    def subtype(self):
        """Gets the subtype of this ObjsMessage.


        :return: The subtype of this ObjsMessage.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this ObjsMessage.


        :param subtype: The subtype of this ObjsMessage.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def team(self):
        """Gets the team of this ObjsMessage.


        :return: The team of this ObjsMessage.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ObjsMessage.


        :param team: The team of this ObjsMessage.
        :type team: str
        """
        if team is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', team):
            raise ValueError("Invalid value for `team`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._team = team

    @property
    def text(self):
        """Gets the text of this ObjsMessage.


        :return: The text of this ObjsMessage.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ObjsMessage.


        :param text: The text of this ObjsMessage.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def thread_ts(self):
        """Gets the thread_ts of this ObjsMessage.


        :return: The thread_ts of this ObjsMessage.
        :rtype: str
        """
        return self._thread_ts

    @thread_ts.setter
    def thread_ts(self, thread_ts):
        """Sets the thread_ts of this ObjsMessage.


        :param thread_ts: The thread_ts of this ObjsMessage.
        :type thread_ts: str
        """
        if thread_ts is not None and not re.search(r'^\d{10}\.\d{6}$', thread_ts):
            raise ValueError("Invalid value for `thread_ts`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._thread_ts = thread_ts

    @property
    def topic(self):
        """Gets the topic of this ObjsMessage.


        :return: The topic of this ObjsMessage.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ObjsMessage.


        :param topic: The topic of this ObjsMessage.
        :type topic: str
        """

        self._topic = topic

    @property
    def ts(self):
        """Gets the ts of this ObjsMessage.


        :return: The ts of this ObjsMessage.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this ObjsMessage.


        :param ts: The ts of this ObjsMessage.
        :type ts: str
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")
        if ts is not None and not re.search(r'^\d{10}\.\d{6}$', ts):
            raise ValueError("Invalid value for `ts`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._ts = ts

    @property
    def type(self):
        """Gets the type of this ObjsMessage.


        :return: The type of this ObjsMessage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ObjsMessage.


        :param type: The type of this ObjsMessage.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unread_count(self):
        """Gets the unread_count of this ObjsMessage.


        :return: The unread_count of this ObjsMessage.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ObjsMessage.


        :param unread_count: The unread_count of this ObjsMessage.
        :type unread_count: int
        """

        self._unread_count = unread_count

    @property
    def upload(self):
        """Gets the upload of this ObjsMessage.


        :return: The upload of this ObjsMessage.
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this ObjsMessage.


        :param upload: The upload of this ObjsMessage.
        :type upload: bool
        """

        self._upload = upload

    @property
    def user(self):
        """Gets the user of this ObjsMessage.


        :return: The user of this ObjsMessage.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ObjsMessage.


        :param user: The user of this ObjsMessage.
        :type user: str
        """
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user

    @property
    def user_profile(self):
        """Gets the user_profile of this ObjsMessage.


        :return: The user_profile of this ObjsMessage.
        :rtype: ObjsUserProfileShort
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile):
        """Sets the user_profile of this ObjsMessage.


        :param user_profile: The user_profile of this ObjsMessage.
        :type user_profile: ObjsUserProfileShort
        """

        self._user_profile = user_profile

    @property
    def user_team(self):
        """Gets the user_team of this ObjsMessage.


        :return: The user_team of this ObjsMessage.
        :rtype: str
        """
        return self._user_team

    @user_team.setter
    def user_team(self, user_team):
        """Sets the user_team of this ObjsMessage.


        :param user_team: The user_team of this ObjsMessage.
        :type user_team: str
        """
        if user_team is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', user_team):
            raise ValueError("Invalid value for `user_team`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._user_team = user_team

    @property
    def username(self):
        """Gets the username of this ObjsMessage.


        :return: The username of this ObjsMessage.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ObjsMessage.


        :param username: The username of this ObjsMessage.
        :type username: str
        """

        self._username = username
