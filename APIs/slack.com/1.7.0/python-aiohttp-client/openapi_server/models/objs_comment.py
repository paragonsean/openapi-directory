# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_reaction import ObjsReaction
import re
from openapi_server import util


class ObjsComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, created: int=None, id: str=None, is_intro: bool=None, is_starred: bool=None, num_stars: int=None, pinned_info: object=None, pinned_to: List[str]=None, reactions: List[ObjsReaction]=None, timestamp: int=None, user: str=None):
        """ObjsComment - a model defined in OpenAPI

        :param comment: The comment of this ObjsComment.
        :param created: The created of this ObjsComment.
        :param id: The id of this ObjsComment.
        :param is_intro: The is_intro of this ObjsComment.
        :param is_starred: The is_starred of this ObjsComment.
        :param num_stars: The num_stars of this ObjsComment.
        :param pinned_info: The pinned_info of this ObjsComment.
        :param pinned_to: The pinned_to of this ObjsComment.
        :param reactions: The reactions of this ObjsComment.
        :param timestamp: The timestamp of this ObjsComment.
        :param user: The user of this ObjsComment.
        """
        self.openapi_types = {
            'comment': str,
            'created': int,
            'id': str,
            'is_intro': bool,
            'is_starred': bool,
            'num_stars': int,
            'pinned_info': object,
            'pinned_to': List[str],
            'reactions': List[ObjsReaction],
            'timestamp': int,
            'user': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'created': 'created',
            'id': 'id',
            'is_intro': 'is_intro',
            'is_starred': 'is_starred',
            'num_stars': 'num_stars',
            'pinned_info': 'pinned_info',
            'pinned_to': 'pinned_to',
            'reactions': 'reactions',
            'timestamp': 'timestamp',
            'user': 'user'
        }

        self._comment = comment
        self._created = created
        self._id = id
        self._is_intro = is_intro
        self._is_starred = is_starred
        self._num_stars = num_stars
        self._pinned_info = pinned_info
        self._pinned_to = pinned_to
        self._reactions = reactions
        self._timestamp = timestamp
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_comment of this ObjsComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this ObjsComment.


        :return: The comment of this ObjsComment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ObjsComment.


        :param comment: The comment of this ObjsComment.
        :type comment: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def created(self):
        """Gets the created of this ObjsComment.


        :return: The created of this ObjsComment.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ObjsComment.


        :param created: The created of this ObjsComment.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this ObjsComment.


        :return: The id of this ObjsComment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsComment.


        :param id: The id of this ObjsComment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^Fc[A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^Fc[A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def is_intro(self):
        """Gets the is_intro of this ObjsComment.


        :return: The is_intro of this ObjsComment.
        :rtype: bool
        """
        return self._is_intro

    @is_intro.setter
    def is_intro(self, is_intro):
        """Sets the is_intro of this ObjsComment.


        :param is_intro: The is_intro of this ObjsComment.
        :type is_intro: bool
        """
        if is_intro is None:
            raise ValueError("Invalid value for `is_intro`, must not be `None`")

        self._is_intro = is_intro

    @property
    def is_starred(self):
        """Gets the is_starred of this ObjsComment.


        :return: The is_starred of this ObjsComment.
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this ObjsComment.


        :param is_starred: The is_starred of this ObjsComment.
        :type is_starred: bool
        """

        self._is_starred = is_starred

    @property
    def num_stars(self):
        """Gets the num_stars of this ObjsComment.


        :return: The num_stars of this ObjsComment.
        :rtype: int
        """
        return self._num_stars

    @num_stars.setter
    def num_stars(self, num_stars):
        """Sets the num_stars of this ObjsComment.


        :param num_stars: The num_stars of this ObjsComment.
        :type num_stars: int
        """

        self._num_stars = num_stars

    @property
    def pinned_info(self):
        """Gets the pinned_info of this ObjsComment.


        :return: The pinned_info of this ObjsComment.
        :rtype: object
        """
        return self._pinned_info

    @pinned_info.setter
    def pinned_info(self, pinned_info):
        """Sets the pinned_info of this ObjsComment.


        :param pinned_info: The pinned_info of this ObjsComment.
        :type pinned_info: object
        """

        self._pinned_info = pinned_info

    @property
    def pinned_to(self):
        """Gets the pinned_to of this ObjsComment.


        :return: The pinned_to of this ObjsComment.
        :rtype: List[str]
        """
        return self._pinned_to

    @pinned_to.setter
    def pinned_to(self, pinned_to):
        """Sets the pinned_to of this ObjsComment.


        :param pinned_to: The pinned_to of this ObjsComment.
        :type pinned_to: List[str]
        """

        self._pinned_to = pinned_to

    @property
    def reactions(self):
        """Gets the reactions of this ObjsComment.


        :return: The reactions of this ObjsComment.
        :rtype: List[ObjsReaction]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this ObjsComment.


        :param reactions: The reactions of this ObjsComment.
        :type reactions: List[ObjsReaction]
        """

        self._reactions = reactions

    @property
    def timestamp(self):
        """Gets the timestamp of this ObjsComment.


        :return: The timestamp of this ObjsComment.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ObjsComment.


        :param timestamp: The timestamp of this ObjsComment.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this ObjsComment.


        :return: The user of this ObjsComment.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ObjsComment.


        :param user: The user of this ObjsComment.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user
