# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ObjsUserProfileShort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_hash: str=None, display_name: str=None, display_name_normalized: str=None, first_name: str=None, image_72: str=None, is_restricted: bool=None, is_ultra_restricted: bool=None, name: str=None, real_name: str=None, real_name_normalized: str=None, team: str=None):
        """ObjsUserProfileShort - a model defined in OpenAPI

        :param avatar_hash: The avatar_hash of this ObjsUserProfileShort.
        :param display_name: The display_name of this ObjsUserProfileShort.
        :param display_name_normalized: The display_name_normalized of this ObjsUserProfileShort.
        :param first_name: The first_name of this ObjsUserProfileShort.
        :param image_72: The image_72 of this ObjsUserProfileShort.
        :param is_restricted: The is_restricted of this ObjsUserProfileShort.
        :param is_ultra_restricted: The is_ultra_restricted of this ObjsUserProfileShort.
        :param name: The name of this ObjsUserProfileShort.
        :param real_name: The real_name of this ObjsUserProfileShort.
        :param real_name_normalized: The real_name_normalized of this ObjsUserProfileShort.
        :param team: The team of this ObjsUserProfileShort.
        """
        self.openapi_types = {
            'avatar_hash': str,
            'display_name': str,
            'display_name_normalized': str,
            'first_name': str,
            'image_72': str,
            'is_restricted': bool,
            'is_ultra_restricted': bool,
            'name': str,
            'real_name': str,
            'real_name_normalized': str,
            'team': str
        }

        self.attribute_map = {
            'avatar_hash': 'avatar_hash',
            'display_name': 'display_name',
            'display_name_normalized': 'display_name_normalized',
            'first_name': 'first_name',
            'image_72': 'image_72',
            'is_restricted': 'is_restricted',
            'is_ultra_restricted': 'is_ultra_restricted',
            'name': 'name',
            'real_name': 'real_name',
            'real_name_normalized': 'real_name_normalized',
            'team': 'team'
        }

        self._avatar_hash = avatar_hash
        self._display_name = display_name
        self._display_name_normalized = display_name_normalized
        self._first_name = first_name
        self._image_72 = image_72
        self._is_restricted = is_restricted
        self._is_ultra_restricted = is_ultra_restricted
        self._name = name
        self._real_name = real_name
        self._real_name_normalized = real_name_normalized
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsUserProfileShort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_user_profile_short of this ObjsUserProfileShort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_hash(self):
        """Gets the avatar_hash of this ObjsUserProfileShort.


        :return: The avatar_hash of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._avatar_hash

    @avatar_hash.setter
    def avatar_hash(self, avatar_hash):
        """Sets the avatar_hash of this ObjsUserProfileShort.


        :param avatar_hash: The avatar_hash of this ObjsUserProfileShort.
        :type avatar_hash: str
        """
        if avatar_hash is None:
            raise ValueError("Invalid value for `avatar_hash`, must not be `None`")

        self._avatar_hash = avatar_hash

    @property
    def display_name(self):
        """Gets the display_name of this ObjsUserProfileShort.


        :return: The display_name of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ObjsUserProfileShort.


        :param display_name: The display_name of this ObjsUserProfileShort.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def display_name_normalized(self):
        """Gets the display_name_normalized of this ObjsUserProfileShort.


        :return: The display_name_normalized of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._display_name_normalized

    @display_name_normalized.setter
    def display_name_normalized(self, display_name_normalized):
        """Sets the display_name_normalized of this ObjsUserProfileShort.


        :param display_name_normalized: The display_name_normalized of this ObjsUserProfileShort.
        :type display_name_normalized: str
        """

        self._display_name_normalized = display_name_normalized

    @property
    def first_name(self):
        """Gets the first_name of this ObjsUserProfileShort.


        :return: The first_name of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ObjsUserProfileShort.


        :param first_name: The first_name of this ObjsUserProfileShort.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def image_72(self):
        """Gets the image_72 of this ObjsUserProfileShort.


        :return: The image_72 of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._image_72

    @image_72.setter
    def image_72(self, image_72):
        """Sets the image_72 of this ObjsUserProfileShort.


        :param image_72: The image_72 of this ObjsUserProfileShort.
        :type image_72: str
        """
        if image_72 is None:
            raise ValueError("Invalid value for `image_72`, must not be `None`")

        self._image_72 = image_72

    @property
    def is_restricted(self):
        """Gets the is_restricted of this ObjsUserProfileShort.


        :return: The is_restricted of this ObjsUserProfileShort.
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this ObjsUserProfileShort.


        :param is_restricted: The is_restricted of this ObjsUserProfileShort.
        :type is_restricted: bool
        """
        if is_restricted is None:
            raise ValueError("Invalid value for `is_restricted`, must not be `None`")

        self._is_restricted = is_restricted

    @property
    def is_ultra_restricted(self):
        """Gets the is_ultra_restricted of this ObjsUserProfileShort.


        :return: The is_ultra_restricted of this ObjsUserProfileShort.
        :rtype: bool
        """
        return self._is_ultra_restricted

    @is_ultra_restricted.setter
    def is_ultra_restricted(self, is_ultra_restricted):
        """Sets the is_ultra_restricted of this ObjsUserProfileShort.


        :param is_ultra_restricted: The is_ultra_restricted of this ObjsUserProfileShort.
        :type is_ultra_restricted: bool
        """
        if is_ultra_restricted is None:
            raise ValueError("Invalid value for `is_ultra_restricted`, must not be `None`")

        self._is_ultra_restricted = is_ultra_restricted

    @property
    def name(self):
        """Gets the name of this ObjsUserProfileShort.


        :return: The name of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjsUserProfileShort.


        :param name: The name of this ObjsUserProfileShort.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def real_name(self):
        """Gets the real_name of this ObjsUserProfileShort.


        :return: The real_name of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this ObjsUserProfileShort.


        :param real_name: The real_name of this ObjsUserProfileShort.
        :type real_name: str
        """
        if real_name is None:
            raise ValueError("Invalid value for `real_name`, must not be `None`")

        self._real_name = real_name

    @property
    def real_name_normalized(self):
        """Gets the real_name_normalized of this ObjsUserProfileShort.


        :return: The real_name_normalized of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._real_name_normalized

    @real_name_normalized.setter
    def real_name_normalized(self, real_name_normalized):
        """Sets the real_name_normalized of this ObjsUserProfileShort.


        :param real_name_normalized: The real_name_normalized of this ObjsUserProfileShort.
        :type real_name_normalized: str
        """

        self._real_name_normalized = real_name_normalized

    @property
    def team(self):
        """Gets the team of this ObjsUserProfileShort.


        :return: The team of this ObjsUserProfileShort.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ObjsUserProfileShort.


        :param team: The team of this ObjsUserProfileShort.
        :type team: str
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")
        if team is not None and not re.search(r'^[TE][A-Z0-9]{8,}$', team):
            raise ValueError("Invalid value for `team`, must be a follow pattern or equal to `/^[TE][A-Z0-9]{8,}$/`")

        self._team = team
