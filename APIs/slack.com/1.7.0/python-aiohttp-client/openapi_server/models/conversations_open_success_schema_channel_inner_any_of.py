# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_message import ObjsMessage
import re
from openapi_server import util


class ConversationsOpenSuccessSchemaChannelInnerAnyOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, id: str=None, is_im: bool=None, is_open: bool=None, last_read: str=None, latest: ObjsMessage=None, unread_count: float=None, unread_count_display: float=None, user: str=None):
        """ConversationsOpenSuccessSchemaChannelInnerAnyOf - a model defined in OpenAPI

        :param created: The created of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param id: The id of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param is_im: The is_im of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param is_open: The is_open of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param last_read: The last_read of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param latest: The latest of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param unread_count: The unread_count of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param unread_count_display: The unread_count_display of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :param user: The user of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        """
        self.openapi_types = {
            'created': str,
            'id': str,
            'is_im': bool,
            'is_open': bool,
            'last_read': str,
            'latest': ObjsMessage,
            'unread_count': float,
            'unread_count_display': float,
            'user': str
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'is_im': 'is_im',
            'is_open': 'is_open',
            'last_read': 'last_read',
            'latest': 'latest',
            'unread_count': 'unread_count',
            'unread_count_display': 'unread_count_display',
            'user': 'user'
        }

        self._created = created
        self._id = id
        self._is_im = is_im
        self._is_open = is_open
        self._last_read = last_read
        self._latest = latest
        self._unread_count = unread_count
        self._unread_count_display = unread_count_display
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsOpenSuccessSchemaChannelInnerAnyOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The conversations_open_success_schema_channel_inner_anyOf of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The created of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param created: The created of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type created: str
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The id of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param id: The id of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[D][A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[D][A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def is_im(self):
        """Gets the is_im of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The is_im of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: bool
        """
        return self._is_im

    @is_im.setter
    def is_im(self, is_im):
        """Sets the is_im of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param is_im: The is_im of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type is_im: bool
        """

        self._is_im = is_im

    @property
    def is_open(self):
        """Gets the is_open of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The is_open of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param is_open: The is_open of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type is_open: bool
        """

        self._is_open = is_open

    @property
    def last_read(self):
        """Gets the last_read of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The last_read of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: str
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param last_read: The last_read of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type last_read: str
        """
        if last_read is not None and not re.search(r'^\d{10}\.\d{6}$', last_read):
            raise ValueError("Invalid value for `last_read`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._last_read = last_read

    @property
    def latest(self):
        """Gets the latest of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The latest of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: ObjsMessage
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param latest: The latest of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type latest: ObjsMessage
        """

        self._latest = latest

    @property
    def unread_count(self):
        """Gets the unread_count of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The unread_count of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: float
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param unread_count: The unread_count of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type unread_count: float
        """

        self._unread_count = unread_count

    @property
    def unread_count_display(self):
        """Gets the unread_count_display of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The unread_count_display of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: float
        """
        return self._unread_count_display

    @unread_count_display.setter
    def unread_count_display(self, unread_count_display):
        """Sets the unread_count_display of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param unread_count_display: The unread_count_display of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type unread_count_display: float
        """

        self._unread_count_display = unread_count_display

    @property
    def user(self):
        """Gets the user of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :return: The user of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.


        :param user: The user of this ConversationsOpenSuccessSchemaChannelInnerAnyOf.
        :type user: str
        """
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user
