# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConversationObjectDisplayCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_counts: int=None, guest_counts: int=None):
        """ConversationObjectDisplayCounts - a model defined in OpenAPI

        :param display_counts: The display_counts of this ConversationObjectDisplayCounts.
        :param guest_counts: The guest_counts of this ConversationObjectDisplayCounts.
        """
        self.openapi_types = {
            'display_counts': int,
            'guest_counts': int
        }

        self.attribute_map = {
            'display_counts': 'display_counts',
            'guest_counts': 'guest_counts'
        }

        self._display_counts = display_counts
        self._guest_counts = guest_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationObjectDisplayCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation_object_display_counts of this ConversationObjectDisplayCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_counts(self):
        """Gets the display_counts of this ConversationObjectDisplayCounts.


        :return: The display_counts of this ConversationObjectDisplayCounts.
        :rtype: int
        """
        return self._display_counts

    @display_counts.setter
    def display_counts(self, display_counts):
        """Sets the display_counts of this ConversationObjectDisplayCounts.


        :param display_counts: The display_counts of this ConversationObjectDisplayCounts.
        :type display_counts: int
        """
        if display_counts is None:
            raise ValueError("Invalid value for `display_counts`, must not be `None`")

        self._display_counts = display_counts

    @property
    def guest_counts(self):
        """Gets the guest_counts of this ConversationObjectDisplayCounts.


        :return: The guest_counts of this ConversationObjectDisplayCounts.
        :rtype: int
        """
        return self._guest_counts

    @guest_counts.setter
    def guest_counts(self, guest_counts):
        """Sets the guest_counts of this ConversationObjectDisplayCounts.


        :param guest_counts: The guest_counts of this ConversationObjectDisplayCounts.
        :type guest_counts: int
        """
        if guest_counts is None:
            raise ValueError("Invalid value for `guest_counts`, must not be `None`")

        self._guest_counts = guest_counts
