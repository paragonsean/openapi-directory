# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UsersIdentitySchemaInnerAnyOf3Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, id: str=None, image_102: str=None, image_132: str=None, image_230: str=None, image_34: str=None, image_44: str=None, image_68: str=None, image_88: str=None, image_default: bool=None, name: str=None):
        """UsersIdentitySchemaInnerAnyOf3Team - a model defined in OpenAPI

        :param domain: The domain of this UsersIdentitySchemaInnerAnyOf3Team.
        :param id: The id of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_102: The image_102 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_132: The image_132 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_230: The image_230 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_34: The image_34 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_44: The image_44 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_68: The image_68 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_88: The image_88 of this UsersIdentitySchemaInnerAnyOf3Team.
        :param image_default: The image_default of this UsersIdentitySchemaInnerAnyOf3Team.
        :param name: The name of this UsersIdentitySchemaInnerAnyOf3Team.
        """
        self.openapi_types = {
            'domain': str,
            'id': str,
            'image_102': str,
            'image_132': str,
            'image_230': str,
            'image_34': str,
            'image_44': str,
            'image_68': str,
            'image_88': str,
            'image_default': bool,
            'name': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'id': 'id',
            'image_102': 'image_102',
            'image_132': 'image_132',
            'image_230': 'image_230',
            'image_34': 'image_34',
            'image_44': 'image_44',
            'image_68': 'image_68',
            'image_88': 'image_88',
            'image_default': 'image_default',
            'name': 'name'
        }

        self._domain = domain
        self._id = id
        self._image_102 = image_102
        self._image_132 = image_132
        self._image_230 = image_230
        self._image_34 = image_34
        self._image_44 = image_44
        self._image_68 = image_68
        self._image_88 = image_88
        self._image_default = image_default
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsersIdentitySchemaInnerAnyOf3Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The users_identity_schema_inner_anyOf_3_team of this UsersIdentitySchemaInnerAnyOf3Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The domain of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UsersIdentitySchemaInnerAnyOf3Team.


        :param domain: The domain of this UsersIdentitySchemaInnerAnyOf3Team.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The id of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsersIdentitySchemaInnerAnyOf3Team.


        :param id: The id of this UsersIdentitySchemaInnerAnyOf3Team.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._id = id

    @property
    def image_102(self):
        """Gets the image_102 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_102 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_102

    @image_102.setter
    def image_102(self, image_102):
        """Sets the image_102 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_102: The image_102 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_102: str
        """
        if image_102 is None:
            raise ValueError("Invalid value for `image_102`, must not be `None`")

        self._image_102 = image_102

    @property
    def image_132(self):
        """Gets the image_132 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_132 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_132

    @image_132.setter
    def image_132(self, image_132):
        """Sets the image_132 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_132: The image_132 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_132: str
        """
        if image_132 is None:
            raise ValueError("Invalid value for `image_132`, must not be `None`")

        self._image_132 = image_132

    @property
    def image_230(self):
        """Gets the image_230 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_230 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_230

    @image_230.setter
    def image_230(self, image_230):
        """Sets the image_230 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_230: The image_230 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_230: str
        """
        if image_230 is None:
            raise ValueError("Invalid value for `image_230`, must not be `None`")

        self._image_230 = image_230

    @property
    def image_34(self):
        """Gets the image_34 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_34 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_34

    @image_34.setter
    def image_34(self, image_34):
        """Sets the image_34 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_34: The image_34 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_34: str
        """
        if image_34 is None:
            raise ValueError("Invalid value for `image_34`, must not be `None`")

        self._image_34 = image_34

    @property
    def image_44(self):
        """Gets the image_44 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_44 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_44

    @image_44.setter
    def image_44(self, image_44):
        """Sets the image_44 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_44: The image_44 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_44: str
        """
        if image_44 is None:
            raise ValueError("Invalid value for `image_44`, must not be `None`")

        self._image_44 = image_44

    @property
    def image_68(self):
        """Gets the image_68 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_68 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_68

    @image_68.setter
    def image_68(self, image_68):
        """Sets the image_68 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_68: The image_68 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_68: str
        """
        if image_68 is None:
            raise ValueError("Invalid value for `image_68`, must not be `None`")

        self._image_68 = image_68

    @property
    def image_88(self):
        """Gets the image_88 of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_88 of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._image_88

    @image_88.setter
    def image_88(self, image_88):
        """Sets the image_88 of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_88: The image_88 of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_88: str
        """
        if image_88 is None:
            raise ValueError("Invalid value for `image_88`, must not be `None`")

        self._image_88 = image_88

    @property
    def image_default(self):
        """Gets the image_default of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The image_default of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: bool
        """
        return self._image_default

    @image_default.setter
    def image_default(self, image_default):
        """Sets the image_default of this UsersIdentitySchemaInnerAnyOf3Team.


        :param image_default: The image_default of this UsersIdentitySchemaInnerAnyOf3Team.
        :type image_default: bool
        """
        if image_default is None:
            raise ValueError("Invalid value for `image_default`, must not be `None`")

        self._image_default = image_default

    @property
    def name(self):
        """Gets the name of this UsersIdentitySchemaInnerAnyOf3Team.


        :return: The name of this UsersIdentitySchemaInnerAnyOf3Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsersIdentitySchemaInnerAnyOf3Team.


        :param name: The name of this UsersIdentitySchemaInnerAnyOf3Team.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
