# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rtm_connect_schema_self import RtmConnectSchemaSelf
from openapi_server.models.rtm_connect_schema_team import RtmConnectSchemaTeam
from openapi_server import util


class RtmConnectSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ok: bool=None, _self: RtmConnectSchemaSelf=None, team: RtmConnectSchemaTeam=None, url: str=None):
        """RtmConnectSchema - a model defined in OpenAPI

        :param ok: The ok of this RtmConnectSchema.
        :param _self: The _self of this RtmConnectSchema.
        :param team: The team of this RtmConnectSchema.
        :param url: The url of this RtmConnectSchema.
        """
        self.openapi_types = {
            'ok': bool,
            '_self': RtmConnectSchemaSelf,
            'team': RtmConnectSchemaTeam,
            'url': str
        }

        self.attribute_map = {
            'ok': 'ok',
            '_self': 'self',
            'team': 'team',
            'url': 'url'
        }

        self._ok = ok
        self.__self = _self
        self._team = team
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtmConnectSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rtm_connect_schema of this RtmConnectSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ok(self):
        """Gets the ok of this RtmConnectSchema.


        :return: The ok of this RtmConnectSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this RtmConnectSchema.


        :param ok: The ok of this RtmConnectSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def _self(self):
        """Gets the _self of this RtmConnectSchema.


        :return: The _self of this RtmConnectSchema.
        :rtype: RtmConnectSchemaSelf
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this RtmConnectSchema.


        :param _self: The _self of this RtmConnectSchema.
        :type _self: RtmConnectSchemaSelf
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def team(self):
        """Gets the team of this RtmConnectSchema.


        :return: The team of this RtmConnectSchema.
        :rtype: RtmConnectSchemaTeam
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this RtmConnectSchema.


        :param team: The team of this RtmConnectSchema.
        :type team: RtmConnectSchemaTeam
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def url(self):
        """Gets the url of this RtmConnectSchema.


        :return: The url of this RtmConnectSchema.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RtmConnectSchema.


        :param url: The url of this RtmConnectSchema.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
