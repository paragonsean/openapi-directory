# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_im_channel_object_from_conversations_methods_shares_inner import ConversationIMChannelObjectFromConversationsMethodsSharesInner
from openapi_server.models.conversation_object_parent_conversation_inner import ConversationObjectParentConversationInner
from openapi_server.models.objs_channel_latest_inner import ObjsChannelLatestInner
import re
from openapi_server import util


class ConversationIMChannelObjectFromConversationsMethods(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: int=None, has_pins: bool=None, id: str=None, is_archived: bool=None, is_ext_shared: bool=None, is_frozen: bool=None, is_im: bool=None, is_open: bool=None, is_org_shared: bool=None, is_shared: bool=None, is_starred: bool=None, is_user_deleted: bool=None, last_read: str=None, latest: List[ObjsChannelLatestInner]=None, parent_conversation: List[ConversationObjectParentConversationInner]=None, pin_count: int=None, priority: float=None, shares: list[ConversationIMChannelObjectFromConversationsMethodsSharesInner]=None, unread_count: int=None, unread_count_display: int=None, user: str=None, version: int=None):
        """ConversationIMChannelObjectFromConversationsMethods - a model defined in OpenAPI

        :param created: The created of this ConversationIMChannelObjectFromConversationsMethods.
        :param has_pins: The has_pins of this ConversationIMChannelObjectFromConversationsMethods.
        :param id: The id of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_archived: The is_archived of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_ext_shared: The is_ext_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_frozen: The is_frozen of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_im: The is_im of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_open: The is_open of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_org_shared: The is_org_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_shared: The is_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_starred: The is_starred of this ConversationIMChannelObjectFromConversationsMethods.
        :param is_user_deleted: The is_user_deleted of this ConversationIMChannelObjectFromConversationsMethods.
        :param last_read: The last_read of this ConversationIMChannelObjectFromConversationsMethods.
        :param latest: The latest of this ConversationIMChannelObjectFromConversationsMethods.
        :param parent_conversation: The parent_conversation of this ConversationIMChannelObjectFromConversationsMethods.
        :param pin_count: The pin_count of this ConversationIMChannelObjectFromConversationsMethods.
        :param priority: The priority of this ConversationIMChannelObjectFromConversationsMethods.
        :param shares: The shares of this ConversationIMChannelObjectFromConversationsMethods.
        :param unread_count: The unread_count of this ConversationIMChannelObjectFromConversationsMethods.
        :param unread_count_display: The unread_count_display of this ConversationIMChannelObjectFromConversationsMethods.
        :param user: The user of this ConversationIMChannelObjectFromConversationsMethods.
        :param version: The version of this ConversationIMChannelObjectFromConversationsMethods.
        """
        self.openapi_types = {
            'created': int,
            'has_pins': bool,
            'id': str,
            'is_archived': bool,
            'is_ext_shared': bool,
            'is_frozen': bool,
            'is_im': bool,
            'is_open': bool,
            'is_org_shared': bool,
            'is_shared': bool,
            'is_starred': bool,
            'is_user_deleted': bool,
            'last_read': str,
            'latest': List[ObjsChannelLatestInner],
            'parent_conversation': List[ConversationObjectParentConversationInner],
            'pin_count': int,
            'priority': float,
            'shares': list[ConversationIMChannelObjectFromConversationsMethodsSharesInner],
            'unread_count': int,
            'unread_count_display': int,
            'user': str,
            'version': int
        }

        self.attribute_map = {
            'created': 'created',
            'has_pins': 'has_pins',
            'id': 'id',
            'is_archived': 'is_archived',
            'is_ext_shared': 'is_ext_shared',
            'is_frozen': 'is_frozen',
            'is_im': 'is_im',
            'is_open': 'is_open',
            'is_org_shared': 'is_org_shared',
            'is_shared': 'is_shared',
            'is_starred': 'is_starred',
            'is_user_deleted': 'is_user_deleted',
            'last_read': 'last_read',
            'latest': 'latest',
            'parent_conversation': 'parent_conversation',
            'pin_count': 'pin_count',
            'priority': 'priority',
            'shares': 'shares',
            'unread_count': 'unread_count',
            'unread_count_display': 'unread_count_display',
            'user': 'user',
            'version': 'version'
        }

        self._created = created
        self._has_pins = has_pins
        self._id = id
        self._is_archived = is_archived
        self._is_ext_shared = is_ext_shared
        self._is_frozen = is_frozen
        self._is_im = is_im
        self._is_open = is_open
        self._is_org_shared = is_org_shared
        self._is_shared = is_shared
        self._is_starred = is_starred
        self._is_user_deleted = is_user_deleted
        self._last_read = last_read
        self._latest = latest
        self._parent_conversation = parent_conversation
        self._pin_count = pin_count
        self._priority = priority
        self._shares = shares
        self._unread_count = unread_count
        self._unread_count_display = unread_count_display
        self._user = user
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationIMChannelObjectFromConversationsMethods':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation_IM_Channel_Object_from_conversations___methods of this ConversationIMChannelObjectFromConversationsMethods.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The created of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConversationIMChannelObjectFromConversationsMethods.


        :param created: The created of this ConversationIMChannelObjectFromConversationsMethods.
        :type created: int
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def has_pins(self):
        """Gets the has_pins of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The has_pins of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._has_pins

    @has_pins.setter
    def has_pins(self, has_pins):
        """Sets the has_pins of this ConversationIMChannelObjectFromConversationsMethods.


        :param has_pins: The has_pins of this ConversationIMChannelObjectFromConversationsMethods.
        :type has_pins: bool
        """

        self._has_pins = has_pins

    @property
    def id(self):
        """Gets the id of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The id of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationIMChannelObjectFromConversationsMethods.


        :param id: The id of this ConversationIMChannelObjectFromConversationsMethods.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^[D][A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[D][A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def is_archived(self):
        """Gets the is_archived of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_archived of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_archived: The is_archived of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_archived: bool
        """

        self._is_archived = is_archived

    @property
    def is_ext_shared(self):
        """Gets the is_ext_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_ext_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_ext_shared

    @is_ext_shared.setter
    def is_ext_shared(self, is_ext_shared):
        """Sets the is_ext_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_ext_shared: The is_ext_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_ext_shared: bool
        """

        self._is_ext_shared = is_ext_shared

    @property
    def is_frozen(self):
        """Gets the is_frozen of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_frozen of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen):
        """Sets the is_frozen of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_frozen: The is_frozen of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_frozen: bool
        """

        self._is_frozen = is_frozen

    @property
    def is_im(self):
        """Gets the is_im of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_im of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_im

    @is_im.setter
    def is_im(self, is_im):
        """Sets the is_im of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_im: The is_im of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_im: bool
        """
        if is_im is None:
            raise ValueError("Invalid value for `is_im`, must not be `None`")

        self._is_im = is_im

    @property
    def is_open(self):
        """Gets the is_open of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_open of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_open: The is_open of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_open: bool
        """

        self._is_open = is_open

    @property
    def is_org_shared(self):
        """Gets the is_org_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_org_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_org_shared

    @is_org_shared.setter
    def is_org_shared(self, is_org_shared):
        """Sets the is_org_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_org_shared: The is_org_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_org_shared: bool
        """
        if is_org_shared is None:
            raise ValueError("Invalid value for `is_org_shared`, must not be `None`")

        self._is_org_shared = is_org_shared

    @property
    def is_shared(self):
        """Gets the is_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_shared: The is_shared of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_shared: bool
        """

        self._is_shared = is_shared

    @property
    def is_starred(self):
        """Gets the is_starred of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_starred of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_starred: The is_starred of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_starred: bool
        """

        self._is_starred = is_starred

    @property
    def is_user_deleted(self):
        """Gets the is_user_deleted of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The is_user_deleted of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: bool
        """
        return self._is_user_deleted

    @is_user_deleted.setter
    def is_user_deleted(self, is_user_deleted):
        """Sets the is_user_deleted of this ConversationIMChannelObjectFromConversationsMethods.


        :param is_user_deleted: The is_user_deleted of this ConversationIMChannelObjectFromConversationsMethods.
        :type is_user_deleted: bool
        """

        self._is_user_deleted = is_user_deleted

    @property
    def last_read(self):
        """Gets the last_read of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The last_read of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: str
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this ConversationIMChannelObjectFromConversationsMethods.


        :param last_read: The last_read of this ConversationIMChannelObjectFromConversationsMethods.
        :type last_read: str
        """
        if last_read is not None and not re.search(r'^\d{10}\.\d{6}$', last_read):
            raise ValueError("Invalid value for `last_read`, must be a follow pattern or equal to `/^\d{10}\.\d{6}$/`")

        self._last_read = last_read

    @property
    def latest(self):
        """Gets the latest of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The latest of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: List[ObjsChannelLatestInner]
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this ConversationIMChannelObjectFromConversationsMethods.


        :param latest: The latest of this ConversationIMChannelObjectFromConversationsMethods.
        :type latest: List[ObjsChannelLatestInner]
        """

        self._latest = latest

    @property
    def parent_conversation(self):
        """Gets the parent_conversation of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The parent_conversation of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: List[ConversationObjectParentConversationInner]
        """
        return self._parent_conversation

    @parent_conversation.setter
    def parent_conversation(self, parent_conversation):
        """Sets the parent_conversation of this ConversationIMChannelObjectFromConversationsMethods.


        :param parent_conversation: The parent_conversation of this ConversationIMChannelObjectFromConversationsMethods.
        :type parent_conversation: List[ConversationObjectParentConversationInner]
        """

        self._parent_conversation = parent_conversation

    @property
    def pin_count(self):
        """Gets the pin_count of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The pin_count of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: int
        """
        return self._pin_count

    @pin_count.setter
    def pin_count(self, pin_count):
        """Sets the pin_count of this ConversationIMChannelObjectFromConversationsMethods.


        :param pin_count: The pin_count of this ConversationIMChannelObjectFromConversationsMethods.
        :type pin_count: int
        """

        self._pin_count = pin_count

    @property
    def priority(self):
        """Gets the priority of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The priority of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ConversationIMChannelObjectFromConversationsMethods.


        :param priority: The priority of this ConversationIMChannelObjectFromConversationsMethods.
        :type priority: float
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def shares(self):
        """Gets the shares of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The shares of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: list[ConversationIMChannelObjectFromConversationsMethodsSharesInner]
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this ConversationIMChannelObjectFromConversationsMethods.


        :param shares: The shares of this ConversationIMChannelObjectFromConversationsMethods.
        :type shares: list[ConversationIMChannelObjectFromConversationsMethodsSharesInner]
        """
        if shares is not None and len(shares) < 0:
            raise ValueError("Invalid value for `shares`, number of items must be greater than or equal to `0`")

        self._shares = shares

    @property
    def unread_count(self):
        """Gets the unread_count of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The unread_count of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ConversationIMChannelObjectFromConversationsMethods.


        :param unread_count: The unread_count of this ConversationIMChannelObjectFromConversationsMethods.
        :type unread_count: int
        """

        self._unread_count = unread_count

    @property
    def unread_count_display(self):
        """Gets the unread_count_display of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The unread_count_display of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: int
        """
        return self._unread_count_display

    @unread_count_display.setter
    def unread_count_display(self, unread_count_display):
        """Sets the unread_count_display of this ConversationIMChannelObjectFromConversationsMethods.


        :param unread_count_display: The unread_count_display of this ConversationIMChannelObjectFromConversationsMethods.
        :type unread_count_display: int
        """

        self._unread_count_display = unread_count_display

    @property
    def user(self):
        """Gets the user of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The user of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ConversationIMChannelObjectFromConversationsMethods.


        :param user: The user of this ConversationIMChannelObjectFromConversationsMethods.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user

    @property
    def version(self):
        """Gets the version of this ConversationIMChannelObjectFromConversationsMethods.


        :return: The version of this ConversationIMChannelObjectFromConversationsMethods.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConversationIMChannelObjectFromConversationsMethods.


        :param version: The version of this ConversationIMChannelObjectFromConversationsMethods.
        :type version: int
        """

        self._version = version
