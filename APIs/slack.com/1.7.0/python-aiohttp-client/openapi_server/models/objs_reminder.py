# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ObjsReminder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complete_ts: int=None, creator: str=None, id: str=None, recurring: bool=None, text: str=None, time: int=None, user: str=None):
        """ObjsReminder - a model defined in OpenAPI

        :param complete_ts: The complete_ts of this ObjsReminder.
        :param creator: The creator of this ObjsReminder.
        :param id: The id of this ObjsReminder.
        :param recurring: The recurring of this ObjsReminder.
        :param text: The text of this ObjsReminder.
        :param time: The time of this ObjsReminder.
        :param user: The user of this ObjsReminder.
        """
        self.openapi_types = {
            'complete_ts': int,
            'creator': str,
            'id': str,
            'recurring': bool,
            'text': str,
            'time': int,
            'user': str
        }

        self.attribute_map = {
            'complete_ts': 'complete_ts',
            'creator': 'creator',
            'id': 'id',
            'recurring': 'recurring',
            'text': 'text',
            'time': 'time',
            'user': 'user'
        }

        self._complete_ts = complete_ts
        self._creator = creator
        self._id = id
        self._recurring = recurring
        self._text = text
        self._time = time
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjsReminder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The objs_reminder of this ObjsReminder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complete_ts(self):
        """Gets the complete_ts of this ObjsReminder.


        :return: The complete_ts of this ObjsReminder.
        :rtype: int
        """
        return self._complete_ts

    @complete_ts.setter
    def complete_ts(self, complete_ts):
        """Sets the complete_ts of this ObjsReminder.


        :param complete_ts: The complete_ts of this ObjsReminder.
        :type complete_ts: int
        """

        self._complete_ts = complete_ts

    @property
    def creator(self):
        """Gets the creator of this ObjsReminder.


        :return: The creator of this ObjsReminder.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this ObjsReminder.


        :param creator: The creator of this ObjsReminder.
        :type creator: str
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")
        if creator is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', creator):
            raise ValueError("Invalid value for `creator`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this ObjsReminder.


        :return: The id of this ObjsReminder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjsReminder.


        :param id: The id of this ObjsReminder.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and not re.search(r'^Rm[A-Z0-9]{8,}$', id):
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^Rm[A-Z0-9]{8,}$/`")

        self._id = id

    @property
    def recurring(self):
        """Gets the recurring of this ObjsReminder.


        :return: The recurring of this ObjsReminder.
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this ObjsReminder.


        :param recurring: The recurring of this ObjsReminder.
        :type recurring: bool
        """
        if recurring is None:
            raise ValueError("Invalid value for `recurring`, must not be `None`")

        self._recurring = recurring

    @property
    def text(self):
        """Gets the text of this ObjsReminder.


        :return: The text of this ObjsReminder.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ObjsReminder.


        :param text: The text of this ObjsReminder.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def time(self):
        """Gets the time of this ObjsReminder.


        :return: The time of this ObjsReminder.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ObjsReminder.


        :param time: The time of this ObjsReminder.
        :type time: int
        """

        self._time = time

    @property
    def user(self):
        """Gets the user of this ObjsReminder.


        :return: The user of this ObjsReminder.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ObjsReminder.


        :param user: The user of this ObjsReminder.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")
        if user is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user):
            raise ValueError("Invalid value for `user`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user = user
