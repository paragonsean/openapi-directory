# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DndSetSnoozeSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ok: bool=None, snooze_enabled: bool=None, snooze_endtime: int=None, snooze_remaining: int=None):
        """DndSetSnoozeSchema - a model defined in OpenAPI

        :param ok: The ok of this DndSetSnoozeSchema.
        :param snooze_enabled: The snooze_enabled of this DndSetSnoozeSchema.
        :param snooze_endtime: The snooze_endtime of this DndSetSnoozeSchema.
        :param snooze_remaining: The snooze_remaining of this DndSetSnoozeSchema.
        """
        self.openapi_types = {
            'ok': bool,
            'snooze_enabled': bool,
            'snooze_endtime': int,
            'snooze_remaining': int
        }

        self.attribute_map = {
            'ok': 'ok',
            'snooze_enabled': 'snooze_enabled',
            'snooze_endtime': 'snooze_endtime',
            'snooze_remaining': 'snooze_remaining'
        }

        self._ok = ok
        self._snooze_enabled = snooze_enabled
        self._snooze_endtime = snooze_endtime
        self._snooze_remaining = snooze_remaining

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DndSetSnoozeSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dnd_setSnooze_schema of this DndSetSnoozeSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ok(self):
        """Gets the ok of this DndSetSnoozeSchema.


        :return: The ok of this DndSetSnoozeSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this DndSetSnoozeSchema.


        :param ok: The ok of this DndSetSnoozeSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def snooze_enabled(self):
        """Gets the snooze_enabled of this DndSetSnoozeSchema.


        :return: The snooze_enabled of this DndSetSnoozeSchema.
        :rtype: bool
        """
        return self._snooze_enabled

    @snooze_enabled.setter
    def snooze_enabled(self, snooze_enabled):
        """Sets the snooze_enabled of this DndSetSnoozeSchema.


        :param snooze_enabled: The snooze_enabled of this DndSetSnoozeSchema.
        :type snooze_enabled: bool
        """
        if snooze_enabled is None:
            raise ValueError("Invalid value for `snooze_enabled`, must not be `None`")

        self._snooze_enabled = snooze_enabled

    @property
    def snooze_endtime(self):
        """Gets the snooze_endtime of this DndSetSnoozeSchema.


        :return: The snooze_endtime of this DndSetSnoozeSchema.
        :rtype: int
        """
        return self._snooze_endtime

    @snooze_endtime.setter
    def snooze_endtime(self, snooze_endtime):
        """Sets the snooze_endtime of this DndSetSnoozeSchema.


        :param snooze_endtime: The snooze_endtime of this DndSetSnoozeSchema.
        :type snooze_endtime: int
        """
        if snooze_endtime is None:
            raise ValueError("Invalid value for `snooze_endtime`, must not be `None`")

        self._snooze_endtime = snooze_endtime

    @property
    def snooze_remaining(self):
        """Gets the snooze_remaining of this DndSetSnoozeSchema.


        :return: The snooze_remaining of this DndSetSnoozeSchema.
        :rtype: int
        """
        return self._snooze_remaining

    @snooze_remaining.setter
    def snooze_remaining(self, snooze_remaining):
        """Sets the snooze_remaining of this DndSetSnoozeSchema.


        :param snooze_remaining: The snooze_remaining of this DndSetSnoozeSchema.
        :type snooze_remaining: int
        """
        if snooze_remaining is None:
            raise ValueError("Invalid value for `snooze_remaining`, must not be `None`")

        self._snooze_remaining = snooze_remaining
