# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AuthTestSuccessSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot_id: str=None, is_enterprise_install: bool=None, ok: bool=None, team: str=None, team_id: str=None, url: str=None, user: str=None, user_id: str=None):
        """AuthTestSuccessSchema - a model defined in OpenAPI

        :param bot_id: The bot_id of this AuthTestSuccessSchema.
        :param is_enterprise_install: The is_enterprise_install of this AuthTestSuccessSchema.
        :param ok: The ok of this AuthTestSuccessSchema.
        :param team: The team of this AuthTestSuccessSchema.
        :param team_id: The team_id of this AuthTestSuccessSchema.
        :param url: The url of this AuthTestSuccessSchema.
        :param user: The user of this AuthTestSuccessSchema.
        :param user_id: The user_id of this AuthTestSuccessSchema.
        """
        self.openapi_types = {
            'bot_id': str,
            'is_enterprise_install': bool,
            'ok': bool,
            'team': str,
            'team_id': str,
            'url': str,
            'user': str,
            'user_id': str
        }

        self.attribute_map = {
            'bot_id': 'bot_id',
            'is_enterprise_install': 'is_enterprise_install',
            'ok': 'ok',
            'team': 'team',
            'team_id': 'team_id',
            'url': 'url',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._bot_id = bot_id
        self._is_enterprise_install = is_enterprise_install
        self._ok = ok
        self._team = team
        self._team_id = team_id
        self._url = url
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthTestSuccessSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The auth_test_success_schema of this AuthTestSuccessSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot_id(self):
        """Gets the bot_id of this AuthTestSuccessSchema.


        :return: The bot_id of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this AuthTestSuccessSchema.


        :param bot_id: The bot_id of this AuthTestSuccessSchema.
        :type bot_id: str
        """
        if bot_id is not None and not re.search(r'^B[A-Z0-9]{8,}$', bot_id):
            raise ValueError("Invalid value for `bot_id`, must be a follow pattern or equal to `/^B[A-Z0-9]{8,}$/`")

        self._bot_id = bot_id

    @property
    def is_enterprise_install(self):
        """Gets the is_enterprise_install of this AuthTestSuccessSchema.


        :return: The is_enterprise_install of this AuthTestSuccessSchema.
        :rtype: bool
        """
        return self._is_enterprise_install

    @is_enterprise_install.setter
    def is_enterprise_install(self, is_enterprise_install):
        """Sets the is_enterprise_install of this AuthTestSuccessSchema.


        :param is_enterprise_install: The is_enterprise_install of this AuthTestSuccessSchema.
        :type is_enterprise_install: bool
        """

        self._is_enterprise_install = is_enterprise_install

    @property
    def ok(self):
        """Gets the ok of this AuthTestSuccessSchema.


        :return: The ok of this AuthTestSuccessSchema.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this AuthTestSuccessSchema.


        :param ok: The ok of this AuthTestSuccessSchema.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def team(self):
        """Gets the team of this AuthTestSuccessSchema.


        :return: The team of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this AuthTestSuccessSchema.


        :param team: The team of this AuthTestSuccessSchema.
        :type team: str
        """
        if team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")

        self._team = team

    @property
    def team_id(self):
        """Gets the team_id of this AuthTestSuccessSchema.


        :return: The team_id of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this AuthTestSuccessSchema.


        :param team_id: The team_id of this AuthTestSuccessSchema.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")
        if team_id is not None and not re.search(r'^[T][A-Z0-9]{2,}$', team_id):
            raise ValueError("Invalid value for `team_id`, must be a follow pattern or equal to `/^[T][A-Z0-9]{2,}$/`")

        self._team_id = team_id

    @property
    def url(self):
        """Gets the url of this AuthTestSuccessSchema.


        :return: The url of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AuthTestSuccessSchema.


        :param url: The url of this AuthTestSuccessSchema.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user(self):
        """Gets the user of this AuthTestSuccessSchema.


        :return: The user of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AuthTestSuccessSchema.


        :param user: The user of this AuthTestSuccessSchema.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this AuthTestSuccessSchema.


        :return: The user_id of this AuthTestSuccessSchema.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthTestSuccessSchema.


        :param user_id: The user_id of this AuthTestSuccessSchema.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")
        if user_id is not None and not re.search(r'^[UW][A-Z0-9]{2,}$', user_id):
            raise ValueError("Invalid value for `user_id`, must be a follow pattern or equal to `/^[UW][A-Z0-9]{2,}$/`")

        self._user_id = user_id
