# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.objs_file import ObjsFile
from openapi_server import util


class ReactionsGetSuccessSchemaInnerAnyOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file: ObjsFile=None, ok: bool=None, type: str=None):
        """ReactionsGetSuccessSchemaInnerAnyOf1 - a model defined in OpenAPI

        :param file: The file of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :param ok: The ok of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :param type: The type of this ReactionsGetSuccessSchemaInnerAnyOf1.
        """
        self.openapi_types = {
            'file': ObjsFile,
            'ok': bool,
            'type': str
        }

        self.attribute_map = {
            'file': 'file',
            'ok': 'ok',
            'type': 'type'
        }

        self._file = file
        self._ok = ok
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactionsGetSuccessSchemaInnerAnyOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reactions_get_success_schema_inner_anyOf_1 of this ReactionsGetSuccessSchemaInnerAnyOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :return: The file of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :rtype: ObjsFile
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :param file: The file of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :type file: ObjsFile
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file

    @property
    def ok(self):
        """Gets the ok of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :return: The ok of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :param ok: The ok of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :type ok: bool
        """
        if ok is None:
            raise ValueError("Invalid value for `ok`, must not be `None`")

        self._ok = ok

    @property
    def type(self):
        """Gets the type of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :return: The type of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReactionsGetSuccessSchemaInnerAnyOf1.


        :param type: The type of this ReactionsGetSuccessSchemaInnerAnyOf1.
        :type type: str
        """
        allowed_values = ["file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
