/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RemindersAddErrorSchema;
import org.openapitools.client.model.RemindersAddSchema;
import org.openapitools.client.model.RemindersCompleteErrorSchema;
import org.openapitools.client.model.RemindersCompleteSchema;
import org.openapitools.client.model.RemindersDeleteErrorSchema;
import org.openapitools.client.model.RemindersDeleteSchema;
import org.openapitools.client.model.RemindersInfoErrorSchema;
import org.openapitools.client.model.RemindersInfoSchema;
import org.openapitools.client.model.RemindersListErrorSchema;
import org.openapitools.client.model.RemindersListSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemindersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RemindersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemindersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for remindersAdd
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (required)
     * @param text The content of the reminder (required)
     * @param time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;) (required)
     * @param user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.add"> Documentation</a>
     */
    public okhttp3.Call remindersAddCall(String token, String text, String time, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (time != null) {
            localVarFormParams.put("time", time);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindersAddValidateBeforeCall(String token, String text, String time, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling remindersAdd(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling remindersAdd(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling remindersAdd(Async)");
        }

        return remindersAddCall(token, text, time, user, _callback);

    }

    /**
     * 
     * Creates a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (required)
     * @param text The content of the reminder (required)
     * @param time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;) (required)
     * @param user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. (optional)
     * @return RemindersAddSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.add"> Documentation</a>
     */
    public RemindersAddSchema remindersAdd(String token, String text, String time, String user) throws ApiException {
        ApiResponse<RemindersAddSchema> localVarResp = remindersAddWithHttpInfo(token, text, time, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (required)
     * @param text The content of the reminder (required)
     * @param time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;) (required)
     * @param user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. (optional)
     * @return ApiResponse&lt;RemindersAddSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.add"> Documentation</a>
     */
    public ApiResponse<RemindersAddSchema> remindersAddWithHttpInfo(String token, String text, String time, String user) throws ApiException {
        okhttp3.Call localVarCall = remindersAddValidateBeforeCall(token, text, time, user, null);
        Type localVarReturnType = new TypeToken<RemindersAddSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (required)
     * @param text The content of the reminder (required)
     * @param time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;) (required)
     * @param user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.add"> Documentation</a>
     */
    public okhttp3.Call remindersAddAsync(String token, String text, String time, String user, final ApiCallback<RemindersAddSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindersAddValidateBeforeCall(token, text, time, user, _callback);
        Type localVarReturnType = new TypeToken<RemindersAddSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remindersComplete
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder to be marked as complete (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.complete"> Documentation</a>
     */
    public okhttp3.Call remindersCompleteCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reminder != null) {
            localVarFormParams.put("reminder", reminder);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindersCompleteValidateBeforeCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        return remindersCompleteCall(token, reminder, _callback);

    }

    /**
     * 
     * Marks a reminder as complete.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder to be marked as complete (optional)
     * @return RemindersCompleteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.complete"> Documentation</a>
     */
    public RemindersCompleteSchema remindersComplete(String token, String reminder) throws ApiException {
        ApiResponse<RemindersCompleteSchema> localVarResp = remindersCompleteWithHttpInfo(token, reminder);
        return localVarResp.getData();
    }

    /**
     * 
     * Marks a reminder as complete.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder to be marked as complete (optional)
     * @return ApiResponse&lt;RemindersCompleteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.complete"> Documentation</a>
     */
    public ApiResponse<RemindersCompleteSchema> remindersCompleteWithHttpInfo(String token, String reminder) throws ApiException {
        okhttp3.Call localVarCall = remindersCompleteValidateBeforeCall(token, reminder, null);
        Type localVarReturnType = new TypeToken<RemindersCompleteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Marks a reminder as complete.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder to be marked as complete (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.complete"> Documentation</a>
     */
    public okhttp3.Call remindersCompleteAsync(String token, String reminder, final ApiCallback<RemindersCompleteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindersCompleteValidateBeforeCall(token, reminder, _callback);
        Type localVarReturnType = new TypeToken<RemindersCompleteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remindersDelete
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.delete"> Documentation</a>
     */
    public okhttp3.Call remindersDeleteCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reminder != null) {
            localVarFormParams.put("reminder", reminder);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindersDeleteValidateBeforeCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        return remindersDeleteCall(token, reminder, _callback);

    }

    /**
     * 
     * Deletes a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @return RemindersDeleteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.delete"> Documentation</a>
     */
    public RemindersDeleteSchema remindersDelete(String token, String reminder) throws ApiException {
        ApiResponse<RemindersDeleteSchema> localVarResp = remindersDeleteWithHttpInfo(token, reminder);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @return ApiResponse&lt;RemindersDeleteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.delete"> Documentation</a>
     */
    public ApiResponse<RemindersDeleteSchema> remindersDeleteWithHttpInfo(String token, String reminder) throws ApiException {
        okhttp3.Call localVarCall = remindersDeleteValidateBeforeCall(token, reminder, null);
        Type localVarReturnType = new TypeToken<RemindersDeleteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.delete"> Documentation</a>
     */
    public okhttp3.Call remindersDeleteAsync(String token, String reminder, final ApiCallback<RemindersDeleteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindersDeleteValidateBeforeCall(token, reminder, _callback);
        Type localVarReturnType = new TypeToken<RemindersDeleteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remindersInfo
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.info"> Documentation</a>
     */
    public okhttp3.Call remindersInfoCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reminder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reminder", reminder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindersInfoValidateBeforeCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        return remindersInfoCall(token, reminder, _callback);

    }

    /**
     * 
     * Gets information about a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @return RemindersInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.info"> Documentation</a>
     */
    public RemindersInfoSchema remindersInfo(String token, String reminder) throws ApiException {
        ApiResponse<RemindersInfoSchema> localVarResp = remindersInfoWithHttpInfo(token, reminder);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @return ApiResponse&lt;RemindersInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.info"> Documentation</a>
     */
    public ApiResponse<RemindersInfoSchema> remindersInfoWithHttpInfo(String token, String reminder) throws ApiException {
        okhttp3.Call localVarCall = remindersInfoValidateBeforeCall(token, reminder, null);
        Type localVarReturnType = new TypeToken<RemindersInfoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param reminder The ID of the reminder (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.info"> Documentation</a>
     */
    public okhttp3.Call remindersInfoAsync(String token, String reminder, final ApiCallback<RemindersInfoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindersInfoValidateBeforeCall(token, reminder, _callback);
        Type localVarReturnType = new TypeToken<RemindersInfoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remindersList
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.list"> Documentation</a>
     */
    public okhttp3.Call remindersListCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindersListValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        return remindersListCall(token, _callback);

    }

    /**
     * 
     * Lists all reminders created by or for a given user.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @return RemindersListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.list"> Documentation</a>
     */
    public RemindersListSchema remindersList(String token) throws ApiException {
        ApiResponse<RemindersListSchema> localVarResp = remindersListWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all reminders created by or for a given user.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @return ApiResponse&lt;RemindersListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.list"> Documentation</a>
     */
    public ApiResponse<RemindersListSchema> remindersListWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = remindersListValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<RemindersListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all reminders created by or for a given user.
     * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.list"> Documentation</a>
     */
    public okhttp3.Call remindersListAsync(String token, final ApiCallback<RemindersListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindersListValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<RemindersListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
