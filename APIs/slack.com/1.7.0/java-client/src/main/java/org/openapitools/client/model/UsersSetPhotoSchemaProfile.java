/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersSetPhotoSchemaProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersSetPhotoSchemaProfile {
  public static final String SERIALIZED_NAME_AVATAR_HASH = "avatar_hash";
  @SerializedName(SERIALIZED_NAME_AVATAR_HASH)
  private String avatarHash;

  public static final String SERIALIZED_NAME_IMAGE1024 = "image_1024";
  @SerializedName(SERIALIZED_NAME_IMAGE1024)
  private URI image1024;

  public static final String SERIALIZED_NAME_IMAGE192 = "image_192";
  @SerializedName(SERIALIZED_NAME_IMAGE192)
  private URI image192;

  public static final String SERIALIZED_NAME_IMAGE24 = "image_24";
  @SerializedName(SERIALIZED_NAME_IMAGE24)
  private URI image24;

  public static final String SERIALIZED_NAME_IMAGE32 = "image_32";
  @SerializedName(SERIALIZED_NAME_IMAGE32)
  private URI image32;

  public static final String SERIALIZED_NAME_IMAGE48 = "image_48";
  @SerializedName(SERIALIZED_NAME_IMAGE48)
  private URI image48;

  public static final String SERIALIZED_NAME_IMAGE512 = "image_512";
  @SerializedName(SERIALIZED_NAME_IMAGE512)
  private URI image512;

  public static final String SERIALIZED_NAME_IMAGE72 = "image_72";
  @SerializedName(SERIALIZED_NAME_IMAGE72)
  private URI image72;

  public static final String SERIALIZED_NAME_IMAGE_ORIGINAL = "image_original";
  @SerializedName(SERIALIZED_NAME_IMAGE_ORIGINAL)
  private URI imageOriginal;

  public UsersSetPhotoSchemaProfile() {
  }

  public UsersSetPhotoSchemaProfile avatarHash(String avatarHash) {
    this.avatarHash = avatarHash;
    return this;
  }

  /**
   * Get avatarHash
   * @return avatarHash
   */
  @javax.annotation.Nonnull
  public String getAvatarHash() {
    return avatarHash;
  }

  public void setAvatarHash(String avatarHash) {
    this.avatarHash = avatarHash;
  }


  public UsersSetPhotoSchemaProfile image1024(URI image1024) {
    this.image1024 = image1024;
    return this;
  }

  /**
   * Get image1024
   * @return image1024
   */
  @javax.annotation.Nonnull
  public URI getImage1024() {
    return image1024;
  }

  public void setImage1024(URI image1024) {
    this.image1024 = image1024;
  }


  public UsersSetPhotoSchemaProfile image192(URI image192) {
    this.image192 = image192;
    return this;
  }

  /**
   * Get image192
   * @return image192
   */
  @javax.annotation.Nonnull
  public URI getImage192() {
    return image192;
  }

  public void setImage192(URI image192) {
    this.image192 = image192;
  }


  public UsersSetPhotoSchemaProfile image24(URI image24) {
    this.image24 = image24;
    return this;
  }

  /**
   * Get image24
   * @return image24
   */
  @javax.annotation.Nonnull
  public URI getImage24() {
    return image24;
  }

  public void setImage24(URI image24) {
    this.image24 = image24;
  }


  public UsersSetPhotoSchemaProfile image32(URI image32) {
    this.image32 = image32;
    return this;
  }

  /**
   * Get image32
   * @return image32
   */
  @javax.annotation.Nonnull
  public URI getImage32() {
    return image32;
  }

  public void setImage32(URI image32) {
    this.image32 = image32;
  }


  public UsersSetPhotoSchemaProfile image48(URI image48) {
    this.image48 = image48;
    return this;
  }

  /**
   * Get image48
   * @return image48
   */
  @javax.annotation.Nonnull
  public URI getImage48() {
    return image48;
  }

  public void setImage48(URI image48) {
    this.image48 = image48;
  }


  public UsersSetPhotoSchemaProfile image512(URI image512) {
    this.image512 = image512;
    return this;
  }

  /**
   * Get image512
   * @return image512
   */
  @javax.annotation.Nonnull
  public URI getImage512() {
    return image512;
  }

  public void setImage512(URI image512) {
    this.image512 = image512;
  }


  public UsersSetPhotoSchemaProfile image72(URI image72) {
    this.image72 = image72;
    return this;
  }

  /**
   * Get image72
   * @return image72
   */
  @javax.annotation.Nonnull
  public URI getImage72() {
    return image72;
  }

  public void setImage72(URI image72) {
    this.image72 = image72;
  }


  public UsersSetPhotoSchemaProfile imageOriginal(URI imageOriginal) {
    this.imageOriginal = imageOriginal;
    return this;
  }

  /**
   * Get imageOriginal
   * @return imageOriginal
   */
  @javax.annotation.Nonnull
  public URI getImageOriginal() {
    return imageOriginal;
  }

  public void setImageOriginal(URI imageOriginal) {
    this.imageOriginal = imageOriginal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersSetPhotoSchemaProfile usersSetPhotoSchemaProfile = (UsersSetPhotoSchemaProfile) o;
    return Objects.equals(this.avatarHash, usersSetPhotoSchemaProfile.avatarHash) &&
        Objects.equals(this.image1024, usersSetPhotoSchemaProfile.image1024) &&
        Objects.equals(this.image192, usersSetPhotoSchemaProfile.image192) &&
        Objects.equals(this.image24, usersSetPhotoSchemaProfile.image24) &&
        Objects.equals(this.image32, usersSetPhotoSchemaProfile.image32) &&
        Objects.equals(this.image48, usersSetPhotoSchemaProfile.image48) &&
        Objects.equals(this.image512, usersSetPhotoSchemaProfile.image512) &&
        Objects.equals(this.image72, usersSetPhotoSchemaProfile.image72) &&
        Objects.equals(this.imageOriginal, usersSetPhotoSchemaProfile.imageOriginal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarHash, image1024, image192, image24, image32, image48, image512, image72, imageOriginal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersSetPhotoSchemaProfile {\n");
    sb.append("    avatarHash: ").append(toIndentedString(avatarHash)).append("\n");
    sb.append("    image1024: ").append(toIndentedString(image1024)).append("\n");
    sb.append("    image192: ").append(toIndentedString(image192)).append("\n");
    sb.append("    image24: ").append(toIndentedString(image24)).append("\n");
    sb.append("    image32: ").append(toIndentedString(image32)).append("\n");
    sb.append("    image48: ").append(toIndentedString(image48)).append("\n");
    sb.append("    image512: ").append(toIndentedString(image512)).append("\n");
    sb.append("    image72: ").append(toIndentedString(image72)).append("\n");
    sb.append("    imageOriginal: ").append(toIndentedString(imageOriginal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_hash");
    openapiFields.add("image_1024");
    openapiFields.add("image_192");
    openapiFields.add("image_24");
    openapiFields.add("image_32");
    openapiFields.add("image_48");
    openapiFields.add("image_512");
    openapiFields.add("image_72");
    openapiFields.add("image_original");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatar_hash");
    openapiRequiredFields.add("image_1024");
    openapiRequiredFields.add("image_192");
    openapiRequiredFields.add("image_24");
    openapiRequiredFields.add("image_32");
    openapiRequiredFields.add("image_48");
    openapiRequiredFields.add("image_512");
    openapiRequiredFields.add("image_72");
    openapiRequiredFields.add("image_original");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersSetPhotoSchemaProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersSetPhotoSchemaProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersSetPhotoSchemaProfile is not found in the empty JSON string", UsersSetPhotoSchemaProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersSetPhotoSchemaProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersSetPhotoSchemaProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersSetPhotoSchemaProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("avatar_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_hash").toString()));
      }
      if (!jsonObj.get("image_1024").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_1024` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_1024").toString()));
      }
      if (!jsonObj.get("image_192").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_192` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_192").toString()));
      }
      if (!jsonObj.get("image_24").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_24` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_24").toString()));
      }
      if (!jsonObj.get("image_32").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_32` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_32").toString()));
      }
      if (!jsonObj.get("image_48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_48").toString()));
      }
      if (!jsonObj.get("image_512").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_512` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_512").toString()));
      }
      if (!jsonObj.get("image_72").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_72` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_72").toString()));
      }
      if (!jsonObj.get("image_original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_original").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersSetPhotoSchemaProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersSetPhotoSchemaProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersSetPhotoSchemaProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersSetPhotoSchemaProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersSetPhotoSchemaProfile>() {
           @Override
           public void write(JsonWriter out, UsersSetPhotoSchemaProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersSetPhotoSchemaProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersSetPhotoSchemaProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersSetPhotoSchemaProfile
   * @throws IOException if the JSON string is invalid with respect to UsersSetPhotoSchemaProfile
   */
  public static UsersSetPhotoSchemaProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersSetPhotoSchemaProfile.class);
  }

  /**
   * Convert an instance of UsersSetPhotoSchemaProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

