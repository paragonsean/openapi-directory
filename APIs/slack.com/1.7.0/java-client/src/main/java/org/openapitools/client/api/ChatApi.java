/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ChatDeleteErrorSchema;
import org.openapitools.client.model.ChatDeleteScheduledMessageErrorSchema;
import org.openapitools.client.model.ChatDeleteScheduledMessageSchema;
import org.openapitools.client.model.ChatDeleteSuccessSchema;
import org.openapitools.client.model.ChatGetPermalinkErrorSchema;
import org.openapitools.client.model.ChatGetPermalinkSuccessSchema;
import org.openapitools.client.model.ChatMeMessageErrorSchema;
import org.openapitools.client.model.ChatMeMessageSchema;
import org.openapitools.client.model.ChatPostEphemeralErrorSchema;
import org.openapitools.client.model.ChatPostEphemeralSuccessSchema;
import org.openapitools.client.model.ChatPostMessageErrorSchema;
import org.openapitools.client.model.ChatPostMessageSuccessSchema;
import org.openapitools.client.model.ChatScheduleMessageErrorSchema;
import org.openapitools.client.model.ChatScheduleMessageSuccessSchema;
import org.openapitools.client.model.ChatScheduledMessagesListErrorSchema;
import org.openapitools.client.model.ChatScheduledMessagesListSchema;
import org.openapitools.client.model.ChatUnfurlErrorSchema;
import org.openapitools.client.model.ChatUnfurlSuccessSchema;
import org.openapitools.client.model.ChatUpdateErrorSchema;
import org.openapitools.client.model.ChatUpdateSuccessSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChatApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chatDelete
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.delete"> Documentation</a>
     */
    public okhttp3.Call chatDeleteCall(String token, Boolean asUser, String channel, BigDecimal ts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatDeleteValidateBeforeCall(String token, Boolean asUser, String channel, BigDecimal ts, final ApiCallback _callback) throws ApiException {
        return chatDeleteCall(token, asUser, channel, ts, _callback);

    }

    /**
     * 
     * Deletes a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @return ChatDeleteSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.delete"> Documentation</a>
     */
    public ChatDeleteSuccessSchema chatDelete(String token, Boolean asUser, String channel, BigDecimal ts) throws ApiException {
        ApiResponse<ChatDeleteSuccessSchema> localVarResp = chatDeleteWithHttpInfo(token, asUser, channel, ts);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @return ApiResponse&lt;ChatDeleteSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.delete"> Documentation</a>
     */
    public ApiResponse<ChatDeleteSuccessSchema> chatDeleteWithHttpInfo(String token, Boolean asUser, String channel, BigDecimal ts) throws ApiException {
        okhttp3.Call localVarCall = chatDeleteValidateBeforeCall(token, asUser, channel, ts, null);
        Type localVarReturnType = new TypeToken<ChatDeleteSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.delete"> Documentation</a>
     */
    public okhttp3.Call chatDeleteAsync(String token, Boolean asUser, String channel, BigDecimal ts, final ApiCallback<ChatDeleteSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatDeleteValidateBeforeCall(token, asUser, channel, ts, _callback);
        Type localVarReturnType = new TypeToken<ChatDeleteSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatDeleteScheduledMessage
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel The channel the scheduled_message is posting to (required)
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if no message is found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.deleteScheduledMessage"> Documentation</a>
     */
    public okhttp3.Call chatDeleteScheduledMessageCall(String token, String channel, String scheduledMessageId, Boolean asUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.deleteScheduledMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (scheduledMessageId != null) {
            localVarFormParams.put("scheduled_message_id", scheduledMessageId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatDeleteScheduledMessageValidateBeforeCall(String token, String channel, String scheduledMessageId, Boolean asUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatDeleteScheduledMessage(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatDeleteScheduledMessage(Async)");
        }

        // verify the required parameter 'scheduledMessageId' is set
        if (scheduledMessageId == null) {
            throw new ApiException("Missing the required parameter 'scheduledMessageId' when calling chatDeleteScheduledMessage(Async)");
        }

        return chatDeleteScheduledMessageCall(token, channel, scheduledMessageId, asUser, _callback);

    }

    /**
     * 
     * Deletes a pending scheduled message from the queue.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel The channel the scheduled_message is posting to (required)
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @return ChatDeleteScheduledMessageSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if no message is found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.deleteScheduledMessage"> Documentation</a>
     */
    public ChatDeleteScheduledMessageSchema chatDeleteScheduledMessage(String token, String channel, String scheduledMessageId, Boolean asUser) throws ApiException {
        ApiResponse<ChatDeleteScheduledMessageSchema> localVarResp = chatDeleteScheduledMessageWithHttpInfo(token, channel, scheduledMessageId, asUser);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a pending scheduled message from the queue.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel The channel the scheduled_message is posting to (required)
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @return ApiResponse&lt;ChatDeleteScheduledMessageSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if no message is found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.deleteScheduledMessage"> Documentation</a>
     */
    public ApiResponse<ChatDeleteScheduledMessageSchema> chatDeleteScheduledMessageWithHttpInfo(String token, String channel, String scheduledMessageId, Boolean asUser) throws ApiException {
        okhttp3.Call localVarCall = chatDeleteScheduledMessageValidateBeforeCall(token, channel, scheduledMessageId, asUser, null);
        Type localVarReturnType = new TypeToken<ChatDeleteScheduledMessageSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a pending scheduled message from the queue.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel The channel the scheduled_message is posting to (required)
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if no message is found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.deleteScheduledMessage"> Documentation</a>
     */
    public okhttp3.Call chatDeleteScheduledMessageAsync(String token, String channel, String scheduledMessageId, Boolean asUser, final ApiCallback<ChatDeleteScheduledMessageSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatDeleteScheduledMessageValidateBeforeCall(token, channel, scheduledMessageId, asUser, _callback);
        Type localVarReturnType = new TypeToken<ChatDeleteScheduledMessageSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatGetPermalink
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param channel The ID of the conversation or channel containing the message (required)
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response when channel cannot be found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.getPermalink"> Documentation</a>
     */
    public okhttp3.Call chatGetPermalinkCall(String token, String channel, String messageTs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.getPermalink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (messageTs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("message_ts", messageTs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatGetPermalinkValidateBeforeCall(String token, String channel, String messageTs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatGetPermalink(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatGetPermalink(Async)");
        }

        // verify the required parameter 'messageTs' is set
        if (messageTs == null) {
            throw new ApiException("Missing the required parameter 'messageTs' when calling chatGetPermalink(Async)");
        }

        return chatGetPermalinkCall(token, channel, messageTs, _callback);

    }

    /**
     * 
     * Retrieve a permalink URL for a specific extant message
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param channel The ID of the conversation or channel containing the message (required)
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @return ChatGetPermalinkSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response when channel cannot be found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.getPermalink"> Documentation</a>
     */
    public ChatGetPermalinkSuccessSchema chatGetPermalink(String token, String channel, String messageTs) throws ApiException {
        ApiResponse<ChatGetPermalinkSuccessSchema> localVarResp = chatGetPermalinkWithHttpInfo(token, channel, messageTs);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a permalink URL for a specific extant message
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param channel The ID of the conversation or channel containing the message (required)
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @return ApiResponse&lt;ChatGetPermalinkSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response when channel cannot be found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.getPermalink"> Documentation</a>
     */
    public ApiResponse<ChatGetPermalinkSuccessSchema> chatGetPermalinkWithHttpInfo(String token, String channel, String messageTs) throws ApiException {
        okhttp3.Call localVarCall = chatGetPermalinkValidateBeforeCall(token, channel, messageTs, null);
        Type localVarReturnType = new TypeToken<ChatGetPermalinkSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a permalink URL for a specific extant message
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param channel The ID of the conversation or channel containing the message (required)
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response when channel cannot be found </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.getPermalink"> Documentation</a>
     */
    public okhttp3.Call chatGetPermalinkAsync(String token, String channel, String messageTs, final ApiCallback<ChatGetPermalinkSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatGetPermalinkValidateBeforeCall(token, channel, messageTs, _callback);
        Type localVarReturnType = new TypeToken<ChatGetPermalinkSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatMeMessage
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.meMessage"> Documentation</a>
     */
    public okhttp3.Call chatMeMessageCall(String token, String channel, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.meMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatMeMessageValidateBeforeCall(String token, String channel, String text, final ApiCallback _callback) throws ApiException {
        return chatMeMessageCall(token, channel, text, _callback);

    }

    /**
     * 
     * Share a me message into a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @return ChatMeMessageSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.meMessage"> Documentation</a>
     */
    public ChatMeMessageSchema chatMeMessage(String token, String channel, String text) throws ApiException {
        ApiResponse<ChatMeMessageSchema> localVarResp = chatMeMessageWithHttpInfo(token, channel, text);
        return localVarResp.getData();
    }

    /**
     * 
     * Share a me message into a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @return ApiResponse&lt;ChatMeMessageSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.meMessage"> Documentation</a>
     */
    public ApiResponse<ChatMeMessageSchema> chatMeMessageWithHttpInfo(String token, String channel, String text) throws ApiException {
        okhttp3.Call localVarCall = chatMeMessageValidateBeforeCall(token, channel, text, null);
        Type localVarReturnType = new TypeToken<ChatMeMessageSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Share a me message into a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.meMessage"> Documentation</a>
     */
    public okhttp3.Call chatMeMessageAsync(String token, String channel, String text, final ApiCallback<ChatMeMessageSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatMeMessageValidateBeforeCall(token, channel, text, _callback);
        Type localVarReturnType = new TypeToken<ChatMeMessageSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatPostEphemeral
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postEphemeral"> Documentation</a>
     */
    public okhttp3.Call chatPostEphemeralCall(String token, String channel, String user, Boolean asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, String parse, String text, String threadTs, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.postEphemeral";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (blocks != null) {
            localVarFormParams.put("blocks", blocks);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (iconEmoji != null) {
            localVarFormParams.put("icon_emoji", iconEmoji);
        }

        if (iconUrl != null) {
            localVarFormParams.put("icon_url", iconUrl);
        }

        if (linkNames != null) {
            localVarFormParams.put("link_names", linkNames);
        }

        if (parse != null) {
            localVarFormParams.put("parse", parse);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (threadTs != null) {
            localVarFormParams.put("thread_ts", threadTs);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatPostEphemeralValidateBeforeCall(String token, String channel, String user, Boolean asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, String parse, String text, String threadTs, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatPostEphemeral(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatPostEphemeral(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling chatPostEphemeral(Async)");
        }

        return chatPostEphemeralCall(token, channel, user, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, parse, text, threadTs, username, _callback);

    }

    /**
     * 
     * Sends an ephemeral message to a user in a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ChatPostEphemeralSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postEphemeral"> Documentation</a>
     */
    public ChatPostEphemeralSuccessSchema chatPostEphemeral(String token, String channel, String user, Boolean asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, String parse, String text, String threadTs, String username) throws ApiException {
        ApiResponse<ChatPostEphemeralSuccessSchema> localVarResp = chatPostEphemeralWithHttpInfo(token, channel, user, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, parse, text, threadTs, username);
        return localVarResp.getData();
    }

    /**
     * 
     * Sends an ephemeral message to a user in a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ApiResponse&lt;ChatPostEphemeralSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postEphemeral"> Documentation</a>
     */
    public ApiResponse<ChatPostEphemeralSuccessSchema> chatPostEphemeralWithHttpInfo(String token, String channel, String user, Boolean asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, String parse, String text, String threadTs, String username) throws ApiException {
        okhttp3.Call localVarCall = chatPostEphemeralValidateBeforeCall(token, channel, user, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, parse, text, threadTs, username, null);
        Type localVarReturnType = new TypeToken<ChatPostEphemeralSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sends an ephemeral message to a user in a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postEphemeral"> Documentation</a>
     */
    public okhttp3.Call chatPostEphemeralAsync(String token, String channel, String user, Boolean asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, String parse, String text, String threadTs, String username, final ApiCallback<ChatPostEphemeralSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatPostEphemeralValidateBeforeCall(token, channel, user, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, parse, text, threadTs, username, _callback);
        Type localVarReturnType = new TypeToken<ChatPostEphemeralSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatPostMessage
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if too many attachments are included </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postMessage"> Documentation</a>
     */
    public okhttp3.Call chatPostMessageCall(String token, String channel, String asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, Boolean mrkdwn, String parse, Boolean replyBroadcast, String text, String threadTs, Boolean unfurlLinks, Boolean unfurlMedia, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.postMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (blocks != null) {
            localVarFormParams.put("blocks", blocks);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (iconEmoji != null) {
            localVarFormParams.put("icon_emoji", iconEmoji);
        }

        if (iconUrl != null) {
            localVarFormParams.put("icon_url", iconUrl);
        }

        if (linkNames != null) {
            localVarFormParams.put("link_names", linkNames);
        }

        if (mrkdwn != null) {
            localVarFormParams.put("mrkdwn", mrkdwn);
        }

        if (parse != null) {
            localVarFormParams.put("parse", parse);
        }

        if (replyBroadcast != null) {
            localVarFormParams.put("reply_broadcast", replyBroadcast);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (threadTs != null) {
            localVarFormParams.put("thread_ts", threadTs);
        }

        if (unfurlLinks != null) {
            localVarFormParams.put("unfurl_links", unfurlLinks);
        }

        if (unfurlMedia != null) {
            localVarFormParams.put("unfurl_media", unfurlMedia);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatPostMessageValidateBeforeCall(String token, String channel, String asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, Boolean mrkdwn, String parse, Boolean replyBroadcast, String text, String threadTs, Boolean unfurlLinks, Boolean unfurlMedia, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatPostMessage(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatPostMessage(Async)");
        }

        return chatPostMessageCall(token, channel, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, mrkdwn, parse, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, username, _callback);

    }

    /**
     * 
     * Sends a message to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ChatPostMessageSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if too many attachments are included </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postMessage"> Documentation</a>
     */
    public ChatPostMessageSuccessSchema chatPostMessage(String token, String channel, String asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, Boolean mrkdwn, String parse, Boolean replyBroadcast, String text, String threadTs, Boolean unfurlLinks, Boolean unfurlMedia, String username) throws ApiException {
        ApiResponse<ChatPostMessageSuccessSchema> localVarResp = chatPostMessageWithHttpInfo(token, channel, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, mrkdwn, parse, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, username);
        return localVarResp.getData();
    }

    /**
     * 
     * Sends a message to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ApiResponse&lt;ChatPostMessageSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if too many attachments are included </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postMessage"> Documentation</a>
     */
    public ApiResponse<ChatPostMessageSuccessSchema> chatPostMessageWithHttpInfo(String token, String channel, String asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, Boolean mrkdwn, String parse, Boolean replyBroadcast, String text, String threadTs, Boolean unfurlLinks, Boolean unfurlMedia, String username) throws ApiException {
        okhttp3.Call localVarCall = chatPostMessageValidateBeforeCall(token, channel, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, mrkdwn, parse, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, username, null);
        Type localVarReturnType = new TypeToken<ChatPostMessageSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sends a message to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if too many attachments are included </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.postMessage"> Documentation</a>
     */
    public okhttp3.Call chatPostMessageAsync(String token, String channel, String asUser, String attachments, String blocks, String iconEmoji, String iconUrl, Boolean linkNames, Boolean mrkdwn, String parse, Boolean replyBroadcast, String text, String threadTs, Boolean unfurlLinks, Boolean unfurlMedia, String username, final ApiCallback<ChatPostMessageSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatPostMessageValidateBeforeCall(token, channel, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, mrkdwn, parse, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, username, _callback);
        Type localVarReturnType = new TypeToken<ChatPostMessageSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatScheduleMessage
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the &#x60;post_at&#x60; is invalid (ex. in the past or too far into the future) </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduleMessage"> Documentation</a>
     */
    public okhttp3.Call chatScheduleMessageCall(String token, Boolean asUser, String attachments, String blocks, String channel, Boolean linkNames, String parse, String postAt, Boolean replyBroadcast, String text, BigDecimal threadTs, Boolean unfurlLinks, Boolean unfurlMedia, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.scheduleMessage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (blocks != null) {
            localVarFormParams.put("blocks", blocks);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (linkNames != null) {
            localVarFormParams.put("link_names", linkNames);
        }

        if (parse != null) {
            localVarFormParams.put("parse", parse);
        }

        if (postAt != null) {
            localVarFormParams.put("post_at", postAt);
        }

        if (replyBroadcast != null) {
            localVarFormParams.put("reply_broadcast", replyBroadcast);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (threadTs != null) {
            localVarFormParams.put("thread_ts", threadTs);
        }

        if (unfurlLinks != null) {
            localVarFormParams.put("unfurl_links", unfurlLinks);
        }

        if (unfurlMedia != null) {
            localVarFormParams.put("unfurl_media", unfurlMedia);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatScheduleMessageValidateBeforeCall(String token, Boolean asUser, String attachments, String blocks, String channel, Boolean linkNames, String parse, String postAt, Boolean replyBroadcast, String text, BigDecimal threadTs, Boolean unfurlLinks, Boolean unfurlMedia, final ApiCallback _callback) throws ApiException {
        return chatScheduleMessageCall(token, asUser, attachments, blocks, channel, linkNames, parse, postAt, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, _callback);

    }

    /**
     * 
     * Schedules a message to be sent to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @return ChatScheduleMessageSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the &#x60;post_at&#x60; is invalid (ex. in the past or too far into the future) </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduleMessage"> Documentation</a>
     */
    public ChatScheduleMessageSuccessSchema chatScheduleMessage(String token, Boolean asUser, String attachments, String blocks, String channel, Boolean linkNames, String parse, String postAt, Boolean replyBroadcast, String text, BigDecimal threadTs, Boolean unfurlLinks, Boolean unfurlMedia) throws ApiException {
        ApiResponse<ChatScheduleMessageSuccessSchema> localVarResp = chatScheduleMessageWithHttpInfo(token, asUser, attachments, blocks, channel, linkNames, parse, postAt, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia);
        return localVarResp.getData();
    }

    /**
     * 
     * Schedules a message to be sent to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @return ApiResponse&lt;ChatScheduleMessageSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the &#x60;post_at&#x60; is invalid (ex. in the past or too far into the future) </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduleMessage"> Documentation</a>
     */
    public ApiResponse<ChatScheduleMessageSuccessSchema> chatScheduleMessageWithHttpInfo(String token, Boolean asUser, String attachments, String blocks, String channel, Boolean linkNames, String parse, String postAt, Boolean replyBroadcast, String text, BigDecimal threadTs, Boolean unfurlLinks, Boolean unfurlMedia) throws ApiException {
        okhttp3.Call localVarCall = chatScheduleMessageValidateBeforeCall(token, asUser, attachments, blocks, channel, linkNames, parse, postAt, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, null);
        Type localVarReturnType = new TypeToken<ChatScheduleMessageSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Schedules a message to be sent to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the &#x60;post_at&#x60; is invalid (ex. in the past or too far into the future) </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduleMessage"> Documentation</a>
     */
    public okhttp3.Call chatScheduleMessageAsync(String token, Boolean asUser, String attachments, String blocks, String channel, Boolean linkNames, String parse, String postAt, Boolean replyBroadcast, String text, BigDecimal threadTs, Boolean unfurlLinks, Boolean unfurlMedia, final ApiCallback<ChatScheduleMessageSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatScheduleMessageValidateBeforeCall(token, asUser, attachments, blocks, channel, linkNames, parse, postAt, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, _callback);
        Type localVarReturnType = new TypeToken<ChatScheduleMessageSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatScheduledMessagesList_0
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the channel passed is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduledMessages.list"> Documentation</a>
     */
    public okhttp3.Call chatScheduledMessagesList_0Call(String token, String channel, BigDecimal latest, BigDecimal oldest, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.scheduledMessages.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (latest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest", latest));
        }

        if (oldest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oldest", oldest));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatScheduledMessagesList_0ValidateBeforeCall(String token, String channel, BigDecimal latest, BigDecimal oldest, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return chatScheduledMessagesList_0Call(token, channel, latest, oldest, limit, cursor, _callback);

    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ChatScheduledMessagesListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the channel passed is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduledMessages.list"> Documentation</a>
     */
    public ChatScheduledMessagesListSchema chatScheduledMessagesList_0(String token, String channel, BigDecimal latest, BigDecimal oldest, Integer limit, String cursor) throws ApiException {
        ApiResponse<ChatScheduledMessagesListSchema> localVarResp = chatScheduledMessagesList_0WithHttpInfo(token, channel, latest, oldest, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ApiResponse&lt;ChatScheduledMessagesListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the channel passed is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduledMessages.list"> Documentation</a>
     */
    public ApiResponse<ChatScheduledMessagesListSchema> chatScheduledMessagesList_0WithHttpInfo(String token, String channel, BigDecimal latest, BigDecimal oldest, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = chatScheduledMessagesList_0ValidateBeforeCall(token, channel, latest, oldest, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ChatScheduledMessagesListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the channel passed is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.scheduledMessages.list"> Documentation</a>
     */
    public okhttp3.Call chatScheduledMessagesList_0Async(String token, String channel, BigDecimal latest, BigDecimal oldest, Integer limit, String cursor, final ApiCallback<ChatScheduledMessagesListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatScheduledMessagesList_0ValidateBeforeCall(token, channel, latest, oldest, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ChatScheduledMessagesListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatUnfurl
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param channel Channel ID of the message (required)
     * @param ts Timestamp of the message to add unfurl behavior to. (required)
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical, minimal success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.unfurl"> Documentation</a>
     */
    public okhttp3.Call chatUnfurlCall(String token, String channel, String ts, String unfurls, String userAuthMessage, Boolean userAuthRequired, String userAuthUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.unfurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        if (unfurls != null) {
            localVarFormParams.put("unfurls", unfurls);
        }

        if (userAuthMessage != null) {
            localVarFormParams.put("user_auth_message", userAuthMessage);
        }

        if (userAuthRequired != null) {
            localVarFormParams.put("user_auth_required", userAuthRequired);
        }

        if (userAuthUrl != null) {
            localVarFormParams.put("user_auth_url", userAuthUrl);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatUnfurlValidateBeforeCall(String token, String channel, String ts, String unfurls, String userAuthMessage, Boolean userAuthRequired, String userAuthUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatUnfurl(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatUnfurl(Async)");
        }

        // verify the required parameter 'ts' is set
        if (ts == null) {
            throw new ApiException("Missing the required parameter 'ts' when calling chatUnfurl(Async)");
        }

        return chatUnfurlCall(token, channel, ts, unfurls, userAuthMessage, userAuthRequired, userAuthUrl, _callback);

    }

    /**
     * 
     * Provide custom unfurl behavior for user-posted URLs
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param channel Channel ID of the message (required)
     * @param ts Timestamp of the message to add unfurl behavior to. (required)
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @return ChatUnfurlSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical, minimal success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.unfurl"> Documentation</a>
     */
    public ChatUnfurlSuccessSchema chatUnfurl(String token, String channel, String ts, String unfurls, String userAuthMessage, Boolean userAuthRequired, String userAuthUrl) throws ApiException {
        ApiResponse<ChatUnfurlSuccessSchema> localVarResp = chatUnfurlWithHttpInfo(token, channel, ts, unfurls, userAuthMessage, userAuthRequired, userAuthUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Provide custom unfurl behavior for user-posted URLs
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param channel Channel ID of the message (required)
     * @param ts Timestamp of the message to add unfurl behavior to. (required)
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @return ApiResponse&lt;ChatUnfurlSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical, minimal success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.unfurl"> Documentation</a>
     */
    public ApiResponse<ChatUnfurlSuccessSchema> chatUnfurlWithHttpInfo(String token, String channel, String ts, String unfurls, String userAuthMessage, Boolean userAuthRequired, String userAuthUrl) throws ApiException {
        okhttp3.Call localVarCall = chatUnfurlValidateBeforeCall(token, channel, ts, unfurls, userAuthMessage, userAuthRequired, userAuthUrl, null);
        Type localVarReturnType = new TypeToken<ChatUnfurlSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provide custom unfurl behavior for user-posted URLs
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param channel Channel ID of the message (required)
     * @param ts Timestamp of the message to add unfurl behavior to. (required)
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical, minimal success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.unfurl"> Documentation</a>
     */
    public okhttp3.Call chatUnfurlAsync(String token, String channel, String ts, String unfurls, String userAuthMessage, Boolean userAuthRequired, String userAuthUrl, final ApiCallback<ChatUnfurlSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatUnfurlValidateBeforeCall(token, channel, ts, unfurls, userAuthMessage, userAuthRequired, userAuthUrl, _callback);
        Type localVarReturnType = new TypeToken<ChatUnfurlSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chatUpdate
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel containing the message to be updated. (required)
     * @param ts Timestamp of the message to be updated. (required)
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.update"> Documentation</a>
     */
    public okhttp3.Call chatUpdateCall(String token, String channel, String ts, String asUser, String attachments, String blocks, String linkNames, String parse, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chat.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asUser != null) {
            localVarFormParams.put("as_user", asUser);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (blocks != null) {
            localVarFormParams.put("blocks", blocks);
        }

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (linkNames != null) {
            localVarFormParams.put("link_names", linkNames);
        }

        if (parse != null) {
            localVarFormParams.put("parse", parse);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (ts != null) {
            localVarFormParams.put("ts", ts);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chatUpdateValidateBeforeCall(String token, String channel, String ts, String asUser, String attachments, String blocks, String linkNames, String parse, String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling chatUpdate(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling chatUpdate(Async)");
        }

        // verify the required parameter 'ts' is set
        if (ts == null) {
            throw new ApiException("Missing the required parameter 'ts' when calling chatUpdate(Async)");
        }

        return chatUpdateCall(token, channel, ts, asUser, attachments, blocks, linkNames, parse, text, _callback);

    }

    /**
     * 
     * Updates a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel containing the message to be updated. (required)
     * @param ts Timestamp of the message to be updated. (required)
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @return ChatUpdateSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.update"> Documentation</a>
     */
    public ChatUpdateSuccessSchema chatUpdate(String token, String channel, String ts, String asUser, String attachments, String blocks, String linkNames, String parse, String text) throws ApiException {
        ApiResponse<ChatUpdateSuccessSchema> localVarResp = chatUpdateWithHttpInfo(token, channel, ts, asUser, attachments, blocks, linkNames, parse, text);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel containing the message to be updated. (required)
     * @param ts Timestamp of the message to be updated. (required)
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @return ApiResponse&lt;ChatUpdateSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.update"> Documentation</a>
     */
    public ApiResponse<ChatUpdateSuccessSchema> chatUpdateWithHttpInfo(String token, String channel, String ts, String asUser, String attachments, String blocks, String linkNames, String parse, String text) throws ApiException {
        okhttp3.Call localVarCall = chatUpdateValidateBeforeCall(token, channel, ts, asUser, attachments, blocks, linkNames, parse, text, null);
        Type localVarReturnType = new TypeToken<ChatUpdateSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param channel Channel containing the message to be updated. (required)
     * @param ts Timestamp of the message to be updated. (required)
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/chat.update"> Documentation</a>
     */
    public okhttp3.Call chatUpdateAsync(String token, String channel, String ts, String asUser, String attachments, String blocks, String linkNames, String parse, String text, final ApiCallback<ChatUpdateSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = chatUpdateValidateBeforeCall(token, channel, ts, asUser, attachments, blocks, linkNames, parse, text, _callback);
        Type localVarReturnType = new TypeToken<ChatUpdateSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
