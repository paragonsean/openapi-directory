/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ReactionsAddErrorSchema;
import org.openapitools.client.model.ReactionsAddSchema;
import org.openapitools.client.model.ReactionsGetErrorSchema;
import org.openapitools.client.model.ReactionsGetSuccessSchemaInner;
import org.openapitools.client.model.ReactionsListErrorSchema;
import org.openapitools.client.model.ReactionsListSchema;
import org.openapitools.client.model.ReactionsRemoveErrorSchema;
import org.openapitools.client.model.ReactionsRemoveSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reactionsAdd
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param channel Channel where the message to add reaction to was posted. (required)
     * @param name Reaction (emoji) name. (required)
     * @param timestamp Timestamp of the message to add reaction to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.add"> Documentation</a>
     */
    public okhttp3.Call reactionsAddCall(String token, String channel, String name, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsAddValidateBeforeCall(String token, String channel, String name, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reactionsAdd(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling reactionsAdd(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling reactionsAdd(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling reactionsAdd(Async)");
        }

        return reactionsAddCall(token, channel, name, timestamp, _callback);

    }

    /**
     * 
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param channel Channel where the message to add reaction to was posted. (required)
     * @param name Reaction (emoji) name. (required)
     * @param timestamp Timestamp of the message to add reaction to. (required)
     * @return ReactionsAddSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.add"> Documentation</a>
     */
    public ReactionsAddSchema reactionsAdd(String token, String channel, String name, String timestamp) throws ApiException {
        ApiResponse<ReactionsAddSchema> localVarResp = reactionsAddWithHttpInfo(token, channel, name, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param channel Channel where the message to add reaction to was posted. (required)
     * @param name Reaction (emoji) name. (required)
     * @param timestamp Timestamp of the message to add reaction to. (required)
     * @return ApiResponse&lt;ReactionsAddSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.add"> Documentation</a>
     */
    public ApiResponse<ReactionsAddSchema> reactionsAddWithHttpInfo(String token, String channel, String name, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = reactionsAddValidateBeforeCall(token, channel, name, timestamp, null);
        Type localVarReturnType = new TypeToken<ReactionsAddSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param channel Channel where the message to add reaction to was posted. (required)
     * @param name Reaction (emoji) name. (required)
     * @param timestamp Timestamp of the message to add reaction to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.add"> Documentation</a>
     */
    public okhttp3.Call reactionsAddAsync(String token, String channel, String name, String timestamp, final ApiCallback<ReactionsAddSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsAddValidateBeforeCall(token, channel, name, timestamp, _callback);
        Type localVarReturnType = new TypeToken<ReactionsAddSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsGet
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param _file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.get"> Documentation</a>
     */
    public okhttp3.Call reactionsGetCall(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (fileComment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_comment", fileComment));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsGetValidateBeforeCall(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reactionsGet(Async)");
        }

        return reactionsGetCall(token, channel, _file, fileComment, full, timestamp, _callback);

    }

    /**
     * 
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param _file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @return List&lt;ReactionsGetSuccessSchemaInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.get"> Documentation</a>
     */
    public List<ReactionsGetSuccessSchemaInner> reactionsGet(String token, String channel, String _file, String fileComment, Boolean full, String timestamp) throws ApiException {
        ApiResponse<List<ReactionsGetSuccessSchemaInner>> localVarResp = reactionsGetWithHttpInfo(token, channel, _file, fileComment, full, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param _file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @return ApiResponse&lt;List&lt;ReactionsGetSuccessSchemaInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.get"> Documentation</a>
     */
    public ApiResponse<List<ReactionsGetSuccessSchemaInner>> reactionsGetWithHttpInfo(String token, String channel, String _file, String fileComment, Boolean full, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = reactionsGetValidateBeforeCall(token, channel, _file, fileComment, full, timestamp, null);
        Type localVarReturnType = new TypeToken<List<ReactionsGetSuccessSchemaInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param _file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.get"> Documentation</a>
     */
    public okhttp3.Call reactionsGetAsync(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback<List<ReactionsGetSuccessSchemaInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsGetValidateBeforeCall(token, channel, _file, fileComment, full, timestamp, _callback);
        Type localVarReturnType = new TypeToken<List<ReactionsGetSuccessSchemaInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsList
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.list"> Documentation</a>
     */
    public okhttp3.Call reactionsListCall(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsListValidateBeforeCall(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reactionsList(Async)");
        }

        return reactionsListCall(token, user, full, count, page, cursor, limit, _callback);

    }

    /**
     * 
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ReactionsListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.list"> Documentation</a>
     */
    public ReactionsListSchema reactionsList(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit) throws ApiException {
        ApiResponse<ReactionsListSchema> localVarResp = reactionsListWithHttpInfo(token, user, full, count, page, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ApiResponse&lt;ReactionsListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.list"> Documentation</a>
     */
    public ApiResponse<ReactionsListSchema> reactionsListWithHttpInfo(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = reactionsListValidateBeforeCall(token, user, full, count, page, cursor, limit, null);
        Type localVarReturnType = new TypeToken<ReactionsListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.list"> Documentation</a>
     */
    public okhttp3.Call reactionsListAsync(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback<ReactionsListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsListValidateBeforeCall(token, user, full, count, page, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ReactionsListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reactionsRemove
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param name Reaction (emoji) name. (required)
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param _file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.remove"> Documentation</a>
     */
    public okhttp3.Call reactionsRemoveCall(String token, String name, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileComment != null) {
            localVarFormParams.put("file_comment", fileComment);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactionsRemoveValidateBeforeCall(String token, String name, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling reactionsRemove(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling reactionsRemove(Async)");
        }

        return reactionsRemoveCall(token, name, channel, _file, fileComment, timestamp, _callback);

    }

    /**
     * 
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param name Reaction (emoji) name. (required)
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param _file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @return ReactionsRemoveSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.remove"> Documentation</a>
     */
    public ReactionsRemoveSchema reactionsRemove(String token, String name, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        ApiResponse<ReactionsRemoveSchema> localVarResp = reactionsRemoveWithHttpInfo(token, name, channel, _file, fileComment, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param name Reaction (emoji) name. (required)
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param _file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @return ApiResponse&lt;ReactionsRemoveSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.remove"> Documentation</a>
     */
    public ApiResponse<ReactionsRemoveSchema> reactionsRemoveWithHttpInfo(String token, String name, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = reactionsRemoveValidateBeforeCall(token, name, channel, _file, fileComment, timestamp, null);
        Type localVarReturnType = new TypeToken<ReactionsRemoveSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param name Reaction (emoji) name. (required)
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param _file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.remove"> Documentation</a>
     */
    public okhttp3.Call reactionsRemoveAsync(String token, String name, String channel, String _file, String fileComment, String timestamp, final ApiCallback<ReactionsRemoveSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactionsRemoveValidateBeforeCall(token, name, channel, _file, fileComment, timestamp, _callback);
        Type localVarReturnType = new TypeToken<ReactionsRemoveSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
