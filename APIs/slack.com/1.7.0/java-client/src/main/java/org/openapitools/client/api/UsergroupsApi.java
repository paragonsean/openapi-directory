/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UsergroupsCreateErrorSchema;
import org.openapitools.client.model.UsergroupsCreateSchema;
import org.openapitools.client.model.UsergroupsDisableErrorSchema;
import org.openapitools.client.model.UsergroupsDisableSchema;
import org.openapitools.client.model.UsergroupsEnableErrorSchema;
import org.openapitools.client.model.UsergroupsEnableSchema;
import org.openapitools.client.model.UsergroupsListErrorSchema;
import org.openapitools.client.model.UsergroupsListSchema;
import org.openapitools.client.model.UsergroupsUpdateErrorSchema;
import org.openapitools.client.model.UsergroupsUpdateSchema;
import org.openapitools.client.model.UsergroupsUsersListErrorSchema;
import org.openapitools.client.model.UsergroupsUsersListSchema;
import org.openapitools.client.model.UsergroupsUsersUpdateErrorSchema;
import org.openapitools.client.model.UsergroupsUsersUpdateSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsergroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsergroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsergroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usergroupsCreate
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param name A name for the User Group. Must be unique among User Groups. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.create"> Documentation</a>
     */
    public okhttp3.Call usergroupsCreateCall(String token, String name, String channels, String description, String handle, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (handle != null) {
            localVarFormParams.put("handle", handle);
        }

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsCreateValidateBeforeCall(String token, String name, String channels, String description, String handle, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsCreate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling usergroupsCreate(Async)");
        }

        return usergroupsCreateCall(token, name, channels, description, handle, includeCount, _callback);

    }

    /**
     * 
     * Create a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param name A name for the User Group. Must be unique among User Groups. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @return UsergroupsCreateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.create"> Documentation</a>
     */
    public UsergroupsCreateSchema usergroupsCreate(String token, String name, String channels, String description, String handle, Boolean includeCount) throws ApiException {
        ApiResponse<UsergroupsCreateSchema> localVarResp = usergroupsCreateWithHttpInfo(token, name, channels, description, handle, includeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param name A name for the User Group. Must be unique among User Groups. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @return ApiResponse&lt;UsergroupsCreateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.create"> Documentation</a>
     */
    public ApiResponse<UsergroupsCreateSchema> usergroupsCreateWithHttpInfo(String token, String name, String channels, String description, String handle, Boolean includeCount) throws ApiException {
        okhttp3.Call localVarCall = usergroupsCreateValidateBeforeCall(token, name, channels, description, handle, includeCount, null);
        Type localVarReturnType = new TypeToken<UsergroupsCreateSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param name A name for the User Group. Must be unique among User Groups. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.create"> Documentation</a>
     */
    public okhttp3.Call usergroupsCreateAsync(String token, String name, String channels, String description, String handle, Boolean includeCount, final ApiCallback<UsergroupsCreateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsCreateValidateBeforeCall(token, name, channels, description, handle, includeCount, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsCreateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsDisable
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to disable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.disable"> Documentation</a>
     */
    public okhttp3.Call usergroupsDisableCall(String token, String usergroup, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsDisableValidateBeforeCall(String token, String usergroup, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsDisable(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling usergroupsDisable(Async)");
        }

        return usergroupsDisableCall(token, usergroup, includeCount, _callback);

    }

    /**
     * 
     * Disable an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to disable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return UsergroupsDisableSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.disable"> Documentation</a>
     */
    public UsergroupsDisableSchema usergroupsDisable(String token, String usergroup, Boolean includeCount) throws ApiException {
        ApiResponse<UsergroupsDisableSchema> localVarResp = usergroupsDisableWithHttpInfo(token, usergroup, includeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Disable an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to disable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return ApiResponse&lt;UsergroupsDisableSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.disable"> Documentation</a>
     */
    public ApiResponse<UsergroupsDisableSchema> usergroupsDisableWithHttpInfo(String token, String usergroup, Boolean includeCount) throws ApiException {
        okhttp3.Call localVarCall = usergroupsDisableValidateBeforeCall(token, usergroup, includeCount, null);
        Type localVarReturnType = new TypeToken<UsergroupsDisableSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disable an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to disable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.disable"> Documentation</a>
     */
    public okhttp3.Call usergroupsDisableAsync(String token, String usergroup, Boolean includeCount, final ApiCallback<UsergroupsDisableSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsDisableValidateBeforeCall(token, usergroup, includeCount, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsDisableSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsEnable
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to enable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.enable"> Documentation</a>
     */
    public okhttp3.Call usergroupsEnableCall(String token, String usergroup, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsEnableValidateBeforeCall(String token, String usergroup, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsEnable(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling usergroupsEnable(Async)");
        }

        return usergroupsEnableCall(token, usergroup, includeCount, _callback);

    }

    /**
     * 
     * Enable a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to enable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return UsergroupsEnableSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.enable"> Documentation</a>
     */
    public UsergroupsEnableSchema usergroupsEnable(String token, String usergroup, Boolean includeCount) throws ApiException {
        ApiResponse<UsergroupsEnableSchema> localVarResp = usergroupsEnableWithHttpInfo(token, usergroup, includeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Enable a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to enable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return ApiResponse&lt;UsergroupsEnableSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.enable"> Documentation</a>
     */
    public ApiResponse<UsergroupsEnableSchema> usergroupsEnableWithHttpInfo(String token, String usergroup, Boolean includeCount) throws ApiException {
        okhttp3.Call localVarCall = usergroupsEnableValidateBeforeCall(token, usergroup, includeCount, null);
        Type localVarReturnType = new TypeToken<UsergroupsEnableSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enable a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to enable. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.enable"> Documentation</a>
     */
    public okhttp3.Call usergroupsEnableAsync(String token, String usergroup, Boolean includeCount, final ApiCallback<UsergroupsEnableSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsEnableValidateBeforeCall(token, usergroup, includeCount, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsEnableSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsList
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param includeUsers Include the list of users for each User Group. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param includeDisabled Include disabled User Groups. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.list"> Documentation</a>
     */
    public okhttp3.Call usergroupsListCall(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_users", includeUsers));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_count", includeCount));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsListValidateBeforeCall(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsList(Async)");
        }

        return usergroupsListCall(token, includeUsers, includeCount, includeDisabled, _callback);

    }

    /**
     * 
     * List all User Groups for a team
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param includeUsers Include the list of users for each User Group. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param includeDisabled Include disabled User Groups. (optional)
     * @return UsergroupsListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.list"> Documentation</a>
     */
    public UsergroupsListSchema usergroupsList(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled) throws ApiException {
        ApiResponse<UsergroupsListSchema> localVarResp = usergroupsListWithHttpInfo(token, includeUsers, includeCount, includeDisabled);
        return localVarResp.getData();
    }

    /**
     * 
     * List all User Groups for a team
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param includeUsers Include the list of users for each User Group. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param includeDisabled Include disabled User Groups. (optional)
     * @return ApiResponse&lt;UsergroupsListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.list"> Documentation</a>
     */
    public ApiResponse<UsergroupsListSchema> usergroupsListWithHttpInfo(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = usergroupsListValidateBeforeCall(token, includeUsers, includeCount, includeDisabled, null);
        Type localVarReturnType = new TypeToken<UsergroupsListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all User Groups for a team
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param includeUsers Include the list of users for each User Group. (optional)
     * @param includeCount Include the number of users in each User Group. (optional)
     * @param includeDisabled Include disabled User Groups. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.list"> Documentation</a>
     */
    public okhttp3.Call usergroupsListAsync(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback<UsergroupsListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsListValidateBeforeCall(token, includeUsers, includeCount, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsUpdate
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param name A name for the User Group. Must be unique among User Groups. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.update"> Documentation</a>
     */
    public okhttp3.Call usergroupsUpdateCall(String token, String usergroup, String channels, String description, String handle, Boolean includeCount, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (handle != null) {
            localVarFormParams.put("handle", handle);
        }

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsUpdateValidateBeforeCall(String token, String usergroup, String channels, String description, String handle, Boolean includeCount, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsUpdate(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling usergroupsUpdate(Async)");
        }

        return usergroupsUpdateCall(token, usergroup, channels, description, handle, includeCount, name, _callback);

    }

    /**
     * 
     * Update an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param name A name for the User Group. Must be unique among User Groups. (optional)
     * @return UsergroupsUpdateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.update"> Documentation</a>
     */
    public UsergroupsUpdateSchema usergroupsUpdate(String token, String usergroup, String channels, String description, String handle, Boolean includeCount, String name) throws ApiException {
        ApiResponse<UsergroupsUpdateSchema> localVarResp = usergroupsUpdateWithHttpInfo(token, usergroup, channels, description, handle, includeCount, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param name A name for the User Group. Must be unique among User Groups. (optional)
     * @return ApiResponse&lt;UsergroupsUpdateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.update"> Documentation</a>
     */
    public ApiResponse<UsergroupsUpdateSchema> usergroupsUpdateWithHttpInfo(String token, String usergroup, String channels, String description, String handle, Boolean includeCount, String name) throws ApiException {
        okhttp3.Call localVarCall = usergroupsUpdateValidateBeforeCall(token, usergroup, channels, description, handle, includeCount, name, null);
        Type localVarReturnType = new TypeToken<UsergroupsUpdateSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param description A short description of the User Group. (optional)
     * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param name A name for the User Group. Must be unique among User Groups. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.update"> Documentation</a>
     */
    public okhttp3.Call usergroupsUpdateAsync(String token, String usergroup, String channels, String description, String handle, Boolean includeCount, String name, final ApiCallback<UsergroupsUpdateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsUpdateValidateBeforeCall(token, usergroup, channels, description, handle, includeCount, name, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsUpdateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsUsersList_0
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param includeDisabled Allow results that involve disabled User Groups. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public okhttp3.Call usergroupsUsersList_0Call(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        if (usergroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup", usergroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsUsersList_0ValidateBeforeCall(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsUsersList_0(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling usergroupsUsersList_0(Async)");
        }

        return usergroupsUsersList_0Call(token, usergroup, includeDisabled, _callback);

    }

    /**
     * 
     * List all users in a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param includeDisabled Allow results that involve disabled User Groups. (optional)
     * @return UsergroupsUsersListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public UsergroupsUsersListSchema usergroupsUsersList_0(String token, String usergroup, Boolean includeDisabled) throws ApiException {
        ApiResponse<UsergroupsUsersListSchema> localVarResp = usergroupsUsersList_0WithHttpInfo(token, usergroup, includeDisabled);
        return localVarResp.getData();
    }

    /**
     * 
     * List all users in a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param includeDisabled Allow results that involve disabled User Groups. (optional)
     * @return ApiResponse&lt;UsergroupsUsersListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public ApiResponse<UsergroupsUsersListSchema> usergroupsUsersList_0WithHttpInfo(String token, String usergroup, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = usergroupsUsersList_0ValidateBeforeCall(token, usergroup, includeDisabled, null);
        Type localVarReturnType = new TypeToken<UsergroupsUsersListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all users in a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param includeDisabled Allow results that involve disabled User Groups. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public okhttp3.Call usergroupsUsersList_0Async(String token, String usergroup, Boolean includeDisabled, final ApiCallback<UsergroupsUsersListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsUsersList_0ValidateBeforeCall(token, usergroup, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsUsersListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usergroupsUsersUpdate_0
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public okhttp3.Call usergroupsUsersUpdate_0Call(String token, String usergroup, String users, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.users.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usergroupsUsersUpdate_0ValidateBeforeCall(String token, String usergroup, String users, Boolean includeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usergroupsUsersUpdate_0(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling usergroupsUsersUpdate_0(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling usergroupsUsersUpdate_0(Async)");
        }

        return usergroupsUsersUpdate_0Call(token, usergroup, users, includeCount, _callback);

    }

    /**
     * 
     * Update the list of users for a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return UsergroupsUsersUpdateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public UsergroupsUsersUpdateSchema usergroupsUsersUpdate_0(String token, String usergroup, String users, Boolean includeCount) throws ApiException {
        ApiResponse<UsergroupsUsersUpdateSchema> localVarResp = usergroupsUsersUpdate_0WithHttpInfo(token, usergroup, users, includeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the list of users for a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @return ApiResponse&lt;UsergroupsUsersUpdateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public ApiResponse<UsergroupsUsersUpdateSchema> usergroupsUsersUpdate_0WithHttpInfo(String token, String usergroup, String users, Boolean includeCount) throws ApiException {
        okhttp3.Call localVarCall = usergroupsUsersUpdate_0ValidateBeforeCall(token, usergroup, users, includeCount, null);
        Type localVarReturnType = new TypeToken<UsergroupsUsersUpdateSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the list of users for a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param includeCount Include the number of users in the User Group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public okhttp3.Call usergroupsUsersUpdate_0Async(String token, String usergroup, String users, Boolean includeCount, final ApiCallback<UsergroupsUsersUpdateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usergroupsUsersUpdate_0ValidateBeforeCall(token, usergroup, users, includeCount, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsUsersUpdateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
