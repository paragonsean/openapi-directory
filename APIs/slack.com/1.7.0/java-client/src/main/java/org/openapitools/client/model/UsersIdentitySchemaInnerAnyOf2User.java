/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsersIdentitySchemaInnerAnyOf2User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsersIdentitySchemaInnerAnyOf2User {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE192 = "image_192";
  @SerializedName(SERIALIZED_NAME_IMAGE192)
  private String image192;

  public static final String SERIALIZED_NAME_IMAGE24 = "image_24";
  @SerializedName(SERIALIZED_NAME_IMAGE24)
  private String image24;

  public static final String SERIALIZED_NAME_IMAGE32 = "image_32";
  @SerializedName(SERIALIZED_NAME_IMAGE32)
  private String image32;

  public static final String SERIALIZED_NAME_IMAGE48 = "image_48";
  @SerializedName(SERIALIZED_NAME_IMAGE48)
  private String image48;

  public static final String SERIALIZED_NAME_IMAGE512 = "image_512";
  @SerializedName(SERIALIZED_NAME_IMAGE512)
  private String image512;

  public static final String SERIALIZED_NAME_IMAGE72 = "image_72";
  @SerializedName(SERIALIZED_NAME_IMAGE72)
  private String image72;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public UsersIdentitySchemaInnerAnyOf2User() {
  }

  public UsersIdentitySchemaInnerAnyOf2User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UsersIdentitySchemaInnerAnyOf2User image192(String image192) {
    this.image192 = image192;
    return this;
  }

  /**
   * Get image192
   * @return image192
   */
  @javax.annotation.Nonnull
  public String getImage192() {
    return image192;
  }

  public void setImage192(String image192) {
    this.image192 = image192;
  }


  public UsersIdentitySchemaInnerAnyOf2User image24(String image24) {
    this.image24 = image24;
    return this;
  }

  /**
   * Get image24
   * @return image24
   */
  @javax.annotation.Nonnull
  public String getImage24() {
    return image24;
  }

  public void setImage24(String image24) {
    this.image24 = image24;
  }


  public UsersIdentitySchemaInnerAnyOf2User image32(String image32) {
    this.image32 = image32;
    return this;
  }

  /**
   * Get image32
   * @return image32
   */
  @javax.annotation.Nonnull
  public String getImage32() {
    return image32;
  }

  public void setImage32(String image32) {
    this.image32 = image32;
  }


  public UsersIdentitySchemaInnerAnyOf2User image48(String image48) {
    this.image48 = image48;
    return this;
  }

  /**
   * Get image48
   * @return image48
   */
  @javax.annotation.Nonnull
  public String getImage48() {
    return image48;
  }

  public void setImage48(String image48) {
    this.image48 = image48;
  }


  public UsersIdentitySchemaInnerAnyOf2User image512(String image512) {
    this.image512 = image512;
    return this;
  }

  /**
   * Get image512
   * @return image512
   */
  @javax.annotation.Nonnull
  public String getImage512() {
    return image512;
  }

  public void setImage512(String image512) {
    this.image512 = image512;
  }


  public UsersIdentitySchemaInnerAnyOf2User image72(String image72) {
    this.image72 = image72;
    return this;
  }

  /**
   * Get image72
   * @return image72
   */
  @javax.annotation.Nonnull
  public String getImage72() {
    return image72;
  }

  public void setImage72(String image72) {
    this.image72 = image72;
  }


  public UsersIdentitySchemaInnerAnyOf2User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersIdentitySchemaInnerAnyOf2User usersIdentitySchemaInnerAnyOf2User = (UsersIdentitySchemaInnerAnyOf2User) o;
    return Objects.equals(this.id, usersIdentitySchemaInnerAnyOf2User.id) &&
        Objects.equals(this.image192, usersIdentitySchemaInnerAnyOf2User.image192) &&
        Objects.equals(this.image24, usersIdentitySchemaInnerAnyOf2User.image24) &&
        Objects.equals(this.image32, usersIdentitySchemaInnerAnyOf2User.image32) &&
        Objects.equals(this.image48, usersIdentitySchemaInnerAnyOf2User.image48) &&
        Objects.equals(this.image512, usersIdentitySchemaInnerAnyOf2User.image512) &&
        Objects.equals(this.image72, usersIdentitySchemaInnerAnyOf2User.image72) &&
        Objects.equals(this.name, usersIdentitySchemaInnerAnyOf2User.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, image192, image24, image32, image48, image512, image72, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersIdentitySchemaInnerAnyOf2User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image192: ").append(toIndentedString(image192)).append("\n");
    sb.append("    image24: ").append(toIndentedString(image24)).append("\n");
    sb.append("    image32: ").append(toIndentedString(image32)).append("\n");
    sb.append("    image48: ").append(toIndentedString(image48)).append("\n");
    sb.append("    image512: ").append(toIndentedString(image512)).append("\n");
    sb.append("    image72: ").append(toIndentedString(image72)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("image_192");
    openapiFields.add("image_24");
    openapiFields.add("image_32");
    openapiFields.add("image_48");
    openapiFields.add("image_512");
    openapiFields.add("image_72");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("image_192");
    openapiRequiredFields.add("image_24");
    openapiRequiredFields.add("image_32");
    openapiRequiredFields.add("image_48");
    openapiRequiredFields.add("image_512");
    openapiRequiredFields.add("image_72");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsersIdentitySchemaInnerAnyOf2User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsersIdentitySchemaInnerAnyOf2User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersIdentitySchemaInnerAnyOf2User is not found in the empty JSON string", UsersIdentitySchemaInnerAnyOf2User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsersIdentitySchemaInnerAnyOf2User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsersIdentitySchemaInnerAnyOf2User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersIdentitySchemaInnerAnyOf2User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("image_192").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_192` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_192").toString()));
      }
      if (!jsonObj.get("image_24").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_24` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_24").toString()));
      }
      if (!jsonObj.get("image_32").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_32` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_32").toString()));
      }
      if (!jsonObj.get("image_48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_48").toString()));
      }
      if (!jsonObj.get("image_512").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_512` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_512").toString()));
      }
      if (!jsonObj.get("image_72").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_72` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_72").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersIdentitySchemaInnerAnyOf2User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersIdentitySchemaInnerAnyOf2User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersIdentitySchemaInnerAnyOf2User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersIdentitySchemaInnerAnyOf2User.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersIdentitySchemaInnerAnyOf2User>() {
           @Override
           public void write(JsonWriter out, UsersIdentitySchemaInnerAnyOf2User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersIdentitySchemaInnerAnyOf2User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsersIdentitySchemaInnerAnyOf2User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsersIdentitySchemaInnerAnyOf2User
   * @throws IOException if the JSON string is invalid with respect to UsersIdentitySchemaInnerAnyOf2User
   */
  public static UsersIdentitySchemaInnerAnyOf2User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersIdentitySchemaInnerAnyOf2User.class);
  }

  /**
   * Convert an instance of UsersIdentitySchemaInnerAnyOf2User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

