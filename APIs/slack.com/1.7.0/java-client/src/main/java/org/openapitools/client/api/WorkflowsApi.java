/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkflowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workflowsStepCompleted
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepCompleted"> Documentation</a>
     */
    public okhttp3.Call workflowsStepCompletedCall(String token, String workflowStepExecuteId, String outputs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.stepCompleted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepExecuteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_execute_id", workflowStepExecuteId));
        }

        if (outputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputs", outputs));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsStepCompletedValidateBeforeCall(String token, String workflowStepExecuteId, String outputs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling workflowsStepCompleted(Async)");
        }

        // verify the required parameter 'workflowStepExecuteId' is set
        if (workflowStepExecuteId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepExecuteId' when calling workflowsStepCompleted(Async)");
        }

        return workflowsStepCompletedCall(token, workflowStepExecuteId, outputs, _callback);

    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepCompleted"> Documentation</a>
     */
    public DefaultSuccessTemplate workflowsStepCompleted(String token, String workflowStepExecuteId, String outputs) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = workflowsStepCompletedWithHttpInfo(token, workflowStepExecuteId, outputs);
        return localVarResp.getData();
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepCompleted"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> workflowsStepCompletedWithHttpInfo(String token, String workflowStepExecuteId, String outputs) throws ApiException {
        okhttp3.Call localVarCall = workflowsStepCompletedValidateBeforeCall(token, workflowStepExecuteId, outputs, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepCompleted"> Documentation</a>
     */
    public okhttp3.Call workflowsStepCompletedAsync(String token, String workflowStepExecuteId, String outputs, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsStepCompletedValidateBeforeCall(token, workflowStepExecuteId, outputs, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsStepFailed
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepFailed"> Documentation</a>
     */
    public okhttp3.Call workflowsStepFailedCall(String token, String workflowStepExecuteId, String error, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.stepFailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepExecuteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_execute_id", workflowStepExecuteId));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsStepFailedValidateBeforeCall(String token, String workflowStepExecuteId, String error, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling workflowsStepFailed(Async)");
        }

        // verify the required parameter 'workflowStepExecuteId' is set
        if (workflowStepExecuteId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepExecuteId' when calling workflowsStepFailed(Async)");
        }

        // verify the required parameter 'error' is set
        if (error == null) {
            throw new ApiException("Missing the required parameter 'error' when calling workflowsStepFailed(Async)");
        }

        return workflowsStepFailedCall(token, workflowStepExecuteId, error, _callback);

    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepFailed"> Documentation</a>
     */
    public DefaultSuccessTemplate workflowsStepFailed(String token, String workflowStepExecuteId, String error) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = workflowsStepFailedWithHttpInfo(token, workflowStepExecuteId, error);
        return localVarResp.getData();
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepFailed"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> workflowsStepFailedWithHttpInfo(String token, String workflowStepExecuteId, String error) throws ApiException {
        okhttp3.Call localVarCall = workflowsStepFailedValidateBeforeCall(token, workflowStepExecuteId, error, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepFailed"> Documentation</a>
     */
    public okhttp3.Call workflowsStepFailedAsync(String token, String workflowStepExecuteId, String error, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsStepFailedValidateBeforeCall(token, workflowStepExecuteId, error, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsUpdateStep
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;. (required)
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.updateStep"> Documentation</a>
     */
    public okhttp3.Call workflowsUpdateStepCall(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.updateStep";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepEditId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_edit_id", workflowStepEditId));
        }

        if (inputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputs", inputs));
        }

        if (outputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputs", outputs));
        }

        if (stepName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step_name", stepName));
        }

        if (stepImageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step_image_url", stepImageUrl));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsUpdateStepValidateBeforeCall(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling workflowsUpdateStep(Async)");
        }

        // verify the required parameter 'workflowStepEditId' is set
        if (workflowStepEditId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepEditId' when calling workflowsUpdateStep(Async)");
        }

        return workflowsUpdateStepCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);

    }

    /**
     * 
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;. (required)
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.updateStep"> Documentation</a>
     */
    public DefaultSuccessTemplate workflowsUpdateStep(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = workflowsUpdateStepWithHttpInfo(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;. (required)
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.updateStep"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> workflowsUpdateStepWithHttpInfo(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl) throws ApiException {
        okhttp3.Call localVarCall = workflowsUpdateStepValidateBeforeCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;. (required)
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.updateStep"> Documentation</a>
     */
    public okhttp3.Call workflowsUpdateStepAsync(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsUpdateStepValidateBeforeCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
