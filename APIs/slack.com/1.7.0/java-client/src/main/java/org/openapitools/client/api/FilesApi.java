/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;
import org.openapitools.client.model.FilesCommentsDeleteErrorSchema;
import org.openapitools.client.model.FilesCommentsDeleteSchema;
import org.openapitools.client.model.FilesDeleteErrorSchema;
import org.openapitools.client.model.FilesDeleteSchema;
import org.openapitools.client.model.FilesInfoErrorSchema;
import org.openapitools.client.model.FilesInfoSchema;
import org.openapitools.client.model.FilesListErrorSchema;
import org.openapitools.client.model.FilesListSchema;
import org.openapitools.client.model.FilesRevokePublicURLErrorSchema;
import org.openapitools.client.model.FilesRevokePublicURLSchema;
import org.openapitools.client.model.FilesSharedPublicURLErrorSchema;
import org.openapitools.client.model.FilesSharedPublicURLSchema;
import org.openapitools.client.model.FilesUploadErrorSchema;
import org.openapitools.client.model.FilesUploadSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filesCommentsDelete_0
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to delete a comment from. (optional)
     * @param id The comment to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.comments.delete"> Documentation</a>
     */
    public okhttp3.Call filesCommentsDelete_0Call(String token, String _file, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.comments.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesCommentsDelete_0ValidateBeforeCall(String token, String _file, String id, final ApiCallback _callback) throws ApiException {
        return filesCommentsDelete_0Call(token, _file, id, _callback);

    }

    /**
     * 
     * Deletes an existing comment on a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to delete a comment from. (optional)
     * @param id The comment to delete. (optional)
     * @return FilesCommentsDeleteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.comments.delete"> Documentation</a>
     */
    public FilesCommentsDeleteSchema filesCommentsDelete_0(String token, String _file, String id) throws ApiException {
        ApiResponse<FilesCommentsDeleteSchema> localVarResp = filesCommentsDelete_0WithHttpInfo(token, _file, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing comment on a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to delete a comment from. (optional)
     * @param id The comment to delete. (optional)
     * @return ApiResponse&lt;FilesCommentsDeleteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.comments.delete"> Documentation</a>
     */
    public ApiResponse<FilesCommentsDeleteSchema> filesCommentsDelete_0WithHttpInfo(String token, String _file, String id) throws ApiException {
        okhttp3.Call localVarCall = filesCommentsDelete_0ValidateBeforeCall(token, _file, id, null);
        Type localVarReturnType = new TypeToken<FilesCommentsDeleteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing comment on a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to delete a comment from. (optional)
     * @param id The comment to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.comments.delete"> Documentation</a>
     */
    public okhttp3.Call filesCommentsDelete_0Async(String token, String _file, String id, final ApiCallback<FilesCommentsDeleteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesCommentsDelete_0ValidateBeforeCall(token, _file, id, _callback);
        Type localVarReturnType = new TypeToken<FilesCommentsDeleteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesDelete
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file ID of file to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.delete"> Documentation</a>
     */
    public okhttp3.Call filesDeleteCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesDeleteValidateBeforeCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        return filesDeleteCall(token, _file, _callback);

    }

    /**
     * 
     * Deletes a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file ID of file to delete. (optional)
     * @return FilesDeleteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.delete"> Documentation</a>
     */
    public FilesDeleteSchema filesDelete(String token, String _file) throws ApiException {
        ApiResponse<FilesDeleteSchema> localVarResp = filesDeleteWithHttpInfo(token, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file ID of file to delete. (optional)
     * @return ApiResponse&lt;FilesDeleteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.delete"> Documentation</a>
     */
    public ApiResponse<FilesDeleteSchema> filesDeleteWithHttpInfo(String token, String _file) throws ApiException {
        okhttp3.Call localVarCall = filesDeleteValidateBeforeCall(token, _file, null);
        Type localVarReturnType = new TypeToken<FilesDeleteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a file.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file ID of file to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.delete"> Documentation</a>
     */
    public okhttp3.Call filesDeleteAsync(String token, String _file, final ApiCallback<FilesDeleteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesDeleteValidateBeforeCall(token, _file, _callback);
        Type localVarReturnType = new TypeToken<FilesDeleteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesInfo
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.info"> Documentation</a>
     */
    public okhttp3.Call filesInfoCall(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesInfoValidateBeforeCall(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return filesInfoCall(token, _file, count, page, limit, cursor, _callback);

    }

    /**
     * 
     * Gets information about a file.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details. (optional)
     * @return FilesInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.info"> Documentation</a>
     */
    public FilesInfoSchema filesInfo(String token, String _file, String count, String page, Integer limit, String cursor) throws ApiException {
        ApiResponse<FilesInfoSchema> localVarResp = filesInfoWithHttpInfo(token, _file, count, page, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a file.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details. (optional)
     * @return ApiResponse&lt;FilesInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.info"> Documentation</a>
     */
    public ApiResponse<FilesInfoSchema> filesInfoWithHttpInfo(String token, String _file, String count, String page, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = filesInfoValidateBeforeCall(token, _file, count, page, limit, cursor, null);
        Type localVarReturnType = new TypeToken<FilesInfoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a file.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.info"> Documentation</a>
     */
    public okhttp3.Call filesInfoAsync(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback<FilesInfoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesInfoValidateBeforeCall(token, _file, count, page, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<FilesInfoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesList
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param user Filter files created by a single user. (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param showFilesHiddenByLimit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.list"> Documentation</a>
     */
    public okhttp3.Call filesListCall(String token, String user, String channel, BigDecimal tsFrom, BigDecimal tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_from", tsFrom));
        }

        if (tsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_to", tsTo));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (showFilesHiddenByLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_files_hidden_by_limit", showFilesHiddenByLimit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesListValidateBeforeCall(String token, String user, String channel, BigDecimal tsFrom, BigDecimal tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback _callback) throws ApiException {
        return filesListCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);

    }

    /**
     * 
     * List for a team, in a channel, or from a user with applied filters.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param user Filter files created by a single user. (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param showFilesHiddenByLimit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. (optional)
     * @return FilesListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.list"> Documentation</a>
     */
    public FilesListSchema filesList(String token, String user, String channel, BigDecimal tsFrom, BigDecimal tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit) throws ApiException {
        ApiResponse<FilesListSchema> localVarResp = filesListWithHttpInfo(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit);
        return localVarResp.getData();
    }

    /**
     * 
     * List for a team, in a channel, or from a user with applied filters.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param user Filter files created by a single user. (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param showFilesHiddenByLimit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. (optional)
     * @return ApiResponse&lt;FilesListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.list"> Documentation</a>
     */
    public ApiResponse<FilesListSchema> filesListWithHttpInfo(String token, String user, String channel, BigDecimal tsFrom, BigDecimal tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit) throws ApiException {
        okhttp3.Call localVarCall = filesListValidateBeforeCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, null);
        Type localVarReturnType = new TypeToken<FilesListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List for a team, in a channel, or from a user with applied filters.
     * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
     * @param user Filter files created by a single user. (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param showFilesHiddenByLimit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.list"> Documentation</a>
     */
    public okhttp3.Call filesListAsync(String token, String user, String channel, BigDecimal tsFrom, BigDecimal tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback<FilesListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesListValidateBeforeCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);
        Type localVarReturnType = new TypeToken<FilesListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteAdd_0
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public okhttp3.Call filesRemoteAdd_0Call(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteAdd_0ValidateBeforeCall(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteAdd_0Call(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, _callback);

    }

    /**
     * 
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteAdd_0(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteAdd_0WithHttpInfo(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteAdd_0WithHttpInfo(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteAdd_0ValidateBeforeCall(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public okhttp3.Call filesRemoteAdd_0Async(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteAdd_0ValidateBeforeCall(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteInfo_0
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public okhttp3.Call filesRemoteInfo_0Call(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteInfo_0ValidateBeforeCall(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        return filesRemoteInfo_0Call(token, _file, externalId, _callback);

    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteInfo_0(String token, String _file, String externalId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteInfo_0WithHttpInfo(token, _file, externalId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteInfo_0WithHttpInfo(String token, String _file, String externalId) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteInfo_0ValidateBeforeCall(token, _file, externalId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public okhttp3.Call filesRemoteInfo_0Async(String token, String _file, String externalId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteInfo_0ValidateBeforeCall(token, _file, externalId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteList_0
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public okhttp3.Call filesRemoteList_0Call(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_from", tsFrom));
        }

        if (tsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_to", tsTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteList_0ValidateBeforeCall(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return filesRemoteList_0Call(token, channel, tsFrom, tsTo, limit, cursor, _callback);

    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteList_0(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteList_0WithHttpInfo(token, channel, tsFrom, tsTo, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteList_0WithHttpInfo(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteList_0ValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public okhttp3.Call filesRemoteList_0Async(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteList_0ValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteRemove_0
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public okhttp3.Call filesRemoteRemove_0Call(String externalId, String _file, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteRemove_0ValidateBeforeCall(String externalId, String _file, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteRemove_0Call(externalId, _file, token, _callback);

    }

    /**
     * 
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteRemove_0(String externalId, String _file, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteRemove_0WithHttpInfo(externalId, _file, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteRemove_0WithHttpInfo(String externalId, String _file, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteRemove_0ValidateBeforeCall(externalId, _file, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public okhttp3.Call filesRemoteRemove_0Async(String externalId, String _file, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteRemove_0ValidateBeforeCall(externalId, _file, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteShare_0
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public okhttp3.Call filesRemoteShare_0Call(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (channels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channels", channels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteShare_0ValidateBeforeCall(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        return filesRemoteShare_0Call(token, _file, externalId, channels, _callback);

    }

    /**
     * 
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteShare_0(String token, String _file, String externalId, String channels) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteShare_0WithHttpInfo(token, _file, externalId, channels);
        return localVarResp.getData();
    }

    /**
     * 
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteShare_0WithHttpInfo(String token, String _file, String externalId, String channels) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteShare_0ValidateBeforeCall(token, _file, externalId, channels, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public okhttp3.Call filesRemoteShare_0Async(String token, String _file, String externalId, String channels, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteShare_0ValidateBeforeCall(token, _file, externalId, channels, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteUpdate_0
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public okhttp3.Call filesRemoteUpdate_0Call(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteUpdate_0ValidateBeforeCall(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteUpdate_0Call(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, _callback);

    }

    /**
     * 
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteUpdate_0(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteUpdate_0WithHttpInfo(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteUpdate_0WithHttpInfo(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteUpdate_0ValidateBeforeCall(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public okhttp3.Call filesRemoteUpdate_0Async(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteUpdate_0ValidateBeforeCall(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRevokePublicURL
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to revoke (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.revokePublicURL"> Documentation</a>
     */
    public okhttp3.Call filesRevokePublicURLCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.revokePublicURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRevokePublicURLValidateBeforeCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        return filesRevokePublicURLCall(token, _file, _callback);

    }

    /**
     * 
     * Revokes public/external sharing access for a file
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to revoke (optional)
     * @return FilesRevokePublicURLSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.revokePublicURL"> Documentation</a>
     */
    public FilesRevokePublicURLSchema filesRevokePublicURL(String token, String _file) throws ApiException {
        ApiResponse<FilesRevokePublicURLSchema> localVarResp = filesRevokePublicURLWithHttpInfo(token, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * Revokes public/external sharing access for a file
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to revoke (optional)
     * @return ApiResponse&lt;FilesRevokePublicURLSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.revokePublicURL"> Documentation</a>
     */
    public ApiResponse<FilesRevokePublicURLSchema> filesRevokePublicURLWithHttpInfo(String token, String _file) throws ApiException {
        okhttp3.Call localVarCall = filesRevokePublicURLValidateBeforeCall(token, _file, null);
        Type localVarReturnType = new TypeToken<FilesRevokePublicURLSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revokes public/external sharing access for a file
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to revoke (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.revokePublicURL"> Documentation</a>
     */
    public okhttp3.Call filesRevokePublicURLAsync(String token, String _file, final ApiCallback<FilesRevokePublicURLSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRevokePublicURLValidateBeforeCall(token, _file, _callback);
        Type localVarReturnType = new TypeToken<FilesRevokePublicURLSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesSharedPublicURL
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to share (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.sharedPublicURL"> Documentation</a>
     */
    public okhttp3.Call filesSharedPublicURLCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.sharedPublicURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesSharedPublicURLValidateBeforeCall(String token, String _file, final ApiCallback _callback) throws ApiException {
        return filesSharedPublicURLCall(token, _file, _callback);

    }

    /**
     * 
     * Enables a file for public/external sharing.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to share (optional)
     * @return FilesSharedPublicURLSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.sharedPublicURL"> Documentation</a>
     */
    public FilesSharedPublicURLSchema filesSharedPublicURL(String token, String _file) throws ApiException {
        ApiResponse<FilesSharedPublicURLSchema> localVarResp = filesSharedPublicURLWithHttpInfo(token, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables a file for public/external sharing.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to share (optional)
     * @return ApiResponse&lt;FilesSharedPublicURLSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.sharedPublicURL"> Documentation</a>
     */
    public ApiResponse<FilesSharedPublicURLSchema> filesSharedPublicURLWithHttpInfo(String token, String _file) throws ApiException {
        okhttp3.Call localVarCall = filesSharedPublicURLValidateBeforeCall(token, _file, null);
        Type localVarReturnType = new TypeToken<FilesSharedPublicURLSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables a file for public/external sharing.
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _file File to share (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.sharedPublicURL"> Documentation</a>
     */
    public okhttp3.Call filesSharedPublicURLAsync(String token, String _file, final ApiCallback<FilesSharedPublicURLSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesSharedPublicURLValidateBeforeCall(token, _file, _callback);
        Type localVarReturnType = new TypeToken<FilesSharedPublicURLSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesUpload
     * @param channels Comma-separated list of channel names or IDs where the file will be shared. (optional)
     * @param content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;. (optional)
     * @param _file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;. (optional)
     * @param filename Filename of file. (optional)
     * @param filetype A [file type](/types/file#file_types) identifier. (optional)
     * @param initialComment The message text introducing the file in specified &#x60;channels&#x60;. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param title Title of file. (optional)
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.upload"> Documentation</a>
     */
    public okhttp3.Call filesUploadCall(String channels, String content, String _file, String filename, String filetype, String initialComment, BigDecimal threadTs, String title, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (initialComment != null) {
            localVarFormParams.put("initial_comment", initialComment);
        }

        if (threadTs != null) {
            localVarFormParams.put("thread_ts", threadTs);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesUploadValidateBeforeCall(String channels, String content, String _file, String filename, String filetype, String initialComment, BigDecimal threadTs, String title, String token, final ApiCallback _callback) throws ApiException {
        return filesUploadCall(channels, content, _file, filename, filetype, initialComment, threadTs, title, token, _callback);

    }

    /**
     * 
     * Uploads or creates a file.
     * @param channels Comma-separated list of channel names or IDs where the file will be shared. (optional)
     * @param content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;. (optional)
     * @param _file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;. (optional)
     * @param filename Filename of file. (optional)
     * @param filetype A [file type](/types/file#file_types) identifier. (optional)
     * @param initialComment The message text introducing the file in specified &#x60;channels&#x60;. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param title Title of file. (optional)
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @return FilesUploadSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.upload"> Documentation</a>
     */
    public FilesUploadSchema filesUpload(String channels, String content, String _file, String filename, String filetype, String initialComment, BigDecimal threadTs, String title, String token) throws ApiException {
        ApiResponse<FilesUploadSchema> localVarResp = filesUploadWithHttpInfo(channels, content, _file, filename, filetype, initialComment, threadTs, title, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Uploads or creates a file.
     * @param channels Comma-separated list of channel names or IDs where the file will be shared. (optional)
     * @param content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;. (optional)
     * @param _file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;. (optional)
     * @param filename Filename of file. (optional)
     * @param filetype A [file type](/types/file#file_types) identifier. (optional)
     * @param initialComment The message text introducing the file in specified &#x60;channels&#x60;. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param title Title of file. (optional)
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @return ApiResponse&lt;FilesUploadSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.upload"> Documentation</a>
     */
    public ApiResponse<FilesUploadSchema> filesUploadWithHttpInfo(String channels, String content, String _file, String filename, String filetype, String initialComment, BigDecimal threadTs, String title, String token) throws ApiException {
        okhttp3.Call localVarCall = filesUploadValidateBeforeCall(channels, content, _file, filename, filetype, initialComment, threadTs, title, token, null);
        Type localVarReturnType = new TypeToken<FilesUploadSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Uploads or creates a file.
     * @param channels Comma-separated list of channel names or IDs where the file will be shared. (optional)
     * @param content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;. (optional)
     * @param _file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;. (optional)
     * @param filename Filename of file. (optional)
     * @param filetype A [file type](/types/file#file_types) identifier. (optional)
     * @param initialComment The message text introducing the file in specified &#x60;channels&#x60;. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param title Title of file. (optional)
     * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.upload"> Documentation</a>
     */
    public okhttp3.Call filesUploadAsync(String channels, String content, String _file, String filename, String filetype, String initialComment, BigDecimal threadTs, String title, String token, final ApiCallback<FilesUploadSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesUploadValidateBeforeCall(channels, content, _file, filename, filetype, initialComment, threadTs, title, token, _callback);
        Type localVarReturnType = new TypeToken<FilesUploadSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
