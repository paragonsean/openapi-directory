/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIMethodUsersGetPresence;
import org.openapitools.client.model.UsersConversationsErrorSchema;
import org.openapitools.client.model.UsersConversationsSuccessSchema;
import org.openapitools.client.model.UsersCountsErrorSchema;
import org.openapitools.client.model.UsersDeletePhotoErrorSchema;
import org.openapitools.client.model.UsersDeletePhotoSchema;
import org.openapitools.client.model.UsersIdentityErrorSchema;
import org.openapitools.client.model.UsersIdentitySchemaInner;
import org.openapitools.client.model.UsersInfoErrorSchema;
import org.openapitools.client.model.UsersInfoSuccessSchema;
import org.openapitools.client.model.UsersListErrorSchema;
import org.openapitools.client.model.UsersListSchema;
import org.openapitools.client.model.UsersLookupByEmailErrorSchema;
import org.openapitools.client.model.UsersLookupByEmailSuccessSchema;
import org.openapitools.client.model.UsersProfileGetErrorSchema;
import org.openapitools.client.model.UsersProfileGetSchema;
import org.openapitools.client.model.UsersProfileSetErrorSchema;
import org.openapitools.client.model.UsersProfileSetSchema;
import org.openapitools.client.model.UsersSetActiveErrorSchema;
import org.openapitools.client.model.UsersSetActiveSchema;
import org.openapitools.client.model.UsersSetPhotoErrorSchema;
import org.openapitools.client.model.UsersSetPhotoSchema;
import org.openapitools.client.model.UsersSetPresenceErrorSchema;
import org.openapitools.client.model.UsersSetPresenceSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for usersConversations
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.conversations"> Documentation</a>
     */
    public okhttp3.Call usersConversationsCall(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (excludeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_archived", excludeArchived));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersConversationsValidateBeforeCall(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return usersConversationsCall(token, user, types, excludeArchived, limit, cursor, _callback);

    }

    /**
     * 
     * List conversations the calling user may access.
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return UsersConversationsSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.conversations"> Documentation</a>
     */
    public UsersConversationsSuccessSchema usersConversations(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor) throws ApiException {
        ApiResponse<UsersConversationsSuccessSchema> localVarResp = usersConversationsWithHttpInfo(token, user, types, excludeArchived, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * List conversations the calling user may access.
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return ApiResponse&lt;UsersConversationsSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.conversations"> Documentation</a>
     */
    public ApiResponse<UsersConversationsSuccessSchema> usersConversationsWithHttpInfo(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = usersConversationsValidateBeforeCall(token, user, types, excludeArchived, limit, cursor, null);
        Type localVarReturnType = new TypeToken<UsersConversationsSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List conversations the calling user may access.
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.conversations"> Documentation</a>
     */
    public okhttp3.Call usersConversationsAsync(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback<UsersConversationsSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersConversationsValidateBeforeCall(token, user, types, excludeArchived, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<UsersConversationsSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersDeletePhoto
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.deletePhoto"> Documentation</a>
     */
    public okhttp3.Call usersDeletePhotoCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.deletePhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersDeletePhotoValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersDeletePhoto(Async)");
        }

        return usersDeletePhotoCall(token, _callback);

    }

    /**
     * 
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @return UsersDeletePhotoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.deletePhoto"> Documentation</a>
     */
    public UsersDeletePhotoSchema usersDeletePhoto(String token) throws ApiException {
        ApiResponse<UsersDeletePhotoSchema> localVarResp = usersDeletePhotoWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @return ApiResponse&lt;UsersDeletePhotoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.deletePhoto"> Documentation</a>
     */
    public ApiResponse<UsersDeletePhotoSchema> usersDeletePhotoWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = usersDeletePhotoValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<UsersDeletePhotoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.deletePhoto"> Documentation</a>
     */
    public okhttp3.Call usersDeletePhotoAsync(String token, final ApiCallback<UsersDeletePhotoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersDeletePhotoValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<UsersDeletePhotoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetPresence
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.getPresence"> Documentation</a>
     */
    public okhttp3.Call usersGetPresenceCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.getPresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetPresenceValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersGetPresence(Async)");
        }

        return usersGetPresenceCall(token, user, _callback);

    }

    /**
     * 
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @return APIMethodUsersGetPresence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.getPresence"> Documentation</a>
     */
    public APIMethodUsersGetPresence usersGetPresence(String token, String user) throws ApiException {
        ApiResponse<APIMethodUsersGetPresence> localVarResp = usersGetPresenceWithHttpInfo(token, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @return ApiResponse&lt;APIMethodUsersGetPresence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.getPresence"> Documentation</a>
     */
    public ApiResponse<APIMethodUsersGetPresence> usersGetPresenceWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = usersGetPresenceValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<APIMethodUsersGetPresence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.getPresence"> Documentation</a>
     */
    public okhttp3.Call usersGetPresenceAsync(String token, String user, final ApiCallback<APIMethodUsersGetPresence> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetPresenceValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<APIMethodUsersGetPresence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersIdentity
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.identity"> Documentation</a>
     */
    public okhttp3.Call usersIdentityCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersIdentityValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        return usersIdentityCall(token, _callback);

    }

    /**
     * 
     * Get a user&#39;s identity.
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @return List&lt;UsersIdentitySchemaInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.identity"> Documentation</a>
     */
    public List<UsersIdentitySchemaInner> usersIdentity(String token) throws ApiException {
        ApiResponse<List<UsersIdentitySchemaInner>> localVarResp = usersIdentityWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a user&#39;s identity.
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @return ApiResponse&lt;List&lt;UsersIdentitySchemaInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.identity"> Documentation</a>
     */
    public ApiResponse<List<UsersIdentitySchemaInner>> usersIdentityWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = usersIdentityValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<UsersIdentitySchemaInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a user&#39;s identity.
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.identity"> Documentation</a>
     */
    public okhttp3.Call usersIdentityAsync(String token, final ApiCallback<List<UsersIdentitySchemaInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersIdentityValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<UsersIdentitySchemaInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersInfo
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.info"> Documentation</a>
     */
    public okhttp3.Call usersInfoCall(String token, Boolean includeLocale, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeLocale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_locale", includeLocale));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersInfoValidateBeforeCall(String token, Boolean includeLocale, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersInfo(Async)");
        }

        return usersInfoCall(token, includeLocale, user, _callback);

    }

    /**
     * 
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @return UsersInfoSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.info"> Documentation</a>
     */
    public UsersInfoSuccessSchema usersInfo(String token, Boolean includeLocale, String user) throws ApiException {
        ApiResponse<UsersInfoSuccessSchema> localVarResp = usersInfoWithHttpInfo(token, includeLocale, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @return ApiResponse&lt;UsersInfoSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.info"> Documentation</a>
     */
    public ApiResponse<UsersInfoSuccessSchema> usersInfoWithHttpInfo(String token, Boolean includeLocale, String user) throws ApiException {
        okhttp3.Call localVarCall = usersInfoValidateBeforeCall(token, includeLocale, user, null);
        Type localVarReturnType = new TypeToken<UsersInfoSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.info"> Documentation</a>
     */
    public okhttp3.Call usersInfoAsync(String token, Boolean includeLocale, String user, final ApiCallback<UsersInfoSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersInfoValidateBeforeCall(token, includeLocale, user, _callback);
        Type localVarReturnType = new TypeToken<UsersInfoSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersList
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.list"> Documentation</a>
     */
    public okhttp3.Call usersListCall(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (includeLocale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_locale", includeLocale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListValidateBeforeCall(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback _callback) throws ApiException {
        return usersListCall(token, limit, cursor, includeLocale, _callback);

    }

    /**
     * 
     * Lists all users in a Slack team.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @return UsersListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.list"> Documentation</a>
     */
    public UsersListSchema usersList(String token, Integer limit, String cursor, Boolean includeLocale) throws ApiException {
        ApiResponse<UsersListSchema> localVarResp = usersListWithHttpInfo(token, limit, cursor, includeLocale);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all users in a Slack team.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @return ApiResponse&lt;UsersListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.list"> Documentation</a>
     */
    public ApiResponse<UsersListSchema> usersListWithHttpInfo(String token, Integer limit, String cursor, Boolean includeLocale) throws ApiException {
        okhttp3.Call localVarCall = usersListValidateBeforeCall(token, limit, cursor, includeLocale, null);
        Type localVarReturnType = new TypeToken<UsersListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all users in a Slack team.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.list"> Documentation</a>
     */
    public okhttp3.Call usersListAsync(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback<UsersListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListValidateBeforeCall(token, limit, cursor, includeLocale, _callback);
        Type localVarReturnType = new TypeToken<UsersListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersLookupByEmail
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60; (required)
     * @param email An email address belonging to a user in the workspace (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.lookupByEmail"> Documentation</a>
     */
    public okhttp3.Call usersLookupByEmailCall(String token, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.lookupByEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersLookupByEmailValidateBeforeCall(String token, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersLookupByEmail(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling usersLookupByEmail(Async)");
        }

        return usersLookupByEmailCall(token, email, _callback);

    }

    /**
     * 
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60; (required)
     * @param email An email address belonging to a user in the workspace (required)
     * @return UsersLookupByEmailSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.lookupByEmail"> Documentation</a>
     */
    public UsersLookupByEmailSuccessSchema usersLookupByEmail(String token, String email) throws ApiException {
        ApiResponse<UsersLookupByEmailSuccessSchema> localVarResp = usersLookupByEmailWithHttpInfo(token, email);
        return localVarResp.getData();
    }

    /**
     * 
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60; (required)
     * @param email An email address belonging to a user in the workspace (required)
     * @return ApiResponse&lt;UsersLookupByEmailSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.lookupByEmail"> Documentation</a>
     */
    public ApiResponse<UsersLookupByEmailSuccessSchema> usersLookupByEmailWithHttpInfo(String token, String email) throws ApiException {
        okhttp3.Call localVarCall = usersLookupByEmailValidateBeforeCall(token, email, null);
        Type localVarReturnType = new TypeToken<UsersLookupByEmailSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60; (required)
     * @param email An email address belonging to a user in the workspace (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.lookupByEmail"> Documentation</a>
     */
    public okhttp3.Call usersLookupByEmailAsync(String token, String email, final ApiCallback<UsersLookupByEmailSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersLookupByEmailValidateBeforeCall(token, email, _callback);
        Type localVarReturnType = new TypeToken<UsersLookupByEmailSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersProfileGet_0
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public okhttp3.Call usersProfileGet_0Call(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.profile.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_labels", includeLabels));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersProfileGet_0ValidateBeforeCall(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersProfileGet_0(Async)");
        }

        return usersProfileGet_0Call(token, includeLabels, user, _callback);

    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return UsersProfileGetSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public UsersProfileGetSchema usersProfileGet_0(String token, Boolean includeLabels, String user) throws ApiException {
        ApiResponse<UsersProfileGetSchema> localVarResp = usersProfileGet_0WithHttpInfo(token, includeLabels, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return ApiResponse&lt;UsersProfileGetSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public ApiResponse<UsersProfileGetSchema> usersProfileGet_0WithHttpInfo(String token, Boolean includeLabels, String user) throws ApiException {
        okhttp3.Call localVarCall = usersProfileGet_0ValidateBeforeCall(token, includeLabels, user, null);
        Type localVarReturnType = new TypeToken<UsersProfileGetSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public okhttp3.Call usersProfileGet_0Async(String token, Boolean includeLabels, String user, final ApiCallback<UsersProfileGetSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersProfileGet_0ValidateBeforeCall(token, includeLabels, user, _callback);
        Type localVarReturnType = new TypeToken<UsersProfileGetSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersProfileSet_0
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public okhttp3.Call usersProfileSet_0Call(String token, String name, String profile, String user, String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.profile.set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (profile != null) {
            localVarFormParams.put("profile", profile);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersProfileSet_0ValidateBeforeCall(String token, String name, String profile, String user, String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersProfileSet_0(Async)");
        }

        return usersProfileSet_0Call(token, name, profile, user, value, _callback);

    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return UsersProfileSetSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public UsersProfileSetSchema usersProfileSet_0(String token, String name, String profile, String user, String value) throws ApiException {
        ApiResponse<UsersProfileSetSchema> localVarResp = usersProfileSet_0WithHttpInfo(token, name, profile, user, value);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return ApiResponse&lt;UsersProfileSetSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public ApiResponse<UsersProfileSetSchema> usersProfileSet_0WithHttpInfo(String token, String name, String profile, String user, String value) throws ApiException {
        okhttp3.Call localVarCall = usersProfileSet_0ValidateBeforeCall(token, name, profile, user, value, null);
        Type localVarReturnType = new TypeToken<UsersProfileSetSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public okhttp3.Call usersProfileSet_0Async(String token, String name, String profile, String user, String value, final ApiCallback<UsersProfileSetSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersProfileSet_0ValidateBeforeCall(token, name, profile, user, value, _callback);
        Type localVarReturnType = new TypeToken<UsersProfileSetSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSetActive
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setActive"> Documentation</a>
     */
    public okhttp3.Call usersSetActiveCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.setActive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSetActiveValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersSetActive(Async)");
        }

        return usersSetActiveCall(token, _callback);

    }

    /**
     * 
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @return UsersSetActiveSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setActive"> Documentation</a>
     */
    public UsersSetActiveSchema usersSetActive(String token) throws ApiException {
        ApiResponse<UsersSetActiveSchema> localVarResp = usersSetActiveWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @return ApiResponse&lt;UsersSetActiveSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setActive"> Documentation</a>
     */
    public ApiResponse<UsersSetActiveSchema> usersSetActiveWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = usersSetActiveValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<UsersSetActiveSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setActive"> Documentation</a>
     */
    public okhttp3.Call usersSetActiveAsync(String token, final ApiCallback<UsersSetActiveSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSetActiveValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<UsersSetActiveSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSetPhoto
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPhoto"> Documentation</a>
     */
    public okhttp3.Call usersSetPhotoCall(String token, String cropW, String cropX, String cropY, String image, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.setPhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cropW != null) {
            localVarFormParams.put("crop_w", cropW);
        }

        if (cropX != null) {
            localVarFormParams.put("crop_x", cropX);
        }

        if (cropY != null) {
            localVarFormParams.put("crop_y", cropY);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSetPhotoValidateBeforeCall(String token, String cropW, String cropX, String cropY, String image, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersSetPhoto(Async)");
        }

        return usersSetPhotoCall(token, cropW, cropX, cropY, image, _callback);

    }

    /**
     * 
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @return UsersSetPhotoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPhoto"> Documentation</a>
     */
    public UsersSetPhotoSchema usersSetPhoto(String token, String cropW, String cropX, String cropY, String image) throws ApiException {
        ApiResponse<UsersSetPhotoSchema> localVarResp = usersSetPhotoWithHttpInfo(token, cropW, cropX, cropY, image);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @return ApiResponse&lt;UsersSetPhotoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPhoto"> Documentation</a>
     */
    public ApiResponse<UsersSetPhotoSchema> usersSetPhotoWithHttpInfo(String token, String cropW, String cropX, String cropY, String image) throws ApiException {
        okhttp3.Call localVarCall = usersSetPhotoValidateBeforeCall(token, cropW, cropX, cropY, image, null);
        Type localVarReturnType = new TypeToken<UsersSetPhotoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPhoto"> Documentation</a>
     */
    public okhttp3.Call usersSetPhotoAsync(String token, String cropW, String cropX, String cropY, String image, final ApiCallback<UsersSetPhotoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSetPhotoValidateBeforeCall(token, cropW, cropX, cropY, image, _callback);
        Type localVarReturnType = new TypeToken<UsersSetPhotoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSetPresence
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPresence"> Documentation</a>
     */
    public okhttp3.Call usersSetPresenceCall(String token, String presence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.setPresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (presence != null) {
            localVarFormParams.put("presence", presence);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSetPresenceValidateBeforeCall(String token, String presence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling usersSetPresence(Async)");
        }

        // verify the required parameter 'presence' is set
        if (presence == null) {
            throw new ApiException("Missing the required parameter 'presence' when calling usersSetPresence(Async)");
        }

        return usersSetPresenceCall(token, presence, _callback);

    }

    /**
     * 
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60; (required)
     * @return UsersSetPresenceSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPresence"> Documentation</a>
     */
    public UsersSetPresenceSchema usersSetPresence(String token, String presence) throws ApiException {
        ApiResponse<UsersSetPresenceSchema> localVarResp = usersSetPresenceWithHttpInfo(token, presence);
        return localVarResp.getData();
    }

    /**
     * 
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60; (required)
     * @return ApiResponse&lt;UsersSetPresenceSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPresence"> Documentation</a>
     */
    public ApiResponse<UsersSetPresenceSchema> usersSetPresenceWithHttpInfo(String token, String presence) throws ApiException {
        okhttp3.Call localVarCall = usersSetPresenceValidateBeforeCall(token, presence, null);
        Type localVarReturnType = new TypeToken<UsersSetPresenceSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPresence"> Documentation</a>
     */
    public okhttp3.Call usersSetPresenceAsync(String token, String presence, final ApiCallback<UsersSetPresenceSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSetPresenceValidateBeforeCall(token, presence, _callback);
        Type localVarReturnType = new TypeToken<UsersSetPresenceSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
