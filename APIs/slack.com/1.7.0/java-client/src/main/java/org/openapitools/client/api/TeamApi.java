/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;
import org.openapitools.client.model.TeamAccessLogsErrorSchema;
import org.openapitools.client.model.TeamAccessLogsSchema;
import org.openapitools.client.model.TeamInfoErrorSchema;
import org.openapitools.client.model.TeamInfoSchema;
import org.openapitools.client.model.TeamIntegrationLogsErrorSchema;
import org.openapitools.client.model.TeamIntegrationLogsSchema;
import org.openapitools.client.model.TeamProfileGetErrorSchema;
import org.openapitools.client.model.TeamProfileGetSuccessSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamAccessLogs
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.accessLogs"> Documentation</a>
     */
    public okhttp3.Call teamAccessLogsCall(String token, String before, String count, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.accessLogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamAccessLogsValidateBeforeCall(String token, String before, String count, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling teamAccessLogs(Async)");
        }

        return teamAccessLogsCall(token, before, count, page, _callback);

    }

    /**
     * 
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @return TeamAccessLogsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.accessLogs"> Documentation</a>
     */
    public TeamAccessLogsSchema teamAccessLogs(String token, String before, String count, String page) throws ApiException {
        ApiResponse<TeamAccessLogsSchema> localVarResp = teamAccessLogsWithHttpInfo(token, before, count, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @return ApiResponse&lt;TeamAccessLogsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.accessLogs"> Documentation</a>
     */
    public ApiResponse<TeamAccessLogsSchema> teamAccessLogsWithHttpInfo(String token, String before, String count, String page) throws ApiException {
        okhttp3.Call localVarCall = teamAccessLogsValidateBeforeCall(token, before, count, page, null);
        Type localVarReturnType = new TypeToken<TeamAccessLogsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.accessLogs"> Documentation</a>
     */
    public okhttp3.Call teamAccessLogsAsync(String token, String before, String count, String page, final ApiCallback<TeamAccessLogsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamAccessLogsValidateBeforeCall(token, before, count, page, _callback);
        Type localVarReturnType = new TypeToken<TeamAccessLogsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamBillableInfo
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.billableInfo"> Documentation</a>
     */
    public okhttp3.Call teamBillableInfoCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.billableInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamBillableInfoValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling teamBillableInfo(Async)");
        }

        return teamBillableInfoCall(token, user, _callback);

    }

    /**
     * 
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.billableInfo"> Documentation</a>
     */
    public DefaultSuccessTemplate teamBillableInfo(String token, String user) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = teamBillableInfoWithHttpInfo(token, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.billableInfo"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> teamBillableInfoWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = teamBillableInfoValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.billableInfo"> Documentation</a>
     */
    public okhttp3.Call teamBillableInfoAsync(String token, String user, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamBillableInfoValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamInfo
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60; (required)
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.info"> Documentation</a>
     */
    public okhttp3.Call teamInfoCall(String token, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamInfoValidateBeforeCall(String token, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling teamInfo(Async)");
        }

        return teamInfoCall(token, team, _callback);

    }

    /**
     * 
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60; (required)
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @return TeamInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.info"> Documentation</a>
     */
    public TeamInfoSchema teamInfo(String token, String team) throws ApiException {
        ApiResponse<TeamInfoSchema> localVarResp = teamInfoWithHttpInfo(token, team);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60; (required)
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @return ApiResponse&lt;TeamInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.info"> Documentation</a>
     */
    public ApiResponse<TeamInfoSchema> teamInfoWithHttpInfo(String token, String team) throws ApiException {
        okhttp3.Call localVarCall = teamInfoValidateBeforeCall(token, team, null);
        Type localVarReturnType = new TypeToken<TeamInfoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60; (required)
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.info"> Documentation</a>
     */
    public okhttp3.Call teamInfoAsync(String token, String team, final ApiCallback<TeamInfoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamInfoValidateBeforeCall(token, team, _callback);
        Type localVarReturnType = new TypeToken<TeamInfoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamIntegrationLogs
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this user’s actions. Defaults to all logs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.integrationLogs"> Documentation</a>
     */
    public okhttp3.Call teamIntegrationLogsCall(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.integrationLogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (changeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_type", changeType));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id", serviceId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamIntegrationLogsValidateBeforeCall(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling teamIntegrationLogs(Async)");
        }

        return teamIntegrationLogsCall(token, appId, changeType, count, page, serviceId, user, _callback);

    }

    /**
     * 
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this user’s actions. Defaults to all logs. (optional)
     * @return TeamIntegrationLogsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.integrationLogs"> Documentation</a>
     */
    public TeamIntegrationLogsSchema teamIntegrationLogs(String token, String appId, String changeType, String count, String page, String serviceId, String user) throws ApiException {
        ApiResponse<TeamIntegrationLogsSchema> localVarResp = teamIntegrationLogsWithHttpInfo(token, appId, changeType, count, page, serviceId, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this user’s actions. Defaults to all logs. (optional)
     * @return ApiResponse&lt;TeamIntegrationLogsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.integrationLogs"> Documentation</a>
     */
    public ApiResponse<TeamIntegrationLogsSchema> teamIntegrationLogsWithHttpInfo(String token, String appId, String changeType, String count, String page, String serviceId, String user) throws ApiException {
        okhttp3.Call localVarCall = teamIntegrationLogsValidateBeforeCall(token, appId, changeType, count, page, serviceId, user, null);
        Type localVarReturnType = new TypeToken<TeamIntegrationLogsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this user’s actions. Defaults to all logs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.integrationLogs"> Documentation</a>
     */
    public okhttp3.Call teamIntegrationLogsAsync(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback<TeamIntegrationLogsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamIntegrationLogsValidateBeforeCall(token, appId, changeType, count, page, serviceId, user, _callback);
        Type localVarReturnType = new TypeToken<TeamIntegrationLogsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamProfileGet_0
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param visibility Filter by visibility. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.profile.get"> Documentation</a>
     */
    public okhttp3.Call teamProfileGet_0Call(String token, String visibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.profile.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamProfileGet_0ValidateBeforeCall(String token, String visibility, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling teamProfileGet_0(Async)");
        }

        return teamProfileGet_0Call(token, visibility, _callback);

    }

    /**
     * 
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param visibility Filter by visibility. (optional)
     * @return TeamProfileGetSuccessSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.profile.get"> Documentation</a>
     */
    public TeamProfileGetSuccessSchema teamProfileGet_0(String token, String visibility) throws ApiException {
        ApiResponse<TeamProfileGetSuccessSchema> localVarResp = teamProfileGet_0WithHttpInfo(token, visibility);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param visibility Filter by visibility. (optional)
     * @return ApiResponse&lt;TeamProfileGetSuccessSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.profile.get"> Documentation</a>
     */
    public ApiResponse<TeamProfileGetSuccessSchema> teamProfileGet_0WithHttpInfo(String token, String visibility) throws ApiException {
        okhttp3.Call localVarCall = teamProfileGet_0ValidateBeforeCall(token, visibility, null);
        Type localVarReturnType = new TypeToken<TeamProfileGetSuccessSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @param visibility Filter by visibility. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.profile.get"> Documentation</a>
     */
    public okhttp3.Call teamProfileGet_0Async(String token, String visibility, final ApiCallback<TeamProfileGetSuccessSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamProfileGet_0ValidateBeforeCall(token, visibility, _callback);
        Type localVarReturnType = new TypeToken<TeamProfileGetSuccessSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
