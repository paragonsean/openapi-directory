/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjsSubteamAutoTypeInner;
import org.openapitools.client.model.ObjsSubteamDeletedByInner;
import org.openapitools.client.model.ObjsSubteamPrefs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjsSubteam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjsSubteam {
  public static final String SERIALIZED_NAME_AUTO_PROVISION = "auto_provision";
  @SerializedName(SERIALIZED_NAME_AUTO_PROVISION)
  private Boolean autoProvision;

  public static final String SERIALIZED_NAME_AUTO_TYPE = "auto_type";
  @SerializedName(SERIALIZED_NAME_AUTO_TYPE)
  private List<ObjsSubteamAutoTypeInner> autoType = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_COUNT = "channel_count";
  @SerializedName(SERIALIZED_NAME_CHANNEL_COUNT)
  private Integer channelCount;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DATE_CREATE = "date_create";
  @SerializedName(SERIALIZED_NAME_DATE_CREATE)
  private Integer dateCreate;

  public static final String SERIALIZED_NAME_DATE_DELETE = "date_delete";
  @SerializedName(SERIALIZED_NAME_DATE_DELETE)
  private Integer dateDelete;

  public static final String SERIALIZED_NAME_DATE_UPDATE = "date_update";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATE)
  private Integer dateUpdate;

  public static final String SERIALIZED_NAME_DELETED_BY = "deleted_by";
  @SerializedName(SERIALIZED_NAME_DELETED_BY)
  private List<ObjsSubteamDeletedByInner> deletedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTERPRISE_SUBTEAM_ID = "enterprise_subteam_id";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE_SUBTEAM_ID)
  private String enterpriseSubteamId;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "is_external";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_IS_SUBTEAM = "is_subteam";
  @SerializedName(SERIALIZED_NAME_IS_SUBTEAM)
  private Boolean isSubteam;

  public static final String SERIALIZED_NAME_IS_USERGROUP = "is_usergroup";
  @SerializedName(SERIALIZED_NAME_IS_USERGROUP)
  private Boolean isUsergroup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFS = "prefs";
  @SerializedName(SERIALIZED_NAME_PREFS)
  private ObjsSubteamPrefs prefs;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updated_by";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  public static final String SERIALIZED_NAME_USER_COUNT = "user_count";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<String> users = new ArrayList<>();

  public ObjsSubteam() {
  }

  public ObjsSubteam autoProvision(Boolean autoProvision) {
    this.autoProvision = autoProvision;
    return this;
  }

  /**
   * Get autoProvision
   * @return autoProvision
   */
  @javax.annotation.Nonnull
  public Boolean getAutoProvision() {
    return autoProvision;
  }

  public void setAutoProvision(Boolean autoProvision) {
    this.autoProvision = autoProvision;
  }


  public ObjsSubteam autoType(List<ObjsSubteamAutoTypeInner> autoType) {
    this.autoType = autoType;
    return this;
  }

  public ObjsSubteam addAutoTypeItem(ObjsSubteamAutoTypeInner autoTypeItem) {
    if (this.autoType == null) {
      this.autoType = new ArrayList<>();
    }
    this.autoType.add(autoTypeItem);
    return this;
  }

  /**
   * Get autoType
   * @return autoType
   */
  @javax.annotation.Nonnull
  public List<ObjsSubteamAutoTypeInner> getAutoType() {
    return autoType;
  }

  public void setAutoType(List<ObjsSubteamAutoTypeInner> autoType) {
    this.autoType = autoType;
  }


  public ObjsSubteam channelCount(Integer channelCount) {
    this.channelCount = channelCount;
    return this;
  }

  /**
   * Get channelCount
   * @return channelCount
   */
  @javax.annotation.Nullable
  public Integer getChannelCount() {
    return channelCount;
  }

  public void setChannelCount(Integer channelCount) {
    this.channelCount = channelCount;
  }


  public ObjsSubteam createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public ObjsSubteam dateCreate(Integer dateCreate) {
    this.dateCreate = dateCreate;
    return this;
  }

  /**
   * Get dateCreate
   * @return dateCreate
   */
  @javax.annotation.Nonnull
  public Integer getDateCreate() {
    return dateCreate;
  }

  public void setDateCreate(Integer dateCreate) {
    this.dateCreate = dateCreate;
  }


  public ObjsSubteam dateDelete(Integer dateDelete) {
    this.dateDelete = dateDelete;
    return this;
  }

  /**
   * Get dateDelete
   * @return dateDelete
   */
  @javax.annotation.Nonnull
  public Integer getDateDelete() {
    return dateDelete;
  }

  public void setDateDelete(Integer dateDelete) {
    this.dateDelete = dateDelete;
  }


  public ObjsSubteam dateUpdate(Integer dateUpdate) {
    this.dateUpdate = dateUpdate;
    return this;
  }

  /**
   * Get dateUpdate
   * @return dateUpdate
   */
  @javax.annotation.Nonnull
  public Integer getDateUpdate() {
    return dateUpdate;
  }

  public void setDateUpdate(Integer dateUpdate) {
    this.dateUpdate = dateUpdate;
  }


  public ObjsSubteam deletedBy(List<ObjsSubteamDeletedByInner> deletedBy) {
    this.deletedBy = deletedBy;
    return this;
  }

  public ObjsSubteam addDeletedByItem(ObjsSubteamDeletedByInner deletedByItem) {
    if (this.deletedBy == null) {
      this.deletedBy = new ArrayList<>();
    }
    this.deletedBy.add(deletedByItem);
    return this;
  }

  /**
   * Get deletedBy
   * @return deletedBy
   */
  @javax.annotation.Nonnull
  public List<ObjsSubteamDeletedByInner> getDeletedBy() {
    return deletedBy;
  }

  public void setDeletedBy(List<ObjsSubteamDeletedByInner> deletedBy) {
    this.deletedBy = deletedBy;
  }


  public ObjsSubteam description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ObjsSubteam enterpriseSubteamId(String enterpriseSubteamId) {
    this.enterpriseSubteamId = enterpriseSubteamId;
    return this;
  }

  /**
   * Get enterpriseSubteamId
   * @return enterpriseSubteamId
   */
  @javax.annotation.Nonnull
  public String getEnterpriseSubteamId() {
    return enterpriseSubteamId;
  }

  public void setEnterpriseSubteamId(String enterpriseSubteamId) {
    this.enterpriseSubteamId = enterpriseSubteamId;
  }


  public ObjsSubteam handle(String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Get handle
   * @return handle
   */
  @javax.annotation.Nonnull
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }


  public ObjsSubteam id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ObjsSubteam isExternal(Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

  /**
   * Get isExternal
   * @return isExternal
   */
  @javax.annotation.Nonnull
  public Boolean getIsExternal() {
    return isExternal;
  }

  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public ObjsSubteam isSubteam(Boolean isSubteam) {
    this.isSubteam = isSubteam;
    return this;
  }

  /**
   * Get isSubteam
   * @return isSubteam
   */
  @javax.annotation.Nonnull
  public Boolean getIsSubteam() {
    return isSubteam;
  }

  public void setIsSubteam(Boolean isSubteam) {
    this.isSubteam = isSubteam;
  }


  public ObjsSubteam isUsergroup(Boolean isUsergroup) {
    this.isUsergroup = isUsergroup;
    return this;
  }

  /**
   * Get isUsergroup
   * @return isUsergroup
   */
  @javax.annotation.Nonnull
  public Boolean getIsUsergroup() {
    return isUsergroup;
  }

  public void setIsUsergroup(Boolean isUsergroup) {
    this.isUsergroup = isUsergroup;
  }


  public ObjsSubteam name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ObjsSubteam prefs(ObjsSubteamPrefs prefs) {
    this.prefs = prefs;
    return this;
  }

  /**
   * Get prefs
   * @return prefs
   */
  @javax.annotation.Nonnull
  public ObjsSubteamPrefs getPrefs() {
    return prefs;
  }

  public void setPrefs(ObjsSubteamPrefs prefs) {
    this.prefs = prefs;
  }


  public ObjsSubteam teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nonnull
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public ObjsSubteam updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nonnull
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public ObjsSubteam userCount(Integer userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Get userCount
   * @return userCount
   */
  @javax.annotation.Nullable
  public Integer getUserCount() {
    return userCount;
  }

  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }


  public ObjsSubteam users(List<String> users) {
    this.users = users;
    return this;
  }

  public ObjsSubteam addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nullable
  public List<String> getUsers() {
    return users;
  }

  public void setUsers(List<String> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjsSubteam objsSubteam = (ObjsSubteam) o;
    return Objects.equals(this.autoProvision, objsSubteam.autoProvision) &&
        Objects.equals(this.autoType, objsSubteam.autoType) &&
        Objects.equals(this.channelCount, objsSubteam.channelCount) &&
        Objects.equals(this.createdBy, objsSubteam.createdBy) &&
        Objects.equals(this.dateCreate, objsSubteam.dateCreate) &&
        Objects.equals(this.dateDelete, objsSubteam.dateDelete) &&
        Objects.equals(this.dateUpdate, objsSubteam.dateUpdate) &&
        Objects.equals(this.deletedBy, objsSubteam.deletedBy) &&
        Objects.equals(this.description, objsSubteam.description) &&
        Objects.equals(this.enterpriseSubteamId, objsSubteam.enterpriseSubteamId) &&
        Objects.equals(this.handle, objsSubteam.handle) &&
        Objects.equals(this.id, objsSubteam.id) &&
        Objects.equals(this.isExternal, objsSubteam.isExternal) &&
        Objects.equals(this.isSubteam, objsSubteam.isSubteam) &&
        Objects.equals(this.isUsergroup, objsSubteam.isUsergroup) &&
        Objects.equals(this.name, objsSubteam.name) &&
        Objects.equals(this.prefs, objsSubteam.prefs) &&
        Objects.equals(this.teamId, objsSubteam.teamId) &&
        Objects.equals(this.updatedBy, objsSubteam.updatedBy) &&
        Objects.equals(this.userCount, objsSubteam.userCount) &&
        Objects.equals(this.users, objsSubteam.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoProvision, autoType, channelCount, createdBy, dateCreate, dateDelete, dateUpdate, deletedBy, description, enterpriseSubteamId, handle, id, isExternal, isSubteam, isUsergroup, name, prefs, teamId, updatedBy, userCount, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjsSubteam {\n");
    sb.append("    autoProvision: ").append(toIndentedString(autoProvision)).append("\n");
    sb.append("    autoType: ").append(toIndentedString(autoType)).append("\n");
    sb.append("    channelCount: ").append(toIndentedString(channelCount)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateCreate: ").append(toIndentedString(dateCreate)).append("\n");
    sb.append("    dateDelete: ").append(toIndentedString(dateDelete)).append("\n");
    sb.append("    dateUpdate: ").append(toIndentedString(dateUpdate)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enterpriseSubteamId: ").append(toIndentedString(enterpriseSubteamId)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    isSubteam: ").append(toIndentedString(isSubteam)).append("\n");
    sb.append("    isUsergroup: ").append(toIndentedString(isUsergroup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prefs: ").append(toIndentedString(prefs)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_provision");
    openapiFields.add("auto_type");
    openapiFields.add("channel_count");
    openapiFields.add("created_by");
    openapiFields.add("date_create");
    openapiFields.add("date_delete");
    openapiFields.add("date_update");
    openapiFields.add("deleted_by");
    openapiFields.add("description");
    openapiFields.add("enterprise_subteam_id");
    openapiFields.add("handle");
    openapiFields.add("id");
    openapiFields.add("is_external");
    openapiFields.add("is_subteam");
    openapiFields.add("is_usergroup");
    openapiFields.add("name");
    openapiFields.add("prefs");
    openapiFields.add("team_id");
    openapiFields.add("updated_by");
    openapiFields.add("user_count");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_provision");
    openapiRequiredFields.add("auto_type");
    openapiRequiredFields.add("created_by");
    openapiRequiredFields.add("date_create");
    openapiRequiredFields.add("date_delete");
    openapiRequiredFields.add("date_update");
    openapiRequiredFields.add("deleted_by");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("enterprise_subteam_id");
    openapiRequiredFields.add("handle");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_external");
    openapiRequiredFields.add("is_subteam");
    openapiRequiredFields.add("is_usergroup");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("prefs");
    openapiRequiredFields.add("team_id");
    openapiRequiredFields.add("updated_by");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjsSubteam
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjsSubteam.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjsSubteam is not found in the empty JSON string", ObjsSubteam.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjsSubteam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjsSubteam` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjsSubteam.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("auto_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_type` to be an array in the JSON string but got `%s`", jsonObj.get("auto_type").toString()));
      }

      JsonArray jsonArrayautoType = jsonObj.getAsJsonArray("auto_type");
      // validate the required field `auto_type` (array)
      for (int i = 0; i < jsonArrayautoType.size(); i++) {
        ObjsSubteamAutoTypeInner.validateJsonElement(jsonArrayautoType.get(i));
      };
      if (!jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("deleted_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_by` to be an array in the JSON string but got `%s`", jsonObj.get("deleted_by").toString()));
      }

      JsonArray jsonArraydeletedBy = jsonObj.getAsJsonArray("deleted_by");
      // validate the required field `deleted_by` (array)
      for (int i = 0; i < jsonArraydeletedBy.size(); i++) {
        ObjsSubteamDeletedByInner.validateJsonElement(jsonArraydeletedBy.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("enterprise_subteam_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterprise_subteam_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterprise_subteam_id").toString()));
      }
      if (!jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `prefs`
      ObjsSubteamPrefs.validateJsonElement(jsonObj.get("prefs"));
      if (!jsonObj.get("team_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_id").toString()));
      }
      if (!jsonObj.get("updated_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_by").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull() && !jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjsSubteam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjsSubteam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjsSubteam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjsSubteam.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjsSubteam>() {
           @Override
           public void write(JsonWriter out, ObjsSubteam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjsSubteam read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjsSubteam given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjsSubteam
   * @throws IOException if the JSON string is invalid with respect to ObjsSubteam
   */
  public static ObjsSubteam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjsSubteam.class);
  }

  /**
   * Convert an instance of ObjsSubteam to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

