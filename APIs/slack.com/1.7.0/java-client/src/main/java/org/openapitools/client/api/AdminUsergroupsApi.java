/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminUsergroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminUsergroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsergroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminUsergroupsAddChannels
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param teamId The workspace to add default channels in. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsAddChannelsCall(String token, String channelIds, String usergroupId, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsergroupsAddChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsergroupsAddChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling adminUsergroupsAddChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddChannels(Async)");
        }

        return adminUsergroupsAddChannelsCall(token, channelIds, usergroupId, teamId, _callback);

    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param teamId The workspace to add default channels in. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsergroupsAddChannels(String token, String channelIds, String usergroupId, String teamId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsergroupsAddChannelsWithHttpInfo(token, channelIds, usergroupId, teamId);
        return localVarResp.getData();
    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param teamId The workspace to add default channels in. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsergroupsAddChannelsWithHttpInfo(String token, String channelIds, String usergroupId, String teamId) throws ApiException {
        okhttp3.Call localVarCall = adminUsergroupsAddChannelsValidateBeforeCall(token, channelIds, usergroupId, teamId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param teamId The workspace to add default channels in. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsAddChannelsAsync(String token, String channelIds, String usergroupId, String teamId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsergroupsAddChannelsValidateBeforeCall(token, channelIds, usergroupId, teamId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsergroupsAddTeams
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsAddTeamsCall(String token, String teamIds, String usergroupId, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoProvision != null) {
            localVarFormParams.put("auto_provision", autoProvision);
        }

        if (teamIds != null) {
            localVarFormParams.put("team_ids", teamIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsergroupsAddTeamsValidateBeforeCall(String token, String teamIds, String usergroupId, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsergroupsAddTeams(Async)");
        }

        // verify the required parameter 'teamIds' is set
        if (teamIds == null) {
            throw new ApiException("Missing the required parameter 'teamIds' when calling adminUsergroupsAddTeams(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling adminUsergroupsAddTeams(Async)");
        }

        return adminUsergroupsAddTeamsCall(token, teamIds, usergroupId, autoProvision, _callback);

    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsergroupsAddTeams(String token, String teamIds, String usergroupId, Boolean autoProvision) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsergroupsAddTeamsWithHttpInfo(token, teamIds, usergroupId, autoProvision);
        return localVarResp.getData();
    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsergroupsAddTeamsWithHttpInfo(String token, String teamIds, String usergroupId, Boolean autoProvision) throws ApiException {
        okhttp3.Call localVarCall = adminUsergroupsAddTeamsValidateBeforeCall(token, teamIds, usergroupId, autoProvision, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsAddTeamsAsync(String token, String teamIds, String usergroupId, Boolean autoProvision, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsergroupsAddTeamsValidateBeforeCall(token, teamIds, usergroupId, autoProvision, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsergroupsListChannels
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsListChannelsCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.listChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usergroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup_id", usergroupId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (includeNumMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_num_members", includeNumMembers));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsergroupsListChannelsValidateBeforeCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsergroupsListChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling adminUsergroupsListChannels(Async)");
        }

        return adminUsergroupsListChannelsCall(token, usergroupId, teamId, includeNumMembers, _callback);

    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsergroupsListChannels(String token, String usergroupId, String teamId, Boolean includeNumMembers) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsergroupsListChannelsWithHttpInfo(token, usergroupId, teamId, includeNumMembers);
        return localVarResp.getData();
    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsergroupsListChannelsWithHttpInfo(String token, String usergroupId, String teamId, Boolean includeNumMembers) throws ApiException {
        okhttp3.Call localVarCall = adminUsergroupsListChannelsValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsListChannelsAsync(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsergroupsListChannelsValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsergroupsRemoveChannels
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsRemoveChannelsCall(String token, String channelIds, String usergroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.removeChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsergroupsRemoveChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsergroupsRemoveChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling adminUsergroupsRemoveChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling adminUsergroupsRemoveChannels(Async)");
        }

        return adminUsergroupsRemoveChannelsCall(token, channelIds, usergroupId, _callback);

    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsergroupsRemoveChannels(String token, String channelIds, String usergroupId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsergroupsRemoveChannelsWithHttpInfo(token, channelIds, usergroupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsergroupsRemoveChannelsWithHttpInfo(String token, String channelIds, String usergroupId) throws ApiException {
        okhttp3.Call localVarCall = adminUsergroupsRemoveChannelsValidateBeforeCall(token, channelIds, usergroupId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public okhttp3.Call adminUsergroupsRemoveChannelsAsync(String token, String channelIds, String usergroupId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsergroupsRemoveChannelsValidateBeforeCall(token, channelIds, usergroupId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
