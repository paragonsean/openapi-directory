/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamAccessLogsSchemaLoginsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamAccessLogsSchemaLoginsInner {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE_FIRST = "date_first";
  @SerializedName(SERIALIZED_NAME_DATE_FIRST)
  private Integer dateFirst;

  public static final String SERIALIZED_NAME_DATE_LAST = "date_last";
  @SerializedName(SERIALIZED_NAME_DATE_LAST)
  private Integer dateLast;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_ISP = "isp";
  @SerializedName(SERIALIZED_NAME_ISP)
  private String isp;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public TeamAccessLogsSchemaLoginsInner() {
  }

  public TeamAccessLogsSchemaLoginsInner count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public TeamAccessLogsSchemaLoginsInner country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public TeamAccessLogsSchemaLoginsInner dateFirst(Integer dateFirst) {
    this.dateFirst = dateFirst;
    return this;
  }

  /**
   * Get dateFirst
   * @return dateFirst
   */
  @javax.annotation.Nonnull
  public Integer getDateFirst() {
    return dateFirst;
  }

  public void setDateFirst(Integer dateFirst) {
    this.dateFirst = dateFirst;
  }


  public TeamAccessLogsSchemaLoginsInner dateLast(Integer dateLast) {
    this.dateLast = dateLast;
    return this;
  }

  /**
   * Get dateLast
   * @return dateLast
   */
  @javax.annotation.Nonnull
  public Integer getDateLast() {
    return dateLast;
  }

  public void setDateLast(Integer dateLast) {
    this.dateLast = dateLast;
  }


  public TeamAccessLogsSchemaLoginsInner ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public TeamAccessLogsSchemaLoginsInner isp(String isp) {
    this.isp = isp;
    return this;
  }

  /**
   * Get isp
   * @return isp
   */
  @javax.annotation.Nullable
  public String getIsp() {
    return isp;
  }

  public void setIsp(String isp) {
    this.isp = isp;
  }


  public TeamAccessLogsSchemaLoginsInner region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public TeamAccessLogsSchemaLoginsInner userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public TeamAccessLogsSchemaLoginsInner userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public TeamAccessLogsSchemaLoginsInner username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamAccessLogsSchemaLoginsInner teamAccessLogsSchemaLoginsInner = (TeamAccessLogsSchemaLoginsInner) o;
    return Objects.equals(this.count, teamAccessLogsSchemaLoginsInner.count) &&
        Objects.equals(this.country, teamAccessLogsSchemaLoginsInner.country) &&
        Objects.equals(this.dateFirst, teamAccessLogsSchemaLoginsInner.dateFirst) &&
        Objects.equals(this.dateLast, teamAccessLogsSchemaLoginsInner.dateLast) &&
        Objects.equals(this.ip, teamAccessLogsSchemaLoginsInner.ip) &&
        Objects.equals(this.isp, teamAccessLogsSchemaLoginsInner.isp) &&
        Objects.equals(this.region, teamAccessLogsSchemaLoginsInner.region) &&
        Objects.equals(this.userAgent, teamAccessLogsSchemaLoginsInner.userAgent) &&
        Objects.equals(this.userId, teamAccessLogsSchemaLoginsInner.userId) &&
        Objects.equals(this.username, teamAccessLogsSchemaLoginsInner.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, country, dateFirst, dateLast, ip, isp, region, userAgent, userId, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamAccessLogsSchemaLoginsInner {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    dateFirst: ").append(toIndentedString(dateFirst)).append("\n");
    sb.append("    dateLast: ").append(toIndentedString(dateLast)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    isp: ").append(toIndentedString(isp)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("country");
    openapiFields.add("date_first");
    openapiFields.add("date_last");
    openapiFields.add("ip");
    openapiFields.add("isp");
    openapiFields.add("region");
    openapiFields.add("user_agent");
    openapiFields.add("user_id");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("date_first");
    openapiRequiredFields.add("date_last");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("isp");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("user_agent");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamAccessLogsSchemaLoginsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamAccessLogsSchemaLoginsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamAccessLogsSchemaLoginsInner is not found in the empty JSON string", TeamAccessLogsSchemaLoginsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamAccessLogsSchemaLoginsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamAccessLogsSchemaLoginsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamAccessLogsSchemaLoginsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("isp") != null && !jsonObj.get("isp").isJsonNull()) && !jsonObj.get("isp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isp").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (!jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamAccessLogsSchemaLoginsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamAccessLogsSchemaLoginsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamAccessLogsSchemaLoginsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamAccessLogsSchemaLoginsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamAccessLogsSchemaLoginsInner>() {
           @Override
           public void write(JsonWriter out, TeamAccessLogsSchemaLoginsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamAccessLogsSchemaLoginsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamAccessLogsSchemaLoginsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamAccessLogsSchemaLoginsInner
   * @throws IOException if the JSON string is invalid with respect to TeamAccessLogsSchemaLoginsInner
   */
  public static TeamAccessLogsSchemaLoginsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamAccessLogsSchemaLoginsInner.class);
  }

  /**
   * Convert an instance of TeamAccessLogsSchemaLoginsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

