/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminConversationsArchiveErrorSchema;
import org.openapitools.client.model.AdminConversationsArchiveSchema;
import org.openapitools.client.model.AdminConversationsConvertToPrivateErrorSchema;
import org.openapitools.client.model.AdminConversationsConvertToPrivateSchema;
import org.openapitools.client.model.AdminConversationsCreateErrorSchema;
import org.openapitools.client.model.AdminConversationsCreateSchema;
import org.openapitools.client.model.AdminConversationsDeleteErrorSchema;
import org.openapitools.client.model.AdminConversationsDeleteSchema;
import org.openapitools.client.model.AdminConversationsDisconnectSharedErrorSchema;
import org.openapitools.client.model.AdminConversationsGetConversationPrefsSchema;
import org.openapitools.client.model.AdminConversationsGetTeamsErrorSchema;
import org.openapitools.client.model.AdminConversationsGetTeamsSchema;
import org.openapitools.client.model.AdminConversationsInviteErrorSchema;
import org.openapitools.client.model.AdminConversationsInviteSchema;
import org.openapitools.client.model.AdminConversationsRenameSchema;
import org.openapitools.client.model.AdminConversationsRenameSchema1;
import org.openapitools.client.model.AdminConversationsSearchErrorSchema;
import org.openapitools.client.model.AdminConversationsSearchSchema;
import org.openapitools.client.model.AdminConversationsSetConversationPrefsErrorSchema;
import org.openapitools.client.model.AdminConversationsSetConversationPrefsSchema;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema1;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema2;
import org.openapitools.client.model.AdminConversationsUnarchiveSchema;
import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminConversationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminConversationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminConversationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminConversationsArchive
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public okhttp3.Call adminConversationsArchiveCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsArchiveValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsArchive(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsArchive(Async)");
        }

        return adminConversationsArchiveCall(token, channelId, _callback);

    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @return AdminConversationsArchiveSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public AdminConversationsArchiveSchema adminConversationsArchive(String token, String channelId) throws ApiException {
        ApiResponse<AdminConversationsArchiveSchema> localVarResp = adminConversationsArchiveWithHttpInfo(token, channelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @return ApiResponse&lt;AdminConversationsArchiveSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public ApiResponse<AdminConversationsArchiveSchema> adminConversationsArchiveWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsArchiveValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsArchiveSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public okhttp3.Call adminConversationsArchiveAsync(String token, String channelId, final ApiCallback<AdminConversationsArchiveSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsArchiveValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsArchiveSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsConvertToPrivate
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public okhttp3.Call adminConversationsConvertToPrivateCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.convertToPrivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsConvertToPrivateValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsConvertToPrivate(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsConvertToPrivate(Async)");
        }

        return adminConversationsConvertToPrivateCall(token, channelId, _callback);

    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @return AdminConversationsConvertToPrivateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public AdminConversationsConvertToPrivateSchema adminConversationsConvertToPrivate(String token, String channelId) throws ApiException {
        ApiResponse<AdminConversationsConvertToPrivateSchema> localVarResp = adminConversationsConvertToPrivateWithHttpInfo(token, channelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @return ApiResponse&lt;AdminConversationsConvertToPrivateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public ApiResponse<AdminConversationsConvertToPrivateSchema> adminConversationsConvertToPrivateWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsConvertToPrivateValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsConvertToPrivateSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public okhttp3.Call adminConversationsConvertToPrivateAsync(String token, String channelId, final ApiCallback<AdminConversationsConvertToPrivateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsConvertToPrivateValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsConvertToPrivateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsCreate
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public okhttp3.Call adminConversationsCreateCall(String token, Boolean isPrivate, String name, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (isPrivate != null) {
            localVarFormParams.put("is_private", isPrivate);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (orgWide != null) {
            localVarFormParams.put("org_wide", orgWide);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsCreateValidateBeforeCall(String token, Boolean isPrivate, String name, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsCreate(Async)");
        }

        // verify the required parameter 'isPrivate' is set
        if (isPrivate == null) {
            throw new ApiException("Missing the required parameter 'isPrivate' when calling adminConversationsCreate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling adminConversationsCreate(Async)");
        }

        return adminConversationsCreateCall(token, isPrivate, name, description, orgWide, teamId, _callback);

    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @return AdminConversationsCreateSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public AdminConversationsCreateSchema adminConversationsCreate(String token, Boolean isPrivate, String name, String description, Boolean orgWide, String teamId) throws ApiException {
        ApiResponse<AdminConversationsCreateSchema> localVarResp = adminConversationsCreateWithHttpInfo(token, isPrivate, name, description, orgWide, teamId);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @return ApiResponse&lt;AdminConversationsCreateSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public ApiResponse<AdminConversationsCreateSchema> adminConversationsCreateWithHttpInfo(String token, Boolean isPrivate, String name, String description, Boolean orgWide, String teamId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsCreateValidateBeforeCall(token, isPrivate, name, description, orgWide, teamId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsCreateSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public okhttp3.Call adminConversationsCreateAsync(String token, Boolean isPrivate, String name, String description, Boolean orgWide, String teamId, final ApiCallback<AdminConversationsCreateSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsCreateValidateBeforeCall(token, isPrivate, name, description, orgWide, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsCreateSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsDelete
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public okhttp3.Call adminConversationsDeleteCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsDeleteValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsDelete(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsDelete(Async)");
        }

        return adminConversationsDeleteCall(token, channelId, _callback);

    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @return AdminConversationsDeleteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public AdminConversationsDeleteSchema adminConversationsDelete(String token, String channelId) throws ApiException {
        ApiResponse<AdminConversationsDeleteSchema> localVarResp = adminConversationsDeleteWithHttpInfo(token, channelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @return ApiResponse&lt;AdminConversationsDeleteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public ApiResponse<AdminConversationsDeleteSchema> adminConversationsDeleteWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsDeleteValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsDeleteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public okhttp3.Call adminConversationsDeleteAsync(String token, String channelId, final ApiCallback<AdminConversationsDeleteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsDeleteValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsDeleteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsDisconnectShared
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public okhttp3.Call adminConversationsDisconnectSharedCall(String token, String channelId, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.disconnectShared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (leavingTeamIds != null) {
            localVarFormParams.put("leaving_team_ids", leavingTeamIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsDisconnectSharedValidateBeforeCall(String token, String channelId, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsDisconnectShared(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsDisconnectShared(Async)");
        }

        return adminConversationsDisconnectSharedCall(token, channelId, leavingTeamIds, _callback);

    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @return AdminConversationsRenameSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public AdminConversationsRenameSchema adminConversationsDisconnectShared(String token, String channelId, String leavingTeamIds) throws ApiException {
        ApiResponse<AdminConversationsRenameSchema> localVarResp = adminConversationsDisconnectSharedWithHttpInfo(token, channelId, leavingTeamIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @return ApiResponse&lt;AdminConversationsRenameSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public ApiResponse<AdminConversationsRenameSchema> adminConversationsDisconnectSharedWithHttpInfo(String token, String channelId, String leavingTeamIds) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsDisconnectSharedValidateBeforeCall(token, channelId, leavingTeamIds, null);
        Type localVarReturnType = new TypeToken<AdminConversationsRenameSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public okhttp3.Call adminConversationsDisconnectSharedAsync(String token, String channelId, String leavingTeamIds, final ApiCallback<AdminConversationsRenameSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsDisconnectSharedValidateBeforeCall(token, channelId, leavingTeamIds, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsRenameSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsGetConversationPrefs
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public okhttp3.Call adminConversationsGetConversationPrefsCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsGetConversationPrefsValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsGetConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsGetConversationPrefs(Async)");
        }

        return adminConversationsGetConversationPrefsCall(token, channelId, _callback);

    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @return AdminConversationsGetConversationPrefsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public AdminConversationsGetConversationPrefsSchema adminConversationsGetConversationPrefs(String token, String channelId) throws ApiException {
        ApiResponse<AdminConversationsGetConversationPrefsSchema> localVarResp = adminConversationsGetConversationPrefsWithHttpInfo(token, channelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @return ApiResponse&lt;AdminConversationsGetConversationPrefsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public ApiResponse<AdminConversationsGetConversationPrefsSchema> adminConversationsGetConversationPrefsWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsGetConversationPrefsValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsGetConversationPrefsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public okhttp3.Call adminConversationsGetConversationPrefsAsync(String token, String channelId, final ApiCallback<AdminConversationsGetConversationPrefsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsGetConversationPrefsValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsGetConversationPrefsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsGetTeams
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public okhttp3.Call adminConversationsGetTeamsCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsGetTeamsValidateBeforeCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsGetTeams(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsGetTeams(Async)");
        }

        return adminConversationsGetTeamsCall(token, channelId, cursor, limit, _callback);

    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @return AdminConversationsGetTeamsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public AdminConversationsGetTeamsSchema adminConversationsGetTeams(String token, String channelId, String cursor, Integer limit) throws ApiException {
        ApiResponse<AdminConversationsGetTeamsSchema> localVarResp = adminConversationsGetTeamsWithHttpInfo(token, channelId, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @return ApiResponse&lt;AdminConversationsGetTeamsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public ApiResponse<AdminConversationsGetTeamsSchema> adminConversationsGetTeamsWithHttpInfo(String token, String channelId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsGetTeamsValidateBeforeCall(token, channelId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminConversationsGetTeamsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public okhttp3.Call adminConversationsGetTeamsAsync(String token, String channelId, String cursor, Integer limit, final ApiCallback<AdminConversationsGetTeamsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsGetTeamsValidateBeforeCall(token, channelId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsGetTeamsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsInvite
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public okhttp3.Call adminConversationsInviteCall(String token, String channelId, String userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsInviteValidateBeforeCall(String token, String channelId, String userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsInvite(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsInvite(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling adminConversationsInvite(Async)");
        }

        return adminConversationsInviteCall(token, channelId, userIds, _callback);

    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @return AdminConversationsInviteSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public AdminConversationsInviteSchema adminConversationsInvite(String token, String channelId, String userIds) throws ApiException {
        ApiResponse<AdminConversationsInviteSchema> localVarResp = adminConversationsInviteWithHttpInfo(token, channelId, userIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @return ApiResponse&lt;AdminConversationsInviteSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public ApiResponse<AdminConversationsInviteSchema> adminConversationsInviteWithHttpInfo(String token, String channelId, String userIds) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsInviteValidateBeforeCall(token, channelId, userIds, null);
        Type localVarReturnType = new TypeToken<AdminConversationsInviteSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public okhttp3.Call adminConversationsInviteAsync(String token, String channelId, String userIds, final ApiCallback<AdminConversationsInviteSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsInviteValidateBeforeCall(token, channelId, userIds, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsInviteSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsRename
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public okhttp3.Call adminConversationsRenameCall(String token, String channelId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsRenameValidateBeforeCall(String token, String channelId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsRename(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsRename(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling adminConversationsRename(Async)");
        }

        return adminConversationsRenameCall(token, channelId, name, _callback);

    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @return AdminConversationsRenameSchema1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public AdminConversationsRenameSchema1 adminConversationsRename(String token, String channelId, String name) throws ApiException {
        ApiResponse<AdminConversationsRenameSchema1> localVarResp = adminConversationsRenameWithHttpInfo(token, channelId, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @return ApiResponse&lt;AdminConversationsRenameSchema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public ApiResponse<AdminConversationsRenameSchema1> adminConversationsRenameWithHttpInfo(String token, String channelId, String name) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsRenameValidateBeforeCall(token, channelId, name, null);
        Type localVarReturnType = new TypeToken<AdminConversationsRenameSchema1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public okhttp3.Call adminConversationsRenameAsync(String token, String channelId, String name, final ApiCallback<AdminConversationsRenameSchema1> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsRenameValidateBeforeCall(token, channelId, name, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsRenameSchema1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsSearch
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSearchCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_ids", teamIds));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (searchChannelTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_channel_types", searchChannelTypes));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsSearchValidateBeforeCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsSearch(Async)");
        }

        return adminConversationsSearchCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);

    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @return AdminConversationsSearchSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public AdminConversationsSearchSchema adminConversationsSearch(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir) throws ApiException {
        ApiResponse<AdminConversationsSearchSchema> localVarResp = adminConversationsSearchWithHttpInfo(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @return ApiResponse&lt;AdminConversationsSearchSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public ApiResponse<AdminConversationsSearchSchema> adminConversationsSearchWithHttpInfo(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsSearchValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, null);
        Type localVarReturnType = new TypeToken<AdminConversationsSearchSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSearchAsync(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback<AdminConversationsSearchSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsSearchValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsSearchSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsSetConversationPrefs
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSetConversationPrefsCall(String token, String channelId, String prefs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.setConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (prefs != null) {
            localVarFormParams.put("prefs", prefs);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsSetConversationPrefsValidateBeforeCall(String token, String channelId, String prefs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsSetConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsSetConversationPrefs(Async)");
        }

        // verify the required parameter 'prefs' is set
        if (prefs == null) {
            throw new ApiException("Missing the required parameter 'prefs' when calling adminConversationsSetConversationPrefs(Async)");
        }

        return adminConversationsSetConversationPrefsCall(token, channelId, prefs, _callback);

    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @return AdminConversationsSetConversationPrefsSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public AdminConversationsSetConversationPrefsSchema adminConversationsSetConversationPrefs(String token, String channelId, String prefs) throws ApiException {
        ApiResponse<AdminConversationsSetConversationPrefsSchema> localVarResp = adminConversationsSetConversationPrefsWithHttpInfo(token, channelId, prefs);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @return ApiResponse&lt;AdminConversationsSetConversationPrefsSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public ApiResponse<AdminConversationsSetConversationPrefsSchema> adminConversationsSetConversationPrefsWithHttpInfo(String token, String channelId, String prefs) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsSetConversationPrefsValidateBeforeCall(token, channelId, prefs, null);
        Type localVarReturnType = new TypeToken<AdminConversationsSetConversationPrefsSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSetConversationPrefsAsync(String token, String channelId, String prefs, final ApiCallback<AdminConversationsSetConversationPrefsSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsSetConversationPrefsValidateBeforeCall(token, channelId, prefs, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsSetConversationPrefsSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsSetTeams
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSetTeamsCall(String token, String channelId, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.setTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (orgChannel != null) {
            localVarFormParams.put("org_channel", orgChannel);
        }

        if (targetTeamIds != null) {
            localVarFormParams.put("target_team_ids", targetTeamIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsSetTeamsValidateBeforeCall(String token, String channelId, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsSetTeams(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsSetTeams(Async)");
        }

        return adminConversationsSetTeamsCall(token, channelId, orgChannel, targetTeamIds, teamId, _callback);

    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public DefaultSuccessTemplate adminConversationsSetTeams(String token, String channelId, Boolean orgChannel, String targetTeamIds, String teamId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminConversationsSetTeamsWithHttpInfo(token, channelId, orgChannel, targetTeamIds, teamId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminConversationsSetTeamsWithHttpInfo(String token, String channelId, Boolean orgChannel, String targetTeamIds, String teamId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsSetTeamsValidateBeforeCall(token, channelId, orgChannel, targetTeamIds, teamId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public okhttp3.Call adminConversationsSetTeamsAsync(String token, String channelId, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsSetTeamsValidateBeforeCall(token, channelId, orgChannel, targetTeamIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConversationsUnarchive
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public okhttp3.Call adminConversationsUnarchiveCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.unarchive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConversationsUnarchiveValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminConversationsUnarchive(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling adminConversationsUnarchive(Async)");
        }

        return adminConversationsUnarchiveCall(token, channelId, _callback);

    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @return AdminConversationsUnarchiveSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public AdminConversationsUnarchiveSchema adminConversationsUnarchive(String token, String channelId) throws ApiException {
        ApiResponse<AdminConversationsUnarchiveSchema> localVarResp = adminConversationsUnarchiveWithHttpInfo(token, channelId);
        return localVarResp.getData();
    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @return ApiResponse&lt;AdminConversationsUnarchiveSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public ApiResponse<AdminConversationsUnarchiveSchema> adminConversationsUnarchiveWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = adminConversationsUnarchiveValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminConversationsUnarchiveSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public okhttp3.Call adminConversationsUnarchiveAsync(String token, String channelId, final ApiCallback<AdminConversationsUnarchiveSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConversationsUnarchiveValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminConversationsUnarchiveSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
