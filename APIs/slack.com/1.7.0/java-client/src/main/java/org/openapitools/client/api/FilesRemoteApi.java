/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesRemoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesRemoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesRemoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for filesRemoteAdd
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public okhttp3.Call filesRemoteAddCall(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteAddValidateBeforeCall(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteAddCall(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, _callback);

    }

    /**
     * 
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteAdd(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteAddWithHttpInfo(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteAddWithHttpInfo(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteAddValidateBeforeCall(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a file from a remote service
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public okhttp3.Call filesRemoteAddAsync(String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteAddValidateBeforeCall(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteInfo
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public okhttp3.Call filesRemoteInfoCall(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteInfoValidateBeforeCall(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        return filesRemoteInfoCall(token, _file, externalId, _callback);

    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteInfo(String token, String _file, String externalId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteInfoWithHttpInfo(token, _file, externalId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteInfoWithHttpInfo(String token, String _file, String externalId) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteInfoValidateBeforeCall(token, _file, externalId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public okhttp3.Call filesRemoteInfoAsync(String token, String _file, String externalId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteInfoValidateBeforeCall(token, _file, externalId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteList
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public okhttp3.Call filesRemoteListCall(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_from", tsFrom));
        }

        if (tsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_to", tsTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteListValidateBeforeCall(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return filesRemoteListCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);

    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteList(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteListWithHttpInfo(token, channel, tsFrom, tsTo, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteListWithHttpInfo(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteListValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve information about a remote file added to Slack
     * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
     * @param tsTo Filter files created before this timestamp (inclusive). (optional)
     * @param limit The maximum number of items to return. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public okhttp3.Call filesRemoteListAsync(String token, String channel, BigDecimal tsFrom, BigDecimal tsTo, Integer limit, String cursor, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteListValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteRemove
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public okhttp3.Call filesRemoteRemoveCall(String externalId, String _file, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteRemoveValidateBeforeCall(String externalId, String _file, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteRemoveCall(externalId, _file, token, _callback);

    }

    /**
     * 
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteRemove(String externalId, String _file, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteRemoveWithHttpInfo(externalId, _file, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteRemoveWithHttpInfo(String externalId, String _file, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteRemoveValidateBeforeCall(externalId, _file, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public okhttp3.Call filesRemoteRemoveAsync(String externalId, String _file, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteRemoveValidateBeforeCall(externalId, _file, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteShare
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public okhttp3.Call filesRemoteShareCall(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (channels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channels", channels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteShareValidateBeforeCall(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        return filesRemoteShareCall(token, _file, externalId, channels, _callback);

    }

    /**
     * 
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteShare(String token, String _file, String externalId, String channels) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteShareWithHttpInfo(token, _file, externalId, channels);
        return localVarResp.getData();
    }

    /**
     * 
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteShareWithHttpInfo(String token, String _file, String externalId, String channels) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteShareValidateBeforeCall(token, _file, externalId, channels, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Share a remote file into a channel.
     * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public okhttp3.Call filesRemoteShareAsync(String token, String _file, String externalId, String channels, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteShareValidateBeforeCall(token, _file, externalId, channels, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filesRemoteUpdate
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public okhttp3.Call filesRemoteUpdateCall(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filesRemoteUpdateValidateBeforeCall(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback _callback) throws ApiException {
        return filesRemoteUpdateCall(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, _callback);

    }

    /**
     * 
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public DefaultSuccessTemplate filesRemoteUpdate(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = filesRemoteUpdateWithHttpInfo(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> filesRemoteUpdateWithHttpInfo(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token) throws ApiException {
        okhttp3.Call localVarCall = filesRemoteUpdateValidateBeforeCall(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing remote file.
     * @param externalId Creator defined GUID for the file. (optional)
     * @param externalUrl URL of the remote file. (optional)
     * @param _file Specify a file by providing its ID. (optional)
     * @param filetype type of file (optional)
     * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param title Title of the file being shared. (optional)
     * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public okhttp3.Call filesRemoteUpdateAsync(String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String title, String token, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = filesRemoteUpdateValidateBeforeCall(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
