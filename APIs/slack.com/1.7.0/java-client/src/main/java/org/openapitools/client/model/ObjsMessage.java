/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.BlocksInner;
import org.openapitools.client.model.ObjsBotProfile;
import org.openapitools.client.model.ObjsComment;
import org.openapitools.client.model.ObjsFile;
import org.openapitools.client.model.ObjsMessageAttachmentsInner;
import org.openapitools.client.model.ObjsMessageBotIdInner;
import org.openapitools.client.model.ObjsMessageIcons;
import org.openapitools.client.model.ObjsReaction;
import org.openapitools.client.model.ObjsUserProfileShort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjsMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjsMessage {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private Set<ObjsMessageAttachmentsInner> attachments = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private List<BlocksInner> blocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOT_ID = "bot_id";
  @SerializedName(SERIALIZED_NAME_BOT_ID)
  private List<ObjsMessageBotIdInner> botId = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOT_PROFILE = "bot_profile";
  @SerializedName(SERIALIZED_NAME_BOT_PROFILE)
  private ObjsBotProfile botProfile;

  public static final String SERIALIZED_NAME_CLIENT_MSG_ID = "client_msg_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_MSG_ID)
  private String clientMsgId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private ObjsComment comment;

  public static final String SERIALIZED_NAME_DISPLAY_AS_BOT = "display_as_bot";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AS_BOT)
  private Boolean displayAsBot;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ObjsFile _file;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Set<ObjsFile> files = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private ObjsMessageIcons icons;

  public static final String SERIALIZED_NAME_INVITER = "inviter";
  @SerializedName(SERIALIZED_NAME_INVITER)
  private String inviter;

  public static final String SERIALIZED_NAME_IS_DELAYED_MESSAGE = "is_delayed_message";
  @SerializedName(SERIALIZED_NAME_IS_DELAYED_MESSAGE)
  private Boolean isDelayedMessage;

  public static final String SERIALIZED_NAME_IS_INTRO = "is_intro";
  @SerializedName(SERIALIZED_NAME_IS_INTRO)
  private Boolean isIntro;

  public static final String SERIALIZED_NAME_IS_STARRED = "is_starred";
  @SerializedName(SERIALIZED_NAME_IS_STARRED)
  private Boolean isStarred;

  public static final String SERIALIZED_NAME_LAST_READ = "last_read";
  @SerializedName(SERIALIZED_NAME_LAST_READ)
  private String lastRead;

  public static final String SERIALIZED_NAME_LATEST_REPLY = "latest_reply";
  @SerializedName(SERIALIZED_NAME_LATEST_REPLY)
  private String latestReply;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OLD_NAME = "old_name";
  @SerializedName(SERIALIZED_NAME_OLD_NAME)
  private String oldName;

  public static final String SERIALIZED_NAME_PARENT_USER_ID = "parent_user_id";
  @SerializedName(SERIALIZED_NAME_PARENT_USER_ID)
  private String parentUserId;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private URI permalink;

  public static final String SERIALIZED_NAME_PINNED_TO = "pinned_to";
  @SerializedName(SERIALIZED_NAME_PINNED_TO)
  private List<String> pinnedTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private List<ObjsReaction> reactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_REPLY_USERS = "reply_users";
  @SerializedName(SERIALIZED_NAME_REPLY_USERS)
  private Set<String> replyUsers = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REPLY_USERS_COUNT = "reply_users_count";
  @SerializedName(SERIALIZED_NAME_REPLY_USERS_COUNT)
  private Integer replyUsersCount;

  public static final String SERIALIZED_NAME_SOURCE_TEAM = "source_team";
  @SerializedName(SERIALIZED_NAME_SOURCE_TEAM)
  private String sourceTeam;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private Boolean subscribed;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private String subtype;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THREAD_TS = "thread_ts";
  @SerializedName(SERIALIZED_NAME_THREAD_TS)
  private String threadTs;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNREAD_COUNT = "unread_count";
  @SerializedName(SERIALIZED_NAME_UNREAD_COUNT)
  private Integer unreadCount;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private Boolean upload;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_PROFILE = "user_profile";
  @SerializedName(SERIALIZED_NAME_USER_PROFILE)
  private ObjsUserProfileShort userProfile;

  public static final String SERIALIZED_NAME_USER_TEAM = "user_team";
  @SerializedName(SERIALIZED_NAME_USER_TEAM)
  private String userTeam;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public ObjsMessage() {
  }

  public ObjsMessage attachments(Set<ObjsMessageAttachmentsInner> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ObjsMessage addAttachmentsItem(ObjsMessageAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new LinkedHashSet<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public Set<ObjsMessageAttachmentsInner> getAttachments() {
    return attachments;
  }

  public void setAttachments(Set<ObjsMessageAttachmentsInner> attachments) {
    this.attachments = attachments;
  }


  public ObjsMessage blocks(List<BlocksInner> blocks) {
    this.blocks = blocks;
    return this;
  }

  public ObjsMessage addBlocksItem(BlocksInner blocksItem) {
    if (this.blocks == null) {
      this.blocks = new ArrayList<>();
    }
    this.blocks.add(blocksItem);
    return this;
  }

  /**
   * This is a very loose definition, in the future, we&#39;ll populate this with deeper schema in this definition namespace.
   * @return blocks
   */
  @javax.annotation.Nullable
  public List<BlocksInner> getBlocks() {
    return blocks;
  }

  public void setBlocks(List<BlocksInner> blocks) {
    this.blocks = blocks;
  }


  public ObjsMessage botId(List<ObjsMessageBotIdInner> botId) {
    this.botId = botId;
    return this;
  }

  public ObjsMessage addBotIdItem(ObjsMessageBotIdInner botIdItem) {
    if (this.botId == null) {
      this.botId = new ArrayList<>();
    }
    this.botId.add(botIdItem);
    return this;
  }

  /**
   * Get botId
   * @return botId
   */
  @javax.annotation.Nullable
  public List<ObjsMessageBotIdInner> getBotId() {
    return botId;
  }

  public void setBotId(List<ObjsMessageBotIdInner> botId) {
    this.botId = botId;
  }


  public ObjsMessage botProfile(ObjsBotProfile botProfile) {
    this.botProfile = botProfile;
    return this;
  }

  /**
   * Get botProfile
   * @return botProfile
   */
  @javax.annotation.Nullable
  public ObjsBotProfile getBotProfile() {
    return botProfile;
  }

  public void setBotProfile(ObjsBotProfile botProfile) {
    this.botProfile = botProfile;
  }


  public ObjsMessage clientMsgId(String clientMsgId) {
    this.clientMsgId = clientMsgId;
    return this;
  }

  /**
   * Get clientMsgId
   * @return clientMsgId
   */
  @javax.annotation.Nullable
  public String getClientMsgId() {
    return clientMsgId;
  }

  public void setClientMsgId(String clientMsgId) {
    this.clientMsgId = clientMsgId;
  }


  public ObjsMessage comment(ObjsComment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public ObjsComment getComment() {
    return comment;
  }

  public void setComment(ObjsComment comment) {
    this.comment = comment;
  }


  public ObjsMessage displayAsBot(Boolean displayAsBot) {
    this.displayAsBot = displayAsBot;
    return this;
  }

  /**
   * Get displayAsBot
   * @return displayAsBot
   */
  @javax.annotation.Nullable
  public Boolean getDisplayAsBot() {
    return displayAsBot;
  }

  public void setDisplayAsBot(Boolean displayAsBot) {
    this.displayAsBot = displayAsBot;
  }


  public ObjsMessage _file(ObjsFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public ObjsFile getFile() {
    return _file;
  }

  public void setFile(ObjsFile _file) {
    this._file = _file;
  }


  public ObjsMessage files(Set<ObjsFile> files) {
    this.files = files;
    return this;
  }

  public ObjsMessage addFilesItem(ObjsFile filesItem) {
    if (this.files == null) {
      this.files = new LinkedHashSet<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public Set<ObjsFile> getFiles() {
    return files;
  }

  public void setFiles(Set<ObjsFile> files) {
    this.files = files;
  }


  public ObjsMessage icons(ObjsMessageIcons icons) {
    this.icons = icons;
    return this;
  }

  /**
   * Get icons
   * @return icons
   */
  @javax.annotation.Nullable
  public ObjsMessageIcons getIcons() {
    return icons;
  }

  public void setIcons(ObjsMessageIcons icons) {
    this.icons = icons;
  }


  public ObjsMessage inviter(String inviter) {
    this.inviter = inviter;
    return this;
  }

  /**
   * Get inviter
   * @return inviter
   */
  @javax.annotation.Nullable
  public String getInviter() {
    return inviter;
  }

  public void setInviter(String inviter) {
    this.inviter = inviter;
  }


  public ObjsMessage isDelayedMessage(Boolean isDelayedMessage) {
    this.isDelayedMessage = isDelayedMessage;
    return this;
  }

  /**
   * Get isDelayedMessage
   * @return isDelayedMessage
   */
  @javax.annotation.Nullable
  public Boolean getIsDelayedMessage() {
    return isDelayedMessage;
  }

  public void setIsDelayedMessage(Boolean isDelayedMessage) {
    this.isDelayedMessage = isDelayedMessage;
  }


  public ObjsMessage isIntro(Boolean isIntro) {
    this.isIntro = isIntro;
    return this;
  }

  /**
   * Get isIntro
   * @return isIntro
   */
  @javax.annotation.Nullable
  public Boolean getIsIntro() {
    return isIntro;
  }

  public void setIsIntro(Boolean isIntro) {
    this.isIntro = isIntro;
  }


  public ObjsMessage isStarred(Boolean isStarred) {
    this.isStarred = isStarred;
    return this;
  }

  /**
   * Get isStarred
   * @return isStarred
   */
  @javax.annotation.Nullable
  public Boolean getIsStarred() {
    return isStarred;
  }

  public void setIsStarred(Boolean isStarred) {
    this.isStarred = isStarred;
  }


  public ObjsMessage lastRead(String lastRead) {
    this.lastRead = lastRead;
    return this;
  }

  /**
   * Get lastRead
   * @return lastRead
   */
  @javax.annotation.Nullable
  public String getLastRead() {
    return lastRead;
  }

  public void setLastRead(String lastRead) {
    this.lastRead = lastRead;
  }


  public ObjsMessage latestReply(String latestReply) {
    this.latestReply = latestReply;
    return this;
  }

  /**
   * Get latestReply
   * @return latestReply
   */
  @javax.annotation.Nullable
  public String getLatestReply() {
    return latestReply;
  }

  public void setLatestReply(String latestReply) {
    this.latestReply = latestReply;
  }


  public ObjsMessage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ObjsMessage oldName(String oldName) {
    this.oldName = oldName;
    return this;
  }

  /**
   * Get oldName
   * @return oldName
   */
  @javax.annotation.Nullable
  public String getOldName() {
    return oldName;
  }

  public void setOldName(String oldName) {
    this.oldName = oldName;
  }


  public ObjsMessage parentUserId(String parentUserId) {
    this.parentUserId = parentUserId;
    return this;
  }

  /**
   * Get parentUserId
   * @return parentUserId
   */
  @javax.annotation.Nullable
  public String getParentUserId() {
    return parentUserId;
  }

  public void setParentUserId(String parentUserId) {
    this.parentUserId = parentUserId;
  }


  public ObjsMessage permalink(URI permalink) {
    this.permalink = permalink;
    return this;
  }

  /**
   * Get permalink
   * @return permalink
   */
  @javax.annotation.Nullable
  public URI getPermalink() {
    return permalink;
  }

  public void setPermalink(URI permalink) {
    this.permalink = permalink;
  }


  public ObjsMessage pinnedTo(List<String> pinnedTo) {
    this.pinnedTo = pinnedTo;
    return this;
  }

  public ObjsMessage addPinnedToItem(String pinnedToItem) {
    if (this.pinnedTo == null) {
      this.pinnedTo = new ArrayList<>();
    }
    this.pinnedTo.add(pinnedToItem);
    return this;
  }

  /**
   * Get pinnedTo
   * @return pinnedTo
   */
  @javax.annotation.Nullable
  public List<String> getPinnedTo() {
    return pinnedTo;
  }

  public void setPinnedTo(List<String> pinnedTo) {
    this.pinnedTo = pinnedTo;
  }


  public ObjsMessage purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public ObjsMessage reactions(List<ObjsReaction> reactions) {
    this.reactions = reactions;
    return this;
  }

  public ObjsMessage addReactionsItem(ObjsReaction reactionsItem) {
    if (this.reactions == null) {
      this.reactions = new ArrayList<>();
    }
    this.reactions.add(reactionsItem);
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public List<ObjsReaction> getReactions() {
    return reactions;
  }

  public void setReactions(List<ObjsReaction> reactions) {
    this.reactions = reactions;
  }


  public ObjsMessage replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nullable
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public ObjsMessage replyUsers(Set<String> replyUsers) {
    this.replyUsers = replyUsers;
    return this;
  }

  public ObjsMessage addReplyUsersItem(String replyUsersItem) {
    if (this.replyUsers == null) {
      this.replyUsers = new LinkedHashSet<>();
    }
    this.replyUsers.add(replyUsersItem);
    return this;
  }

  /**
   * Get replyUsers
   * @return replyUsers
   */
  @javax.annotation.Nullable
  public Set<String> getReplyUsers() {
    return replyUsers;
  }

  public void setReplyUsers(Set<String> replyUsers) {
    this.replyUsers = replyUsers;
  }


  public ObjsMessage replyUsersCount(Integer replyUsersCount) {
    this.replyUsersCount = replyUsersCount;
    return this;
  }

  /**
   * Get replyUsersCount
   * @return replyUsersCount
   */
  @javax.annotation.Nullable
  public Integer getReplyUsersCount() {
    return replyUsersCount;
  }

  public void setReplyUsersCount(Integer replyUsersCount) {
    this.replyUsersCount = replyUsersCount;
  }


  public ObjsMessage sourceTeam(String sourceTeam) {
    this.sourceTeam = sourceTeam;
    return this;
  }

  /**
   * Get sourceTeam
   * @return sourceTeam
   */
  @javax.annotation.Nullable
  public String getSourceTeam() {
    return sourceTeam;
  }

  public void setSourceTeam(String sourceTeam) {
    this.sourceTeam = sourceTeam;
  }


  public ObjsMessage subscribed(Boolean subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  /**
   * Get subscribed
   * @return subscribed
   */
  @javax.annotation.Nullable
  public Boolean getSubscribed() {
    return subscribed;
  }

  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }


  public ObjsMessage subtype(String subtype) {
    this.subtype = subtype;
    return this;
  }

  /**
   * Get subtype
   * @return subtype
   */
  @javax.annotation.Nullable
  public String getSubtype() {
    return subtype;
  }

  public void setSubtype(String subtype) {
    this.subtype = subtype;
  }


  public ObjsMessage team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public ObjsMessage text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ObjsMessage threadTs(String threadTs) {
    this.threadTs = threadTs;
    return this;
  }

  /**
   * Get threadTs
   * @return threadTs
   */
  @javax.annotation.Nullable
  public String getThreadTs() {
    return threadTs;
  }

  public void setThreadTs(String threadTs) {
    this.threadTs = threadTs;
  }


  public ObjsMessage topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ObjsMessage ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Get ts
   * @return ts
   */
  @javax.annotation.Nonnull
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }


  public ObjsMessage type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ObjsMessage unreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
    return this;
  }

  /**
   * Get unreadCount
   * @return unreadCount
   */
  @javax.annotation.Nullable
  public Integer getUnreadCount() {
    return unreadCount;
  }

  public void setUnreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
  }


  public ObjsMessage upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Get upload
   * @return upload
   */
  @javax.annotation.Nullable
  public Boolean getUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }


  public ObjsMessage user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public ObjsMessage userProfile(ObjsUserProfileShort userProfile) {
    this.userProfile = userProfile;
    return this;
  }

  /**
   * Get userProfile
   * @return userProfile
   */
  @javax.annotation.Nullable
  public ObjsUserProfileShort getUserProfile() {
    return userProfile;
  }

  public void setUserProfile(ObjsUserProfileShort userProfile) {
    this.userProfile = userProfile;
  }


  public ObjsMessage userTeam(String userTeam) {
    this.userTeam = userTeam;
    return this;
  }

  /**
   * Get userTeam
   * @return userTeam
   */
  @javax.annotation.Nullable
  public String getUserTeam() {
    return userTeam;
  }

  public void setUserTeam(String userTeam) {
    this.userTeam = userTeam;
  }


  public ObjsMessage username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjsMessage objsMessage = (ObjsMessage) o;
    return Objects.equals(this.attachments, objsMessage.attachments) &&
        Objects.equals(this.blocks, objsMessage.blocks) &&
        Objects.equals(this.botId, objsMessage.botId) &&
        Objects.equals(this.botProfile, objsMessage.botProfile) &&
        Objects.equals(this.clientMsgId, objsMessage.clientMsgId) &&
        Objects.equals(this.comment, objsMessage.comment) &&
        Objects.equals(this.displayAsBot, objsMessage.displayAsBot) &&
        Objects.equals(this._file, objsMessage._file) &&
        Objects.equals(this.files, objsMessage.files) &&
        Objects.equals(this.icons, objsMessage.icons) &&
        Objects.equals(this.inviter, objsMessage.inviter) &&
        Objects.equals(this.isDelayedMessage, objsMessage.isDelayedMessage) &&
        Objects.equals(this.isIntro, objsMessage.isIntro) &&
        Objects.equals(this.isStarred, objsMessage.isStarred) &&
        Objects.equals(this.lastRead, objsMessage.lastRead) &&
        Objects.equals(this.latestReply, objsMessage.latestReply) &&
        Objects.equals(this.name, objsMessage.name) &&
        Objects.equals(this.oldName, objsMessage.oldName) &&
        Objects.equals(this.parentUserId, objsMessage.parentUserId) &&
        Objects.equals(this.permalink, objsMessage.permalink) &&
        Objects.equals(this.pinnedTo, objsMessage.pinnedTo) &&
        Objects.equals(this.purpose, objsMessage.purpose) &&
        Objects.equals(this.reactions, objsMessage.reactions) &&
        Objects.equals(this.replyCount, objsMessage.replyCount) &&
        Objects.equals(this.replyUsers, objsMessage.replyUsers) &&
        Objects.equals(this.replyUsersCount, objsMessage.replyUsersCount) &&
        Objects.equals(this.sourceTeam, objsMessage.sourceTeam) &&
        Objects.equals(this.subscribed, objsMessage.subscribed) &&
        Objects.equals(this.subtype, objsMessage.subtype) &&
        Objects.equals(this.team, objsMessage.team) &&
        Objects.equals(this.text, objsMessage.text) &&
        Objects.equals(this.threadTs, objsMessage.threadTs) &&
        Objects.equals(this.topic, objsMessage.topic) &&
        Objects.equals(this.ts, objsMessage.ts) &&
        Objects.equals(this.type, objsMessage.type) &&
        Objects.equals(this.unreadCount, objsMessage.unreadCount) &&
        Objects.equals(this.upload, objsMessage.upload) &&
        Objects.equals(this.user, objsMessage.user) &&
        Objects.equals(this.userProfile, objsMessage.userProfile) &&
        Objects.equals(this.userTeam, objsMessage.userTeam) &&
        Objects.equals(this.username, objsMessage.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, blocks, botId, botProfile, clientMsgId, comment, displayAsBot, _file, files, icons, inviter, isDelayedMessage, isIntro, isStarred, lastRead, latestReply, name, oldName, parentUserId, permalink, pinnedTo, purpose, reactions, replyCount, replyUsers, replyUsersCount, sourceTeam, subscribed, subtype, team, text, threadTs, topic, ts, type, unreadCount, upload, user, userProfile, userTeam, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjsMessage {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    botId: ").append(toIndentedString(botId)).append("\n");
    sb.append("    botProfile: ").append(toIndentedString(botProfile)).append("\n");
    sb.append("    clientMsgId: ").append(toIndentedString(clientMsgId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    displayAsBot: ").append(toIndentedString(displayAsBot)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    inviter: ").append(toIndentedString(inviter)).append("\n");
    sb.append("    isDelayedMessage: ").append(toIndentedString(isDelayedMessage)).append("\n");
    sb.append("    isIntro: ").append(toIndentedString(isIntro)).append("\n");
    sb.append("    isStarred: ").append(toIndentedString(isStarred)).append("\n");
    sb.append("    lastRead: ").append(toIndentedString(lastRead)).append("\n");
    sb.append("    latestReply: ").append(toIndentedString(latestReply)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oldName: ").append(toIndentedString(oldName)).append("\n");
    sb.append("    parentUserId: ").append(toIndentedString(parentUserId)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    pinnedTo: ").append(toIndentedString(pinnedTo)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    replyUsers: ").append(toIndentedString(replyUsers)).append("\n");
    sb.append("    replyUsersCount: ").append(toIndentedString(replyUsersCount)).append("\n");
    sb.append("    sourceTeam: ").append(toIndentedString(sourceTeam)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    threadTs: ").append(toIndentedString(threadTs)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unreadCount: ").append(toIndentedString(unreadCount)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userProfile: ").append(toIndentedString(userProfile)).append("\n");
    sb.append("    userTeam: ").append(toIndentedString(userTeam)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("blocks");
    openapiFields.add("bot_id");
    openapiFields.add("bot_profile");
    openapiFields.add("client_msg_id");
    openapiFields.add("comment");
    openapiFields.add("display_as_bot");
    openapiFields.add("file");
    openapiFields.add("files");
    openapiFields.add("icons");
    openapiFields.add("inviter");
    openapiFields.add("is_delayed_message");
    openapiFields.add("is_intro");
    openapiFields.add("is_starred");
    openapiFields.add("last_read");
    openapiFields.add("latest_reply");
    openapiFields.add("name");
    openapiFields.add("old_name");
    openapiFields.add("parent_user_id");
    openapiFields.add("permalink");
    openapiFields.add("pinned_to");
    openapiFields.add("purpose");
    openapiFields.add("reactions");
    openapiFields.add("reply_count");
    openapiFields.add("reply_users");
    openapiFields.add("reply_users_count");
    openapiFields.add("source_team");
    openapiFields.add("subscribed");
    openapiFields.add("subtype");
    openapiFields.add("team");
    openapiFields.add("text");
    openapiFields.add("thread_ts");
    openapiFields.add("topic");
    openapiFields.add("ts");
    openapiFields.add("type");
    openapiFields.add("unread_count");
    openapiFields.add("upload");
    openapiFields.add("user");
    openapiFields.add("user_profile");
    openapiFields.add("user_team");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("ts");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjsMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjsMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjsMessage is not found in the empty JSON string", ObjsMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjsMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjsMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjsMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            ObjsMessageAttachmentsInner.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blocks") != null && !jsonObj.get("blocks").isJsonNull() && !jsonObj.get("blocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocks` to be an array in the JSON string but got `%s`", jsonObj.get("blocks").toString()));
      }
      if (jsonObj.get("bot_id") != null && !jsonObj.get("bot_id").isJsonNull()) {
        JsonArray jsonArraybotId = jsonObj.getAsJsonArray("bot_id");
        if (jsonArraybotId != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bot_id").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bot_id` to be an array in the JSON string but got `%s`", jsonObj.get("bot_id").toString()));
          }

          // validate the optional field `bot_id` (array)
          for (int i = 0; i < jsonArraybotId.size(); i++) {
            ObjsMessageBotIdInner.validateJsonElement(jsonArraybotId.get(i));
          };
        }
      }
      // validate the optional field `bot_profile`
      if (jsonObj.get("bot_profile") != null && !jsonObj.get("bot_profile").isJsonNull()) {
        ObjsBotProfile.validateJsonElement(jsonObj.get("bot_profile"));
      }
      if ((jsonObj.get("client_msg_id") != null && !jsonObj.get("client_msg_id").isJsonNull()) && !jsonObj.get("client_msg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_msg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_msg_id").toString()));
      }
      // validate the optional field `comment`
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) {
        ObjsComment.validateJsonElement(jsonObj.get("comment"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        ObjsFile.validateJsonElement(jsonObj.get("file"));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            ObjsFile.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `icons`
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        ObjsMessageIcons.validateJsonElement(jsonObj.get("icons"));
      }
      if ((jsonObj.get("inviter") != null && !jsonObj.get("inviter").isJsonNull()) && !jsonObj.get("inviter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inviter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inviter").toString()));
      }
      if ((jsonObj.get("last_read") != null && !jsonObj.get("last_read").isJsonNull()) && !jsonObj.get("last_read").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_read` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_read").toString()));
      }
      if ((jsonObj.get("latest_reply") != null && !jsonObj.get("latest_reply").isJsonNull()) && !jsonObj.get("latest_reply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_reply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_reply").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("old_name") != null && !jsonObj.get("old_name").isJsonNull()) && !jsonObj.get("old_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_name").toString()));
      }
      if ((jsonObj.get("parent_user_id") != null && !jsonObj.get("parent_user_id").isJsonNull()) && !jsonObj.get("parent_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_user_id").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pinned_to") != null && !jsonObj.get("pinned_to").isJsonNull() && !jsonObj.get("pinned_to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_to` to be an array in the JSON string but got `%s`", jsonObj.get("pinned_to").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull() && !jsonObj.get("reactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reactions` to be an array in the JSON string but got `%s`", jsonObj.get("reactions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reply_users") != null && !jsonObj.get("reply_users").isJsonNull() && !jsonObj.get("reply_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_users` to be an array in the JSON string but got `%s`", jsonObj.get("reply_users").toString()));
      }
      if ((jsonObj.get("source_team") != null && !jsonObj.get("source_team").isJsonNull()) && !jsonObj.get("source_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_team").toString()));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("thread_ts") != null && !jsonObj.get("thread_ts").isJsonNull()) && !jsonObj.get("thread_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thread_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thread_ts").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if (!jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      // validate the optional field `user_profile`
      if (jsonObj.get("user_profile") != null && !jsonObj.get("user_profile").isJsonNull()) {
        ObjsUserProfileShort.validateJsonElement(jsonObj.get("user_profile"));
      }
      if ((jsonObj.get("user_team") != null && !jsonObj.get("user_team").isJsonNull()) && !jsonObj.get("user_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_team").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjsMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjsMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjsMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjsMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjsMessage>() {
           @Override
           public void write(JsonWriter out, ObjsMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjsMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjsMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjsMessage
   * @throws IOException if the JSON string is invalid with respect to ObjsMessage
   */
  public static ObjsMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjsMessage.class);
  }

  /**
   * Convert an instance of ObjsMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

