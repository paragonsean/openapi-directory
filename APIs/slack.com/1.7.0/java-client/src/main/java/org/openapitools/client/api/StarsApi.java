/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StarsAddErrorSchema;
import org.openapitools.client.model.StarsAddSchema;
import org.openapitools.client.model.StarsListErrorSchema;
import org.openapitools.client.model.StarsListSchema;
import org.openapitools.client.model.StarsRemoveErrorSchema;
import org.openapitools.client.model.StarsRemoveSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for starsAdd
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.add"> Documentation</a>
     */
    public okhttp3.Call starsAddCall(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stars.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileComment != null) {
            localVarFormParams.put("file_comment", fileComment);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call starsAddValidateBeforeCall(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling starsAdd(Async)");
        }

        return starsAddCall(token, channel, _file, fileComment, timestamp, _callback);

    }

    /**
     * 
     * Adds a star to an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @return StarsAddSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.add"> Documentation</a>
     */
    public StarsAddSchema starsAdd(String token, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        ApiResponse<StarsAddSchema> localVarResp = starsAddWithHttpInfo(token, channel, _file, fileComment, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a star to an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @return ApiResponse&lt;StarsAddSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.add"> Documentation</a>
     */
    public ApiResponse<StarsAddSchema> starsAddWithHttpInfo(String token, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = starsAddValidateBeforeCall(token, channel, _file, fileComment, timestamp, null);
        Type localVarReturnType = new TypeToken<StarsAddSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a star to an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.add"> Documentation</a>
     */
    public okhttp3.Call starsAddAsync(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback<StarsAddSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = starsAddValidateBeforeCall(token, channel, _file, fileComment, timestamp, _callback);
        Type localVarReturnType = new TypeToken<StarsAddSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for starsList
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.list"> Documentation</a>
     */
    public okhttp3.Call starsListCall(String token, String count, String page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stars.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call starsListValidateBeforeCall(String token, String count, String page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return starsListCall(token, count, page, cursor, limit, _callback);

    }

    /**
     * 
     * Lists stars for a user.
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return StarsListSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.list"> Documentation</a>
     */
    public StarsListSchema starsList(String token, String count, String page, String cursor, Integer limit) throws ApiException {
        ApiResponse<StarsListSchema> localVarResp = starsListWithHttpInfo(token, count, page, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists stars for a user.
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ApiResponse&lt;StarsListSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.list"> Documentation</a>
     */
    public ApiResponse<StarsListSchema> starsListWithHttpInfo(String token, String count, String page, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = starsListValidateBeforeCall(token, count, page, cursor, limit, null);
        Type localVarReturnType = new TypeToken<StarsListSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists stars for a user.
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.list"> Documentation</a>
     */
    public okhttp3.Call starsListAsync(String token, String count, String page, String cursor, Integer limit, final ApiCallback<StarsListSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = starsListValidateBeforeCall(token, count, page, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<StarsListSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for starsRemove
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.remove"> Documentation</a>
     */
    public okhttp3.Call starsRemoveCall(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stars.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileComment != null) {
            localVarFormParams.put("file_comment", fileComment);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call starsRemoveValidateBeforeCall(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling starsRemove(Async)");
        }

        return starsRemoveCall(token, channel, _file, fileComment, timestamp, _callback);

    }

    /**
     * 
     * Removes a star from an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @return StarsRemoveSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.remove"> Documentation</a>
     */
    public StarsRemoveSchema starsRemove(String token, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        ApiResponse<StarsRemoveSchema> localVarResp = starsRemoveWithHttpInfo(token, channel, _file, fileComment, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a star from an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @return ApiResponse&lt;StarsRemoveSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.remove"> Documentation</a>
     */
    public ApiResponse<StarsRemoveSchema> starsRemoveWithHttpInfo(String token, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = starsRemoveValidateBeforeCall(token, channel, _file, fileComment, timestamp, null);
        Type localVarReturnType = new TypeToken<StarsRemoveSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a star from an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60; (required)
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param _file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/stars.remove"> Documentation</a>
     */
    public okhttp3.Call starsRemoveAsync(String token, String channel, String _file, String fileComment, String timestamp, final ApiCallback<StarsRemoveSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = starsRemoveValidateBeforeCall(token, channel, _file, fileComment, timestamp, _callback);
        Type localVarReturnType = new TypeToken<StarsRemoveSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
