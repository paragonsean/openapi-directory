/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BotsInfoSchemaBotIcons
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BotsInfoSchemaBotIcons {
  public static final String SERIALIZED_NAME_IMAGE36 = "image_36";
  @SerializedName(SERIALIZED_NAME_IMAGE36)
  private URI image36;

  public static final String SERIALIZED_NAME_IMAGE48 = "image_48";
  @SerializedName(SERIALIZED_NAME_IMAGE48)
  private URI image48;

  public static final String SERIALIZED_NAME_IMAGE72 = "image_72";
  @SerializedName(SERIALIZED_NAME_IMAGE72)
  private URI image72;

  public BotsInfoSchemaBotIcons() {
  }

  public BotsInfoSchemaBotIcons image36(URI image36) {
    this.image36 = image36;
    return this;
  }

  /**
   * Get image36
   * @return image36
   */
  @javax.annotation.Nonnull
  public URI getImage36() {
    return image36;
  }

  public void setImage36(URI image36) {
    this.image36 = image36;
  }


  public BotsInfoSchemaBotIcons image48(URI image48) {
    this.image48 = image48;
    return this;
  }

  /**
   * Get image48
   * @return image48
   */
  @javax.annotation.Nonnull
  public URI getImage48() {
    return image48;
  }

  public void setImage48(URI image48) {
    this.image48 = image48;
  }


  public BotsInfoSchemaBotIcons image72(URI image72) {
    this.image72 = image72;
    return this;
  }

  /**
   * Get image72
   * @return image72
   */
  @javax.annotation.Nonnull
  public URI getImage72() {
    return image72;
  }

  public void setImage72(URI image72) {
    this.image72 = image72;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BotsInfoSchemaBotIcons botsInfoSchemaBotIcons = (BotsInfoSchemaBotIcons) o;
    return Objects.equals(this.image36, botsInfoSchemaBotIcons.image36) &&
        Objects.equals(this.image48, botsInfoSchemaBotIcons.image48) &&
        Objects.equals(this.image72, botsInfoSchemaBotIcons.image72);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image36, image48, image72);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BotsInfoSchemaBotIcons {\n");
    sb.append("    image36: ").append(toIndentedString(image36)).append("\n");
    sb.append("    image48: ").append(toIndentedString(image48)).append("\n");
    sb.append("    image72: ").append(toIndentedString(image72)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image_36");
    openapiFields.add("image_48");
    openapiFields.add("image_72");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image_36");
    openapiRequiredFields.add("image_48");
    openapiRequiredFields.add("image_72");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BotsInfoSchemaBotIcons
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BotsInfoSchemaBotIcons.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BotsInfoSchemaBotIcons is not found in the empty JSON string", BotsInfoSchemaBotIcons.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BotsInfoSchemaBotIcons.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BotsInfoSchemaBotIcons` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BotsInfoSchemaBotIcons.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("image_36").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_36` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_36").toString()));
      }
      if (!jsonObj.get("image_48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_48").toString()));
      }
      if (!jsonObj.get("image_72").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_72` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_72").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BotsInfoSchemaBotIcons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BotsInfoSchemaBotIcons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BotsInfoSchemaBotIcons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BotsInfoSchemaBotIcons.class));

       return (TypeAdapter<T>) new TypeAdapter<BotsInfoSchemaBotIcons>() {
           @Override
           public void write(JsonWriter out, BotsInfoSchemaBotIcons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BotsInfoSchemaBotIcons read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BotsInfoSchemaBotIcons given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BotsInfoSchemaBotIcons
   * @throws IOException if the JSON string is invalid with respect to BotsInfoSchemaBotIcons
   */
  public static BotsInfoSchemaBotIcons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BotsInfoSchemaBotIcons.class);
  }

  /**
   * Convert an instance of BotsInfoSchemaBotIcons to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

