/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjsUserProfileShort
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjsUserProfileShort {
  public static final String SERIALIZED_NAME_AVATAR_HASH = "avatar_hash";
  @SerializedName(SERIALIZED_NAME_AVATAR_HASH)
  private String avatarHash;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME_NORMALIZED = "display_name_normalized";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME_NORMALIZED)
  private String displayNameNormalized;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_IMAGE72 = "image_72";
  @SerializedName(SERIALIZED_NAME_IMAGE72)
  private URI image72;

  public static final String SERIALIZED_NAME_IS_RESTRICTED = "is_restricted";
  @SerializedName(SERIALIZED_NAME_IS_RESTRICTED)
  private Boolean isRestricted;

  public static final String SERIALIZED_NAME_IS_ULTRA_RESTRICTED = "is_ultra_restricted";
  @SerializedName(SERIALIZED_NAME_IS_ULTRA_RESTRICTED)
  private Boolean isUltraRestricted;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REAL_NAME = "real_name";
  @SerializedName(SERIALIZED_NAME_REAL_NAME)
  private String realName;

  public static final String SERIALIZED_NAME_REAL_NAME_NORMALIZED = "real_name_normalized";
  @SerializedName(SERIALIZED_NAME_REAL_NAME_NORMALIZED)
  private String realNameNormalized;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public ObjsUserProfileShort() {
  }

  public ObjsUserProfileShort avatarHash(String avatarHash) {
    this.avatarHash = avatarHash;
    return this;
  }

  /**
   * Get avatarHash
   * @return avatarHash
   */
  @javax.annotation.Nonnull
  public String getAvatarHash() {
    return avatarHash;
  }

  public void setAvatarHash(String avatarHash) {
    this.avatarHash = avatarHash;
  }


  public ObjsUserProfileShort displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ObjsUserProfileShort displayNameNormalized(String displayNameNormalized) {
    this.displayNameNormalized = displayNameNormalized;
    return this;
  }

  /**
   * Get displayNameNormalized
   * @return displayNameNormalized
   */
  @javax.annotation.Nullable
  public String getDisplayNameNormalized() {
    return displayNameNormalized;
  }

  public void setDisplayNameNormalized(String displayNameNormalized) {
    this.displayNameNormalized = displayNameNormalized;
  }


  public ObjsUserProfileShort firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ObjsUserProfileShort image72(URI image72) {
    this.image72 = image72;
    return this;
  }

  /**
   * Get image72
   * @return image72
   */
  @javax.annotation.Nonnull
  public URI getImage72() {
    return image72;
  }

  public void setImage72(URI image72) {
    this.image72 = image72;
  }


  public ObjsUserProfileShort isRestricted(Boolean isRestricted) {
    this.isRestricted = isRestricted;
    return this;
  }

  /**
   * Get isRestricted
   * @return isRestricted
   */
  @javax.annotation.Nonnull
  public Boolean getIsRestricted() {
    return isRestricted;
  }

  public void setIsRestricted(Boolean isRestricted) {
    this.isRestricted = isRestricted;
  }


  public ObjsUserProfileShort isUltraRestricted(Boolean isUltraRestricted) {
    this.isUltraRestricted = isUltraRestricted;
    return this;
  }

  /**
   * Get isUltraRestricted
   * @return isUltraRestricted
   */
  @javax.annotation.Nonnull
  public Boolean getIsUltraRestricted() {
    return isUltraRestricted;
  }

  public void setIsUltraRestricted(Boolean isUltraRestricted) {
    this.isUltraRestricted = isUltraRestricted;
  }


  public ObjsUserProfileShort name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ObjsUserProfileShort realName(String realName) {
    this.realName = realName;
    return this;
  }

  /**
   * Get realName
   * @return realName
   */
  @javax.annotation.Nonnull
  public String getRealName() {
    return realName;
  }

  public void setRealName(String realName) {
    this.realName = realName;
  }


  public ObjsUserProfileShort realNameNormalized(String realNameNormalized) {
    this.realNameNormalized = realNameNormalized;
    return this;
  }

  /**
   * Get realNameNormalized
   * @return realNameNormalized
   */
  @javax.annotation.Nullable
  public String getRealNameNormalized() {
    return realNameNormalized;
  }

  public void setRealNameNormalized(String realNameNormalized) {
    this.realNameNormalized = realNameNormalized;
  }


  public ObjsUserProfileShort team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nonnull
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjsUserProfileShort objsUserProfileShort = (ObjsUserProfileShort) o;
    return Objects.equals(this.avatarHash, objsUserProfileShort.avatarHash) &&
        Objects.equals(this.displayName, objsUserProfileShort.displayName) &&
        Objects.equals(this.displayNameNormalized, objsUserProfileShort.displayNameNormalized) &&
        Objects.equals(this.firstName, objsUserProfileShort.firstName) &&
        Objects.equals(this.image72, objsUserProfileShort.image72) &&
        Objects.equals(this.isRestricted, objsUserProfileShort.isRestricted) &&
        Objects.equals(this.isUltraRestricted, objsUserProfileShort.isUltraRestricted) &&
        Objects.equals(this.name, objsUserProfileShort.name) &&
        Objects.equals(this.realName, objsUserProfileShort.realName) &&
        Objects.equals(this.realNameNormalized, objsUserProfileShort.realNameNormalized) &&
        Objects.equals(this.team, objsUserProfileShort.team);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarHash, displayName, displayNameNormalized, firstName, image72, isRestricted, isUltraRestricted, name, realName, realNameNormalized, team);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjsUserProfileShort {\n");
    sb.append("    avatarHash: ").append(toIndentedString(avatarHash)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    displayNameNormalized: ").append(toIndentedString(displayNameNormalized)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    image72: ").append(toIndentedString(image72)).append("\n");
    sb.append("    isRestricted: ").append(toIndentedString(isRestricted)).append("\n");
    sb.append("    isUltraRestricted: ").append(toIndentedString(isUltraRestricted)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    realName: ").append(toIndentedString(realName)).append("\n");
    sb.append("    realNameNormalized: ").append(toIndentedString(realNameNormalized)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_hash");
    openapiFields.add("display_name");
    openapiFields.add("display_name_normalized");
    openapiFields.add("first_name");
    openapiFields.add("image_72");
    openapiFields.add("is_restricted");
    openapiFields.add("is_ultra_restricted");
    openapiFields.add("name");
    openapiFields.add("real_name");
    openapiFields.add("real_name_normalized");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatar_hash");
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("image_72");
    openapiRequiredFields.add("is_restricted");
    openapiRequiredFields.add("is_ultra_restricted");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("real_name");
    openapiRequiredFields.add("team");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjsUserProfileShort
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjsUserProfileShort.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjsUserProfileShort is not found in the empty JSON string", ObjsUserProfileShort.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjsUserProfileShort.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjsUserProfileShort` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjsUserProfileShort.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("avatar_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_hash").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("display_name_normalized") != null && !jsonObj.get("display_name_normalized").isJsonNull()) && !jsonObj.get("display_name_normalized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name_normalized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name_normalized").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("image_72").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_72` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_72").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("real_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `real_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("real_name").toString()));
      }
      if ((jsonObj.get("real_name_normalized") != null && !jsonObj.get("real_name_normalized").isJsonNull()) && !jsonObj.get("real_name_normalized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `real_name_normalized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("real_name_normalized").toString()));
      }
      if (!jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjsUserProfileShort.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjsUserProfileShort' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjsUserProfileShort> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjsUserProfileShort.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjsUserProfileShort>() {
           @Override
           public void write(JsonWriter out, ObjsUserProfileShort value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjsUserProfileShort read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjsUserProfileShort given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjsUserProfileShort
   * @throws IOException if the JSON string is invalid with respect to ObjsUserProfileShort
   */
  public static ObjsUserProfileShort fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjsUserProfileShort.class);
  }

  /**
   * Convert an instance of ObjsUserProfileShort to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

