/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;
import org.openapitools.client.model.DndEndDndErrorSchema;
import org.openapitools.client.model.DndEndDndSchema;
import org.openapitools.client.model.DndEndSnoozeErrorSchema;
import org.openapitools.client.model.DndEndSnoozeSchema;
import org.openapitools.client.model.DndInfoErrorSchema;
import org.openapitools.client.model.DndInfoSchema;
import org.openapitools.client.model.DndSetSnoozeErrorSchema;
import org.openapitools.client.model.DndSetSnoozeSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DndApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DndApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DndApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dndEndDnd
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endDnd"> Documentation</a>
     */
    public okhttp3.Call dndEndDndCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.endDnd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dndEndDndValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dndEndDnd(Async)");
        }

        return dndEndDndCall(token, _callback);

    }

    /**
     * 
     * Ends the current user&#39;s Do Not Disturb session immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return DndEndDndSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endDnd"> Documentation</a>
     */
    public DndEndDndSchema dndEndDnd(String token) throws ApiException {
        ApiResponse<DndEndDndSchema> localVarResp = dndEndDndWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Ends the current user&#39;s Do Not Disturb session immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return ApiResponse&lt;DndEndDndSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endDnd"> Documentation</a>
     */
    public ApiResponse<DndEndDndSchema> dndEndDndWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = dndEndDndValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DndEndDndSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Ends the current user&#39;s Do Not Disturb session immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endDnd"> Documentation</a>
     */
    public okhttp3.Call dndEndDndAsync(String token, final ApiCallback<DndEndDndSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = dndEndDndValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DndEndDndSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dndEndSnooze
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endSnooze"> Documentation</a>
     */
    public okhttp3.Call dndEndSnoozeCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.endSnooze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dndEndSnoozeValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dndEndSnooze(Async)");
        }

        return dndEndSnoozeCall(token, _callback);

    }

    /**
     * 
     * Ends the current user&#39;s snooze mode immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return DndEndSnoozeSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endSnooze"> Documentation</a>
     */
    public DndEndSnoozeSchema dndEndSnooze(String token) throws ApiException {
        ApiResponse<DndEndSnoozeSchema> localVarResp = dndEndSnoozeWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Ends the current user&#39;s snooze mode immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return ApiResponse&lt;DndEndSnoozeSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endSnooze"> Documentation</a>
     */
    public ApiResponse<DndEndSnoozeSchema> dndEndSnoozeWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = dndEndSnoozeValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DndEndSnoozeSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Ends the current user&#39;s snooze mode immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endSnooze"> Documentation</a>
     */
    public okhttp3.Call dndEndSnoozeAsync(String token, final ApiCallback<DndEndSnoozeSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = dndEndSnoozeValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DndEndSnoozeSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dndInfo
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param user User to fetch status for (defaults to current user) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.info"> Documentation</a>
     */
    public okhttp3.Call dndInfoCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dndInfoValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        return dndInfoCall(token, user, _callback);

    }

    /**
     * 
     * Retrieves a user&#39;s current Do Not Disturb status.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param user User to fetch status for (defaults to current user) (optional)
     * @return DndInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.info"> Documentation</a>
     */
    public DndInfoSchema dndInfo(String token, String user) throws ApiException {
        ApiResponse<DndInfoSchema> localVarResp = dndInfoWithHttpInfo(token, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a user&#39;s current Do Not Disturb status.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param user User to fetch status for (defaults to current user) (optional)
     * @return ApiResponse&lt;DndInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.info"> Documentation</a>
     */
    public ApiResponse<DndInfoSchema> dndInfoWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = dndInfoValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<DndInfoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a user&#39;s current Do Not Disturb status.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param user User to fetch status for (defaults to current user) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.info"> Documentation</a>
     */
    public okhttp3.Call dndInfoAsync(String token, String user, final ApiCallback<DndInfoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = dndInfoValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<DndInfoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dndSetSnooze
     * @param numMinutes Number of minutes, from now, to snooze until. (required)
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.setSnooze"> Documentation</a>
     */
    public okhttp3.Call dndSetSnoozeCall(String numMinutes, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.setSnooze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numMinutes != null) {
            localVarFormParams.put("num_minutes", numMinutes);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dndSetSnoozeValidateBeforeCall(String numMinutes, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'numMinutes' is set
        if (numMinutes == null) {
            throw new ApiException("Missing the required parameter 'numMinutes' when calling dndSetSnooze(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dndSetSnooze(Async)");
        }

        return dndSetSnoozeCall(numMinutes, token, _callback);

    }

    /**
     * 
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param numMinutes Number of minutes, from now, to snooze until. (required)
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return DndSetSnoozeSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.setSnooze"> Documentation</a>
     */
    public DndSetSnoozeSchema dndSetSnooze(String numMinutes, String token) throws ApiException {
        ApiResponse<DndSetSnoozeSchema> localVarResp = dndSetSnoozeWithHttpInfo(numMinutes, token);
        return localVarResp.getData();
    }

    /**
     * 
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param numMinutes Number of minutes, from now, to snooze until. (required)
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return ApiResponse&lt;DndSetSnoozeSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.setSnooze"> Documentation</a>
     */
    public ApiResponse<DndSetSnoozeSchema> dndSetSnoozeWithHttpInfo(String numMinutes, String token) throws ApiException {
        okhttp3.Call localVarCall = dndSetSnoozeValidateBeforeCall(numMinutes, token, null);
        Type localVarReturnType = new TypeToken<DndSetSnoozeSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param numMinutes Number of minutes, from now, to snooze until. (required)
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.setSnooze"> Documentation</a>
     */
    public okhttp3.Call dndSetSnoozeAsync(String numMinutes, String token, final ApiCallback<DndSetSnoozeSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = dndSetSnoozeValidateBeforeCall(numMinutes, token, _callback);
        Type localVarReturnType = new TypeToken<DndSetSnoozeSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dndTeamInfo
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param users Comma-separated list of users to fetch Do Not Disturb status for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.teamInfo"> Documentation</a>
     */
    public okhttp3.Call dndTeamInfoCall(String token, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.teamInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (users != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("users", users));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dndTeamInfoValidateBeforeCall(String token, String users, final ApiCallback _callback) throws ApiException {
        return dndTeamInfoCall(token, users, _callback);

    }

    /**
     * 
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param users Comma-separated list of users to fetch Do Not Disturb status for (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.teamInfo"> Documentation</a>
     */
    public DefaultSuccessTemplate dndTeamInfo(String token, String users) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = dndTeamInfoWithHttpInfo(token, users);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param users Comma-separated list of users to fetch Do Not Disturb status for (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.teamInfo"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> dndTeamInfoWithHttpInfo(String token, String users) throws ApiException {
        okhttp3.Call localVarCall = dndTeamInfoValidateBeforeCall(token, users, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
     * @param users Comma-separated list of users to fetch Do Not Disturb status for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.teamInfo"> Documentation</a>
     */
    public okhttp3.Call dndTeamInfoAsync(String token, String users, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = dndTeamInfoValidateBeforeCall(token, users, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
