/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjsReaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObjsComment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjsComment {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_INTRO = "is_intro";
  @SerializedName(SERIALIZED_NAME_IS_INTRO)
  private Boolean isIntro;

  public static final String SERIALIZED_NAME_IS_STARRED = "is_starred";
  @SerializedName(SERIALIZED_NAME_IS_STARRED)
  private Boolean isStarred;

  public static final String SERIALIZED_NAME_NUM_STARS = "num_stars";
  @SerializedName(SERIALIZED_NAME_NUM_STARS)
  private Integer numStars;

  public static final String SERIALIZED_NAME_PINNED_INFO = "pinned_info";
  @SerializedName(SERIALIZED_NAME_PINNED_INFO)
  private Object pinnedInfo;

  public static final String SERIALIZED_NAME_PINNED_TO = "pinned_to";
  @SerializedName(SERIALIZED_NAME_PINNED_TO)
  private List<String> pinnedTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private List<ObjsReaction> reactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Integer timestamp;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public ObjsComment() {
  }

  public ObjsComment comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nonnull
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ObjsComment created(Integer created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }


  public ObjsComment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ObjsComment isIntro(Boolean isIntro) {
    this.isIntro = isIntro;
    return this;
  }

  /**
   * Get isIntro
   * @return isIntro
   */
  @javax.annotation.Nonnull
  public Boolean getIsIntro() {
    return isIntro;
  }

  public void setIsIntro(Boolean isIntro) {
    this.isIntro = isIntro;
  }


  public ObjsComment isStarred(Boolean isStarred) {
    this.isStarred = isStarred;
    return this;
  }

  /**
   * Get isStarred
   * @return isStarred
   */
  @javax.annotation.Nullable
  public Boolean getIsStarred() {
    return isStarred;
  }

  public void setIsStarred(Boolean isStarred) {
    this.isStarred = isStarred;
  }


  public ObjsComment numStars(Integer numStars) {
    this.numStars = numStars;
    return this;
  }

  /**
   * Get numStars
   * @return numStars
   */
  @javax.annotation.Nullable
  public Integer getNumStars() {
    return numStars;
  }

  public void setNumStars(Integer numStars) {
    this.numStars = numStars;
  }


  public ObjsComment pinnedInfo(Object pinnedInfo) {
    this.pinnedInfo = pinnedInfo;
    return this;
  }

  /**
   * Get pinnedInfo
   * @return pinnedInfo
   */
  @javax.annotation.Nullable
  public Object getPinnedInfo() {
    return pinnedInfo;
  }

  public void setPinnedInfo(Object pinnedInfo) {
    this.pinnedInfo = pinnedInfo;
  }


  public ObjsComment pinnedTo(List<String> pinnedTo) {
    this.pinnedTo = pinnedTo;
    return this;
  }

  public ObjsComment addPinnedToItem(String pinnedToItem) {
    if (this.pinnedTo == null) {
      this.pinnedTo = new ArrayList<>();
    }
    this.pinnedTo.add(pinnedToItem);
    return this;
  }

  /**
   * Get pinnedTo
   * @return pinnedTo
   */
  @javax.annotation.Nullable
  public List<String> getPinnedTo() {
    return pinnedTo;
  }

  public void setPinnedTo(List<String> pinnedTo) {
    this.pinnedTo = pinnedTo;
  }


  public ObjsComment reactions(List<ObjsReaction> reactions) {
    this.reactions = reactions;
    return this;
  }

  public ObjsComment addReactionsItem(ObjsReaction reactionsItem) {
    if (this.reactions == null) {
      this.reactions = new ArrayList<>();
    }
    this.reactions.add(reactionsItem);
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public List<ObjsReaction> getReactions() {
    return reactions;
  }

  public void setReactions(List<ObjsReaction> reactions) {
    this.reactions = reactions;
  }


  public ObjsComment timestamp(Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Integer getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Integer timestamp) {
    this.timestamp = timestamp;
  }


  public ObjsComment user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjsComment objsComment = (ObjsComment) o;
    return Objects.equals(this.comment, objsComment.comment) &&
        Objects.equals(this.created, objsComment.created) &&
        Objects.equals(this.id, objsComment.id) &&
        Objects.equals(this.isIntro, objsComment.isIntro) &&
        Objects.equals(this.isStarred, objsComment.isStarred) &&
        Objects.equals(this.numStars, objsComment.numStars) &&
        Objects.equals(this.pinnedInfo, objsComment.pinnedInfo) &&
        Objects.equals(this.pinnedTo, objsComment.pinnedTo) &&
        Objects.equals(this.reactions, objsComment.reactions) &&
        Objects.equals(this.timestamp, objsComment.timestamp) &&
        Objects.equals(this.user, objsComment.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, created, id, isIntro, isStarred, numStars, pinnedInfo, pinnedTo, reactions, timestamp, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjsComment {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isIntro: ").append(toIndentedString(isIntro)).append("\n");
    sb.append("    isStarred: ").append(toIndentedString(isStarred)).append("\n");
    sb.append("    numStars: ").append(toIndentedString(numStars)).append("\n");
    sb.append("    pinnedInfo: ").append(toIndentedString(pinnedInfo)).append("\n");
    sb.append("    pinnedTo: ").append(toIndentedString(pinnedTo)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("created");
    openapiFields.add("id");
    openapiFields.add("is_intro");
    openapiFields.add("is_starred");
    openapiFields.add("num_stars");
    openapiFields.add("pinned_info");
    openapiFields.add("pinned_to");
    openapiFields.add("reactions");
    openapiFields.add("timestamp");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comment");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_intro");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjsComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjsComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjsComment is not found in the empty JSON string", ObjsComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjsComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjsComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjsComment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pinned_to") != null && !jsonObj.get("pinned_to").isJsonNull() && !jsonObj.get("pinned_to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_to` to be an array in the JSON string but got `%s`", jsonObj.get("pinned_to").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reactions") != null && !jsonObj.get("reactions").isJsonNull() && !jsonObj.get("reactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reactions` to be an array in the JSON string but got `%s`", jsonObj.get("reactions").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjsComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjsComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjsComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjsComment.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjsComment>() {
           @Override
           public void write(JsonWriter out, ObjsComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjsComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjsComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjsComment
   * @throws IOException if the JSON string is invalid with respect to ObjsComment
   */
  public static ObjsComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjsComment.class);
  }

  /**
   * Convert an instance of ObjsComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

