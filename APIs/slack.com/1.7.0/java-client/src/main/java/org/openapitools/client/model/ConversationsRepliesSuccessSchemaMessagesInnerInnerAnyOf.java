/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ObjsUserProfileShort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf {
  public static final String SERIALIZED_NAME_LAST_READ = "last_read";
  @SerializedName(SERIALIZED_NAME_LAST_READ)
  private String lastRead;

  public static final String SERIALIZED_NAME_LATEST_REPLY = "latest_reply";
  @SerializedName(SERIALIZED_NAME_LATEST_REPLY)
  private String latestReply;

  public static final String SERIALIZED_NAME_REPLY_COUNT = "reply_count";
  @SerializedName(SERIALIZED_NAME_REPLY_COUNT)
  private Integer replyCount;

  public static final String SERIALIZED_NAME_REPLY_USERS = "reply_users";
  @SerializedName(SERIALIZED_NAME_REPLY_USERS)
  private Set<String> replyUsers = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_REPLY_USERS_COUNT = "reply_users_count";
  @SerializedName(SERIALIZED_NAME_REPLY_USERS_COUNT)
  private Integer replyUsersCount;

  public static final String SERIALIZED_NAME_SOURCE_TEAM = "source_team";
  @SerializedName(SERIALIZED_NAME_SOURCE_TEAM)
  private String sourceTeam;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private Boolean subscribed;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THREAD_TS = "thread_ts";
  @SerializedName(SERIALIZED_NAME_THREAD_TS)
  private String threadTs;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNREAD_COUNT = "unread_count";
  @SerializedName(SERIALIZED_NAME_UNREAD_COUNT)
  private Integer unreadCount;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_PROFILE = "user_profile";
  @SerializedName(SERIALIZED_NAME_USER_PROFILE)
  private ObjsUserProfileShort userProfile;

  public static final String SERIALIZED_NAME_USER_TEAM = "user_team";
  @SerializedName(SERIALIZED_NAME_USER_TEAM)
  private String userTeam;

  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf() {
  }

  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf lastRead(String lastRead) {
    this.lastRead = lastRead;
    return this;
  }

  /**
   * Get lastRead
   * @return lastRead
   */
  @javax.annotation.Nullable
  public String getLastRead() {
    return lastRead;
  }

  public void setLastRead(String lastRead) {
    this.lastRead = lastRead;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf latestReply(String latestReply) {
    this.latestReply = latestReply;
    return this;
  }

  /**
   * Get latestReply
   * @return latestReply
   */
  @javax.annotation.Nullable
  public String getLatestReply() {
    return latestReply;
  }

  public void setLatestReply(String latestReply) {
    this.latestReply = latestReply;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf replyCount(Integer replyCount) {
    this.replyCount = replyCount;
    return this;
  }

  /**
   * Get replyCount
   * @return replyCount
   */
  @javax.annotation.Nonnull
  public Integer getReplyCount() {
    return replyCount;
  }

  public void setReplyCount(Integer replyCount) {
    this.replyCount = replyCount;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf replyUsers(Set<String> replyUsers) {
    this.replyUsers = replyUsers;
    return this;
  }

  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf addReplyUsersItem(String replyUsersItem) {
    if (this.replyUsers == null) {
      this.replyUsers = new LinkedHashSet<>();
    }
    this.replyUsers.add(replyUsersItem);
    return this;
  }

  /**
   * Get replyUsers
   * @return replyUsers
   */
  @javax.annotation.Nullable
  public Set<String> getReplyUsers() {
    return replyUsers;
  }

  public void setReplyUsers(Set<String> replyUsers) {
    this.replyUsers = replyUsers;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf replyUsersCount(Integer replyUsersCount) {
    this.replyUsersCount = replyUsersCount;
    return this;
  }

  /**
   * Get replyUsersCount
   * @return replyUsersCount
   */
  @javax.annotation.Nullable
  public Integer getReplyUsersCount() {
    return replyUsersCount;
  }

  public void setReplyUsersCount(Integer replyUsersCount) {
    this.replyUsersCount = replyUsersCount;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf sourceTeam(String sourceTeam) {
    this.sourceTeam = sourceTeam;
    return this;
  }

  /**
   * Get sourceTeam
   * @return sourceTeam
   */
  @javax.annotation.Nullable
  public String getSourceTeam() {
    return sourceTeam;
  }

  public void setSourceTeam(String sourceTeam) {
    this.sourceTeam = sourceTeam;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf subscribed(Boolean subscribed) {
    this.subscribed = subscribed;
    return this;
  }

  /**
   * Get subscribed
   * @return subscribed
   */
  @javax.annotation.Nonnull
  public Boolean getSubscribed() {
    return subscribed;
  }

  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf threadTs(String threadTs) {
    this.threadTs = threadTs;
    return this;
  }

  /**
   * Get threadTs
   * @return threadTs
   */
  @javax.annotation.Nonnull
  public String getThreadTs() {
    return threadTs;
  }

  public void setThreadTs(String threadTs) {
    this.threadTs = threadTs;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * Get ts
   * @return ts
   */
  @javax.annotation.Nonnull
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf unreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
    return this;
  }

  /**
   * Get unreadCount
   * @return unreadCount
   */
  @javax.annotation.Nullable
  public Integer getUnreadCount() {
    return unreadCount;
  }

  public void setUnreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf userProfile(ObjsUserProfileShort userProfile) {
    this.userProfile = userProfile;
    return this;
  }

  /**
   * Get userProfile
   * @return userProfile
   */
  @javax.annotation.Nullable
  public ObjsUserProfileShort getUserProfile() {
    return userProfile;
  }

  public void setUserProfile(ObjsUserProfileShort userProfile) {
    this.userProfile = userProfile;
  }


  public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf userTeam(String userTeam) {
    this.userTeam = userTeam;
    return this;
  }

  /**
   * Get userTeam
   * @return userTeam
   */
  @javax.annotation.Nullable
  public String getUserTeam() {
    return userTeam;
  }

  public void setUserTeam(String userTeam) {
    this.userTeam = userTeam;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf = (ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf) o;
    return Objects.equals(this.lastRead, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.lastRead) &&
        Objects.equals(this.latestReply, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.latestReply) &&
        Objects.equals(this.replyCount, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.replyCount) &&
        Objects.equals(this.replyUsers, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.replyUsers) &&
        Objects.equals(this.replyUsersCount, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.replyUsersCount) &&
        Objects.equals(this.sourceTeam, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.sourceTeam) &&
        Objects.equals(this.subscribed, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.subscribed) &&
        Objects.equals(this.team, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.team) &&
        Objects.equals(this.text, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.text) &&
        Objects.equals(this.threadTs, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.threadTs) &&
        Objects.equals(this.ts, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.ts) &&
        Objects.equals(this.type, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.type) &&
        Objects.equals(this.unreadCount, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.unreadCount) &&
        Objects.equals(this.user, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.user) &&
        Objects.equals(this.userProfile, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.userProfile) &&
        Objects.equals(this.userTeam, conversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.userTeam);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastRead, latestReply, replyCount, replyUsers, replyUsersCount, sourceTeam, subscribed, team, text, threadTs, ts, type, unreadCount, user, userProfile, userTeam);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf {\n");
    sb.append("    lastRead: ").append(toIndentedString(lastRead)).append("\n");
    sb.append("    latestReply: ").append(toIndentedString(latestReply)).append("\n");
    sb.append("    replyCount: ").append(toIndentedString(replyCount)).append("\n");
    sb.append("    replyUsers: ").append(toIndentedString(replyUsers)).append("\n");
    sb.append("    replyUsersCount: ").append(toIndentedString(replyUsersCount)).append("\n");
    sb.append("    sourceTeam: ").append(toIndentedString(sourceTeam)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    threadTs: ").append(toIndentedString(threadTs)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unreadCount: ").append(toIndentedString(unreadCount)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userProfile: ").append(toIndentedString(userProfile)).append("\n");
    sb.append("    userTeam: ").append(toIndentedString(userTeam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_read");
    openapiFields.add("latest_reply");
    openapiFields.add("reply_count");
    openapiFields.add("reply_users");
    openapiFields.add("reply_users_count");
    openapiFields.add("source_team");
    openapiFields.add("subscribed");
    openapiFields.add("team");
    openapiFields.add("text");
    openapiFields.add("thread_ts");
    openapiFields.add("ts");
    openapiFields.add("type");
    openapiFields.add("unread_count");
    openapiFields.add("user");
    openapiFields.add("user_profile");
    openapiFields.add("user_team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reply_count");
    openapiRequiredFields.add("subscribed");
    openapiRequiredFields.add("text");
    openapiRequiredFields.add("thread_ts");
    openapiRequiredFields.add("ts");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf is not found in the empty JSON string", ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("last_read") != null && !jsonObj.get("last_read").isJsonNull()) && !jsonObj.get("last_read").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_read` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_read").toString()));
      }
      if ((jsonObj.get("latest_reply") != null && !jsonObj.get("latest_reply").isJsonNull()) && !jsonObj.get("latest_reply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_reply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_reply").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reply_users") != null && !jsonObj.get("reply_users").isJsonNull() && !jsonObj.get("reply_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_users` to be an array in the JSON string but got `%s`", jsonObj.get("reply_users").toString()));
      }
      if ((jsonObj.get("source_team") != null && !jsonObj.get("source_team").isJsonNull()) && !jsonObj.get("source_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_team").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (!jsonObj.get("thread_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thread_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thread_ts").toString()));
      }
      if (!jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      // validate the optional field `user_profile`
      if (jsonObj.get("user_profile") != null && !jsonObj.get("user_profile").isJsonNull()) {
        ObjsUserProfileShort.validateJsonElement(jsonObj.get("user_profile"));
      }
      if ((jsonObj.get("user_team") != null && !jsonObj.get("user_team").isJsonNull()) && !jsonObj.get("user_team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_team").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf>() {
           @Override
           public void write(JsonWriter out, ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf
   * @throws IOException if the JSON string is invalid with respect to ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf
   */
  public static ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.class);
  }

  /**
   * Convert an instance of ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

